Imports System
Imports System.IO
Imports System.Net
Imports System.Text
'Imports System.Windows.Media.Imaging
'Imports System.Windows.Media
'Imports System.Drawing
Imports System.Drawing.Imaging
Imports System.Text.RegularExpressions
Imports System.Xml
Imports System.Xml.Serialization
Imports movieinfoplus.mip.mov
Imports movieinfoplus.mip.movieserial
Imports movieinfoplus.mip.themoviedb.backdrop.backdrops
Imports movieinfoplus.mip.themoviedb.posters.posters
Imports System.Data
Imports ComponentFactory.Krypton.Toolkit
Imports movieinfoplus.thetvdb
Imports movieinfoplus.tvdblang
Imports HundredMilesSoftware.UltraID3Lib
Imports miplibfc


'MovieInfoPlus (MIP) Copyright [2008/2009] MDI
'ImageMagick is 
'Licensed under the ImageMagick License (the "License"); you may not use
'this file except in compliance with the License.  You may obtain a copy
'of the License at

'  http://www.imagemagick.org/script/license.php

'Unless required by applicable law or agreed to in writing, software
'distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
'WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
'License for the specific language governing permissions and limitations
'under the License.




Public Class maincollection
    'may need http://www.imagemagick.org/download/binaries/ImageMagick-6.4.8-2-Q16-windows-dll.exe to use tag option
    Public firstrun As Boolean = True
    Public autopilotrunning As Boolean = False
    Public mytvshowcollection As New ArrayList
    Public mycurrentshow As New ArrayList 'contains seasons
    Public seasonshashtable As New Hashtable
    Public episodeshashtable As New Hashtable
    Public episodeshashtablemissing As New Hashtable
    Public gvcurrenttvshow As New xbmc.xbmcTvshow
    Public gvcurrenttvepisode As New tvdblangEpisode
    Public tblofmovies As New DataTable
    Public tbloftvshows As New DataTable
    Public pclog As StreamWriter
    Public pclogging As Boolean = False
    Public Shared rconf As New configuration
    Public movies As New ArrayList
    Public sinmiString As String = ""

    Dim dlist, urllist, urllists, dtvlist, musiclist As New ArrayList
    Dim dlist_count As Integer = 0
    Dim dmusic_count As Integer = 0
    Dim dtvlist_count As Integer = 0
    Dim urllist_count As Integer = 0
    Dim bwcount As Integer = 0
    Public lclient As String = "client=MovieInfoPlus"
    Public lconcat As String = "&"
    Public dltype As String = "large"
    Dim allmovieslist As New ArrayList
    Public Shared messageprompts As Boolean = True
    Private showposter As Boolean = True
    Private showfanart As Boolean = True
    Dim currentmovie As movie
    Public totaltoprocess As Integer = 0
    Public pcmaxDisplayedIcons As Integer = 0
    Public pcMaxIconPerStyle As Integer = 8
    Public popgoogleimagesearch As Boolean = False
    Public cmmode As String = "movie"
    Public singleMovieBeingDisplayed As Boolean = False
    Public curtvshowiconsetting As String = ""
    Public currentTVShowSelectedNameXMLfile As String = ""
    Public curtvshowpicturboxtoupdate As PictureBox
    Public Shared moviemode As String = "folder" 'either file or folder, folder is default
    Public curtmdbfacount As Integer = 0
    Public curtmdbpostercounter As Integer = 0
    Public curtimppostercounter As Integer = 0

    Public postertotal As Integer = 0
    Public iconsboxshottotal As Integer = 0
    Public fanarttotal As Integer = 0
    Public newnicecovercounter As Integer = 0
    Public currentmoviedownloadlist As New ArrayList
    Public currenttvshowdownloadlist As New ArrayList
    Public gvcurrenttvseasonpath As String
    Public mymusiccollection As New Hashtable
    Public mymusicbyartist As New ArrayList 'String
    Public mycurmusicbyalbum As New ArrayList
    Public mycurmusicbytrack As New ArrayList
    Public mymusicfilelist As New ArrayList
    Public currentartist As New musicartist
    Public currentalbum As New musicalbums
    Public gvnewartistname As String = ""
    Public gvnewalbumname As String = ""
    Public gvmusicobjects As New List(Of Music)
    Dim gvcurtvseason As New movieinfoplus.seasons

    'Public currentmusic As New Music
    Public currentsong As New Music
    'Dim myRootTabs As New TabControl.TabPageCollection(tcRootBackup)

    'autopilot background worker items
    Dim gv_bwap_primary As String
    Dim gv_bwap_secondary As String
    Dim gv_bwap_posterTru As Boolean
    Dim gv_bwap_fanartTru As Boolean
    Dim gv_bwap_tbnTru As Boolean
    Dim gv_bwap_nfoTru As Boolean
    Dim gv_bwap_overwritenfoTru As Boolean
    Dim gv_bwap_overwritefolderjpg As Boolean
    Dim gv_bwap_mediaonly As Boolean
    Dim gv_bwap_updatestudiofromimdb As Boolean

    'myRootTabs' = Nothing
    'bwDisplayMovieData()
    Private Sub addtodownloadlist(ByRef whichdownloadlist As ArrayList, ByVal url As String, ByVal destination_file_fullpath As String, ByVal extratext As String)
        Dim newdownloadobject As New miplibfc.mip.dlobject
        newdownloadobject.URL = url
        newdownloadobject.Destination = destination_file_fullpath
        newdownloadobject.misc = extratext
        newdownloadobject.hideurl = True
        whichdownloadlist.Add(newdownloadobject)
    End Sub
    Private Sub addtodownloadlist(ByRef whatmovie As movie, ByVal url As String, ByVal destination_file_fullpath As String, ByVal extratext As String)
        Dim newdownloadobject As New miplibfc.mip.dlobject
        newdownloadobject.URL = url
        newdownloadobject.Destination = destination_file_fullpath
        newdownloadobject.misc = extratext
        newdownloadobject.hideurl = True
        whatmovie.pdownloadlist.Add(newdownloadobject)
    End Sub
    
    Private Sub bwStartupDisplayMovieData()
        bwcount = 0
        'turn off user controls
        lbMyMovies.Enabled = False
        tcMain.Enabled = False
        gbAppMode.Enabled = False
        gbDisplay.Enabled = False
        tsbMoviesLoadMovies.Enabled = False
        tsbMoviesAutoPilot.Enabled = False
        'btnAutoPilot.Visible = False
        kgMovieOrTVShow.Enabled = False
        kgMyMovieInfoPicker.Enabled = False
        btnPrev.Enabled = False
        btnNext.Enabled = False
        btnShowMovieInfo.Enabled = False
        tsbMoviesPreCache.Enabled = False
        '        btnPrecache.Visible = False
        lblPCWorking.Visible = True

        prgThread.Value = 0
        Try
            'prgThread.Maximum = (dlist.Count - 1) '* 2
        Catch ex As Exception
            prgThread.Maximum = 500
        End Try


        Try
            currentmovie = CType(movies(CInt(lbMyMovies.SelectedValue)), movie)
        Catch ex As Exception
            Debug.Print(ex.ToString)
            Exit Sub
        End Try

        prgThread.Visible = True

        'cleanup old items
        pbFrame.Hide()
        pbCurIconUsed.Hide()
        pbCurIconUsed2.Hide()
        pbCurrentIconUsedNT.Hide()
        fanartpb1.Image = Nothing
        fanartpb1.ImageLocation = Nothing
        '        If ais Then resetanddisableimages() 'allow icon selection, clears old pictureboxes

        'set option that is checked to trigger gui feedback during bw singleMovieBeingDisplayed = True
        singleMovieBeingDisplayed = True

        If cbAllowIconSelection.Checked Then resetanddisableimages() 'allow icon selection, clears old pictureboxes
        bwDisplayMovieData = New System.ComponentModel.BackgroundWorker
        bwDisplayMovieData.WorkerReportsProgress = True
        bwDisplayMovieData.WorkerSupportsCancellation = False
        bwDisplayMovieData.RunWorkerAsync()


    End Sub

        Private Sub bwDisplayMovieData_DoWork(ByVal sender As System.Object, ByVal e As System.ComponentModel.DoWorkEventArgs) Handles bwDisplayMovieData.DoWork


        'Debug.Print(lbMyMovies.SelectedValue.ToString)
            'Debug.Print(lbMyMovies.SelectedItem.ToString)
            Debug.Print("start: " + TimeString())
            'set locals
        messageprompts = False ';rbem.Checked 'rbem is online mode, if it's not checked, we want to turn off labels
        Dim skt As Boolean = rconf.pcbSkipTransparency 'cbSkipTransparency.Checked
            Dim ais As Boolean = cbAllowIconSelection.Checked
        Dim maxDisplayedIcons As Integer = rconf.pcbMaxIconsToDisplay 'rconf.pcbMaxIconsToDisplay
            'Dim tmovie As movie

            Dim dname, curpath As String
            dname = currentmovie.getmoviename
            tbnewname.Text = dname
            curpath = currentmovie.getmoviepath

            
            'turn on the progress bar
        'Me.pbar1.Visible = True
        'pbar1.Value = pbar1.Maximum
        'lblPbar.Visible = True
        'lblPbar.BringToFront()
        
        bwDisplayMovieData.ReportProgress(1, "-- Working On: " + dname + "--") 'lblPbar.Text = "-- Working On: " + dname + "--"
            'If messageprompts Then Me.Refresh()()

            ' ---- IMDB AND NFO -----
            Dim hasnfoalready As Boolean = False
            Dim haveidonly As Boolean = False
        'see if movie data was loaded from nfo file during folder scan
            If Not currentmovie.pdatafromnfo Then
                'we don't have data so try to get it
                'see if nfo file exsists for movie, if it does, read it up to speed it up
                haveidonly = checkforIMDBIDinnfofile(currentmovie)
                If Not haveidonly Then
                    'if there is no nfo file, check for a poster file (they have the imdbid in them)
                    haveidonly = checkforposterfiletogetimdbid(currentmovie)
                End If
            Else
                hasnfoalready = True
            End If
            'see if a folder icon exsists 

            '?        pbCurIconUsed.Enabled = True


            '-------------------------------- IMDB Information and .nfo file creation 
        If rconf.pcbGetIMDBInfo And Not hasnfoalready Then 'get imdb info
            'If messageprompts Then lblPbar.Text = "-- Getting IMDB for " + tmovie.getmoviename.ToString + "--"
            ''If messageprompts Then Me.Refresh()()
            If currentmovie.pimdbnumber = "" Then
                bwDisplayMovieData.ReportProgress(2, "no id in movie, grabbing imdb info")
                bwDisplayMovieData.ReportProgress(3, "-- Connecting to IMDB: " + dname + "--")
                'If messageprompts Then Me.Refresh()()
                Dim tstringofimdbpage As String = getimdbidsearch(dname)
                bwDisplayMovieData.ReportProgress(4, " -- Searching IMDB for: " + dname + "--")
                'If messageprompts Then Me.Refresh()()
                currentmovie.pimdbnumber = snagimdbid(dname, currentmovie, tstringofimdbpage)
            Else
                'do not grab the data, we know the id already
                'hasnfoalready = True
                bwDisplayMovieData.ReportProgress(5, "we have an id, not parseing imdb again for it")
            End If
            'getimdbidsearchwithwget(tmovie)

            If rbem.Checked = True Then 'download mode
                If File.Exists(rconf.imdbcachefolder + "/" + currentmovie.pimdbnumber + ".xml") Then 'And Not cbOverwriteNFO.Checked Then
                    'lblPbar.Text = " __-- XML already in Cache: IMDB Information for " + tmovie.getmoviename.ToString + "--__ "
                    'do nothing yet, nfo exsists -- add load nfo code here as well as the option to overwrite nfos in gui
                    bwDisplayMovieData.ReportProgress(6, ".xml already exsists") ' + cbOverwriteNFO.Checked.ToString)
                Else
                    bwDisplayMovieData.ReportProgress(7, "NO XML: Connecting to IMDB ") ' " + dname + "--")
                    'If messageprompts Then Me.Refresh()()
                    If Not haveidonly Then
                        'no nfo so get the data
                        bwDisplayMovieData.ReportProgress(8, "-- Searching IMDB -- ") '  + dname + "--")
                        'If messageprompts Then Me.Refresh()()
                        Dim tstringofimdbpage As String = getimdbidsearch(dname)
                        bwDisplayMovieData.ReportProgress(9, "-- Gathering IMDB -- ") ' + dname + "--")
                        'If messageprompts Then Me.Refresh()()
                        currentmovie.pimdbnumber = snagimdbid(dname, currentmovie, tstringofimdbpage)
                        snagyear(dname, currentmovie, tstringofimdbpage)
                    End If
                    ' getimdbdata(tmovie)
                    Dim imdbinfo As New IMDB
                    Dim imdbidtemp As String = currentmovie.getimdbid
                    If imdbidtemp = "" Then
                        If messageprompts Then MsgBox("NO IMDB DATA FOUND, UNABLE TO SAVE NFO FILE")
                        bwDisplayMovieData.ReportProgress(10, "NO IMDB DATA FOUND") ', UNABLE TO SAVE NFO FILE")
                    Else
                        bwDisplayMovieData.ReportProgress(11, "-- Parsing IMDB -- ") ' + dname + "--")
                        'If messageprompts Then Me.Refresh()()
                        imdbinfo = imdbparse(imdbidtemp)
                        'save xml to imdbcache reguardless of gui setting to write nfo
                        ' tmovie.Actors = imdbinfo.Actors
                        imdbinfo.writeIMDBXML(imdbinfo, currentmovie, rconf.imdbcachefolder, True)
                        'If cbSaveNFO.Checked Then
                        '    'imdbinfo.writeIMDBXML(imdbinfo, tmovie)
                        '    tmovie.saveimdbinfo(tmovie)
                        'End If
                        bwDisplayMovieData.ReportProgress(20, "IMDB Information Completed") ' + dname + "--")
                    End If
                End If
            End If
        End If

            Dim selectedNameXMLfile As String
            selectedNameXMLfile = Strings.Replace(dname, " ", ".")
            currentmovie.setthumbxml(rconf.xmlfolder + selectedNameXMLfile + ".xml")

            'logic flow - first poster, then fanart, then save nfo (if checked and not local), then display imdb info
            'get Movie Poster

            If ais Then
                Dim impaname As String = cleanname(dname)
            If rconf.pcbDownloadPoster Then
                bwDisplayMovieData.ReportProgress(21, "-- Gathering IMP Poster Data -- ") ' + dname + "--")
                'If messageprompts Then Me.Refresh()()
                Dim nolinksinxml As Boolean = False
                If File.Exists(rconf.xmlfolderposters + impaname + ".xml") Then
                    Dim curposter As New posters
                    curposter.pmoviename = impaname
                    curposter.readxml(curposter, rconf.xmlfolderposters)

                    If curposter.pposters.Count = 0 Then
                        nolinksinxml = True
                        bwDisplayMovieData.ReportProgress(13, "Found an xml for " + impaname + ". No links where found in that file")
                    Else
                        bwDisplayMovieData.ReportProgress(14, "Checking IMP Posters")
                        getdisplayposter(curposter)
                    End If
                Else
                    nolinksinxml = True
                End If

                If nolinksinxml = True Then
                    If messageprompts Then lblPbar.Text = "-- Downloading Poster for " + dname + "--"
                    'If messageprompts Then Me.Refresh()()
                    Debug.Print("When Getting Posters: Blank XML or No XML for: " + impaname)
                    'no poster xml, revert to older method of finding poster 
                    
                End If
            End If
            End If
        bwDisplayMovieData.ReportProgress(40, "-- Completed IMP Poster Data -- ")
        '-- END NEW POSTER CODE --
            'get fanart - first check to see if it's enabled
        If rconf.pcbGetTMDBPosters Then
            If messageprompts Then lblPbar.Text = "-- Getting TMDB Posters: " + currentmovie.getmoviename.ToString + "--"
            'If messageprompts Then Me.Refresh()()
            getpostersfromtmdb(currentmovie, ais, True) 'move this to the correct location once a gui option is there for it
        End If
        bwDisplayMovieData.ReportProgress(40, "-- Completed IMP Poster Data -- ")
            'get fanart - first check to see if it's enabled
            If rconf.pcbGetFanart Then
                If messageprompts Then lblPbar.Text = "-- Getting Fanart: " + currentmovie.getmoviename.ToString + "--"
                'If messageprompts Then Me.Refresh()()
                getfanart(currentmovie, ais, True)
            End If


        If rconf.pdisplayfanart Then
            If messageprompts Then lblPbar.Text = "-- Preparing Fanart for " + dname + "--"
            Dim haslocalfanart As Boolean = False
            If FileExists(curpath + "\" + tbnewname.Text + "-fanart.jpg") Then
                'Debug.Print("Fanart file already exists: " + lblCurMovieFolder.Text + "\" + dname + "-fanart.jpg")
                haslocalfanart = True
            Else
                If rconf.pcbGetFanart Then 'get fanart checked
                    If messageprompts Then lblPbar.Text = "-- Sorting Fanart for " + dname + "--__ "
                    'If messageprompts Then Me.Refresh()()
                    If rbem.Checked = True Then 'working online 
                        If currentmovie.pimdbnumber = "" Then
                            Debug.Print("No Imdb id in movie object tmovie, no attempt made to download - Fanart ")
                        Else
                            'try to get it from the tmdb precache (if it was enabled)
                            If Me.pbfatmdb1.Enabled Then
                                Dim newfanartimage As System.Drawing.Image
                                Try
                                    newfanartimage = System.Drawing.Image.FromFile(pbfatmdb1.AccessibleName)
                                    Try
                                        File.Copy(pbfatmdb1.AccessibleDescription, curpath + "\" + dname + "-fanart.jpg")
                                        haslocalfanart = True
                                    Catch ex As Exception
                                        Debug.Print(ex.ToString)
                                    End Try
                                Catch ex As Exception
                                    Debug.Print("no data from imdb precache")
                                End Try
                            End If
                        End If

                    End If

                End If

            End If

            'rem for background worker, added to work complete
            'If haslocalfanart And Me.showfanart Then
            '    fanartpb1.ImageLocation = curpath + "\" + tbnewname.Text + "-fanart.jpg"
            '    fanartpb1.Enabled = True
            'End If

        End If
        bwDisplayMovieData.ReportProgress(80, "-- Completed Fanart Data -- ")
        'end of fanart
        'display movie name and information in gui
        'read up .nfo file from xml
            If messageprompts Then lblPbar.Text = "-- Setting .nfo file for: " + dname + "--"
            'If messageprompts Then Me.Refresh()()
            If File.Exists(rconf.imdbcachefolder + currentmovie.pimdbnumber + ".xml") And Not currentmovie.pdatafromnfo Then 'tmovie.getmoviepath + "\" + tmovie.getmoviename + ".nfo") Then
                Dim timdb As New IMDB
            timdb.readIMDBXML(currentmovie, rconf.imdbcachefolder) 'parses movie from the xml file
            Else
                Debug.Print("display movie name and info - no movie nfo file found")
            End If

        If rconf.pcbSaveNFO And Not currentmovie.pdatafromnfo Then 'don't save it if we loaded it from the nfo
            'imdbinfo.writeIMDBXML(imdbinfo, tmovie)
            If Not currentmovie.pimdbnumber = Nothing Then currentmovie.saveimdbinfomanual(currentmovie, rconf.pcbCreateMovieNFO, rconf.pcbcreatemovienamedotnfo)
        End If


            '---------------------------- Mediaicons Section ---------------------------
            If ais Then 'allow thumbnail selection
                'check to see if there is already an xml file in there
                Dim xmltemppathname As String = rconf.xmlfolder + selectedNameXMLfile
                If rconf.pcbf1s0 Then
                    If rbem.Checked = True Then
                        If messageprompts Then lblPbar.Text = "-- Getting Square (no style) icon for " + dname + "--"
                        'If messageprompts Then Me.gbDisplay.Refresh()
                        xmlDownload(currentmovie, xmltemppathname, "1", "2", "0") 'square no style
                    End If
                    getdisplayimages(selectedNameXMLfile, "1", "2", "0")
                End If
                If rconf.pcbf1s3 Then
                    If rbem.Checked = True Then
                        If messageprompts Then lblPbar.Text = "-- Getting Square Box Shot for " + dname + "--"
                        'If messageprompts Then Me.gbDisplay.Refresh()
                        xmlDownload(currentmovie, xmltemppathname, "1", "2", "3") 'square box shot
                    End If
                    getdisplayimages(selectedNameXMLfile, "1", "2", "3")
                End If
                If rconf.pcbf1s9 Then
                    If rbem.Checked = True Then
                        If messageprompts Then lblPbar.Text = "-- Getting Round icon for " + dname + "--"
                        'If messageprompts Then Me.gbDisplay.Refresh()
                        xmlDownload(currentmovie, xmltemppathname, "1", "2", "9") 'square classification, but it's a round token
                    End If
                    getdisplayimages(selectedNameXMLfile, "1", "2", "9")
                End If
                If rconf.pcbf2s0 Then
                    If rbem.Checked = True Then
                        If messageprompts Then lblPbar.Text = "-- Getting Wide (no style) icon for " + dname + "--"
                        'If messageprompts Then Me.gbDisplay.Refresh()
                        xmlDownload(currentmovie, xmltemppathname, "2", "2", "0") 'wide no style
                    End If
                    getdisplayimages(selectedNameXMLfile, "2", "2", "0")
                End If
                If rconf.pcbf2s2 Then
                    If rbem.Checked = True Then
                        If messageprompts Then lblPbar.Text = "-- Getting Wide (rounded shadow scanlines) icon for " + dname + "--"
                        'If messageprompts Then Me.gbDisplay.Refresh()
                        xmlDownload(currentmovie, xmltemppathname, "2", "2", "2") 'wide rounded shadow with scanlines
                    End If
                    getdisplayimages(selectedNameXMLfile, "2", "2", "2")
                End If
                If rconf.pcbf2s8 Then
                    If rbem.Checked = True Then
                        If messageprompts Then lblPbar.Text = "-- Getting Wide (round shadow) icon for " + dname + "--"
                        'If messageprompts Then Me.gbDisplay.Refresh()
                        xmlDownload(currentmovie, xmltemppathname, "2", "2", "8") 'wide rounded shadow
                    End If
                    getdisplayimages(selectedNameXMLfile, "2", "2", "8")
                End If
                If rconf.pcbf2s10 Then
                    If rbem.Checked = True Then
                        If messageprompts Then lblPbar.Text = "-- Getting Wide (round shadow Glass overlay) icon for " + dname + "--"
                        'If messageprompts Then Me.gbDisplay.Refresh()
                        xmlDownload(currentmovie, xmltemppathname, "2", "2", "10") 'wide rounded shadow with glass overlay
                    End If
                    getdisplayimages(selectedNameXMLfile, "2", "2", "10")
                End If
            'If rconf.cbf3s0 Then
            '    If rbem.Checked = True Then
            '        If messageprompts Then lblPbar.Text = "-- Getting Tall (no style) icon for " + dname + "--"
            '        'If messageprompts Then Me.gbDisplay.Refresh()
            '        xmlDownload(currentmovie, xmltemppathname, "3", "2", "0") 'tall no style
            '    End If
            '    getdisplayimages(selectedNameXMLfile, "3", "2", "0")
            'End If
            End If
            'MsgBox(tmovie.getmoviename + " ------- " + tmovie.getthumbxml)
            btnRetryName.Enabled = True
            tbnewname.Enabled = True
        'pbTick.Stop()
        'pbar1.Visible = False
        'lblPbar.Visible = False
            'set movie to current movie
            'currentmovie = tmovie
        bwDisplayMovieData.ReportProgress(99, "-- Completed MediaIcons Data -- ")
            '---Show Poster
        'If skt Then
        '    If File.Exists(curpath + "\folder.jpg") And Me.showposter Then
        '        Try
        '            pbCurrentIconUsedNT.ImageLocation = curpath + "\folder.jpg"
        '            pbCurrentIconUsedNT.Show()
        '        Catch
        '            'MsgBox("file bad, delete?", MsgBoxStyle.YesNo, "Unable to load folder.jpg")
        '            ' If MsgBoxResult.Yes = MsgBox("Unable to load folder.jpg, it appears to be corrupted." + vbNewLine + vbNewLine + "Do you want to delete it and the associated tbn file?") Then
        '            File.Delete(curpath + "\folder.jpg")
        '            If File.Exists(lblCurMovieFolder.Text + "\" + tbMovieName.Text + ".tbn") Then File.Delete(lblCurMovieFolder.Text + "\" + tbMovieName.Text + ".tbn")
        '            'End If
        '            '    MsgBox("Image located at: " + Path + "\folder.jpg" + " is corrupted, I'm deleting it")
        '            'if this fails, the file is corrupt, delete it and the tbn file
        '            pbCurIconUsed.ImageLocation = Nothing
        '            pbCurIconUsed.Hide()
        '            pbCurIconUsed2.ImageLocation = Nothing
        '            pbCurIconUsed2.Hide()
        '        End Try
        '    Else 'no folder.jpg found
        '        pbCurIconUsed.ImageLocation = Nothing
        '        pbCurIconUsed.Hide()
        '        pbCurIconUsed2.ImageLocation = Nothing
        '        pbCurIconUsed2.Hide()
        '    End If
        'End If


        End Sub

        Private Sub bwDisplayMovieData_progresschanged(ByVal sender As Object, ByVal e As System.ComponentModel.ProgressChangedEventArgs) Handles bwDisplayMovieData.ProgressChanged
            If prgThread.value = prgThread.maximum Then
                prgThread.value = 1
            End If
        System.Threading.Thread.Sleep(10)
        prgThread.Value = e.ProgressPercentage
        lblPCWorking.Text = e.UserState.ToString
        Debug.Print("BWPROGRESS: " + e.UserState.ToString)
            'lstValues.Items.Add(e.UserState)
        End Sub

        Private Sub bwDisplayMovieData_RunWorkerCompleted(ByVal sender As Object, ByVal e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles bwDisplayMovieData.RunWorkerCompleted
        singleMovieBeingDisplayed = False
        'display imdb info
        Me.tbMovieName.Text = currentmovie.getmoviename
        khgMovieNameGroup.ValuesPrimary.Heading = currentmovie.getmoviename 'moviename to group box label area
        Me.tbMovieNameE.Text = currentmovie.getmoviename
        Me.tbCredits.Text = currentmovie.pcredits
        Me.tbDirector.Text = currentmovie.pdirector
        Me.tbGenre.Text = currentmovie.pgenre
        Me.tbIMDBID.Text = currentmovie.pimdbnumber
        Me.tbMpaa.Text = currentmovie.pmpaa
        Me.rtbPlotOutline.Text = currentmovie.pplotoutline
        Me.rtbPlot.Text = currentmovie.pplot
        Me.tbRating.Text = currentmovie.prating
        Me.tbOriginalTitle.Text = currentmovie.poriginaltitle
        Me.tbRuntime.Text = currentmovie.pruntime
        Me.rtbTagline.Text = currentmovie.ptagline
        Me.tbVotes.Text = currentmovie.pvotes
        Me.tbStudio.Text = currentmovie.pstudio 'tmovie.ptitle
        Me.tbyear.Text = currentmovie.pyear.ToString
        Me.tbTop250.Text = currentmovie.ptop250
        Me.tbTrailer.Text = currentmovie.ptrailer

        'display fanart
        If Me.showfanart Then
            fanartpb1.ImageLocation = currentmovie.getmoviepath + "\" + currentmovie.pmoviename + "-fanart.jpg"
            fanartpb1.Enabled = True
        End If

        'display poster
        Dim skt As Boolean = rconf.pcbSkipTransparency 'cbSkipTransparency.Checked
        If Not skt Then
            Dim curpath As String = currentmovie.getmoviepath
            If File.Exists(curpath + "\folder.jpg") And Me.showposter Then
                Try
                    pbCurIconUsed.ImageLocation = curpath + "\folder.jpg"
                    pbCurIconUsed.Hide() 'hide basic image
                    pbCurIconUsed2.Hide() 'hide poster version
                    'Me.Refresh()
                    Dim bmpImage As System.Drawing.Image
                    bmpImage = System.Drawing.Image.FromFile(curpath + "\folder.jpg")
                    'aspect ratio items
                    Dim imagetype As String

                    Dim taspect As Double = aspectratio(bmpImage)

                    If taspect < 0.25 Then
                        'wide(Icon)
                        imagetype = "wideicon"
                    ElseIf taspect >= 0.98 And taspect <= 1.02 Then
                        imagetype = "square"
                    ElseIf (taspect > 0.8 Or taspect < 0.95) And bmpImage.Height < 500 And bmpImage.Width < 450 Then
                        'boxed icon or maybe squared poster
                        imagetype = "boxed"
                    Else
                        imagetype = "poster" 'consider it a poster
                    End If
                    'set pb to bmp size
                    Try 'fix to check file first and remove try block
                        Dim x, y As Integer
                        If (bmpImage.Width >= 400 Or bmpImage.Height > 299 Or Not rconf.pcbDlFormat = 2 Or imagetype = "poster") And Not imagetype = "wideicon" Then

                            Debug.Print("no transparency attempted for current icon, too big, quality setting not highest, or it's a poster")
                            'scale image size
                            'set the fixed height and get the new width (based on aspect) then set the picture box sizes
                            Dim fixedHeight As Double = 350
                            Dim newWidth As Double = fixedHeight / taspect
                            Dim framefixedheight As Double = 393
                            Dim framenewWidth As Double = framefixedheight / taspect

                            'pbCurIconUsed.Image = bmpImage
                            'pbFrame.Show()
                            pbFrame.Height = Convert.ToInt32(framefixedheight)
                            pbFrame.Width = Convert.ToInt32(framenewWidth)
                            'pbCurIconUsed.Image = bmpImage
                            pbFrame.Show()
                            pbCurIconUsed2.Show()
                            pbCurIconUsed2.Width = Convert.ToInt32(newWidth)
                            pbCurIconUsed2.Height = Convert.ToInt32(fixedHeight)
                            pbCurIconUsed2.Image = pbCurIconUsed.Image
                            pbCurIconUsed2.BringToFront()
                            'do not attempt transparency
                        Else
                            If messageprompts Then lblPbar.Text = "---- Processing Transparency ----"
                            'If messageprompts Then Me.Refresh()()
                            Debug.Print("start: " + TimeString())
                            Dim bmp As New Bitmap(currentmovie.getmoviepath + "\folder.jpg")
                            Dim gp As New System.Drawing.Drawing2D.GraphicsPath
                            Dim mask1 As System.Drawing.Color = System.Drawing.Color.White
                            Dim mask2 As System.Drawing.Color = System.Drawing.Color.Transparent
                            Dim noshow As String = "Color [A=0, R=0, G=0, B=0]"
                            For x = 0 To bmp.Width - 1
                                For y = 0 To bmp.Height - 1
                                    Dim curPixAlpha As Integer = Convert.ToInt16(Strings.Replace(Strings.Replace(Strings.Right(Strings.Left(bmp.GetPixel(x, y).ToString, 12), 3), ",", ""), " ", ""))
                                    If curPixAlpha >= 128 Then
                                        'Debug.Print("More then 127: " + curPixAlpha.ToString)
                                        gp.AddRectangle(New Rectangle(x, y, 1, 1))
                                    Else
                                        'Debug.Print("mask1" + bmp.GetPixel(x, y).ToString)
                                    End If
                                    curPixAlpha = Nothing
                                Next
                            Next

                            'set pbsize
                            pbCurIconUsed.Height = bmp.Height
                            pbCurIconUsed.Width = bmp.Width
                            'setitem
                            pbCurIconUsed.BackColor = System.Drawing.Color.Transparent
                            pbCurIconUsed.Region = New System.Drawing.Region(gp)
                            pbCurIconUsed.Show()
                            'cleanup
                            bmp.Dispose()
                            bmp = Nothing
                            gp.Dispose()
                            Debug.Print("end: " + TimeString())
                            'End If
                        End If
                    Catch ex As Exception
                        Debug.Print(ex.ToString)
                    End Try
                    bmpImage.Dispose()
                Catch ex As Exception
                    'MsgBox("file bad, delete?", MsgBoxStyle.YesNo, "Unable to load folder.jpg")
                    ' If MsgBoxResult.Yes = MsgBox("Unable to load folder.jpg, it appears to be corrupted." + vbNewLine + vbNewLine + "Do you want to delete it and the associated tbn file?") Then

                    'File.Delete(currentmovie.getmoviepath + "\folder.jpg")
                    'If File.Exists(lblCurMovieFolder.Text + "\" + tbMovieName.Text + ".tbn") Then File.Delete(lblCurMovieFolder.Text + "\" + tbMovieName.Text + ".tbn")

                    'End If
                    '    MsgBox("Image located at: " + Path + "\folder.jpg" + " is corrupted, I'm deleting it")
                    'if this fails, the file is corrupt, delete it and the tbn file
                    pbCurIconUsed.ImageLocation = Nothing
                    pbCurIconUsed.Hide()
                    pbCurIconUsed2.ImageLocation = Nothing
                    pbCurIconUsed2.Hide()
                End Try
                'end cur image processing
            Else 'used when no folder.jpg exsist
                pbCurIconUsed.ImageLocation = Nothing
                pbCurIconUsed.Hide()
                pbCurIconUsed2.ImageLocation = Nothing
                pbCurIconUsed2.Hide()
            End If
        End If
        Debug.Print("done: " + TimeString())
        '----END Show Poster
        'validate folder contents
        validatefoldercontents()

        'turn controls back on
        tsbMoviesPreCache.Enabled = True
        tsbMoviesPreCache.Visible = True
            btnCancelPC.Enabled = False
            btnCancelPC.Visible = False
            prgThread.Visible = False
            tcMain.Enabled = True
            gbAppMode.Enabled = True
            gbDisplay.Enabled = True
        tsbMoviesLoadMovies.Enabled = True
        tsbMoviesAutoPilot.Enabled = True
        'tsbMoviesAutoPilot.Visible = True
            lblPCWorking.Visible = False
            lbMyMovies.Enabled = True
            kgMovieOrTVShow.Enabled = True
            kgMyMovieInfoPicker.Enabled = True
            btnShowMovieInfo.Enabled = True
            fwdbackbuttons()
            klNumMovies.Text = movies.Count.ToString
            lblCurItem.Text = "Folder Read Completed"
        End Sub

    Public Sub changecbox1index(ByRef nindex As Integer)
        cbox1.SelectedIndex = nindex
    End Sub

    Public Sub findsimilar()
        Dim cleanercount As Integer = lbsimnames.Items.Count
        Dim counter As Integer = 0
        While counter < cleanercount And Not cleanercount = 0
            lbsimnames.Items.RemoveAt(0)
            counter = counter + 1
        End While

        Dim curname As String
        Dim searchname As String
        Dim tmovie As movie = CType(movies(CInt(lbMyMovies.SelectedValue)), movie)
        lblPbar.Visible = True
        lblPbar.Text = " ____---- WORKING ON: " + tmovie.getmoviename.ToString + "----____ "
        If messageprompts Then Me.gbDisplay.Refresh()
        'see if a folder icon exsists 
        Dim Path As String = tmovie.getmoviepath
        'pbCurIconUsed.ImageLocation = Path + "\folder.jpg"
        Dim selectedName As String = tmovie.getmoviename
        curname = selectedName
        searchname = cleanname(curname).ToLower
        searchname = Strings.Replace(searchname, ",", "")
        searchname = Strings.Replace(searchname, ".", "")
        searchname = Strings.Replace(searchname, "!", "")
        searchname = Strings.Replace(searchname, "and", "")
        searchname = Strings.Replace(searchname, "the", "")
        searchname = Strings.Replace(searchname, "-", "")
        searchname = Strings.Left(searchname, 5)
        Dim pathlength As Integer = rconf.xmlfolderposters.Length '(fixme) this might break the check
        Dim mainarray As ArrayList = getFiles(rconf.xmlfolderposters)
        ' Dim arrayfound As New ArrayList
        'Dim arrayshortnamefound As New ArrayList

        For Each maitems In mainarray
            Try
                Dim RegexObj3 As New Regex("(?<searchedname>" + searchname + ")", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline)
                Dim MatchResults As Match = RegexObj3.Match(maitems.ToString)
                While MatchResults.Success
                    Dim i As Integer
                    For i = 1 To MatchResults.Groups.Count
                        Dim GroupObj As Group = MatchResults.Groups(i)
                        If GroupObj.Success Then
                            'MsgBox(GroupObj.ToString)
                            'MsgBox(items.ToString)
                            Dim tempstr As String = maitems.ToString
                            'arrayfound.Add(tempstr)
                            Dim tempstrlength As Integer = tempstr.Length
                            Dim difflength As Integer = tempstrlength - pathlength
                            tempstr = Strings.Left(maitems.ToString, tempstrlength - 4)
                            tempstr = Strings.Right(tempstr, difflength - 4)
                            'arrayshortnamefound.Add(tempstr)
                            lbsimnames.Items.Add(tempstr)
                        End If
                    Next
                    MatchResults = MatchResults.NextMatch()
                End While
            Catch ex As Exception

            End Try
        Next

        lblPbar.Visible = False



    End Sub
    Public Sub createtestfolderbyyear(ByVal year As Integer)
        Try
            Dim data0 As String = File.ReadAllText(rconf.sourcePagefolder + CStr(year) + "posters.txt")
            Dim RegexObj3 As New Regex("<td><font size=.1>(?<moviename>.{0,85})</font></td>", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline)
            Dim MatchResults As Match = RegexObj3.Match(data0)
            While MatchResults.Success
                Dim i As Integer
                For i = 1 To MatchResults.Groups.Count
                    Dim GroupObj As Group = MatchResults.Groups(i)
                    If GroupObj.Success Then
                        Debug.Print(GroupObj.Value)
                        Dim foldername As String = cleanname(GroupObj.Value.ToString)
                        'Dim foldername2 As String = Strings.Replace(foldername, "?", " ")
                        'Dim foldername3 As String = Strings.Replace(foldername2, "�", "")
                        Directory.CreateDirectory(rconf.examplefolder + foldername)

                    End If
                Next
                MatchResults = MatchResults.NextMatch()
            End While
        Catch ex As Exception
        End Try
    End Sub
    Private Sub createtestfoldersfromposterxmls()
        Dim posterxmlsarray As New ArrayList
        Dim counter As Integer = 0
        For Each item In Directory.GetFiles(rconf.xmlfolderposters)
            Dim fnPeices1() As String = item.ToString.Split(CChar("\"))
            Dim tfname As String = fnPeices1(fnPeices1.Length - 1)
            Debug.Print(Strings.Left(tfname.ToString, tfname.Length - 4))
            Directory.CreateDirectory(rconf.examplefolder + Strings.Left(tfname.ToString, tfname.Length - 4))
            'posterxmlsarray.Add(item)
            counter += 1
        Next
        Debug.Print(counter.ToString)
        MsgBox("created " + counter.ToString + " test folders")

        'posterxmlsarray = 
    End Sub
    Public Sub createtestfolder()
        Dim counter As Integer = 1980
        While counter < 2009
            createtestfolderbyyear(counter)
            counter = counter + 1
        End While

    End Sub
    Public Sub createtestfolder1()
        Try
            'depricated with the update poster info function
            Dim data7 As String = File.ReadAllText("c:\movieinfoplus\xmlt\2007posters.txt")
            Dim data6 As String = File.ReadAllText("c:\movieinfoplus\xmlt\2006posters.txt")
            Dim data5 As String = File.ReadAllText("c:\movieinfoplus\xmlt\2005posters.txt")
            Dim data4 As String = File.ReadAllText("c:\movieinfoplus\xmlt\2004posters.txt")
            Dim data3 As String = File.ReadAllText("c:\movieinfoplus\xmlt\2003posters.txt")
            Dim data2 As String = File.ReadAllText("c:\movieinfoplus\xmlt\2002posters.txt")
            Dim data1 As String = File.ReadAllText("c:\movieinfoplus\xmlt\2001posters.txt")
            Dim data0 As String = File.ReadAllText("c:\movieinfoplus\xmlt\2000posters.txt")

            Dim RegexObj3 As New Regex("<td><font size=.1>(?<moviename>.{0,85})</font></td>", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline)
            Dim MatchResults As Match = RegexObj3.Match(data0)
            While MatchResults.Success
                Dim i As Integer
                For i = 1 To MatchResults.Groups.Count
                    Dim GroupObj As Group = MatchResults.Groups(i)
                    If GroupObj.Success Then
                        Debug.Print(GroupObj.Value)
                        Dim foldername As String = Strings.Replace(GroupObj.Value.ToString, ":", " ")
                        Dim foldername2 As String = Strings.Replace(foldername, "?", " ")
                        Directory.CreateDirectory("c:\movieinfoplus\test\" + foldername2)
                    End If
                Next
                MatchResults = MatchResults.NextMatch()
            End While

            MatchResults = RegexObj3.Match(data1)
            While MatchResults.Success
                Dim i As Integer
                For i = 1 To MatchResults.Groups.Count
                    Dim GroupObj As Group = MatchResults.Groups(i)
                    If GroupObj.Success Then
                        Debug.Print(GroupObj.Value)
                        Dim foldername As String = Strings.Replace(GroupObj.Value.ToString, ":", " ")
                        Dim foldername2 As String = Strings.Replace(foldername, "?", " ")
                        Directory.CreateDirectory("c:\movieinfoplus\test\" + foldername2)
                    End If
                Next
                MatchResults = MatchResults.NextMatch()
            End While

            MatchResults = RegexObj3.Match(data2)
            While MatchResults.Success
                Dim i As Integer
                For i = 1 To MatchResults.Groups.Count
                    Dim GroupObj As Group = MatchResults.Groups(i)
                    If GroupObj.Success Then
                        Debug.Print(GroupObj.Value)
                        Dim foldername As String = Strings.Replace(GroupObj.Value.ToString, ":", " ")
                        Dim foldername2 As String = Strings.Replace(foldername, "?", " ")
                        Directory.CreateDirectory("c:\movieinfoplus\test\" + foldername2)
                    End If
                Next
                MatchResults = MatchResults.NextMatch()
            End While

            MatchResults = RegexObj3.Match(data3)
            While MatchResults.Success
                Dim i As Integer
                For i = 1 To MatchResults.Groups.Count
                    Dim GroupObj As Group = MatchResults.Groups(i)
                    If GroupObj.Success Then
                        Debug.Print(GroupObj.Value)
                        Dim foldername As String = Strings.Replace(GroupObj.Value.ToString, ":", " ")
                        Dim foldername2 As String = Strings.Replace(foldername, "?", " ")
                        Directory.CreateDirectory("c:\movieinfoplus\test\" + foldername2)
                    End If
                Next
                MatchResults = MatchResults.NextMatch()
            End While

            MatchResults = RegexObj3.Match(data4)
            While MatchResults.Success
                Dim i As Integer
                For i = 1 To MatchResults.Groups.Count
                    Dim GroupObj As Group = MatchResults.Groups(i)
                    If GroupObj.Success Then
                        Debug.Print(GroupObj.Value)
                        Dim foldername As String = Strings.Replace(GroupObj.Value.ToString, ":", " ")
                        Dim foldername2 As String = Strings.Replace(foldername, "?", " ")
                        Directory.CreateDirectory("c:\movieinfoplus\test\" + foldername2)
                    End If
                Next
                MatchResults = MatchResults.NextMatch()
            End While

            MatchResults = RegexObj3.Match(data5)
            While MatchResults.Success
                Dim i As Integer
                For i = 1 To MatchResults.Groups.Count
                    Dim GroupObj As Group = MatchResults.Groups(i)
                    If GroupObj.Success Then
                        Debug.Print(GroupObj.Value)
                        Dim foldername As String = Strings.Replace(GroupObj.Value.ToString, ":", " ")
                        Dim foldername2 As String = Strings.Replace(foldername, "?", " ")
                        Directory.CreateDirectory("c:\movieinfoplus\test\" + foldername2)
                    End If
                Next
                MatchResults = MatchResults.NextMatch()
            End While

            MatchResults = RegexObj3.Match(data6)
            While MatchResults.Success
                Dim i As Integer
                For i = 1 To MatchResults.Groups.Count
                    Dim GroupObj As Group = MatchResults.Groups(i)
                    If GroupObj.Success Then
                        Debug.Print(GroupObj.Value)
                        Dim foldername As String = Strings.Replace(GroupObj.Value.ToString, ":", " ")
                        Dim foldername2 As String = Strings.Replace(foldername, "?", " ")
                        Directory.CreateDirectory("c:\movieinfoplus\test\" + foldername2)
                    End If
                Next
                MatchResults = MatchResults.NextMatch()
            End While

            MatchResults = RegexObj3.Match(data7)
            While MatchResults.Success
                Dim i As Integer
                For i = 1 To MatchResults.Groups.Count
                    Dim GroupObj As Group = MatchResults.Groups(i)
                    If GroupObj.Success Then
                        Debug.Print(GroupObj.Value)
                        Dim foldername As String = Strings.Replace(GroupObj.Value.ToString, ":", " ")
                        Dim foldername2 As String = Strings.Replace(foldername, "?", " ")
                        Directory.CreateDirectory("c:\movieinfoplus\test\" + foldername2)
                    End If
                Next
                MatchResults = MatchResults.NextMatch()
            End While
        Catch ex As ArgumentException
            'Syntax error in the regular expression
        End Try
    End Sub
    'Private Sub btnGetXML_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnGetXML.Click
    '    Dim response As HttpWebResponse = Nothing
    '    Try
    '        '---------------
    '        Dim url As String '= "http://mediaicons.org/GetIcon.ashx?key=3095&format=2&style=0&type=download"
    '        '---------------
    '        Dim FileName, FilePath As String
    '        FileName = "c:\images\save.png"
    '        ' If SavePhotoFromUrl(FileName, url) Then
    '        'MessageBox.Show("Download success!")
    '        'Else
    '        'MessageBox.Show("Download fail!")
    '        'End If
    '        'dlist.Add("hello")
    '        EnumerateDirectory(Me.tbFolder.Text)

    '        Dim thelist As ArrayList
    '        thelist = dlist
    '        'thelist = listFolders("H:\movies\Movies\Action")
    '        'cleanlist = cleanfolders(thelist)
    '        Dim mname, mfxname As String

    '        For Each name As String In dlist

    '            pbar1m()
    '            'parse just the movie name
    '            mname = getmnamebyfoldername(name).ToString
    '            Debug.Print(mname)
    '            'search for the icon which will return the xml results file
    '            mfxname = searchForThumbFromUrl(mname)
    '            'grab the xml
    '            'mfxname = Strings.Replace(mname2, " ", ".")
    '            'set the url
    '            ReadXMLGetImage(mfxname, mname)
    '            'ReadXML(mfxname)
    '            'increment counter
    '            urllist_count = urllist_count + 1
    '        Next



    '    Finally
    '        If Not response Is Nothing Then response.Close()
    '    End Try
    '    'For Each namer In urllist
    '    '    Debug.Print(Convert.ToString(namer))
    '    'Next
    'End Sub
    Private Sub SaveCompleted(ByVal sender As Object, ByVal e As System.Windows.Forms.WebBrowserDocumentCompletedEventArgs)
        MsgBox(String.Format("Saved snapshot of '{0}'", e.Url), MsgBoxStyle.Information)
    End Sub
    Sub ReadXMLGetImage(ByVal FileName As String, ByVal mnamei As String)
        'read xml and populate array

        'set array
        Dim tarray As New ArrayList
        Dim FilePath As String
        Dim urlr As String

        Try
            Debug.Print("xml file is: " + FileName)
            'lblXMLFile.Text = ""
            Dim objXMLTR As New XmlTextReader(FileName)
            '            Dim icount_internal As Integer = 0

            'Read method loops through the XML stream
            Do While objXMLTR.Read
                'populate array with urls
                If Convert.ToString(objXMLTR.Item("url")) = Nothing Then
                    'do not add it, there's nothing there
                Else

                    urllist.Add(Convert.ToString(objXMLTR.Item("url")))
                    tarray.Add(Convert.ToString(objXMLTR.Item("url")))
                    'Debug.Print("----------added to urllist ------------")
                End If
            Loop
            objXMLTR.Close()
        Catch Ex As Exception
            Debug.Print("XML READ ERROR: The following error occurred: " & Ex.Message)
        End Try

        For Each namer In tarray
            Debug.Print(Convert.ToString(namer))
        Next
        ' get the stuff from array and save image
        Try
            Dim mcounter As Integer = 0
            For Each namer2 As String In tarray
                urlr = namer2
                Debug.Print(urlr)
                'If urlr = Nothing Then
                '    '    Exit Sub
                '    Debug.Print("umm shit")
                'Else
                FilePath = Name + "\" + FileName
                Dim FilePath1 As String = "g:\tempi\" + mnamei + Convert.ToString(mcounter) + ".png"
                Debug.Print(FilePath1)
                Debug.Print(urlr)
                If mcounter <= 4 Or mcounter = 0 Then
                    SavePhotoFromUrl(FilePath1, urlr)
                End If

                '    'icount_internal = icount_internal + 1
                'End If
                mcounter = mcounter + 1
            Next
        Catch Ex As Exception
            Debug.Print("busted. The following error occurred: " & Ex.Message)
        End Try

    End Sub
    Sub ReadXML(ByVal FileName As String)
        Try
            'Debug.Print("xml file is: " + FileName)
            'lblXMLFile.Text = ""
            Dim objXMLTR As New XmlTextReader(FileName)
            'Dim sCategory As String
            'Dim bNested As Boolean
            'Dim sLastElement As String
            'Dim sValue As String

            'Read method loops through the XML stream
            Do While objXMLTR.Read
                'Debug.Print("read start")
                'Output elements and values
                'Look at output in browser and compare to menu.xml file to 
                'see exactly what is being done
                ' Debug.Print("----------------------")
                'Debug.Print(objXMLTR.Name)
                'Debug.Print("value: " + Convert.ToString(objXMLTR.Item("url")))
                If Convert.ToString(objXMLTR.Item("url")) = Nothing Then
                    'do not add it, there's nothing there
                Else

                    urllist.Add(Convert.ToString(objXMLTR.Item("url")))
                    'Debug.Print("----------added to urllist ------------")
                End If
                'If objXMLTR.NodeType = XMLNodeType.Element Then
                '    If bNested = True Then
                '        If sCategory <> "" Then sCategory = sCategory & " > "
                '        sCategory = sCategory & sLastElement
                '        Debug.Print("nested")
                '    End If
                '    bNested = True
                '    sLastElement = objXMLTR.Name

                'ElseIf objXMLTR.NodeType = XmlNodeType.Text Or objXMLTR.NodeType = XmlNodeType.CDATA Then
                '    bNested = False
                '    sCategory = "<P>" & sCategory
                '    sValue = objXMLTR.Value
                '    'rtbDebug.Text = rtbDebug.Text & "<B>" & sCategory & "<BR>" & sLastElement & "</B><BR>" & sValue
                '    Debug.Print(sValue)
                '    sLastElement = ""
                '    sCategory = ""
                'End If
            Loop
            objXMLTR.Close()
        Catch Ex As Exception
            Debug.Print("The following error occurred: " & Ex.Message)
        End Try

    End Sub
    Sub ReadXMLforSelection(ByVal FileName As String, Optional ByVal currenttvshowname As String = "")
        urllists.Clear()
        Try
            'Debug.Print("xml file is: " + FileName)
            'lblXMLFile.Text = ""
            Dim objXMLTR As New XmlTextReader(FileName)
            'Read method loops through the XML stream
            Do While objXMLTR.Read
                If Convert.ToString(objXMLTR.Item("url")) = Nothing Then
                    'do not add it, there's nothing there
                Else
                    If cmmode = "tv" Then
                        'the names are not well defined
                        Dim tempnamestr As String = ""
                        tempnamestr = Strings.Replace(Strings.Left(Convert.ToString(objXMLTR.Item("name")), currenttvshowname.Length), " ", ".")
                        If tempnamestr.ToLower = currenttvshowname.ToLower Then
                            urllists.Add(Convert.ToString(objXMLTR.Item("url")))
                        End If


                    Else
                        urllists.Add(Convert.ToString(objXMLTR.Item("url")))
                    End If
                    'Debug.Print("----------added to urllist ------------")
                    End If

            Loop
            objXMLTR.Close()
        Catch Ex As Exception
            Debug.Print("The following error occurred: " & Ex.Message)
        End Try

    End Sub
    Public Function getmnamebyfoldername(ByVal link As String) As String
        'MsgBox(Name)
        'ListBox1.Items.Add(Name)
        Dim ResultString As String
        Try
            ResultString = Regex.Match(link, ".*\\(?<mn>.*)").Groups("mn").Value
            'Debug.Print(ResultString)
            Return ResultString
        Catch ex As ArgumentException
            'Syntax error in the regular expression
            Return "error"
        End Try
    End Function
    Private Sub EnumerateTVDirectory(ByVal RootDirectory As String)

        'For Each s As String In Directory.GetDirectories(RootDirectory)
        'Debug.WriteLine("File found: " & s)
        'Next s
        For Each s As String In Directory.GetDirectories(RootDirectory)
            'Debug.Print(Strings.Right(s, 8))

            If Not (File.GetAttributes(s) And FileAttributes.ReparsePoint) = FileAttributes.ReparsePoint Then
                '    Debug.WriteLine("Sub Enumerate Directory -- Directory found: " & s)
                'debug counter
                dtvlist_count = dtvlist_count + 1
                'Debug.Print(dlist_count)
                'Add all files to the global array
                If ((Strings.Right(s, 8)).ToLower = "video_ts" Or (Strings.Right(s, 8)).ToLower = "audio_ts" Or (Strings.Right(s, 7)).ToLower = "highdef" Or (Strings.Right(s, 15)).ToLower = "temporary files" Or s.ToUpper = "LOST+FOUND" Or s.ToUpper = "System Volume Information".ToUpper) Then
                    Debug.Print("Sub Enumerate Directory -- found video or audio ts at " + Convert.ToString(dtvlist_count) + " - skipping")
                Else
                    dtvlist.Add(s)
                End If
                EnumerateDirectory(s) ' will parse sub dirs
            End If
        Next s
        'Return junk
    End Sub
    Private Sub EnumerateMusicDirectory(ByVal RootDirectory As String)
        'Dim folderslist As New ArrayList
        'For Each s As String In Directory.GetDirectories(RootDirectory)
        'Debug.WriteLine("File found: " & s)
        'Next s
        If Not Directory.Exists(RootDirectory) Then Exit Sub
        For Each s As String In Directory.GetDirectories(RootDirectory)
            'Debug.Print(Strings.Right(s, 8))

            If Not (File.GetAttributes(s) And FileAttributes.ReparsePoint) = FileAttributes.ReparsePoint Then
                '    Debug.WriteLine("Sub Enumerate Directory -- Directory found: " & s)
                'debug counter
                dmusic_count = dmusic_count + 1
                'Debug.Print(dlist_count)
                'Add all files to the global array
                If ((Strings.Right(s, 8)).ToLower = "video_ts" Or (Strings.Right(s, 8)).ToLower = "audio_ts" Or (Strings.Right(s, 7)).ToLower = "trailer" Or (Strings.Right(s, 15)).ToLower = "temporary files" Or (Strings.Right(s, 8)).ToLower = "(noscan)" Or (Strings.Right(s, 6)).ToLower = "sample" Or s.ToUpper = "RECYCLER" Or s.ToUpper = "LOST+FOUND" Or s.ToUpper = "System Volume Information".ToUpper) Then
                    Debug.Print("Sub Enumerate Directory -- found but coded to not add " + Convert.ToString(dmusic_count) + " - skipping")
                Else
                    musiclist.Add(s)
                End If
                EnumerateMusicDirectory(s) ' will parse sub dirs
            End If
        Next s
        'Return junk
    End Sub
  
    
    Private Sub EnumerateDirectory(ByVal RootDirectory As String)

        For Each s As String In Directory.GetDirectories(RootDirectory)
            If Not (File.GetAttributes(s) And FileAttributes.ReparsePoint) = FileAttributes.ReparsePoint Then
                dlist_count = dlist_count + 1
                If validmoviedirc(s) Then
                    dlist.Add(s)
                End If
                EnumerateDirectory(s)
            End If
        Next s
        'Return junk
    End Sub
    Private Function GetFileName(ByVal url As String) As String
        Dim filename As String = url.Replace("http://", "")
        For Each c As Char In System.IO.Path.GetInvalidFileNameChars()
            filename = filename.Replace(c, "_"c)
        Next
        filename = filename & ".jpg"
        Dim folder As String
        folder = Path.Combine(My.Computer.FileSystem.SpecialDirectories.Desktop, "WebShots")
        If Not Directory.Exists(folder) Then
            Directory.CreateDirectory(folder)
        End If
        Return Path.Combine(folder, filename)
    End Function
    Public Shared Function listFolders(ByVal rfoldername As String) As ArrayList
        'Retrieve all files in the directory
        Dim strFiles() As String = Directory.GetDirectories(rfoldername)
        Dim junk As New ArrayList
        Dim count As Integer = 0
        'Add all files to the array
        For Each name As String In strFiles
            junk.Add(name)
            count = count + 1
        Next
        Return junk
    End Function
    Public Shared Function getSubFolders(ByVal rfoldername As String) As ArrayList
        'Retrieve all files in the directory
        Dim strFiles() As String = Directory.GetFileSystemEntries(rfoldername)
        Dim junk As New ArrayList
        Dim count As Integer = 0
        'Add all files to the array
        For Each name As String In strFiles
            junk.Add(name)
            count = count + 1
        Next
        Return junk
    End Function
    Public Shared Function getFiles(ByVal foldername As String) As ArrayList
        'Retrieve all files in the directory
        Dim strFiles() As String = Directory.GetFiles(foldername)
        Dim junk As New ArrayList
        Dim count As Integer = 0
        'Add all files to the array
        For Each name As String In strFiles
            junk.Add(name)
            count = count + 1
        Next
        Return junk
    End Function
    'get any url and save the item out

    'searchForThumbFromURL saves out the XML returned file (from the stream)
    'Public Shared Function searchForThumbFromUrl(ByVal MovieName As String) As String
    '    MsgBox("searchForThumbFromUrl with busted code running!")

    '    Form1.pbar1.Visible = True
    '    Form1.pbar1mv(10)
    '    Dim lbase As String = "http://mediaicons.org/Services/Find.ashx?"
    '    Dim lterm As String = "term="
    '    Dim lformat As String = "format="
    '    Dim lstyle As String = "style=10"
    '    Dim lcategory As String = "catagory=2"
    '    Dim lclient As String = "client=MovieInfoPlus"
    '    Dim lconcat As String = "&"
    '    Dim Value As Boolean = False
    '    Dim response As WebResponse = Nothing
    '    'Dim stream As Stream = Nothing

    '    Dim url, Filename As String
    '    Dim moviename2 As String = Strings.Replace(MovieName, " ", "%20")
    '    MovieName = Strings.Replace(MovieName, " ", ".")
    '    Form1.pbar1mv(10)
    '    url = lbase + lterm + """" + moviename2 + """" + lconcat + lformat + Convert.ToString(Form1.gformat) + lconcat + lstyle + lconcat + lcategory + lconcat + lclient
    '    Form1.pbar1mv(10)
    '    'Debug.Print(url)
    '    Filename = Form1.xmlfolder + Convert.ToString(MovieName) + ".xml"
    '    Try
    '        Dim request As HttpWebRequest = CType(WebRequest.Create(url), HttpWebRequest)
    '        response = request.GetResponse()
    '        Form1.pbar1m()
    '        ' stream = response.GetResponseStream()
    '        Form1.pbar1m()
    '        ' Dim subString As String = Microsoft.VisualBasic.Left(response.ToString, 34)
    '        ' MsgBox(subString.ToString)
    '        'If subString = "HTTP/1.1 500 Internal Server Error" Then
    '        'Return "nothing"
    '        'Exit Function
    '        'End If
    '        Value = SaveBin(response, Filename) 'Save Binary File
    '        Form1.pbar1m()
    '        '  stream.Close()
    '    Catch err As Exception
    '        Dim aa As String = err.ToString()
    '        Debug.Print(aa)
    '        MsgBox(aa.ToString)
    '    End Try
    '    Form1.pbar1mv(10)
    '    Form1.pbar1.Visible = False
    '    Return Filename
    'End Function
    Public Function searchForThumbFromUrl(ByVal MovieName As String, ByVal format As String, ByVal catagory As String, ByVal style As String) As String
        'Me.pbar1.Visible = True
        'Me.pbar1mv(10)
        Dim lbase As String = "http://mediaicons.org/Services/Find.ashx?"
        Dim lterm As String = "term="
        Dim lformat As String = "format="
        Dim lstyle As String = "style="
        Dim lcategory As String = "catagory="
        Dim lclient As String = "client=MovieInfoPlus"
        Dim lconcat As String = "&"
        Dim Value As Boolean = False
        Dim response As WebResponse = Nothing
        ' Dim stream As Stream = Nothing
        Dim url, Filename As String
        Dim moviename2 As String = Strings.Replace(MovieName, " ", "%20")
        MovieName = Strings.Replace(MovieName, " ", ".")
        If MovieName.ToLower = "con.air" Then
            MovieName = "con_air"
        End If
        Dim processedStyle As String
        If style = "99" Then
            processedStyle = ""
        Else
            processedStyle = lconcat + lstyle + Convert.ToString(style)
        End If

        'Me.pbar1mv(10)

        url = lbase + lterm + """" + moviename2 + """" + lconcat + lformat + Convert.ToString(format) + processedStyle + lconcat + lcategory + Convert.ToString(catagory) + lconcat + lclient
        'End If
        'Me.pbar1mv(10)
        If pclogging Then pclog.WriteLine("Starting download of xml at: " + url)
        Debug.Print("Starting download of xml at: " + url)
        Filename = rconf.xmlfolder + Convert.ToString(MovieName) + "f" + format + "c" + catagory + "s" + style + ".xml"
        Try
            Dim binfilelocal As String = rconf.wgetfolder + "wget.exe"
            Dim filenameuri As String = url
            'Debug.Print(binfilelocal + url + " -P " + """" + folder + """")
            Dim pro1 As System.Diagnostics.Process = New System.Diagnostics.Process()
            pro1.StartInfo.FileName = binfilelocal
            pro1.StartInfo.Arguments = filenameuri + " -O " + """" + Filename + """"
            pro1.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden
            pro1.Start()
            pro1.WaitForExit()
            'dlgDownloadingFile.downloadertxtFileName.Text = url
            'dlgDownloadingFile.whereToSave = Filename
            'dlgDownloadingFile.ShowDialog()
        Catch ex As Exception
            Debug.Print(ex.ToString)
        End Try
        'Try
        '    Dim request As HttpWebRequest = CType(WebRequest.Create(url), HttpWebRequest)
        '    response = request.GetResponse()
        '    Value = SaveBin(response, Filename) 'Save Binary File
        'Catch err As Exception
        '    Dim aa As String = err.ToString()
        '    If pclogging Then pclog.WriteLine("Exception: " + aa)
        'End Try
        Return Filename
    End Function
    Public Shared Function SavePhotoFromUrl2(ByVal url As String, ByVal filename As String, Optional ByVal precacheing As Boolean = False) As String
        If precacheing Then
            'Dim curconf As New configuration
            'curconf.getconfig("config", True)
            'use wget hidden
            Dim binfilelocal As String = rconf.wgetfolder + "wget.exe"
            Dim pro1fa As System.Diagnostics.Process = New System.Diagnostics.Process()
            pro1fa.StartInfo.FileName = binfilelocal
            pro1fa.StartInfo.Arguments = """" + url + """" + " -O " + """" + filename + """"
            pro1fa.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden
            pro1fa.Start()
            'If wait Then pro1fa.WaitForExit()
        Else
            Try
                dlgDownloadingFile.downloadertxtFileName.Text = url
                dlgDownloadingFile.whereToSave = filename
                dlgDownloadingFile.ShowDialog()
            Catch ex As Exception
                Debug.Print(ex.ToString)
            End Try

        End If


        'Try
        '    Dim aWebRequest As WebRequest
        '    ' Call the WebRequest Create method passing in the URL
        '    ' of a graphic on the internet. Assign the result to
        '    ' the aWebRequest variable.
        '    aWebRequest = WebRequest.Create(url.ToLower)
        '    ' Declare a variable of type HttpWebResponse named aHttpWebResponse.
        '    Dim aHttpWebResponse As HttpWebResponse
        '    ' Call the WebRequest GetResponse method.
        '    ' Cast the result as a HttpWebResponse and 
        '    ' assign it to the aHttpWebResponse variable.
        '    aHttpWebResponse = CType(aWebRequest.GetResponse, HttpWebResponse)
        '    ' Declare a variable of type Stream named readStream.
        '    Dim readStream As Stream
        '    ' Call the HttpWebResponse GetResponseStream method.
        '    ' Assign the result to the readStream variable.
        '    readStream = aHttpWebResponse.GetResponseStream
        '    ' Declare a variable of type Image named anImage.
        '    ' Try
        '    Dim anImage As System.Drawing.Image
        '    anImage = New System.Drawing.Bitmap(readStream)
        '    anImage.Save(filename)
        '    'Catch ex As Exception
        '    '   Debug.Print("failed when attempting to save the stream to a bitmap, generally a failure indicates that no image was in the stream and is not fatal")
        '    'End Try
        '    ' Assign anImage to DemoPictureBox.
        '    'Me.DemoPictureBox.Image = anImage
        '    ' Close the HttpWebResponse.
        '    aHttpWebResponse.Close()
        '    ' Close the Stream.
        '    readStream.Close()
        'Catch ex As Exception
        '    filename = "poop"
        '    'Debug.Print(ex.ToString)
        'End Try

        Return filename
    End Function
    Public Shared Function SavePhotoFromUrl(ByVal FileNameSPFU As String, ByVal Url As String) As Boolean
        Dim Value As Boolean = False
        Dim response As WebResponse = Nothing
        Dim stream As Stream = Nothing
        Dim wait As Boolean = True
        'Dim tconf As New configuration
        'tconf = maincollection.rconf
        Dim fnPeices1() As String = Application.ExecutablePath.ToString.Split(CChar("\"))
        Dim parentdirname As String = "" '= fnPeices1(fnPeices1.Length - 1)
        Dim totnum As Integer = fnPeices1.Length - 1
        Dim curcount As Integer = 0
        While curcount < totnum
            parentdirname += fnPeices1(curcount)
            parentdirname += "\"
            curcount += 1
        End While
        If Not Strings.Right(parentdirname, 1) = "\" Then
            parentdirname += "\"
        End If
        Dim rFullPath As String = parentdirname + "3rdparty\wget\wget.exe"
        '
        Try
            'now using wget async embedded
            '            wget(Url, FileNameSPFU, "mediaicon")
            Dim binfilelocal As String = rFullPath 'parentdirname + "3rdparty\wget\wget.exe"
            Dim pro1 As System.Diagnostics.Process = New System.Diagnostics.Process()
            pro1.StartInfo.FileName = binfilelocal
            pro1.StartInfo.Arguments = """" + Url + """" + " -O " + """" + FileNameSPFU + """"
            pro1.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden
            pro1.Start()
            If wait Then pro1.WaitForExit()

            'Dim request As HttpWebRequest = CType(WebRequest.Create(Url), HttpWebRequest)
            'Debug.Print("request set")
            'response = request.GetResponse()
            'Debug.Print("response set")
            'stream = response.GetResponseStream()
            'Debug.Print("stream set")
            'If (Not response.ContentType.ToLower().StartsWith("text/")) Then
            '    Value = SaveBinaryFile(response, FileNameSPFU) 'Save Binary File
            'End If
        Catch err As Exception
            Dim aa As String = err.ToString()
            Debug.Print(aa)
        End Try
        Return Value
    End Function
    Public Sub pbar1m()
        If Me.pbar1.Value < Me.pbar1.Maximum Then
            Me.pbar1.Increment(1)
        Else
            Me.pbar1.Value = 1
        End If
    End Sub
    Public Sub pbar1mv(ByVal count As Integer)
        If Me.pbar1.Value < Me.pbar1.Maximum Then
            Me.pbar1.Increment(count)
        Else
            Me.pbar1.Value = count
        End If
    End Sub
    ' Save Binary File
    Private Shared Function SaveBinaryFile(ByVal response As WebResponse, ByVal FileNameSBF As String) As Boolean
        Dim Value As Boolean = True
        Dim buffer As Byte() = New Byte(5023) {}
        Try
            If File.Exists(FileNameSBF) Then
                File.Delete(FileNameSBF)
            End If
            Dim outStream As Stream = System.IO.File.Create(FileNameSBF)
            Dim inStream As Stream = response.GetResponseStream()
            Dim l As Integer
            Do
                l = inStream.Read(buffer, 0, buffer.Length)
                If l > 0 Then
                    outStream.Write(buffer, 0, l)
                End If
            Loop While l > 0
            outStream.Close()
            inStream.Close()
        Catch
            Value = False
            Debug.Print("SaveBinaryFile failed")
        End Try

        'Try
        '    'Dim picture As Image
        '    Form1.picb1.Image = Image.FromFile(FileNameSBF)

        'Catch ex As Exception

        'End Try
        Return Value
    End Function
    Private Shared Function SaveBin(ByVal response As WebResponse, ByVal FileName As String) As Boolean
        Dim Value As Boolean = True
        Dim buffer As Byte() = New Byte(2055) {}
        'FileName = FileName + Convert.ToString("1")

        Try
            If File.Exists(FileName) Then
                File.Delete(FileName)
            End If
            Dim outStream As Stream = System.IO.File.Create(FileName)
            Dim inStream As Stream = response.GetResponseStream()
            Dim l As Integer
            Do
                l = inStream.Read(buffer, 0, buffer.Length)
                If l > 0 Then
                    outStream.Write(buffer, 0, l)
                End If
            Loop While l > 0
            outStream.Close()
            inStream.Close()
        Catch
            Value = False
        End Try
        Return Value
    End Function
   
    Private Sub cleararray(ByRef carraylist As ArrayList)
        If carraylist.Count = 0 Then
            Exit Sub
        End If
        Dim index As Integer = 0
        Dim count As Integer = carraylist.Count

        'While index <= count
        carraylist.RemoveRange(index, count)
        'End While

    End Sub
    Private Sub tsbMoviesLoadMovies_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsbMoviesLoadMovies.Click
        bwloadfolderdata()

        'readfolderdatafordropdown()
        ' mymovies.Show()

    End Sub
   

   
    Public Sub readfolderdatafordropdown()

        'Exit Sub

        'Dim response As HttpWebResponse = Nothing
        'clear dlist
        cleararray(dlist)
        'clear movies object
        cleararray(movies)

        'clear out dropdown first
        cbox1.DataSource = Nothing
        cbox1.Items.Clear()
        cbox1.ResetText()
        'cbox1.
        Dim curcount As Integer = 0
        For Each listedname In rconf.pclbPaths 'clbPaths.CheckedItems
            Try
                Me.pbar1.Visible = True
                'Me.ReadFolder.Visible = False
                'Dim url As String '= "http://mediaicons.org/GetIcon.ashx?key=3095&format=2&style=0&type=download"
                'Dim FileName, FilePath As String
                'FileName = "c:\images\save.png"
                EnumerateDirectory(listedname.ToString)
                Debug.Print(listedname.ToString)
                Debug.Print(dlist.Count.ToString)
            Catch dung As Exception
                Debug.Print(dung.ToString)
            End Try

        Next

        Dim thelist As ArrayList
        thelist = dlist
        Dim mname As String ', mfxname As String
        Dim prename As String = ""
        For Each name As String In dlist
            'parse just the movie name
            mname = getmnamebyfoldername(name).ToString
            ''''Debug.Print(curcount.ToString + ": " + mname + " :")

            If mname.ToLower = "con air" Then
                MsgBox("Sorry i can't add Con Air to the list, you will have to rename the folder to ConAir for it to work" + vbNewLine + vbNewLine + "Thank Microsoft for that one." + vbNewLine + vbNewLine + vbNewLine + "Details: When i parse out the movie to it's xml file i replace spaces with a period (.)" + vbNewLine + "Windows thinks i am attempting a connection when I attempt to write con. something", MsgBoxStyle.Critical, "Movie Con Air -- You must rename the folder to ConAir")
                'Exit Sub
            Else
                lblCurItem.Text = mname

                Dim newmovie As New movie
                'newmovie.setmoviename(mname)
                'filter code injection here
                newmovie.setmoviename(namefilter(mname))
                'end filter injection
                newmovie.preservedmoviename = mname
                newmovie.setmoviepath(name)
              
                'read nfo if it's there
                readnfo(newmovie)
                newmovie.peditedmoviename = newmovie.pmoviename
                'add movie to array - change this so that we can display them in a different sort order
                movies.Add(newmovie)
                'cbox1.Items.Add(mname)
                ''''Debug.Print(movies.Count.ToString)
                'mymovies.lbMyMovies.Items.Add(mname)
                'mymovies.dgMyMovies.'Item(curcount, 1) = newmovie.pmoviename
                'mymovies.clbMyMovies.Items.Add(mname, True)
                ' mymovies.lvmymovies.Items.Add(mname)
                'cbox1.Items.Add(mname)
                'Me.Refresh()
                'search for the icon which will return the xml results file
                'USE ME TO GET XML 'mfxname = searchForThumbFromUrl(mname)
                'grab the xml
                'mfxname = Strings.Replace(mname2, " ", ".")
                'set the url
                'ReadXMLGetImage(mfxname, mname)
                'ReadXML(mfxname)
                'increment counter
                newmovie = Nothing
                mname = Nothing
            End If
            'Debug.Print(mname)
            'lblCurItem.TextAlign = ContentAlignment.MiddleCenter

            curcount += 1
        Next
        'Finally
        'If Not response Is Nothing Then response.Close()
        'End Try

        Dim dtIDA As New DataTable
        dtIDA.Columns.Add("Path", GetType(System.String))
        dtIDA.Columns.Add("Name")
        dtIDA.Columns.Add("Index")
        'dtIDA.Columns.Add("objMovie")
        Dim cutcmIndex As Integer = 0
        For Each tcmMovie As movie In movies
            dtIDA.LoadDataRow(New Object() {tcmMovie.getmoviepath, tcmMovie.pmoviename, cutcmIndex}, True)
            '''' Debug.Print(tcmMovie.pmoviename + cutcmIndex.ToString)
            cutcmIndex += 1
        Next
        'dtIDA.DefaultView.Sort = "Description"
        dtIDA.DefaultView.Sort = "Name"
        tblofmovies = dtIDA
        'mymovies.lbMyMovies.DataSource = dtIDA.DefaultView
        'mymovies.lbMyMovies.DisplayMember = "Name"
        'mymovies.lbMyMovies.ValueMember = "Index"
        'cbox1.DataSource = dtIDA.DefaultView
        'cbox1.ValueMember = "Index"
        'cbox1.DisplayMember = "Name"
        lbMyMovies.DataSource = dtIDA.DefaultView
        lbMyMovies.ValueMember = "Index"
        lbMyMovies.DisplayMember = "Name"
        'mymovies.dgMyMovies.DataSource = movies
        'mymovies.dgMyMovies.Columns(0).Visible = False
        'mymovies.dgMyMovies.Columns(1).Visible = False
        'mymovies.dgMyMovies.Columns(2).Visible = False
        'mymovies.dgMyMovies.Columns(3).Visible = False
        'mymovies.dgMyMovies.Columns(4).Visible = False
        'mymovies.dgMyMovies.Columns(5).Visible = False
        'mymovies.dgMyMovies.Columns(6).Visible = False
        'Dim colnum As Integer = 8
        'While colnum < mymovies.dgMyMovies.Columns.Count
        '    mymovies.dgMyMovies.Columns(colnum).Visible = False
        '    colnum += 1
        'End While
        'mymovies.dgMyMovies.Refresh()
        'For Each namer In urllist
        '    Debug.Print(Convert.ToString(namer))
        'Next
        lblCurItem.Text = "Folder Read Completed"
        Me.pbar1.Visible = False
        'Me.ReadFolder.Visible = False
        Me.btnShowMovieInfo.Enabled = True
        'Me.btnPrecache.Visible = True
        'readfolderdatafordropdown2()
    End Sub
    Private Sub readnfo(ByRef tempmovie As movie)

        Dim tmpath As String = ""
        If tempmovie.pfilemode Then
            tmpath = addfiletofolder(tempmovie.getmoviepath, removeextension(tempmovie.preservedmoviename) + ".nfo") 'in filemode, we need the preserved name
            If File.Exists(tmpath) Then
                If Not File.Exists(addfiletofolder(tempmovie.getmoviepath, stripstackforfilemode(removeextension(tempmovie.preservedmoviename)) + ".nfo")) Then
                    File.Move(tmpath, addfiletofolder(tempmovie.getmoviepath, stripstackforfilemode(removeextension(tempmovie.preservedmoviename)) + ".nfo"))
                End If
            End If
        Else
            tmpath = addfiletofolder(tempmovie.getmoviepath, tempmovie.pmoviename + ".nfo") 'folder mode, use the moviename after the filters
        End If
        'build 2401 update - check for movie.nfo, if there use it if there the other file is not there, meaning the more specific name is first, always
        If Not File.Exists(tmpath) Then
            If tempmovie.pfilemode Then
                tmpath = addfiletofolder(tempmovie.getmoviepath, stripstackforfilemode(removeextension(tempmovie.preservedmoviename)) + ".nfo") 'in filemode, we need the preserved name

            Else
                If File.Exists(addfiletofolder(tempmovie.getmoviepath, "movie.nfo")) Then
                    tmpath = addfiletofolder(tempmovie.getmoviepath, "movie.nfo")
                End If
            End If
        End If

        'try to load the .nfo file
        Dim nmov As New movieinfoplus.mip.mov.Mov
        Try
            nmov = nmov.getmov(tmpath)
            'if that worked set the flag
            tempmovie.pdatafromnfo = True
            nmov.movtomovie(nmov, tempmovie)
            'nmov.printToString() 'debug.output
        Catch ex As Exception

            'nfo could not be loaded or failed, flag as no data from nfo
            tempmovie.pdatafromnfo = False
            'MsgBox("no nfo found, bypassing movie relink")
        End Try


    End Sub
    'Public Sub readfolderdatafordropdown2()
    '    Dim path As String = rconf.basefolder
    '    'create a temp database
    '    SQLStmt = "DROP TABLE IF EXISTS MovieNav;" & _
    '            "CREATE TABLE MovieNav (" & _
    '            "MovieName VARCHAR(240) NOT NULL," & "CleanedName VARCHAR(240) NOT NULL," & _
    '            "Year VARCHAR(4)," & _
    '            "Path VARCHAR(1000)NOT NULL)"
    '    ExecuteSQLStmt(Path & "movietemp.db3", SQLStmt)

    '    Dim mymovies As New ArrayList

    '    'get all items from dlist (names) or from movies (full info).. use movies
    '    mymovies = movies
    '    For Each varmovie As movie In mymovies
    '        Dim vpname As String = varmovie.preservedmoviename
    '        Dim vcname As String = varmovie.pmoviename
    '        Dim vyear As String = varmovie.pyear.ToString
    '        Dim vpath As String = varmovie.getmoviepath
    '        sqlmask(vpname)
    '        sqlmask(vcname)
    '        sqlmask(vyear)
    '        sqlmask(vpath)
    '        SQLStmt = "INSERT INTO MovieNav (MovieName,CleanedName,Year,Path)  VALUES ('" + vpname + "','" + vcname + "','" + vyear + "','" + vpath + "')"
    '        'gamecount = gamecount + 1
    '        'End If

    '        ExecuteSQLStmt(path & "movietemp.db3", SQLStmt)
    '        'SQLStmt = "Insert into MovieNav("
    '        'varmovie.pmoviename
    '    Next

    '    SQLStmt = "SELECT * FROM MovieNav"
    '    Dim thearraylist As New ArrayList
    '    thearraylist = StreamDataIntoArrayList("movietemp.db3", SQLStmt, 0)
    '    'getSqlDataToThisArrayList(crackarray, SQLStmt, path + "test3.db3")
    '    'unmask the data
    '    For Each item In thearraylist
    '        Debug.Print(item.ToString)
    '    Next
    'End Sub
    Private Sub sqlmask(ByRef data As String)
        Data = Strings.Replace(Data, "'", "char22")
    End Sub
    Private Function sqlunmask(ByRef data As String) As String
        Dim modData As String = Strings.Replace(data, "char22", "'")
        Return modData
    End Function
    'Private Sub unrarpxmls()
    '    Dim rar As New Chilkat.Rar()
    '    Dim success As Boolean
    '    success = rar.Open(My.Resources.pxmlpack.ToString)
    '    If (success <> True) Then
    '        MsgBox(rar.LastErrorText)
    '        Exit Sub
    '    End If
    '    success = rar.Unrar("xmlfolderposters")
    '    If (success <> True) Then
    '        MsgBox(rar.LastErrorText)
    '    Else
    '        MsgBox("Success.")
    '    End If
    'End Sub
    Private Sub mainform_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
        Me.Text = "Media Info Plus " + My.Application.Info.Version.Major.ToString + "." + My.Application.Info.Version.Minor.ToString + "." + My.Application.Info.Version.Build.ToString + "." + My.Application.Info.Version.Revision.ToString
        'Dim pro1 As System.Diagnostics.Process = New System.Diagnostics.Process()
        'pro1.StartInfo.FileName = "regsvr32"
        'pro1.StartInfo.Arguments = "/c " & """" & getparentdirectory(Application.ExecutablePath) + "3rdparty\ImageMagick\ImageMagickObject.dll" & """"
        'pro1.Start()
        'pro1.WaitForExit()
        kscLeftNavMain.Panel2Collapsed = True
        kscRightBottomPart.Panel2Collapsed = True

        'Dim loadconfig As New configuration
        If Not Directory.Exists(rconf.basefolder) Then Directory.CreateDirectory(rconf.basefolder)
        If Not File.Exists(rconf.basefolder + "config.xml") Then
            Me.Hide()
            'SplashScreen1.Hide()
            GettingStartedWizard.ShowDialog()
        End If
        rconf = rconf.getconfig()
        tso_auto_addtoablumonnewart.Checked = rconf.ptso_auto_addtoablumonnewart
        setlookandfeel()
        'Try
        '    Debug.Print("getting all movie data")
        '    parseimdb.sqlGetAllMovies(allmovieslist)
        'Catch ex As Exception
        '    Debug.Print("couldnt get all the movies out of the sql database")
        'End Try
        '        TabControl2.SelectTab(0)
        Try
            'turn off debug tab
            'If File.Exists(rconf.basefolder + "debugtvshows.txt") Or File.Exists(rconf.basefolder + "debugtvshows") Then
            '    kbtnDebugtvgo.Enabled = True
            '    kbtnDebugtvgo.Visible = True
            'End If

            If Not File.Exists(rconf.basefolder + "debugmode") Then
                tcPIB.Controls.Remove(tcPIB.TabPages(4))
                btnCreateTestFromLogfile.Enabled = False
                btnCreateTestFromLogfile.Visible = False

                'klNumTvShows.Enabled = False
                'krbCMTV.Enabled = False
            End If

            'turn off fanart tab
            'tc1.Controls.Remove(tc1.TabPages(6))
            'unrarpxmls() handled by initial config now
            If Not Directory.Exists(rconf.basefolder) Then Directory.CreateDirectory(rconf.basefolder)
            If Not Directory.Exists(rconf.thirdpartyfolder) Then Directory.CreateDirectory(rconf.thirdpartyfolder)
            If Not Directory.Exists(rconf.xmlmainfolder) Then Directory.CreateDirectory(rconf.xmlmainfolder)
            If Not Directory.Exists(rconf.cachefolder) Then Directory.CreateDirectory(rconf.cachefolder)
            If Not Directory.Exists(rconf.tempfolder) Then Directory.CreateDirectory(rconf.tempfolder)
            If Not Directory.Exists(rconf.xmlfolder) Then Directory.CreateDirectory(rconf.xmlfolder)
            If Not Directory.Exists(rconf.xmlfolderposters) Then Directory.CreateDirectory(rconf.xmlfolderposters)
            If Not Directory.Exists(rconf.xmlfolderimdb) Then Directory.CreateDirectory(rconf.xmlfolderimdb)
            If Not Directory.Exists(rconf.iconcachefolder) Then Directory.CreateDirectory(rconf.iconcachefolder)
            If Not Directory.Exists(rconf.postercachefolder) Then Directory.CreateDirectory(rconf.postercachefolder)
            If Not Directory.Exists(rconf.imdbcachefolder) Then Directory.CreateDirectory(rconf.imdbcachefolder)
            If Not Directory.Exists(rconf.listsfolder) Then Directory.CreateDirectory(rconf.listsfolder)
            If Not Directory.Exists(rconf.listsTempfolder) Then Directory.CreateDirectory(rconf.listsTempfolder)
            If Not Directory.Exists(rconf.sevenzipfolder) Then Directory.CreateDirectory(rconf.sevenzipfolder)
            If Not Directory.Exists(rconf.wgetfolder) Then Directory.CreateDirectory(rconf.wgetfolder)
            If Not Directory.Exists(rconf.dirUnRAR) Then Directory.CreateDirectory(rconf.dirUnRAR)
            If Not Directory.Exists(rconf.sourcePagefolder) Then Directory.CreateDirectory(rconf.sourcePagefolder)
            If Not Directory.Exists(rconf.examplefolder) Then Directory.CreateDirectory(rconf.examplefolder)
            If Not Directory.Exists(rconf.xmlfoldertmdbbackdrops) Then Directory.CreateDirectory(rconf.xmlfoldertmdbbackdrops)
            If Not Directory.Exists(rconf.tmdbcachefolder) Then Directory.CreateDirectory(rconf.tmdbcachefolder)
            If Not Directory.Exists(rconf.tmdbpostercachefolder) Then Directory.CreateDirectory(rconf.tmdbpostercachefolder)
            If Not Directory.Exists(rconf.tmdbfanartcachefolder) Then Directory.CreateDirectory(rconf.tmdbfanartcachefolder)
            If Not Directory.Exists(rconf.customimagesfolder) Then Directory.CreateDirectory(rconf.customimagesfolder)
            If Not Directory.Exists(rconf.customimagesicons) Then Directory.CreateDirectory(rconf.customimagesicons)
            If Not Directory.Exists(rconf.customimagesfanart) Then Directory.CreateDirectory(rconf.customimagesfanart)
            If Not Directory.Exists(rconf.resourcefolder) Then Directory.CreateDirectory(rconf.resourcefolder)
            If Not Directory.Exists(rconf.tvdbpostercachefolder) Then Directory.CreateDirectory(rconf.tvdbpostercachefolder)
            If Not Directory.Exists(rconf.tvdbbannerscachefolder) Then Directory.CreateDirectory(rconf.tvdbbannerscachefolder)
            If Not Directory.Exists(rconf.tvdbfanartcachefolder) Then Directory.CreateDirectory(rconf.tvdbfanartcachefolder)
            If Not Directory.Exists(rconf.tvdbtempfolder) Then Directory.CreateDirectory(rconf.tvdbtempfolder)
            If Not Directory.Exists(rconf.xmlfoldertmdbv2) Then Directory.CreateDirectory(rconf.xmlfoldertmdbv2)
            If Not Directory.Exists(rconf.tvdbtempfolder + "everything") Then Directory.CreateDirectory(rconf.tvdbtempfolder + "everything")
            If Not Directory.Exists(rconf.nicecovercachefolder) Then Directory.CreateDirectory(rconf.nicecovercachefolder)
            If Not Directory.Exists(rconf.nicecovertempfolder) Then Directory.CreateDirectory(rconf.nicecovertempfolder)
            If Not Directory.Exists(rconf.nicecoverxmlcachefolderlocation) Then Directory.CreateDirectory(rconf.nicecoverxmlcachefolderlocation)
            If Not Directory.Exists(rconf.calgorydotnetfolder) Then Directory.CreateDirectory(rconf.calgorydotnetfolder)
            If Not Directory.Exists(rconf.xmlfolder_fcdn) Then Directory.CreateDirectory(rconf.xmlfolder_fcdn)
            If Not Directory.Exists(rconf.customimagesfolder & "music\fanart\") Then Directory.CreateDirectory(rconf.customimagesfolder & "music\fanart\")
            Dim i As Integer = 0
            Dim i2 As Integer = 0
            While i < 16
                Dim curfoldbase As String = rconf.cachefolder + "fcdn" + "\" + i.ToString + "\"
                If Not Directory.Exists(curfoldbase) Then Directory.CreateDirectory(curfoldbase)
                While i2 < 16
                    Dim cursubbase As String = rconf.cachefolder + "fcdn" + "\" + i.ToString + "\" + i2.ToString + "\"
                    If Not Directory.Exists(cursubbase) Then Directory.CreateDirectory(cursubbase)
                    i2 += 1
                End While
                i2 = 0
                i += 1
            End While
            'If Not Directory.Exists(rconf.
            'add music folder checks
            'asdf()
            'Me.pb1.ImageLocation = "http://mediaicons.org/Services/GetIcon.ashx?key=3095&format=2&style=0&type=med"
            'load config into gui
            'setactiveconf(rconf)
        Catch ex As Exception
            Debug.Print(ex.ToString)
        End Try

        'Try
        '    cmmode = "initial"
        ' setupRootTabs()
        'Catch
        'End Try
        'hide tv in movie mode
        setMode()

    End Sub
    Private Sub setlookandfeel()
        Try
            setguicolor(rconf.guicolor)
        Catch ex As Exception
            setguicolor("bling")
        End Try

        'If Not toolSparkle.Checked Then
        'kManager.GlobalPaletteMode = PaletteModeManager.SparkleBlue
        '    'toolSparkle.Checked = menuSparkle.Checked = True
        '    'toolOffice2007Blue.Checked = menuOffice2007Blue.Checked = False
        '    'toolOffice2007Silver.Checked = menuOffice2007Silver.Checked = False
        '    'toolOffice2007Black.Checked = menuOffice2007Black.Checked = False
        '    'toolOffice2003.Checked = menuOffice2003.Checked = False
        '    'toolSystem.Checked = menuSystem.Checked = False
        'End If
    End Sub
   
    Private Sub btnShowMovieInfo_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnShowMovieInfo.Click
        pcmaxDisplayedIcons = rconf.pcbMaxIconsToDisplay
        pcMaxIconPerStyle = rconf.pcbMaxIconPerStyle
        'Me.Refresh()
        If lbMyMovies.Items.Count = 0 Then
            Debug.Print("There are no items in the list to process, running get folders")

            MessageBox.Show("No movies are currently in the list.") ' I will now attempt to load your movie list, there will be no indication of this process until it's completed.")
            'readfolderdatafordropdown()
            'bwloadfolderdata()
            Exit Sub
        End If
        If lbMyMovies.SelectedIndex = -1 Then
            Try
                lbMyMovies.SelectedIndex = 0
            Catch ex As Exception
                Exit Sub
            End Try
        End If
        processdropdownitems()
        fwdbackbuttons()
    End Sub
    Private Sub btnProcessAll_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        If MsgBox("Note: This will recreate all movie nfo files, overwriting the exsisting ones. Are you sure you want to continue?", MsgBoxStyle.OkCancel, "Confirm Preload of Icons") = MsgBoxResult.Cancel Then
            Exit Sub
        End If
        ''Me.Refresh()
        ''save current conf to file
        ''saveconfig to bku file configbku.xml, this will be loaded when done
        'saveconfigBku()

        ''read the imdb info only configuration 'no icons, no fanart, noposters, overwrite on, save nfo on, max icons 1, max display 1, workonline on, dlformat to 1 so that no transparency is done
        'Dim ic As New configuration
        'ic = ic.getconfig("nfoupdate")

        ''use current filters and paths
        'ic.pclbPaths = rconf.pclbPaths
        'ic.pcbFilter1080p = rconf.pcbFilter1080p
        'ic.pcbFilter720p = rconf.pcbFilter720p
        'ic.pcbFilterAvi = rconf.pcbFilterAvi
        'ic.pcbFilterBluRay = rconf.pcbFilterBluRay
        'ic.pcbFilterCustom1 = rconf.pcbFilterCustom1
        'ic.pcbFilterCustom2 = rconf.pcbFilterCustom2
        'ic.pcbFilterCustom3 = rconf.pcbFilterCustom3
        'ic.pcbFilterCustom4 = rconf.pcbFilterCustom4
        'ic.pcbFilterCustom5 = rconf.pcbFilterCustom5
        'ic.pcbFilterDivx = rconf.pcbFilterDivx
        'ic.pcbFilterDVD = rconf.pcbFilterDVD
        'ic.pcbFilterH264 = rconf.pcbFilterH264
        'ic.pcbFilterHidef = rconf.pcbFilterHidef
        'ic.pcbFilterLq = rconf.pcbFilterLq
        'ic.pcbFilterXvid = rconf.pcbFilterXvid
        ''set config to imdb only config (ic)
        'setactiveconf(ic)
        ''set messageprompts boolean to false so no prompts are done
        'messageprompts = False
        'Me.showposter = False

        'for dev or major update use remove all cached xmls
        'cleanoutfolder(rconf.imdbcachefolder)
        'leave nfo's intact (faster to process, only using imdb from them since overwrite is on

        'run
        If lbMyMovies.Items.Count = 0 Then
            MsgBox("There are no items in the list to process")
            Exit Sub
        End If

        Dim total As Integer = lbMyMovies.Items.Count
        Dim cou As Integer = 0
        If lbMyMovies.SelectedIndex = -1 Then
            Try
                lbMyMovies.SelectedIndex = 0
            Catch ex As Exception

            End Try

        End If
        While cou < total
            processdropdownsnfoupdates()
            cou += 1
            If Not cou >= total Then
                lbMyMovies.SelectedIndex = cou
            End If
        End While
        'processdropdownitems()
        ''set configuration back and turn prompts back on
        ''clear paths from cur conf
        'Try
        '    Dim tcounterforpath As Integer = 0
        '    Dim tcountofallpaths As Integer = rconf.pclbPaths.Count
        '    While tcounterforpath < tcountofallpaths
        '        rconf.pclbPaths.RemoveAt(tcounterforpath)
        '        tcounterforpath += 1
        '    End While
        'Catch ex As Exception
        '    Debug.Print("unable to remove all paths in current list when setting active config" + ex.ToString)
        'End Try
        ''set config to imdb only config (ic)
        'Dim bkconf As New configuration
        'bkconf = bkconf.getconfig("config-backup")
        'setactiveconf(bkconf)
        'MsgBox("Done Updating Nfo files")
        'messageprompts = True
        'Me.showposter = True
        'fwdbackbuttons()
    End Sub
    Private Sub tsbMoviesAutoPilot_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsbMoviesAutoPilot.Click
        autopilotdialog.ShowDialog()
        'Dim total As Integer = cbox1.Items.Count - 1
        'Dim cou As Integer = 0
        'If cbox1.SelectedIndex = -1 Then
        '    cbox1.SelectedIndex = 0
        'End If
        'While cou <= total
        '    'testing first poster, then boxshot (f1s3) everything on
        '    autopilot("f1s0", "f1s3", True, True, True, True, True)
        '    cou += 1
        '    If Not cou >= total Then
        '        cbox1.SelectedIndex = cou
        '    End If
        'End While

    End Sub
    Public Sub autopilotbw(ByVal primary As String, ByVal secondary As String, ByVal posterTru As Boolean, ByVal fanartTru As Boolean, ByVal tbnTru As Boolean, ByVal nfoTru As Boolean, ByVal overwritenfoTru As Boolean, ByVal overwritefolderjpg As Boolean, ByVal mediaonly As Boolean, ByVal updatestudiofromimdb As Boolean)
        gv_bwap_primary = primary
        gv_bwap_secondary = secondary
        gv_bwap_posterTru = posterTru
        gv_bwap_fanartTru = fanartTru
        gv_bwap_tbnTru = tbnTru
        gv_bwap_nfoTru = nfoTru
        gv_bwap_overwritenfoTru = overwritenfoTru
        gv_bwap_overwritefolderjpg = overwritefolderjpg
        gv_bwap_mediaonly = mediaonly
        gv_bwap_updatestudiofromimdb = updatestudiofromimdb
        If lbMyMovies.SelectedIndex = -1 Then
            lbMyMovies.SelectedIndex = 0
        End If
        autopilotdialog.Dispose()
        Me.Refresh()
        bwAutopilot = New System.ComponentModel.BackgroundWorker
        bwAutopilot.WorkerReportsProgress = True
        bwAutopilot.WorkerSupportsCancellation = True
        bwAutopilot.RunWorkerAsync()
    End Sub
    Public Sub autopilotfromform(ByVal primary As String, ByVal secondary As String, ByVal posterTru As Boolean, ByVal fanartTru As Boolean, ByVal tbnTru As Boolean, ByVal nfoTru As Boolean, ByVal overwritenfoTru As Boolean, ByVal overwritefolderjpg As Boolean, ByVal mediaonly As Boolean, ByRef leavestudioalonedude As Boolean)
        'autopilotdialog.Dispose()
        'Me.Show()
        'tcMain.SelectTab(0) ' show current icon page
        'lbMyMovies.Enabled = False 'disable manual drop down mods
        'lbMyMovies.Visible = False
        Dim total As Integer = lbMyMovies.Items.Count
        Dim cou As Integer = 0
        'If lbMyMovies.SelectedIndex = -1 Then
        '    lbMyMovies.SelectedIndex = 0
        'End If
        autopilotrunning = True

        While cou <= total
            'testing first poster, then boxshot (f1s3) everything on
            autopilot(primary, secondary, posterTru, fanartTru, tbnTru, nfoTru, overwritenfoTru, overwritefolderjpg, mediaonly, leavestudioalonedude)
            cou += 1
            If Not cou >= total Then
                lbMyMovies.SelectedIndex = cou
            End If
        End While
        autopilotrunning = False

        'reload all movie data
        bwloadfolderdata_TDM()


    End Sub

    Private Sub testofdbsearch()
        Dim oWeb As New System.Net.WebClient()
        oWeb.Headers.Add("Content-Type", "application/x-www-form-urlencoded")
        Dim bytArguments As Byte() = System.Text.Encoding.ASCII.GetBytes("&SText=tt0443649&Kat=IMDb&page=suchergebnis&sourceid=mozilla-search")
        Dim bytRetData As Byte() = oWeb.UploadData("http://www.ofdb.de/film/view.php?page=suchergebnis", "POST", bytArguments)
        Debug.Write(System.Text.Encoding.ASCII.GetString(bytRetData))
    End Sub
    Private Sub autopilotmediaonly(ByVal primary As String, ByVal secondary As String, ByVal posterTru As Boolean, ByVal fanartTru As Boolean, ByVal tbnTru As Boolean, ByVal nfoTru As Boolean, ByVal overwritenfoTru As Boolean, ByVal replaceexsistingfolderimage As Boolean, ByVal mediaonly As Boolean, ByVal updatestudiofromimdb As Boolean)
        messageprompts = True
        If mediaonly Then messageprompts = False
        If messageprompts Then resetanddisableimages()
        Me.pbar1.Visible = True
        pbar1.Value = pbar1.Maximum
        lblPbar.Visible = True

        Dim cursettingmaxDisplayedIcons As Integer = rconf.pcbMaxIconsToDisplay
        rconf.pcbMaxIconsToDisplay = 0 'set it to 1
        Dim cursettingOverwrite As Boolean = rconf.pcbOverwriteNFO
        rconf.pcbOverwriteNFO = overwritenfoTru

        Dim currentmovie As movie = CType(movies(CInt(lbMyMovies.SelectedValue)), movie)
        If currentmovie.pfilemode = True Then
            moviemode = "file"
            If Not File.Exists(addfiletofolder(currentmovie.getmoviepath, currentmovie.preservedmoviename)) Then
                'MsgBox ("File is no longer at this location, please rescan your movies by clicking Load Movies")
                Exit Sub
            End If
        Else
            moviemode = "folder"
        End If
        Dim cmpath As String = currentmovie.getmoviepath
        If Not Directory.Exists(cmpath) Then Exit Sub
        Dim dname As String
        dname = currentmovie.getmoviename
        lblPbar.Text = "WORKING ON: " + dname
        If messageprompts Then Me.Refresh()
        If mediaonly Then
            Debug.Print(currentmovie.pmoviename)
            If updatestudiofromimdb Then
                Try
                    Dim curimdb As New IMDB
                    Dim tempmov As New movie
                    tempmov.pimdbnumber = currentmovie.pimdbnumber
                    'clear out the cached data (this will slow things down)
                    If File.Exists(rconf.imdbcachefolder + currentmovie.pimdbnumber + ".xml") Then
                        Try
                            File.SetAttributes(rconf.imdbcachefolder + currentmovie.pimdbnumber + ".xml", FileAttributes.Normal)
                        Catch ex As Exception

                        End Try
                        Try
                            File.Delete(rconf.imdbcachefolder + currentmovie.pimdbnumber + ".xml")
                        Catch ex As Exception

                        End Try
                    End If
                    If Directory.Exists(rconf.tempfolder + currentmovie.pimdbnumber) Then
                        Try
                            '\fullcredits\fullcredits
                            File.SetAttributes(rconf.tempfolder + currentmovie.pimdbnumber + "\fullcredits\fullcredits", FileAttributes.Normal)
                            File.Delete(rconf.tempfolder + currentmovie.pimdbnumber + "\fullcredits\fullcredits")
                            Directory.Delete(rconf.tempfolder + currentmovie.pimdbnumber + "\fullcredits")
                            File.SetAttributes(rconf.tempfolder + currentmovie.pimdbnumber + "\plotsummary\plotsummary", FileAttributes.Normal)
                            File.Delete(rconf.tempfolder + currentmovie.pimdbnumber + "\plotsummary\plotsummary")
                            Directory.Delete(rconf.tempfolder + currentmovie.pimdbnumber + "\plotsummary")
                            File.SetAttributes(rconf.tempfolder + currentmovie.pimdbnumber + "\index.html", FileAttributes.Normal)
                            File.Delete(rconf.tempfolder + currentmovie.pimdbnumber + "\index.html")
                        Catch ex As Exception
                            MsgBox(ex.ToString)
                        End Try
                        Try
                            Directory.Delete(rconf.tempfolder + currentmovie.pimdbnumber)
                        Catch ex As Exception
                            'MsgBox("Unable to remove imdb temporary data at: " & rconf.tempfolder & currentmovie.pimdbnumber & vbNewLine & vbNewLine & ex.ToString)
                        End Try
                    End If


                    If Not File.Exists(maincollection.rconf.imdbcachefolder + "/" + currentmovie.pimdbnumber + ".xml") Then
                        '' getimdbdata(tmovie)
                        Dim imdbinfo As New IMDB
                        Dim imdbidtemp As String = tempmov.getimdbid
                        If imdbidtemp = "" Then
                            Debug.Print("NO IMDBID, UNABLE TO SAVE NFO FILE")
                        Else
                            imdbinfo = maincollection.imdbparse(imdbidtemp)
                            imdbinfo.writeIMDBXML(imdbinfo, tempmov, maincollection.rconf.imdbcachefolder, True)
                        End If
                    End If
                    curimdb.readIMDBXML(tempmov, rconf.imdbcachefolder)
                    currentmovie.pstudio = tempmov.pstudio
                    currentmovie.pstudioreal = tempmov.pstudio
                    currentmovie.pcredits = tempmov.pcredits
                    'If rconf.pcbmovie_use_certification_for_mpaa Then
                    '    currentmovie.pmpaa = tempmov.certification
                    'Else
                    '    currentmovie.pmpaa = tempmov.pmpaa
                    'End If
                Catch ex As Exception
                    MsgBox("Couldn't readup cache for movie: " & ex.ToString)
                End Try
            End If


            Dim MI As New MediaInfo
            MI.getdata(currentmovie, moviemode)
            If rconf.pcbGeneralSupportSkinBasedFlagging Then
                If updatestudiofromimdb Then
                    currentmovie.pstudio = currentmovie.pstudioreal & currentmovie.fileinfo.toTagData(currentmovie.fileinfo)
                Else
                    currentmovie.pstudioreal = currentmovie.pstudio
                    currentmovie.pstudio = currentmovie.pstudio & currentmovie.fileinfo.toTagData(currentmovie.fileinfo)
                End If
            End If
            'Debug.Print(currentmovie.fileinfo.Video.Height.ToString)
            Debug.Print("Update ran for media information, doesn't mean it found something, just means that it ran. ") 'DATED MEDIA INFO IN .nfo FILE")
            If Not currentmovie.pimdbnumber = Nothing Then currentmovie.saveimdbinfomanual(currentmovie, rconf.pcbCreateMovieNFO, rconf.pcbcreatemovienamedotnfo)
            'If currentmovie.pstudioreal Is Nothing Or currentmovie.pstudioreal Is "" Then
            '    'see if pstudio has data
            '    If Not currentmovie.pstudio = "" Then
            '        If Not currentmovie.pstudio.Contains("/") Then
            '            currentmovie.pstudioreal = currentmovie.pstudio
            '            currentmovie.pstudio = currentmovie.pstudioreal & currentmovie.fileinfo.toTagData(currentmovie.fileinfo)
            '        End If
            '    End If
            'End If
        End If
    End Sub
    Private Sub autopilot(ByVal primary As String, ByVal secondary As String, ByVal posterTru As Boolean, ByVal fanartTru As Boolean, ByVal tbnTru As Boolean, ByVal nfoTru As Boolean, ByVal overwritenfoTru As Boolean, ByVal replaceexsistingfolderimage As Boolean, ByVal mediaonly As Boolean, ByVal updatestudiofromimdb As Boolean)
        messageprompts = True
        If mediaonly Then messageprompts = False
        If messageprompts Then resetanddisableimages()
        Me.pbar1.Visible = True
        pbar1.Value = pbar1.Maximum
        lblPbar.Visible = True

        Dim cursettingmaxDisplayedIcons As Integer = rconf.pcbMaxIconsToDisplay
        rconf.pcbMaxIconsToDisplay = 0 'set it to 1
        Dim cursettingOverwrite As Boolean = rconf.pcbOverwriteNFO
        rconf.pcbOverwriteNFO = overwritenfoTru

        currentmovie = CType(movies(CInt(lbMyMovies.SelectedValue)), movie)
        If currentmovie.pfilemode = True Then
            moviemode = "file"
            If Not File.Exists(addfiletofolder(currentmovie.getmoviepath, currentmovie.preservedmoviename)) Then
                'MsgBox ("File is no longer at this location, please rescan your movies by clicking Load Movies")
                Exit Sub
            End If
        Else
            moviemode = "folder"
        End If
        Dim cmpath As String = currentmovie.getmoviepath
        If Not Directory.Exists(cmpath) Then Exit Sub
        Dim dname As String
        dname = currentmovie.getmoviename
        lblPbar.Text = "WORKING ON: " + dname
        If messageprompts Then Me.Refresh()

        pbCurIconUsed.Hide()
        pbCurIconUsed2.Hide()


        Dim selectedName As String = currentmovie.getmoviename
        'tbnewname.Text = selectedName

        ''you must always set the lblCurMovieFolder, it's used everywhere
        ' lblCurMovieFolder.Text = currentmovie.getmoviepath
        Dim selectedNameXMLfile As String
        selectedNameXMLfile = Strings.Replace(selectedName, " ", ".")
        currentmovie.setthumbxml(rconf.xmlfolder + selectedNameXMLfile + ".xml")
        If Not currentmovie.pdatafromnfo Then checknfodata(currentmovie, dname, rbem.Checked)


        'get fanart
        If fanartTru Then
            If messageprompts Then lblPbar.Text = " -- Fanart -- "
            If messageprompts Then Me.Refresh()
            'try local first
            Dim haslocalfanart As Boolean = False
            If FileExists(cmpath + "\" + dname + "-fanart.jpg") Or File.Exists(cmpath + "\fanart.jpg") Or File.Exists(cmpath + "\fanart.png") Then
                Debug.Print("Fanart file already exists: ") ' + cmpath + "\" + dname + "-fanart.jpg")
                haslocalfanart = True
            Else
                If messageprompts Then lblPbar.Text = " -- Getting Fanart for " + dname + "-- "
                If messageprompts Then Me.Refresh()

                If rbem.Checked = True Then 'working online 
                    If currentmovie.pimdbnumber = "" Then
                        Debug.Print("No Imdb id in movie object currentmovie, no attempt made to download - Fanart ")
                    Else
                        getfanart(currentmovie, True, True)
                        If Not pbfatmdb1.ImageLocation = "" Then
                            savecfa(pbfatmdb1)
                        End If
                    End If
                End If
            End If
        End If



        'display movie name and information in gui
        'read up .nfo file
        If messageprompts Or mediaonly Then lblPbar.Text = " Processing : " + dname
        If messageprompts Or mediaonly Then Me.Refresh()
        If File.Exists(rconf.imdbcachefolder + currentmovie.pimdbnumber + ".xml") And Not currentmovie.pdatafromnfo Then 'currentmovie.gecurrentmoviepath + "\" + currentmovie.gecurrentmoviename + ".nfo") Then
            Dim timdb As New IMDB
            timdb.readIMDBXML(currentmovie, rconf.imdbcachefolder)
        Else
            Debug.Print("display movie name and info - no movie nfo file found")
        End If

        'save info if true, we are always pulling it since we need the data for other areas
        Dim mediapullTru As Boolean = True
        If nfoTru Then
            'imdbinfo.writeIMDBXML(imdbinfo, currentmovie)
            If mediapullTru Then
                Dim MI As New MediaInfo
                MI.getdata(currentmovie, moviemode)
                'Debug.Print(currentmovie.fileinfo.Video.Height.ToString)
                Debug.Print("UPDATED MEDIA INFO IN .nfo FILE")
            End If
            If Not currentmovie.pimdbnumber = Nothing Then currentmovie.saveimdbinfomanual(currentmovie, rconf.pcbCreateMovieNFO, rconf.pcbcreatemovienamedotnfo)
        End If

        If mediaonly Then
            Debug.Print(currentmovie.pmoviename)
            If updatestudiofromimdb Then
                Try
                    Dim curimdb As New IMDB
                    Dim tempmov As New movie
                    tempmov.pimdbnumber = currentmovie.pimdbnumber
                    'clear out the cached data (this will slow things down)
                    If File.Exists(rconf.imdbcachefolder + currentmovie.pimdbnumber + ".xml") Then
                        Try
                            File.SetAttributes(rconf.imdbcachefolder + currentmovie.pimdbnumber + ".xml", FileAttributes.Normal)
                        Catch ex As Exception

                        End Try
                        Try
                            File.Delete(rconf.imdbcachefolder + currentmovie.pimdbnumber + ".xml")
                        Catch ex As Exception

                        End Try
                    End If
                    ''\fullcredits\fullcredits
                    'If Directory.Exists(rconf.tempfolder + currentmovie.pimdbnumber + "\fullcredits") Then
                    '    If File.Exists(rconf.tempfolder + currentmovie.pimdbnumber + "\fullcredits\fullcredits") Then
                    '        File.SetAttributes(rconf.tempfolder + currentmovie.pimdbnumber + "\fullcredits\fullcredits", FileAttributes.Normal)
                    '        File.Delete(rconf.tempfolder + currentmovie.pimdbnumber + "\fullcredits\fullcredits")
                    '    End If
                    '    Directory.Delete(rconf.tempfolder + currentmovie.pimdbnumber + "\fullcredits")
                    'End If
                    'If Directory.Exists(rconf.tempfolder + currentmovie.pimdbnumber + "\plotsummary") Then
                    '    If File.Exists(rconf.tempfolder + currentmovie.pimdbnumber + "\plotsummary\plotsummary") Then
                    '        File.SetAttributes(rconf.tempfolder + currentmovie.pimdbnumber + "\plotsummary\plotsummary", FileAttributes.Normal)
                    '        File.Delete(rconf.tempfolder + currentmovie.pimdbnumber + "\plotsummary\plotsummary")
                    '    End If
                    '    Directory.Delete(rconf.tempfolder + currentmovie.pimdbnumber + "\plotsummary")
                    'End If
                    'If File.Exists(rconf.tempfolder + currentmovie.pimdbnumber + "\index.html") Then
                    '    File.SetAttributes(rconf.tempfolder + currentmovie.pimdbnumber + "\index.html", FileAttributes.Normal)
                    '    File.Delete(rconf.tempfolder + currentmovie.pimdbnumber + "\index.html")
                    'End If


                    If Not File.Exists(maincollection.rconf.imdbcachefolder + "/" + currentmovie.pimdbnumber + ".xml") Then
                        '' getimdbdata(tmovie)
                        Dim imdbinfo As New IMDB
                        Dim imdbidtemp As String = tempmov.getimdbid
                        If imdbidtemp = "" Then
                            Debug.Print("NO IMDBID, UNABLE TO SAVE NFO FILE")
                        Else
                            imdbinfo = maincollection.imdbparse(imdbidtemp)
                            imdbinfo.writeIMDBXML(imdbinfo, tempmov, maincollection.rconf.imdbcachefolder, True)
                        End If
                    End If
                    curimdb.readIMDBXML(tempmov, rconf.imdbcachefolder)
                    currentmovie.pstudio = tempmov.pstudio
                    currentmovie.pstudioreal = tempmov.pstudio
                    currentmovie.pcredits = tempmov.pcredits
                    'If rconf.pcbmovie_use_certification_for_mpaa Then
                    '    currentmovie.pmpaa = tempmov.certification
                    'Else
                    '    currentmovie.pmpaa = tempmov.pmpaa
                    'End If
                Catch ex As Exception
                    MsgBox("Couldn't readup cache for movie: " & ex.ToString)
                End Try
            End If


            Dim MI As New MediaInfo
            MI.getdata(currentmovie, moviemode)
            If rconf.pcbGeneralSupportSkinBasedFlagging Then
                If updatestudiofromimdb Then
                    currentmovie.pstudio = currentmovie.pstudioreal & currentmovie.fileinfo.toTagData(currentmovie.fileinfo)
                Else
                    currentmovie.pstudioreal = currentmovie.pstudio
                    currentmovie.pstudio = currentmovie.pstudio & currentmovie.fileinfo.toTagData(currentmovie.fileinfo)
                End If
            End If
            'Debug.Print(currentmovie.fileinfo.Video.Height.ToString)
            Debug.Print("Update ran for media information, doesn't mean it found something, just means that it ran. ") 'DATED MEDIA INFO IN .nfo FILE")
            If Not currentmovie.pimdbnumber = Nothing Then currentmovie.saveimdbinfomanual(currentmovie, rconf.pcbCreateMovieNFO, rconf.pcbcreatemovienamedotnfo)
            'If currentmovie.pstudioreal Is Nothing Or currentmovie.pstudioreal Is "" Then
            '    'see if pstudio has data
            '    If Not currentmovie.pstudio = "" Then
            '        If Not currentmovie.pstudio.Contains("/") Then
            '            currentmovie.pstudioreal = currentmovie.pstudio
            '            currentmovie.pstudio = currentmovie.pstudioreal & currentmovie.fileinfo.toTagData(currentmovie.fileinfo)
            '        End If
            '    End If
            'End If
        End If

        'check tmdbid number
        'check tmdbid
        checktmdbid(currentmovie)

        'display imdb info
        If Not mediaonly Then
            gbDisplay.Parent.Text = currentmovie.getmoviename
            Me.tbMovieName.Text = currentmovie.getmoviename
            Me.tbMovieNameE.Text = currentmovie.getmoviename
            Me.tbCredits.Text = currentmovie.pcredits
            Me.tbDirector.Text = currentmovie.pdirector
            Me.tbGenre.Text = currentmovie.pgenre
            Me.tbIMDBID.Text = currentmovie.pimdbnumber
            Me.tbMpaa.Text = currentmovie.pmpaa
            Me.rtbPlotOutline.Text = currentmovie.pplotoutline
            Me.rtbPlot.Text = currentmovie.pplot
            Me.tbRating.Text = currentmovie.prating
            Me.tbOriginalTitle.Text = currentmovie.poriginaltitle
            Me.tbRuntime.Text = currentmovie.pruntime
            Me.rtbTagline.Text = currentmovie.ptagline
            Me.tbVotes.Text = currentmovie.pvotes
            Me.tbStudio.Text = currentmovie.pstudio 'currentmovie.ptitle
            Me.tbyear.Text = currentmovie.pyear.ToString
            Me.tbTop250.Text = currentmovie.ptop250
            Me.tbTrailer.Text = currentmovie.ptrailer
            Me.tcMain.TabPages("tpcm").Refresh()

            'get Movie Poster
            'check to see if posterTru was set
            If posterTru Then
                Dim impaname As String = cleanname(currentmovie.getmoviename)
                If rconf.pcbDownloadPoster Then
                    Dim nolinksinxml As Boolean = False
                    'see if the posterxml file exsists in the posters folder
                    If File.Exists(rconf.xmlfolderposters + currentmovie.pimdbnumber + ".xml") Then
                        Dim curposter As New posters
                        curposter.pmoviename = impaname
                        curposter.readxml(curposter, rconf.xmlfolderposters, True, currentmovie.pimdbnumber)
                        'precacheposter(curposter)
                        If curposter.pposters.Count = 0 Then
                            nolinksinxml = True
                            Debug.Print("Found an xml for " + impaname + ". No links where found in that file")
                        Else
                            getdisplayposter(curposter)
                        End If
                    Else
                        nolinksinxml = True
                    End If


                End If
                '-------------------------------- END POSTER CODE
            End If

            Dim hasfolderjpg As Boolean = False

            'post 2437 change below
            'if there is no folder.jpg, based on configured options, set one (not for filemode)
            If rconf.pcbCreateFolderjpg And Not File.Exists(addfiletofolder(currentmovie.getmoviepath, "folder.jpg")) And Not moviemode = "file" Then
                If rconf.pcbautocreatefolderjpg Then getdefaultfolderjpg(currentmovie, True)
            End If

            'if there is no <moviename>.tbn, based on configured options, set one (ok for both modes)
            Dim curtbnfile As String = ""
            If moviemode = "file" Then
                curtbnfile = addfiletofolder(currentmovie.getmoviepath, stripstackforfilemode(removeextension(currentmovie.preservedmoviename)) + ".tbn")
            Else
                curtbnfile = addfiletofolder(currentmovie.getmoviepath, currentmovie.pmoviename + ".tbn")
            End If
            If rconf.pcbcreatemovienamedottbn And Not File.Exists(curtbnfile) Then
                If rconf.pcbautocreatemovienametbn Then getdefaultmovienametbn(currentmovie, True)
            End If

            'if there is no movie.tbn, based on configured options, set one (not for filemode)
            If rconf.pcbcreatemovietbn And Not File.Exists(addfiletofolder(currentmovie.getmoviepath, "movie.tbn")) And Not moviemode = "file" Then
                If rconf.pcbautocreatemovietbn Then getdefaultmovietbn(currentmovie, True)
            End If

            If File.Exists(cmpath + "\folder.jpg") And Not moviemode = "file" Then
                hasfolderjpg = True
            End If
            If File.Exists(cmpath + "\movie.tbn") And Not moviemode = "file" Then
                hasfolderjpg = True
            End If
            If File.Exists(cmpath + dname + ".tbn") Then
                hasfolderjpg = True
            End If

            If replaceexsistingfolderimage Then hasfolderjpg = False

            If Not hasfolderjpg Then
                Dim xmltemppathname As String = rconf.xmlfolder + selectedNameXMLfile
                'case primary switch
                Select Case primary
                    Case "f1s0"
                        xmlDownload(currentmovie, xmltemppathname, "1", "2", "0") 'square no style
                        getdisplayimages(selectedNameXMLfile, "1", "2", "0")
                    Case "f1s3"
                        xmlDownload(currentmovie, xmltemppathname, "1", "2", "3") 'square box shot
                        getdisplayimages(selectedNameXMLfile, "1", "2", "3")
                    Case "f1s9"
                        xmlDownload(currentmovie, xmltemppathname, "1", "2", "9") 'square classification, but it's a round token
                        getdisplayimages(selectedNameXMLfile, "1", "2", "9")
                    Case "f2s0"
                        xmlDownload(currentmovie, xmltemppathname, "2", "2", "0") 'wide no style
                        getdisplayimages(selectedNameXMLfile, "2", "2", "0")
                    Case "f2s2"
                        xmlDownload(currentmovie, xmltemppathname, "2", "2", "2") 'wide rounded shadow with scanlines
                        getdisplayimages(selectedNameXMLfile, "2", "2", "2")
                    Case "f2s8"
                        xmlDownload(currentmovie, xmltemppathname, "2", "2", "8") 'wide rounded shadow
                        getdisplayimages(selectedNameXMLfile, "2", "2", "8")
                    Case "f2s10"
                        xmlDownload(currentmovie, xmltemppathname, "2", "2", "10") 'wide rounded shadow with glass overlay
                        getdisplayimages(selectedNameXMLfile, "2", "2", "10")
                    Case "f3s0" ' not used yet ' tall icons
                        'xmlDownload(currentmovie, xmltemppathname, "3", "2", "0") 'tall no style
                        'getdisplayimages(selectedNameXMLfile, "3", "2", "0")
                    Case "poster"
                        'nothing to download here, it's done already
                    Case "none"
                        'do nothing here
                    Case Else
                        'do nothing
                End Select
                'case secondary switch boolean
                Dim usesecondary As Boolean = False
                'icons parsed out in select statement above time to select and run saveci or savecip
                Dim curname As String = ""
                If moviemode = "file" Then
                    curname = addfiletofolder(cmpath, stripstackforfilemode(removeextension(currentmovie.preservedmoviename)) + ".tbn")
                    Try
                        If File.Exists(curname) Then File.SetAttributes(curname, FileAttributes.Normal)
                    Catch ex As Exception
                        Debug.Print(ex.ToString)
                    End Try
                Else
                    If rconf.pcbcreatemovienamedottbn Then curname = addfiletofolder(cmpath, currentmovie.pmoviename) + ".tbn"
                    Try
                        If File.Exists(curname) Then File.SetAttributes(curname, FileAttributes.Normal)
                    Catch ex As Exception
                        Debug.Print(ex.ToString)
                    End Try
                    If rconf.pcbCreateFolderjpg Then curname = addfiletofolder(cmpath, "folder.jpg")
                    Try
                        If File.Exists(curname) Then File.SetAttributes(curname, FileAttributes.Normal)
                    Catch ex As Exception
                        Debug.Print(ex.ToString)
                    End Try
                    If rconf.pcbcreatemovietbn Then curname = addfiletofolder(cmpath, "movie.tbn")
                    Try
                        If File.Exists(curname) Then File.SetAttributes(curname, FileAttributes.Normal)
                    Catch ex As Exception
                        Debug.Print(ex.ToString)
                    End Try
                End If
                Select Case primary
                    Case "f1s0"
                        savecia(spb1) 'save it then make sure it works by attempting to load it
                        Try
                            Dim imagecheck As System.Drawing.Image = System.Drawing.Image.FromFile(curname)
                            imagecheck.Dispose()
                        Catch ex As Exception
                            usesecondary = True 'if that fails, remove the files and use secondary icon
                        End Try

                    Case "f1s3"
                        savecia(bspb1) 'save it then make sure it works by attempting to load it
                        Try
                            Dim imagecheck As System.Drawing.Image = System.Drawing.Image.FromFile(curname)
                            imagecheck.Dispose()
                        Catch ex As Exception
                            usesecondary = True 'if that fails, remove the files and use secondary icon
                        End Try
                    Case "f1s9"
                        savecia(tpb1) 'save it then make sure it works by attempting to load it
                        Try
                            Dim imagecheck As System.Drawing.Image = System.Drawing.Image.FromFile(curname)
                            imagecheck.Dispose()
                        Catch ex As Exception
                            usesecondary = True 'if that fails, remove the files and use secondary icon
                        End Try
                    Case "f2s0"
                        savecia(pbwns1) 'save it then make sure it works by attempting to load it
                        Try
                            Dim imagecheck As System.Drawing.Image = System.Drawing.Image.FromFile(curname)
                            imagecheck.Dispose()
                        Catch ex As Exception
                            usesecondary = True 'if that fails, remove the files and use secondary icon
                        End Try
                    Case "f2s2"
                        savecia(pbwrsscan1) 'save it then make sure it works by attempting to load it
                        Try
                            Dim imagecheck As System.Drawing.Image = System.Drawing.Image.FromFile(curname)
                            imagecheck.Dispose()
                        Catch ex As Exception
                            usesecondary = True 'if that fails, remove the files and use secondary icon
                        End Try
                    Case "f2s8"
                        savecia(pbwrs1) 'save it then make sure it works by attempting to load it
                        Try
                            Dim imagecheck As System.Drawing.Image = System.Drawing.Image.FromFile(curname)
                            imagecheck.Dispose()
                        Catch ex As Exception
                            usesecondary = True 'if that fails, remove the files and use secondary icon
                        End Try
                    Case "f2s10"
                        savecia(pb1) 'save it then make sure it works by attempting to load it
                        Try
                            Dim imagecheck As System.Drawing.Image = System.Drawing.Image.FromFile(curname)
                            imagecheck.Dispose()
                        Catch ex As Exception
                            usesecondary = True 'if that fails, remove the files and use secondary icon
                        End Try
                    Case "f3s0" ' not used yet ' tall icons
                        'saveci(tallpb1)'save it then make sure it works by attempting to load it
                        'Try
                        '    Dim imagecheck As Image = Image.FromFile(lblCurMovieFolder.Text + "\folder.jpg")
                        'Catch ex As Exception
                        '    usesecondary = True 'if that fails, remove the files and use secondary icon
                        'End Try
                    Case "poster"
                        If posterTru Then savecia(pbti1) 'save it then make sure it works by attempting to load it
                        Try
                            If posterTru Then
                                Dim imagecheck As System.Drawing.Image = System.Drawing.Image.FromFile(curname)
                                imagecheck.Dispose()
                            End If

                        Catch ex As Exception
                            usesecondary = True 'if that fails, remove the files and use secondary icon
                        End Try
                    Case "none"
                        'do nothing with images
                        usesecondary = False
                    Case Else
                End Select

                'case selection secondary load
                If usesecondary Then
                    'rem old tbn and folder.jpg
                    If moviemode = "file" Then
                        Dim stackedname As String = ""
                        stackedname = addfiletofolder(cmpath, stripstackforfilemode(removeextension(currentmovie.preservedmoviename))) + ".tbn"
                        If File.Exists(stackedname) Then
                            Try
                                File.SetAttributes(stackedname, FileAttributes.Normal)
                                File.Delete(stackedname)
                            Catch ex As Exception

                            End Try

                        End If
                    Else 'folder level - clear out folder.jpg, <moviename>.tbn, movie.tbn
                        If File.Exists(cmpath + "\folder.jpg") Then
                            Try
                                File.SetAttributes(cmpath + "\folder.jpg", FileAttributes.Normal)
                                File.Delete(cmpath + "\folder.jpg")
                            Catch ex As Exception

                            End Try

                        End If
                        If File.Exists(cmpath + "\" + dname + ".tbn") Then
                            Try
                                File.SetAttributes(cmpath + "\" + dname + ".tbn", FileAttributes.Normal)
                                File.Delete(cmpath + "\" + dname + ".tbn")
                            Catch ex As Exception

                            End Try

                        End If
                        If File.Exists(cmpath + "\" + "movie.tbn") Then
                            Try
                                File.SetAttributes(cmpath + "\" + "movie.tbn", FileAttributes.Normal)
                                File.Delete(cmpath + "\" + "movie.tbn")
                            Catch ex As Exception

                            End Try

                        End If
                    End If
                    'MsgBox("using secondary")
                    Debug.Print("-------------------------- SECONDARY ICON USED ---------------------------")
                    Select Case secondary
                        Case "f1s0"
                            xmlDownload(currentmovie, xmltemppathname, "1", "2", "0") 'square no style
                            getdisplayimages(selectedNameXMLfile, "1", "2", "0")
                        Case "f1s3"
                            xmlDownload(currentmovie, xmltemppathname, "1", "2", "3") 'square box shot
                            getdisplayimages(selectedNameXMLfile, "1", "2", "3")
                        Case "f1s9"
                            xmlDownload(currentmovie, xmltemppathname, "1", "2", "9") 'square classification, but it's a round token
                            getdisplayimages(selectedNameXMLfile, "1", "2", "9")
                        Case "f2s0"
                            xmlDownload(currentmovie, xmltemppathname, "2", "2", "0") 'wide no style
                            getdisplayimages(selectedNameXMLfile, "2", "2", "0")
                        Case "f2s2"
                            xmlDownload(currentmovie, xmltemppathname, "2", "2", "2") 'wide rounded shadow with scanlines
                            getdisplayimages(selectedNameXMLfile, "2", "2", "2")
                        Case "f2s8"
                            xmlDownload(currentmovie, xmltemppathname, "2", "2", "8") 'wide rounded shadow
                            getdisplayimages(selectedNameXMLfile, "2", "2", "8")
                        Case "f2s10"
                            xmlDownload(currentmovie, xmltemppathname, "2", "2", "10") 'wide rounded shadow with glass overlay
                            getdisplayimages(selectedNameXMLfile, "2", "2", "10")
                        Case "f3s0" ' not used yet ' tall icons
                            'xmlDownload(currentmovie, xmltemppathname, "3", "2", "0") 'tall no style
                            'getdisplayimages(selectedNameXMLfile, "3", "2", "0")
                        Case "poster"
                            'nothing to download here, it's done already

                        Case Else
                            'do nothing
                    End Select
                    'case secondary switch
                    Select Case secondary
                        Case "f1s0"
                            savecia(spb1)
                        Case "f1s3"
                            savecia(bspb1)
                        Case "f1s9"
                            savecia(tpb1)
                        Case "f2s0"
                            savecia(pbwns1)
                        Case "f2s2"
                            savecia(pbwrsscan1)
                        Case "f2s8"
                            savecia(pbwrs1)
                        Case "f2s10"
                            savecia(pb1)
                        Case "f3s0" ' not used yet ' tall icons
                            'saveci(tallpb1)
                        Case "poster"
                            If posterTru Then savecia(pbti1)
                        Case "none"
                            'do nothing here
                        Case Else
                            'do nothing
                    End Select
                End If
            End If

            'check for 0k files
            If moviemode = "file" Then
                Dim stackedname As String = ""
                stackedname = addfiletofolder(cmpath, stripstackforfilemode(removeextension(currentmovie.preservedmoviename))) + ".tbn"
                If File.Exists(stackedname) Then
                    Try
                        Dim vtempstrFilesize As String = getFileSize(stackedname)
                        If vtempstrFilesize = "0 KB" Then
                            File.SetAttributes(stackedname, FileAttributes.Normal)
                            File.Delete(stackedname)
                        End If
                    Catch ex As Exception

                    End Try

                End If

            Else 'folder level - clear out folder.jpg, <moviename>.tbn, movie.tbn
                Dim fjpgname As String = addfiletofolder(cmpath, "folder.jpg")
                Dim movnamedottbn As String = addfiletofolder(cmpath, dname + ".tbn")
                Dim mdottbn As String = addfiletofolder(cmpath, "movie.tbn")
                If File.Exists(fjpgname) Then
                    Try
                        File.SetAttributes(fjpgname, FileAttributes.Normal)
                        Dim vtempstrFilesize As String = getFileSize(fjpgname)
                        If vtempstrFilesize = "0 KB" Then
                            File.Delete(fjpgname)
                        End If
                    Catch ex As Exception

                    End Try

                End If
                If File.Exists(movnamedottbn) Then
                    Try
                        File.SetAttributes(movnamedottbn, FileAttributes.Normal)
                        Dim vtempstrFilesize As String = getFileSize(movnamedottbn)
                        If vtempstrFilesize = "0 KB" Then
                            File.Delete(movnamedottbn)
                        End If
                    Catch ex As Exception

                    End Try

                End If
                If File.Exists(mdottbn) Then
                    Try
                        File.SetAttributes(mdottbn, FileAttributes.Normal)
                        Dim vtempstrFilesize As String = getFileSize(mdottbn)
                        If vtempstrFilesize = "0 KB" Then
                            File.Delete(mdottbn)
                        End If
                    Catch ex As Exception

                    End Try

                End If
            End If
        End If

        ''reset overwrite checkbox
        'cbOverwriteNFO.Checked = cursettingOverwrite
        ''reset max icons to display
        'rconf.pcbMaxIconsToDisplay = cursettingmaxDisplayedIcons
        ''MsgBox(currentmovie.gecurrentmoviename + " ------- " + currentmovie.getthumbxml)
        'btnRetryName.Enabled = True
        'tbnewname.Enabled = True
        'pbTick.Stop()
        'pbar1.Visible = False
        'lblPbar.Visible = False
        ''reload movie list
        'bwloadfolderdata()
        ''currentmovie = currentmovie

        'removed the check here.
        'validatefoldercontents()
    End Sub
    Private Sub savecia(ByRef selectedicon As PictureBox)
        If selectedicon.ImageLocation = Nothing Then Exit Sub
        'autopilot version of save
        Dim whattosave As String = selectedicon.ImageLocation
        Dim cmpath As String = currentmovie.getmoviepath
        Dim cmname As String = currentmovie.pmoviename
        If moviemode = "file" Then cmname = stripstackforfilemode(removeextension(currentmovie.preservedmoviename))

        If File.Exists(cmpath + "\folder.jpg") And Not moviemode = "file" Then
            Try
                File.SetAttributes(cmpath + "\folder.jpg", FileAttributes.Normal)
            Catch ex As Exception
                Debug.Print(ex.ToString)
            End Try
            Try
                File.Delete(cmpath + "\folder.jpg")
            Catch ex2 As Exception
                Debug.Print(ex2.ToString)
            End Try

        End If

        If File.Exists(cmpath + "\" + cmname + ".tbn") Then
            Try
                File.SetAttributes(cmpath + "\" + cmname + ".tbn", FileAttributes.Normal)
            Catch ex As Exception
                Debug.Print(ex.ToString)
            End Try
            Try
                File.Delete(cmpath + "\" + cmname + ".tbn")
            Catch ex2 As Exception
                Debug.Print(ex2.ToString)
            End Try

        End If

        If File.Exists(cmpath + "\movie.tbn") And Not moviemode = "file" Then
            Try
                File.SetAttributes(cmpath + "\movie.tbn", FileAttributes.Normal)
            Catch ex As Exception
                Debug.Print(ex.ToString)
            End Try
            Try
                File.Delete(cmpath + "\movie.tbn")
            Catch ex2 As Exception
                Debug.Print(ex2.ToString)
            End Try

        End If

        Try
            'Dim imagetosave As System.Drawing.Image
            'imagetosave = System.Drawing.Image.FromFile(whattosave)
            If moviemode = "file" Then
                File.Copy(whattosave, cmpath + "\" + cmname + ".tbn", True)
                Debug.Print("--------------_________---_________---------________------------")
                Debug.Print("saved: " + whattosave + " to: " + cmpath + "\" + cmname + ".tbn")
                Debug.Print("--------------_________---_________---------________------------")
            Else
                If rconf.pcbcreatemovienamedottbn Then File.Copy(whattosave, cmpath + "\" + cmname + ".tbn", True)
                If rconf.pcbcreatemovietbn Then File.Copy(whattosave, cmpath + "\movie.tbn", True)
                If rconf.pcbCreateFolderjpg Then File.Copy(whattosave, cmpath + "\folder.jpg", True)
            End If
            'imagetosave.Dispose()
        Catch ex As Exception
            'if it's not a file, it's a url, so save image from url
            Dim tfullcmname As String = ""
            If moviemode = "file" Then
                tfullcmname = stripstackforfilemode(removeextension(currentmovie.preservedmoviename)) + ".tbn"
            Else
                tfullcmname = "folder.jpg"
            End If
            Try
                wgetfolderjpg(whattosave, cmpath, tfullcmname, True)
                File.SetAttributes(addfiletofolder(cmpath, tfullcmname), FileAttributes.Normal)
                Try
                    If rconf.pcbcreatemovienamedottbn Then File.Copy(cmpath + "\folder.jpg", cmpath + "\" + cmname + ".tbn", True)
                    If rconf.pcbcreatemovietbn Then File.Copy(cmpath + "\folder.jpg", cmpath + "\movie.tbn", True)
                    If Not rconf.pcbCreateFolderjpg Then File.Delete(cmpath + "\folder.jpg")
                Catch ex2 As Exception
                    Debug.Print(ex2.ToString)
                End Try
            Catch ex2 As Exception
                Debug.Print("couldn't save using savecia" + ex2.ToString)
            End Try
        End Try


        'Debug.Print("saved: " + selectedicon.ImageLocation + selectedicon.ToString)
        If messageprompts Then lblPbar.Visible = True
        If messageprompts Then lblPbar.Text = Date.Now.ToString + " - Icon saved --" '+ selectedicon.ImageLocation

    End Sub
    Private Sub validatefoldercontents()
        'not checking for ".m2ts",".rm",".ra", ".rv",".rmvb"
        tbFDNFOFile.Text = ""
        tbFDMovieFile1.Text = ""
        tbFDMovieFile2.Text = ""
        tbFDIconfile.Text = ""
        tbFDFanartFile.Text = ""
        tbFDTBNFile.Text = ""
        tbFDTrailer.Text = ""
        Dim moviefilenames As New ArrayList

        Dim filelisting As New ArrayList
        For Each item In Directory.GetFiles(currentmovie.getmoviepath)
            filelisting.Add(item)
        Next
        Dim curmovienamebasedonmode As String = ""
        If moviemode = "file" Then
            curmovienamebasedonmode = stripstackforfilemode(removeextension(currentmovie.preservedmoviename))
        Else
            curmovienamebasedonmode = currentmovie.pmoviename
        End If
        If filelisting.Count = 0 Then Exit Sub
        For Each fileinlisting In filelisting
            Dim fourr_ext As String = ""
            Try
                fourr_ext = Strings.Right(fileinlisting.ToString, 4).ToLower
            Catch ex As Exception
                Debug.Print(ex.ToString)
            End Try

            Dim fnPeices1() As String = fileinlisting.ToString.Split(CChar("\"))
            Dim tfname As String = fnPeices1(fnPeices1.Length - 1)

            Select Case fourr_ext
                Case ".jpg"
                    Try
                        Dim tenr_ext As String = Strings.Right(fileinlisting.ToString, 10).ToLower
                        If tenr_ext = "folder.jpg" Then
                            tbFDIconfile.Text += Regex.Match(fileinlisting.ToString, "[\\]{1}([^\\]*?folder.jpg)", RegexOptions.IgnoreCase).Groups(1).Value
                        ElseIf tenr_ext = "fanart.jpg" Then
                            '--
                            If tfname = curmovienamebasedonmode + "-fanart.jpg" Or tfname = "fanart.jpg" Then
                                tbFDFanartFile.Text += tfname + " "
                            Else
                                tbFDMovieFile2.Text += tfname + " "
                            End If
                            '--
                        End If
                    Catch ex As Exception
                        Debug.Print(ex.ToString)
                    End Try
                Case ".nfo"
                    '--
                    If tfname = curmovienamebasedonmode + ".nfo" Or tfname = "movie.nfo" Then
                        tbFDNFOFile.Text += tfname + " "
                    Else
                        tbFDMovieFile2.Text += tfname + " "
                    End If
                    '--
                Case ".tbn"
                    '--
                    If tfname = curmovienamebasedonmode + ".tbn" Or tfname = "movie.tbn" Then
                        tbFDTBNFile.Text += tfname + " "
                    Else
                        tbFDMovieFile2.Text += tfname + " "
                    End If
                    '--
                    'Case ".iso", ".wmv", ".avi", ".mpg", ".mpeg", ".img", ".mp4", ".mkv", ".mov"
                Case ".iso", ".img", ".dat", ".bin", ".cue", ".vob", ".dvb", ".m2t", ".mts", ".evo", ".mp4", ".avi", ".asf", ".asx", ".wmv", ".wma", ".mov", ".flv", ".swf", ".nut", ".avs", ".nsv", ".mp4", ".ram", ".ogg", ".ogm", ".ogv", ".mkv", ".viv", ".pva", ".mpg", ".mp4"
                    If tfname.ToLower.Contains("-trailer") Then
                        tbFDTrailer.Text += tfname + " "
                    Else
                        tbFDMovieFile1.Text += tfname + " "
                        moviefilenames.Add(tfname)
                    End If

                Case Else
                    tbFDMovieFile2.Text += tfname + " "
            End Select
        Next


        '    Try
        '        If fourr_ext = ".nfo" Then
        '            '--
        '            Dim fnPeices() As String = fileinlisting.ToString.Split(CChar("\"))
        '            Dim tnfofilename As String = fnPeices(fnPeices.Length - 1)
        '            fnPeices = Nothing
        '            'Dim tnfofilename As String = Regex.Match(fileinlisting.ToString, "[\\]{1}([^\\]*?\.nfo)", RegexOptions.IgnoreCase).Groups(1).Value
        '            If tnfofilename = currentmovie.pmoviename + ".nfo" Then
        '                tbFDNFOFile.Text += tnfofilename
        '            Else
        '                tbFDMovieFile2.Text += tnfofilename + " "
        '            End If
        '            '--
        '        ElseIf Strings.Right(fileinlisting.ToString, 10).ToLower = "folder.jpg" Then
        '            tbFDIconfile.Text += Regex.Match(fileinlisting.ToString, "[\\]{1}([^\\]*?folder.jpg)", RegexOptions.IgnoreCase).Groups(1).Value
        '        ElseIf Strings.Right(fileinlisting.ToString, 10).ToLower = "fanart.jpg" Then
        '            '--
        '            Dim fnPeices() As String = fileinlisting.ToString.Split(CChar("\"))
        '            Dim tfanartfilename As String = fnPeices(fnPeices.Length - 1)
        '            fnPeices = Nothing
        '            'Dim tfanartfilename As String = Regex.Match(fileinlisting.ToString, "[\\]{1}([^\\]*?-fanart.jpg)", RegexOptions.IgnoreCase).Groups(1).Value
        '            If tfanartfilename = currentmovie.pmoviename + "-fanart.jpg" Then
        '                tbFDFanartFile.Text += tfanartfilename
        '            Else
        '                tbFDMovieFile2.Text += tfanartfilename + " "
        '            End If
        '            '--

        '        ElseIf fourr_ext = ".tbn" Then
        '            '--
        '            Dim fnPeices() As String = fileinlisting.ToString.Split(CChar("\"))
        '            Dim ttbnfilename As String = fnPeices(fnPeices.Length - 1)
        '            fnPeices = Nothing
        '            'Dim ttbnfilename As String = Regex.Match(fileinlisting.ToString, "[\\]{1}([^\\]*?\.tbn)", RegexOptions.IgnoreCase).Groups(1).Value
        '            If ttbnfilename = currentmovie.pmoviename + ".tbn" Then
        '                tbFDTBNFile.Text += ttbnfilename
        '            Else
        '                tbFDMovieFile2.Text += ttbnfilename + " "
        '            End If
        '            '--

        '        ElseIf fourr_ext = ".iso" Or fourr_ext = ".wmv" Or fourr_ext = ".avi" Or fourr_ext = ".mpg" Or fourr_ext = ".mpeg" Or fourr_ext = ".img" Or fourr_ext = ".mp4" Or fourr_ext = ".mkv" Or fourr_ext = ".mov" Then
        '            Dim fnPeices() As String = fileinlisting.ToString.Split(CChar("\"))
        '            Dim tempmname As String = fnPeices(fnPeices.Length - 1)
        '            fnPeices = Nothing 'clean up
        '            'the regex below will fail on a bunch of files, the split method above works much better
        '            'Dim tempmname As String = Regex.Match(fileinlisting.ToString, "[\\]{1}([^\\]*\.(?:(?:iso)?(?:wmv)?(?:mpg)?(?:mpeg)?(?:avi)?(?:img)?(?:mp4)?(?:mkv)?(?:mov)?){1})", RegexOptions.IgnoreCase).Groups(1).Value
        '            tbFDMovieFile1.Text += tempmname + " "
        '            moviefilenames.Add(tempmname)
        '        Else
        '            tbFDMovieFile2.Text += Regex.Match(fileinlisting.ToString, "[\\]{1}([^\\]*?\..{3,4})").Groups(1).Value + " "
        '        End If
        '        Debug.Print(fileinlisting.ToString)
        '    Catch ex As Exception
        '        Debug.Print(ex.ToString)
        '    End Try
        'Next

        If Not tbFDNFOFile.Text = "" Then
            Try
                Dim hasananfo As Boolean = True

                If Not tbFDNFOFile.Text.Contains(curmovienamebasedonmode + ".nfo") Then
                    If Not tbFDNFOFile.Text.Contains("movie.nfo") Then
                        hasananfo = False
                    End If
                End If
                If Not hasananfo Then
                    '                If Not (curmovienamebasedonmode + ".nfo") = Strings.Left(tbFDNFOFile.Text, tbFDNFOFile.Text.Length) Then
                    lblFDNFOFile.ForeColor = System.Drawing.Color.Red
                    'pbFDNFO.Image = movieinfoplus.My.Resources.Resources.red_x
                    pbFDNFO.Image = movieinfoplus.My.Resources.red_x
                    pbFDNFO.ImageLocation = rconf.resourcefolder & "red_x.png"
                    pbFDNFO.Enabled = True
                Else
                    lblFDNFOFile.ForeColor = System.Drawing.Color.Silver
                    pbFDNFO.Image = movieinfoplus.My.Resources.green_check 'Resources.green_check
                    pbFDNFO.ImageLocation = rconf.resourcefolder & "green_check.png"
                    pbFDNFO.Enabled = True
                End If
            Catch ex As Exception

            End Try
        Else
            pbFDNFO.Image = movieinfoplus.My.Resources.Resources.red_x
            pbFDNFO.ImageLocation = rconf.resourcefolder & "red_x.png"
            pbFDNFO.Enabled = True
        End If

        If moviemode = "file" Then
            pbFDFolderJpg.Image = Nothing
            pbFDFolderJpg.ImageLocation = Nothing
            lblFDIconfile.ForeColor = System.Drawing.Color.Gray
        Else
            If tbFDIconfile.Text = "" Then
                lblFDIconfile.ForeColor = System.Drawing.Color.Red
                pbFDFolderJpg.Image = movieinfoplus.My.Resources.Resources.red_x
                pbFDFolderJpg.ImageLocation = rconf.resourcefolder & "red_x.png"
            Else
                lblFDIconfile.ForeColor = System.Drawing.Color.Silver
                pbFDFolderJpg.Image = movieinfoplus.My.Resources.Resources.green_check
                pbFDFolderJpg.ImageLocation = rconf.resourcefolder & "green_check.png"
            End If
        End If


        If Not tbFDFanartFile.Text = "" Then
            Try
                Dim hasfanart As Boolean = True
                If Not tbFDFanartFile.Text.Contains(curmovienamebasedonmode + "-fanart.jpg") Then
                    If Not tbFDFanartFile.Text.Contains("fanart.jpg") Then
                        hasfanart = False
                    End If
                End If
                If Not hasfanart Then
                    'If Not (curmovienamebasedonmode + "-fanart.jpg") = Strings.Left(tbFDFanartFile.Text, tbFDFanartFile.Text.Length) Then
                    lblFDFanartFile.ForeColor = System.Drawing.Color.Red
                    pbFDFanart.Image = movieinfoplus.My.Resources.Resources.red_x
                    pbFDFanart.ImageLocation = rconf.resourcefolder & "red_x.png"
                Else
                    lblFDFanartFile.ForeColor = System.Drawing.Color.Silver
                    pbFDFanart.Image = movieinfoplus.My.Resources.Resources.green_check
                    pbFDFanart.ImageLocation = rconf.resourcefolder & "green_check.png"
                End If
            Catch ex As Exception

            End Try
        Else
            lblFDFanartFile.ForeColor = System.Drawing.Color.Red
            pbFDFanart.Image = movieinfoplus.My.Resources.Resources.red_x
            pbFDFanart.ImageLocation = rconf.resourcefolder & "red_x.png"
        End If

        If Not tbFDTBNFile.Text = "" Then
            Try
                Dim hastbn As Boolean = True
                If Not tbFDTBNFile.Text.Contains(curmovienamebasedonmode + ".tbn") Then
                    If Not tbFDTBNFile.Text.Contains("movie.tbn") Then
                        hastbn = False
                    End If
                End If
                If Not hastbn Then
                    'If Not (curmovienamebasedonmode + ".tbn") = Strings.Left(tbFDTBNFile.Text, tbFDTBNFile.Text.Length) Then
                    lblFDTBNFile.ForeColor = System.Drawing.Color.Red
                    pbFDTBN.Image = movieinfoplus.My.Resources.Resources.red_x
                    pbFDTBN.ImageLocation = rconf.resourcefolder & "red_x.png"
                Else
                    lblFDTBNFile.ForeColor = System.Drawing.Color.Silver
                    pbFDTBN.Image = movieinfoplus.My.Resources.Resources.green_check
                    pbFDTBN.ImageLocation = rconf.resourcefolder & "green_check.png"
                End If
            Catch ex As Exception

            End Try

        Else
            lblFDTBNFile.ForeColor = System.Drawing.Color.Red
            pbFDTBN.Image = movieinfoplus.My.Resources.Resources.red_x
            pbFDTBN.ImageLocation = rconf.resourcefolder & "red_x.png"
        End If

        Dim singlefilerename As Boolean = False
        If moviemode = "file" Then
            'set to nothing for file mode
            lblFDMovieFile1.ForeColor = System.Drawing.Color.Silver
            pbFDMovieFile1.Image = movieinfoplus.My.Resources.Resources.green_check
            pbFDMovieFile1.ImageLocation = rconf.resourcefolder & "green_check.png"
            tbFDMovieFile1.Text = currentmovie.preservedmoviename
        Else
            If Not tbFDMovieFile1.Text = "" Then
                Try
                    If Not (currentmovie.pmoviename) = Strings.Left(tbFDMovieFile1.Text, tbFDMovieFile1.Text.Length - 5) Then
                        If moviefilenames.Count >= 2 Then
                            'set to questionmark and some other color, might be multipart
                            pbFDMovieFile1.Image = movieinfoplus.My.Resources.Resources.questionmark
                            pbFDMovieFile1.ImageLocation = rconf.resourcefolder & "questionmark.png"

                        Else
                            lblFDMovieFile1.ForeColor = System.Drawing.Color.Red
                            pbFDMovieFile1.Image = movieinfoplus.My.Resources.Resources.red_x
                            pbFDMovieFile1.ImageLocation = rconf.resourcefolder & "red_x.png"
                            singlefilerename = True
                        End If

                    Else
                        lblFDMovieFile1.ForeColor = System.Drawing.Color.Silver
                        pbFDMovieFile1.Image = movieinfoplus.My.Resources.Resources.green_check
                        pbFDMovieFile1.ImageLocation = rconf.resourcefolder & "green_check.png"

                    End If
                Catch ex As Exception
                End Try
            Else
                lblFDMovieFile1.ForeColor = System.Drawing.Color.Red
                pbFDMovieFile1.Image = movieinfoplus.My.Resources.Resources.red_x
                pbFDMovieFile1.ImageLocation = rconf.resourcefolder & "red_x.png"
            End If
        End If
        If Not tbFDTrailer.Text = "" Then
            If Strings.Left(tbFDTrailer.Text, tbFDTrailer.Text.Length - 5) = curmovienamebasedonmode + "-trailer" Then
                pbFDTrailer.Image = movieinfoplus.My.Resources.Resources.green_check
                pbFDTrailer.ImageLocation = rconf.resourcefolder & "green_check.png"
            Else
                pbFDTrailer.Image = movieinfoplus.My.Resources.Resources.red_x
                pbFDTrailer.ImageLocation = rconf.resourcefolder & "red_x.png"
            End If
        Else
            pbFDTrailer.Image = movieinfoplus.My.Resources.Resources.questionmark
            pbFDTrailer.ImageLocation = rconf.resourcefolder & "questionmark.png"
        End If
        If singlefilerename = True And rconf.autorenamemoviefilenames And Not moviemode = "file" Then
            renamemovieinfolder(moviefilenames)
        End If
        'clear out temp
    End Sub
    Private Sub renamemovieinfolder(ByRef moviefilenames As ArrayList)
        Dim tempnamefromfoldername As String = ""
        Dim newmoviename As String = ""
        If moviefilenames.Count = 0 Then
            'no movies to process
        ElseIf moviefilenames.Count = 1 Then
            'only 1 movie file in list, see get the last 4 chars first, next try 3, then go for 5 chars (mpeg)
            tempnamefromfoldername = moviefilenames.Item(0).ToString
            Dim tempshortname As String = Strings.Left(moviefilenames.Item(0).ToString, moviefilenames.Item(0).ToString.Length - 4)
            newmoviename = Strings.Replace(tempnamefromfoldername, tempshortname, currentmovie.pmoviename)
            Debug.Print("New file name will be " + newmoviename)
            Try
                File.Move(currentmovie.getmoviepath + "/" + tempnamefromfoldername, currentmovie.getmoviepath + "/" + newmoviename)
            Catch ex As Exception
                MsgBox("failed to match the movie name, please check the name in the file")
                Exit Sub

            End Try

            '.vob, .iso, .img, .mpg, .wmv, .flv,
        ElseIf moviefilenames.Count >= 2 Then
            'more then 2 movies in folder, alert and do not auto fix (unless bin and cue)
        End If
        If Not autopilotrunning Then MsgBox("A Movie file has been renamed." + vbNewLine + vbNewLine + "The original name was: " + tempnamefromfoldername + vbNewLine + "The new name is now: " + newmoviename)
        validatefoldercontents()

    End Sub
    Private Sub cleanoutfolder(ByRef whichfolder As String)
        'clear out temp
        Dim tempdirlist As New ArrayList
        For Each item In Directory.GetFiles(whichfolder)
            tempdirlist.Add(item)
        Next
        Dim counter As Integer = 0
        For Each itemval In tempdirlist
            Debug.Print("removing item at " + counter.ToString)
            File.Delete(tempdirlist.Item(counter).ToString)
            counter += 1
        Next
    End Sub
    Private Sub xmlcheck()
        'see if xml is already there, and use cached data is selected
    End Sub
    Private Sub fwdbackbuttons()
        Dim cbCount, cbCurIndex As Integer
        cbCount = lbMyMovies.Items.Count - 1
        cbCurIndex = lbMyMovies.SelectedIndex
        'if index = 0 and < max, enable fwd button
        If cbCurIndex >= 0 And cbCurIndex < cbCount Then
            Me.btnNext.Enabled = True
        Else
            Me.btnNext.Enabled = False
        End If
        'if index >=1 and, enable back button
        If cbCurIndex >= 0 Then
            Me.btnPrev.Enabled = True
        Else
            Me.btnPrev.Enabled = False
        End If


    End Sub
    Private Sub ptick(ByRef pbarpassed As ProgressBar, ByVal pstate As Integer)
        If pstate = 0 Then
            pbarpassed.Visible = False
            pbTick.Stop()
        Else
            pbarpassed.Visible = True
            pbTick.Start()
        End If
    End Sub
    Private Sub pticker(ByRef pbarpassed As ProgressBar, ByVal pstate As Integer)
        While pstate = 1
            pbar1mv(2)
            'pbarpassed()
        End While
    End Sub
    Sub resettmdbposterimages()
        'clear TMDB Poster Labels
        klblposterTMDB1.Text = ""
        klblposterTMDB2.Text = ""
        klblposterTMDB3.Text = ""
        klblposterTMDB4.Text = ""
        klblposterTMDB5.Text = ""
        klblposterTMDB6.Text = ""
        klblposterTMDB7.Text = ""
        klblposterTMDB8.Text = ""
        klblposterTMDB9.Text = ""
        klblposterTMDB10.Text = ""
        klblposterTMDB11.Text = ""
        klblposterTMDB12.Text = ""
        klblposterTMDB13.Text = ""
        klblposterTMDB14.Text = ""
        klblposterTMDB15.Text = ""
        klblposterTMDB16.Text = ""
        klblposterTMDB17.Text = ""
        klblposterTMDB18.Text = ""
        klblposterTMDB19.Text = ""
        klblposterTMDB20.Text = ""
        klblposterTMDB21.Text = ""
        klblposterTMDB22.Text = ""
        klblposterTMDB23.Text = ""
        klblposterTMDB24.Text = ""
        klblposterTMDB1.Visible = False
        klblposterTMDB2.Visible = False
        klblposterTMDB3.Visible = False
        klblposterTMDB4.Visible = False
        klblposterTMDB5.Visible = False
        klblposterTMDB6.Visible = False
        klblposterTMDB7.Visible = False
        klblposterTMDB8.Visible = False
        klblposterTMDB9.Visible = False
        klblposterTMDB10.Visible = False
        klblposterTMDB11.Visible = False
        klblposterTMDB12.Visible = False
        klblposterTMDB13.Visible = False
        klblposterTMDB14.Visible = False
        klblposterTMDB15.Visible = False
        klblposterTMDB16.Visible = False
        klblposterTMDB17.Visible = False
        klblposterTMDB18.Visible = False
        klblposterTMDB19.Visible = False
        klblposterTMDB20.Visible = False
        klblposterTMDB21.Visible = False
        klblposterTMDB22.Visible = False
        klblposterTMDB23.Visible = False
        klblposterTMDB24.Visible = False

        'clear TMDB posters
        pbposterTMDB1.Image = Nothing
        pbposterTMDB2.Image = Nothing
        pbposterTMDB3.Image = Nothing
        pbposterTMDB4.Image = Nothing
        pbposterTMDB5.Image = Nothing
        pbposterTMDB6.Image = Nothing
        pbposterTMDB7.Image = Nothing
        pbposterTMDB8.Image = Nothing

        pbposterTMDB1.ImageLocation = Nothing
        pbposterTMDB2.ImageLocation = Nothing
        pbposterTMDB3.ImageLocation = Nothing
        pbposterTMDB4.ImageLocation = Nothing
        pbposterTMDB5.ImageLocation = Nothing
        pbposterTMDB6.ImageLocation = Nothing
        pbposterTMDB7.ImageLocation = Nothing
        pbposterTMDB8.ImageLocation = Nothing

        pbposterTMDB1.Enabled = False
        pbposterTMDB2.Enabled = False
        pbposterTMDB3.Enabled = False
        pbposterTMDB4.Enabled = False
        pbposterTMDB5.Enabled = False
        pbposterTMDB6.Enabled = False
        pbposterTMDB7.Enabled = False
        pbposterTMDB8.Enabled = False

        pbposterTMDB9.ImageLocation = Nothing
        pbposterTMDB9.Enabled = False
        pbposterTMDB9.Image = Nothing
        pbposterTMDB10.ImageLocation = Nothing
        pbposterTMDB10.Enabled = False
        pbposterTMDB10.Image = Nothing
        pbposterTMDB11.ImageLocation = Nothing
        pbposterTMDB11.Enabled = False
        pbposterTMDB11.Image = Nothing
        pbposterTMDB12.ImageLocation = Nothing
        pbposterTMDB12.Enabled = False
        pbposterTMDB12.Image = Nothing
        pbposterTMDB13.ImageLocation = Nothing
        pbposterTMDB13.Enabled = False
        pbposterTMDB13.Image = Nothing
        pbposterTMDB14.ImageLocation = Nothing
        pbposterTMDB14.Enabled = False
        pbposterTMDB14.Image = Nothing
        pbposterTMDB15.ImageLocation = Nothing
        pbposterTMDB15.Enabled = False
        pbposterTMDB15.Image = Nothing
        pbposterTMDB16.ImageLocation = Nothing
        pbposterTMDB16.Enabled = False
        pbposterTMDB16.Image = Nothing
        pbposterTMDB17.ImageLocation = Nothing
        pbposterTMDB17.Enabled = False
        pbposterTMDB17.Image = Nothing
        pbposterTMDB18.ImageLocation = Nothing
        pbposterTMDB18.Enabled = False
        pbposterTMDB18.Image = Nothing
        pbposterTMDB19.ImageLocation = Nothing
        pbposterTMDB19.Enabled = False
        pbposterTMDB19.Image = Nothing
        pbposterTMDB20.ImageLocation = Nothing
        pbposterTMDB20.Enabled = False
        pbposterTMDB20.Image = Nothing
        pbposterTMDB21.ImageLocation = Nothing
        pbposterTMDB21.Enabled = False
        pbposterTMDB21.Image = Nothing
        pbposterTMDB22.ImageLocation = Nothing
        pbposterTMDB22.Enabled = False
        pbposterTMDB22.Image = Nothing
        pbposterTMDB23.ImageLocation = Nothing
        pbposterTMDB23.Enabled = False
        pbposterTMDB23.Image = Nothing
        pbposterTMDB24.ImageLocation = Nothing
        pbposterTMDB24.Enabled = False
        pbposterTMDB24.Image = Nothing
    End Sub
    Sub resetmiimages()
        Dim miarray As New ArrayList
        miarray.Add(pbcdi9)
        miarray.Add(pbcdi9)
        miarray.Add(pbcdi7)
        miarray.Add(pbcdi6)
        miarray.Add(pbcdi5)
        miarray.Add(pbcdi4)
        miarray.Add(pbcdi3)
        miarray.Add(pbcdi2)
        miarray.Add(pbcdi1)
        miarray.Add(pbcd2i9)
        miarray.Add(pbcd2i9)
        miarray.Add(pbcd2i7)
        miarray.Add(pbcd2i6)
        miarray.Add(pbcd3i1)
        miarray.Add(pbcd4i9)
        miarray.Add(pbcd4i9)
        miarray.Add(pbcd4i7)
        miarray.Add(pbcd4i6)
        miarray.Add(pbcd4i5)
        miarray.Add(pbcd4i4)
        miarray.Add(pbcd4i3)
        miarray.Add(pbcd4i2)
        miarray.Add(pbcd4i1)
        miarray.Add(pbInsert9)
        miarray.Add(pbInsert8)
        miarray.Add(pbInsert7)
        miarray.Add(pbInsert6)
        miarray.Add(pbInsert5)
        miarray.Add(pbInsert4)
        miarray.Add(pbInsert3)
        miarray.Add(pbInsert2)
        miarray.Add(pbInsert1)
        miarray.Add(pbInlay9)
        miarray.Add(pbInlay8)
        miarray.Add(pbInlay7)
        miarray.Add(pbInlay6)
        miarray.Add(pbInlay5)
        miarray.Add(pbInlay4)
        miarray.Add(pbInlay3)
        miarray.Add(pbInlay2)
        miarray.Add(pbInlay1)
        miarray.Add(pbFront1)
        miarray.Add(pbFront3)
        miarray.Add(pbFront2)
        miarray.Add(pbFront9)
        miarray.Add(pbFront8)
        miarray.Add(pbFront7)
        miarray.Add(pbFront6)
        miarray.Add(pbFront5)
        miarray.Add(pbFront4)
        miarray.Add(pbBack9)
        miarray.Add(pbBack8)
        miarray.Add(pbBack7)
        miarray.Add(pbBack6)
        miarray.Add(pbBack5)
        miarray.Add(pbBack4)
        miarray.Add(pbBack3)
        miarray.Add(pbBack2)
        miarray.Add(pbBack1)
        miarray.Add(pbFront10)
        For Each curpb As PictureBox In miarray
            curpb.Image = Nothing
            curpb.ImageLocation = Nothing
            curpb.AccessibleName = Nothing
            curpb.AccessibleDescription = Nothing
            'curpb.Enabled = False
        Next
    End Sub

    Sub resetanddisableimages()
        If cmmode = "tv" Then
            pbtvwide1.Image = Nothing
            pbtvwide2.Image = Nothing
            pbtvwide3.Image = Nothing
            pbtvwide4.Image = Nothing
            pbtvwide5.Image = Nothing
            pbtvwide6.Image = Nothing
            pbtvwide7.Image = Nothing
            pbtvwide8.Image = Nothing
            pbtvwide9.Image = Nothing
            pbtvwide10.Image = Nothing
            pbtvwide11.Image = Nothing
            pbtvwide12.Image = Nothing
            pbtvwide13.Image = Nothing
            pbtvwide14.Image = Nothing
            pbtvwide15.Image = Nothing
            pbtvwide16.Image = Nothing
            pbtvwide17.Image = Nothing
            pbtvwide18.Image = Nothing
            pbtvwide19.Image = Nothing
            pbtvwide20.Image = Nothing
            pbtvwide21.Image = Nothing
            pbtvwide22.Image = Nothing
            pbtvwide23.Image = Nothing
            pbtvwide24.Image = Nothing
            pbtvwide1.ImageLocation = Nothing
            pbtvwide2.ImageLocation = Nothing
            pbtvwide3.ImageLocation = Nothing
            pbtvwide4.ImageLocation = Nothing
            pbtvwide5.ImageLocation = Nothing
            pbtvwide6.ImageLocation = Nothing
            pbtvwide7.ImageLocation = Nothing
            pbtvwide8.ImageLocation = Nothing
            pbtvwide9.ImageLocation = Nothing
            pbtvwide10.ImageLocation = Nothing
            pbtvwide11.ImageLocation = Nothing
            pbtvwide12.ImageLocation = Nothing
            pbtvwide13.ImageLocation = Nothing
            pbtvwide14.ImageLocation = Nothing
            pbtvwide15.ImageLocation = Nothing
            pbtvwide16.ImageLocation = Nothing
            pbtvwide17.ImageLocation = Nothing
            pbtvwide18.ImageLocation = Nothing
            pbtvwide19.ImageLocation = Nothing
            pbtvwide20.ImageLocation = Nothing
            pbtvwide21.ImageLocation = Nothing
            pbtvwide22.ImageLocation = Nothing
            pbtvwide23.ImageLocation = Nothing
            pbtvwide24.ImageLocation = Nothing
        End If
        'clear mi images
        Dim miarray As New ArrayList
        miarray.Add(pbcdi9)
        miarray.Add(pbcdi8)
        miarray.Add(pbcdi7)
        miarray.Add(pbcdi6)
        miarray.Add(pbcdi5)
        miarray.Add(pbcdi4)
        miarray.Add(pbcdi3)
        miarray.Add(pbcdi2)
        miarray.Add(pbcdi1)
        miarray.Add(pbcd2i9)
        miarray.Add(pbcd2i8)
        miarray.Add(pbcd2i7)
        miarray.Add(pbcd2i6)
        miarray.Add(pbcd2i5)
        miarray.Add(pbcd2i4)
        miarray.Add(pbcd2i3)
        miarray.Add(pbcd2i2)
        miarray.Add(pbcd2i1)
        miarray.Add(pbcd3i9)
        miarray.Add(pbcd3i8)
        miarray.Add(pbcd3i7)
        miarray.Add(pbcd3i6)
        miarray.Add(pbcd3i5)
        miarray.Add(pbcd3i4)
        miarray.Add(pbcd3i3)
        miarray.Add(pbcd3i2)
        miarray.Add(pbcd3i1)
        miarray.Add(pbcd4i9)
        miarray.Add(pbcd4i8)
        miarray.Add(pbcd4i7)
        miarray.Add(pbcd4i6)
        miarray.Add(pbcd4i5)
        miarray.Add(pbcd4i4)
        miarray.Add(pbcd4i3)
        miarray.Add(pbcd4i2)
        miarray.Add(pbcd4i1)
        miarray.Add(pbInsert9)
        miarray.Add(pbInsert8)
        miarray.Add(pbInsert7)
        miarray.Add(pbInsert6)
        miarray.Add(pbInsert5)
        miarray.Add(pbInsert4)
        miarray.Add(pbInsert3)
        miarray.Add(pbInsert2)
        miarray.Add(pbInsert1)
        miarray.Add(pbInlay9)
        miarray.Add(pbInlay8)
        miarray.Add(pbInlay7)
        miarray.Add(pbInlay6)
        miarray.Add(pbInlay5)
        miarray.Add(pbInlay4)
        miarray.Add(pbInlay3)
        miarray.Add(pbInlay2)
        miarray.Add(pbInlay1)
        miarray.Add(pbFront1)
        miarray.Add(pbFront3)
        miarray.Add(pbFront2)
        miarray.Add(pbFront9)
        miarray.Add(pbFront8)
        miarray.Add(pbFront7)
        miarray.Add(pbFront6)
        miarray.Add(pbFront5)
        miarray.Add(pbFront4)
        miarray.Add(pbBack9)
        miarray.Add(pbBack8)
        miarray.Add(pbBack7)
        miarray.Add(pbBack6)
        miarray.Add(pbBack5)
        miarray.Add(pbBack4)
        miarray.Add(pbBack3)
        miarray.Add(pbBack2)
        miarray.Add(pbBack1)
        miarray.Add(pbFront10)
        For Each curpb As PictureBox In miarray
            curpb.Image = Nothing
            curpb.ImageLocation = Nothing
            curpb.AccessibleName = Nothing
            curpb.AccessibleDescription = Nothing
            'curpb.Enabled = False
        Next

        'clear tall images
        pbti1.Image = Nothing
        pbti1.Enabled = False
        pbti1.ImageLocation = Nothing

        pbti2.Image = Nothing
        pbti2.Enabled = False
        pbti2.ImageLocation = Nothing

        pbti3.Image = Nothing
        pbti3.Enabled = False
        pbti3.ImageLocation = Nothing

        pbti4.Image = Nothing
        pbti4.Enabled = False
        pbti4.ImageLocation = Nothing

        pbti5.Image = Nothing
        pbti5.Enabled = False
        pbti5.ImageLocation = Nothing

        pbti6.Image = Nothing
        pbti6.Enabled = False
        pbti6.ImageLocation = Nothing

        pbti7.Image = Nothing
        pbti7.Enabled = False
        pbti7.ImageLocation = Nothing

        pbti8.Image = Nothing
        pbti8.Enabled = False
        pbti8.ImageLocation = Nothing

        pbti9.Image = Nothing
        pbti9.Enabled = False
        pbti9.ImageLocation = Nothing

        pbti10.Image = Nothing
        pbti10.Enabled = False
        pbti10.ImageLocation = Nothing

        pbti11.Image = Nothing
        pbti11.Enabled = False
        pbti11.ImageLocation = Nothing

        pbti12.Image = Nothing
        pbti12.Enabled = False
        pbti12.ImageLocation = Nothing

        pbti13.Image = Nothing
        pbti13.Enabled = False
        pbti13.ImageLocation = Nothing

        pbti14.Image = Nothing
        pbti14.Enabled = False
        pbti14.ImageLocation = Nothing

        pbti15.Image = Nothing
        pbti15.Enabled = False
        pbti15.ImageLocation = Nothing

        pbti16.Image = Nothing
        pbti16.Enabled = False
        pbti16.ImageLocation = Nothing

        pbti17.Image = Nothing
        pbti17.Enabled = False
        pbti17.ImageLocation = Nothing

        pbti18.Image = Nothing
        pbti18.Enabled = False
        pbti18.ImageLocation = Nothing

        pbti19.Image = Nothing
        pbti19.Enabled = False
        pbti19.ImageLocation = Nothing

        pbti20.Image = Nothing
        pbti20.Enabled = False
        pbti20.ImageLocation = Nothing

        pbti21.Image = Nothing
        pbti21.Enabled = False
        pbti21.ImageLocation = Nothing

        pbti22.Image = Nothing
        pbti22.Enabled = False
        pbti22.ImageLocation = Nothing

        pbti23.Image = Nothing
        pbti23.Enabled = False
        pbti23.ImageLocation = Nothing

        pbti24.Image = Nothing
        pbti24.Enabled = False
        pbti24.ImageLocation = Nothing

        pbti25.Image = Nothing
        pbti25.Enabled = False
        pbti25.ImageLocation = Nothing

        pbti26.Image = Nothing
        pbti26.Enabled = False
        pbti26.ImageLocation = Nothing

        pbti27.Image = Nothing
        pbti27.Enabled = False
        pbti27.ImageLocation = Nothing

        pbti28.Image = Nothing
        pbti28.Enabled = False
        pbti28.ImageLocation = Nothing

        pbti29.Image = Nothing
        pbti29.Enabled = False
        pbti29.ImageLocation = Nothing

        pbti30.Image = Nothing
        pbti30.Enabled = False
        pbti30.ImageLocation = Nothing

        pbti31.Image = Nothing
        pbti31.Enabled = False
        pbti31.ImageLocation = Nothing

        pbti32.Image = Nothing
        pbti32.Enabled = False
        pbti32.ImageLocation = Nothing

        pbti33.Image = Nothing
        pbti33.Enabled = False
        pbti33.ImageLocation = Nothing

        pbti34.Image = Nothing
        pbti34.Enabled = False
        pbti34.ImageLocation = Nothing

        pbti35.Image = Nothing
        pbti35.Enabled = False
        pbti35.ImageLocation = Nothing

        pbti36.Image = Nothing
        pbti36.Enabled = False
        pbti36.ImageLocation = Nothing

        pbti37.Image = Nothing
        pbti37.Enabled = False
        pbti37.ImageLocation = Nothing

        pbti38.Image = Nothing
        pbti38.Enabled = False
        pbti38.ImageLocation = Nothing

        pbti39.Image = Nothing
        pbti39.Enabled = False
        pbti39.ImageLocation = Nothing

        pbti40.Image = Nothing
        pbti40.Enabled = False
        pbti40.ImageLocation = Nothing


        pbti41.Image = Nothing
        pbti41.Enabled = False
        pbti41.ImageLocation = Nothing

        pbti42.Image = Nothing
        pbti42.Enabled = False
        pbti42.ImageLocation = Nothing

        pbti43.Image = Nothing
        pbti43.Enabled = False
        pbti43.ImageLocation = Nothing

        pbti44.Image = Nothing
        pbti44.Enabled = False
        pbti44.ImageLocation = Nothing

        pbti45.Image = Nothing
        pbti45.Enabled = False
        pbti45.ImageLocation = Nothing

        pbti46.Image = Nothing
        pbti46.Enabled = False
        pbti46.ImageLocation = Nothing

        pbti47.Image = Nothing
        pbti47.Enabled = False
        pbti47.ImageLocation = Nothing

        pbti48.Image = Nothing
        pbti48.Enabled = False
        pbti48.ImageLocation = Nothing

        pbti49.Image = Nothing
        pbti49.Enabled = False
        pbti49.ImageLocation = Nothing

        pbti50.Image = Nothing
        pbti50.Enabled = False
        pbti50.ImageLocation = Nothing


        pbti51.Image = Nothing
        pbti51.Enabled = False
        pbti51.ImageLocation = Nothing

        pbti52.Image = Nothing
        pbti52.Enabled = False
        pbti52.ImageLocation = Nothing

        pbti53.Image = Nothing
        pbti53.Enabled = False
        pbti53.ImageLocation = Nothing

        pbti54.Image = Nothing
        pbti54.Enabled = False
        pbti54.ImageLocation = Nothing

        pbti55.Image = Nothing
        pbti55.Enabled = False
        pbti55.ImageLocation = Nothing

        pbti56.Image = Nothing
        pbti56.Enabled = False
        pbti56.ImageLocation = Nothing

        pbti57.Image = Nothing
        pbti57.Enabled = False
        pbti57.ImageLocation = Nothing

        pbti58.Image = Nothing
        pbti58.Enabled = False
        pbti58.ImageLocation = Nothing

        pbti59.Image = Nothing
        pbti59.Enabled = False
        pbti59.ImageLocation = Nothing

        pbti60.Image = Nothing
        pbti60.Enabled = False
        pbti60.ImageLocation = Nothing


        pbti61.Image = Nothing
        pbti61.Enabled = False
        pbti61.ImageLocation = Nothing

        pbti62.Image = Nothing
        pbti62.Enabled = False
        pbti62.ImageLocation = Nothing

        pbti63.Image = Nothing
        pbti63.Enabled = False
        pbti63.ImageLocation = Nothing

        pbti64.Image = Nothing
        pbti64.Enabled = False
        pbti64.ImageLocation = Nothing

        pbti65.Image = Nothing
        pbti65.Enabled = False
        pbti65.ImageLocation = Nothing

        pbti66.Image = Nothing
        pbti66.Enabled = False
        pbti66.ImageLocation = Nothing

        pbti67.Image = Nothing
        pbti67.Enabled = False
        pbti67.ImageLocation = Nothing

        pbti68.Image = Nothing
        pbti68.Enabled = False
        pbti68.ImageLocation = Nothing

        pbti69.Image = Nothing
        pbti69.Enabled = False
        pbti69.ImageLocation = Nothing

        pbti70.Image = Nothing
        pbti70.Enabled = False
        pbti70.ImageLocation = Nothing


        pbti71.Image = Nothing
        pbti71.Enabled = False
        pbti71.ImageLocation = Nothing

        pbti72.Image = Nothing
        pbti72.Enabled = False
        pbti72.ImageLocation = Nothing

        'clear tall images labels
        lpbti1.Text = ""
        lpbti2.Text = ""
        lpbti3.Text = ""
        lpbti4.Text = ""
        lpbti5.Text = ""
        lpbti6.Text = ""
        lpbti7.Text = ""
        lpbti8.Text = ""
        lpbti9.Text = ""
        lpbti10.Text = ""
        lpbti11.Text = ""
        lpbti12.Text = ""
        lpbti13.Text = ""
        lpbti14.Text = ""
        lpbti15.Text = ""
        lpbti16.Text = ""
        lpbti17.Text = ""
        lpbti18.Text = ""
        lpbti19.Text = ""
        lpbti20.Text = ""
        lpbti21.Text = ""
        lpbti22.Text = ""
        lpbti23.Text = ""
        lpbti24.Text = ""
        lpbti25.Text = ""
        lpbti26.Text = ""
        lpbti27.Text = ""
        lpbti28.Text = ""
        lpbti29.Text = ""
        lpbti30.Text = ""
        lpbti31.Text = ""
        lpbti32.Text = ""
        lpbti33.Text = ""
        lpbti34.Text = ""
        lpbti35.Text = ""
        lpbti36.Text = ""
        lpbti37.Text = ""
        lpbti38.Text = ""
        lpbti39.Text = ""
        lpbti40.Text = ""
        lpbti41.Text = ""
        lpbti42.Text = ""
        lpbti43.Text = ""
        lpbti44.Text = ""
        lpbti45.Text = ""
        lpbti46.Text = ""
        lpbti47.Text = ""
        lpbti48.Text = ""
        lpbti49.Text = ""
        lpbti50.Text = ""
        lpbti51.Text = ""
        lpbti52.Text = ""
        lpbti53.Text = ""
        lpbti54.Text = ""
        lpbti55.Text = ""
        lpbti56.Text = ""
        lpbti57.Text = ""
        lpbti58.Text = ""
        lpbti59.Text = ""
        lpbti60.Text = ""
        lpbti61.Text = ""
        lpbti62.Text = ""
        lpbti63.Text = ""
        lpbti64.Text = ""
        lpbti65.Text = ""
        lpbti66.Text = ""
        lpbti67.Text = ""
        lpbti68.Text = ""
        lpbti69.Text = ""
        lpbti70.Text = ""
        lpbti71.Text = ""
        lpbti72.Text = ""
        'lpbti73.text = ""
        'lpbti74.text = ""
        'lpbti75.text = ""
        'lpbti76.text = ""
        'lpbti77.text = ""
        'lpbti78.text = ""
        'lpbti79.text = ""
        'lpbti80.text = ""
        'lpbti81.text = ""
        'lpbti82.text = ""
        'lpbti83.text = ""
        'lpbti84.text = ""
        'lpbti85.text = ""
        'lpbti86.text = ""
        'lpbti87.text = ""
        'lpbti88.text = ""
        'lpbti89.text = ""
        'lpbti90.text = ""
        'lpbti91.text = ""
        'lpbti92.text = ""
        'lpbti93.text = ""
        'lpbti94.text = ""
        'lpbti95.text = ""
        'lpbti96.text = ""
        'lpbti97.text = ""
        'lpbti98.text = ""
        'lpbti99.text = ""
        'lpbti100.text = ""
        'lpbti1.Text = ""

        'disable current folder jpg and tbn files
        pbCurIconUsed.Enabled = False
        pbCurIconUsed2.Enabled = False
        pbCurrentIconUsedNT.Enabled = False
        pbCurTBNUsed.Enabled = False
        pbCurTBNUsed2.Enabled = False

        'clear temp pb (used for custom fanart and icons)
        pbCustomImageTemp.Image = Nothing
        pbCustomImageTemp.ImageLocation = Nothing

        'clear fanart lbls
        klblfatmdb1.Text = ""
        klblfatmdb2.Text = ""
        klblfatmdb3.Text = ""
        klblfatmdb4.Text = ""
        klblfatmdb5.Text = ""
        klblfatmdb6.Text = ""
        klblfatmdb7.Text = ""
        klblfatmdb8.Text = ""
        klblfatmdb9.Text = ""
        klblfatmdb10.Text = ""
        klblfatmdb11.Text = ""
        klblfatmdb12.Text = ""
        klblfatmdb13.Text = ""
        klblfatmdb14.Text = ""
        klblfatmdb15.Text = ""
        klblfatmdb16.Text = ""
        klblfatmdb17.Text = ""
        klblfatmdb18.Text = ""
        klblfatmdb19.Text = ""
        klblfatmdb20.Text = ""
        klblfatmdb21.Text = ""
        klblfatmdb22.Text = ""
        klblfatmdb23.Text = ""
        klblfatmdb24.Text = ""
        klblfatmdb1.Visible = False
        klblfatmdb2.Visible = False
        klblfatmdb3.Visible = False
        klblfatmdb4.Visible = False
        klblfatmdb5.Visible = False
        klblfatmdb6.Visible = False
        klblfatmdb7.Visible = False
        klblfatmdb8.Visible = False
        klblfatmdb9.Visible = False
        klblfatmdb10.Visible = False
        klblfatmdb11.Visible = False
        klblfatmdb12.Visible = False
        klblfatmdb13.Visible = False
        klblfatmdb14.Visible = False
        klblfatmdb15.Visible = False
        klblfatmdb16.Visible = False
        klblfatmdb17.Visible = False
        klblfatmdb18.Visible = False
        klblfatmdb19.Visible = False
        klblfatmdb20.Visible = False
        klblfatmdb21.Visible = False
        klblfatmdb22.Visible = False
        klblfatmdb23.Visible = False
        klblfatmdb24.Visible = False

        'clear fanart images
        fanartpb1.ImageLocation = Nothing
        fanartpb1.Enabled = False

        pbfatmdb1.Image = Nothing
        pbfatmdb1.ImageLocation = Nothing
        pbfatmdb1.Enabled = False

        pbfatmdb2.Image = Nothing
        pbfatmdb2.ImageLocation = Nothing
        pbfatmdb2.Enabled = False

        pbfatmdb3.Image = Nothing
        pbfatmdb3.ImageLocation = Nothing
        pbfatmdb3.Enabled = False

        pbfatmdb4.Image = Nothing
        pbfatmdb4.ImageLocation = Nothing
        pbfatmdb4.Enabled = False

        pbfatmdb5.Image = Nothing
        pbfatmdb5.ImageLocation = Nothing
        pbfatmdb5.Enabled = False

        pbfatmdb6.Image = Nothing
        pbfatmdb6.ImageLocation = Nothing
        pbfatmdb6.Enabled = False

        pbfatmdb7.Image = Nothing
        pbfatmdb7.ImageLocation = Nothing
        pbfatmdb7.Enabled = False

        pbfatmdb8.Image = Nothing
        pbfatmdb8.ImageLocation = Nothing
        pbfatmdb8.Enabled = False

        pbfatmdb9.Image = Nothing
        pbfatmdb9.ImageLocation = Nothing
        pbfatmdb9.Enabled = False

        pbfatmdb10.Image = Nothing
        pbfatmdb10.ImageLocation = Nothing
        pbfatmdb10.Enabled = False

        pbfatmdb11.Image = Nothing
        pbfatmdb11.ImageLocation = Nothing
        pbfatmdb11.Enabled = False

        pbfatmdb12.Image = Nothing
        pbfatmdb12.ImageLocation = Nothing
        pbfatmdb12.Enabled = False

        pbfatmdb13.Image = Nothing
        pbfatmdb13.ImageLocation = Nothing
        pbfatmdb13.Enabled = False

        pbfatmdb14.Image = Nothing
        pbfatmdb14.ImageLocation = Nothing
        pbfatmdb14.Enabled = False

        pbfatmdb15.Image = Nothing
        pbfatmdb15.ImageLocation = Nothing
        pbfatmdb15.Enabled = False

        pbfatmdb16.Image = Nothing
        pbfatmdb16.ImageLocation = Nothing
        pbfatmdb16.Enabled = False

        pbfatmdb17.Image = Nothing
        pbfatmdb17.ImageLocation = Nothing
        pbfatmdb17.Enabled = False

        pbfatmdb18.Image = Nothing
        pbfatmdb18.ImageLocation = Nothing
        pbfatmdb18.Enabled = False

        pbfatmdb19.Image = Nothing
        pbfatmdb19.ImageLocation = Nothing
        pbfatmdb19.Enabled = False

        pbfatmdb20.Image = Nothing
        pbfatmdb20.ImageLocation = Nothing
        pbfatmdb20.Enabled = False

        pbfatmdb21.Image = Nothing
        pbfatmdb21.ImageLocation = Nothing
        pbfatmdb21.Enabled = False

        pbfatmdb22.Image = Nothing
        pbfatmdb22.ImageLocation = Nothing
        pbfatmdb22.Enabled = False

        pbfatmdb23.Image = Nothing
        pbfatmdb23.ImageLocation = Nothing
        pbfatmdb23.Enabled = False

        pbfatmdb24.Image = Nothing
        pbfatmdb24.ImageLocation = Nothing
        pbfatmdb24.Enabled = False


        'clear current icon
        ' pbCurIconUsed.ImageLocation = Nothing
        'pbCurIconUsed.Enabled = False

        'clear IMP Poster Labels
        klblposterIMP1.Text = ""
        klblposterIMP2.Text = ""
        klblposterIMP3.Text = ""
        klblposterIMP4.Text = ""
        klblposterIMP5.Text = ""
        klblposterIMP6.Text = ""
        klblposterIMP7.Text = ""
        klblposterIMP8.Text = ""
        klblposterIMP9.Text = ""
        klblposterIMP10.Text = ""
        klblposterIMP11.Text = ""
        klblposterIMP12.Text = ""
        klblposterIMP13.Text = ""
        klblposterIMP14.Text = ""
        klblposterIMP15.Text = ""
        klblposterIMP16.Text = ""
        klblposterIMP17.Text = ""
        klblposterIMP18.Text = ""
        klblposterIMP19.Text = ""
        klblposterIMP20.Text = ""
        klblposterIMP21.Text = ""
        klblposterIMP22.Text = ""
        klblposterIMP23.Text = ""
        klblposterIMP24.Text = ""
        klblposterIMP1.Visible = False
        klblposterIMP2.Visible = False
        klblposterIMP3.Visible = False
        klblposterIMP4.Visible = False
        klblposterIMP5.Visible = False
        klblposterIMP6.Visible = False
        klblposterIMP7.Visible = False
        klblposterIMP8.Visible = False
        klblposterIMP9.Visible = False
        klblposterIMP10.Visible = False
        klblposterIMP11.Visible = False
        klblposterIMP12.Visible = False
        klblposterIMP13.Visible = False
        klblposterIMP14.Visible = False
        klblposterIMP15.Visible = False
        klblposterIMP16.Visible = False
        klblposterIMP17.Visible = False
        klblposterIMP18.Visible = False
        klblposterIMP19.Visible = False
        klblposterIMP20.Visible = False
        klblposterIMP21.Visible = False
        klblposterIMP22.Visible = False
        klblposterIMP23.Visible = False
        klblposterIMP24.Visible = False


        'clear IMP posters
        pbposterIMP1.Image = Nothing
        pbposterIMP2.Image = Nothing
        pbposterIMP3.Image = Nothing
        pbposterIMP4.Image = Nothing
        pbposterIMP5.Image = Nothing
        pbposterIMP6.Image = Nothing
        pbposterIMP7.Image = Nothing
        pbposterIMP8.Image = Nothing

        pbposterIMP1.ImageLocation = Nothing
        pbposterIMP2.ImageLocation = Nothing
        pbposterIMP3.ImageLocation = Nothing
        pbposterIMP4.ImageLocation = Nothing
        pbposterIMP5.ImageLocation = Nothing
        pbposterIMP6.ImageLocation = Nothing
        pbposterIMP7.ImageLocation = Nothing
        pbposterIMP8.ImageLocation = Nothing

        pbposterIMP1.Enabled = False
        pbposterIMP2.Enabled = False
        pbposterIMP3.Enabled = False
        pbposterIMP4.Enabled = False
        pbposterIMP5.Enabled = False
        pbposterIMP6.Enabled = False
        pbposterIMP7.Enabled = False
        pbposterIMP8.Enabled = False

        pbposterIMP9.ImageLocation = Nothing
        pbposterIMP9.Enabled = False
        pbposterIMP9.Image = Nothing
        pbposterIMP10.ImageLocation = Nothing
        pbposterIMP10.Enabled = False
        pbposterIMP10.Image = Nothing
        pbposterIMP11.ImageLocation = Nothing
        pbposterIMP11.Enabled = False
        pbposterIMP11.Image = Nothing
        pbposterIMP12.ImageLocation = Nothing
        pbposterIMP12.Enabled = False
        pbposterIMP12.Image = Nothing
        pbposterIMP13.ImageLocation = Nothing
        pbposterIMP13.Enabled = False
        pbposterIMP13.Image = Nothing
        pbposterIMP14.ImageLocation = Nothing
        pbposterIMP14.Enabled = False
        pbposterIMP14.Image = Nothing
        pbposterIMP15.ImageLocation = Nothing
        pbposterIMP15.Enabled = False
        pbposterIMP15.Image = Nothing
        pbposterIMP16.ImageLocation = Nothing
        pbposterIMP16.Enabled = False
        pbposterIMP16.Image = Nothing
        pbposterIMP17.ImageLocation = Nothing
        pbposterIMP17.Enabled = False
        pbposterIMP17.Image = Nothing
        pbposterIMP18.ImageLocation = Nothing
        pbposterIMP18.Enabled = False
        pbposterIMP18.Image = Nothing
        pbposterIMP19.ImageLocation = Nothing
        pbposterIMP19.Enabled = False
        pbposterIMP19.Image = Nothing
        pbposterIMP20.ImageLocation = Nothing
        pbposterIMP20.Enabled = False
        pbposterIMP20.Image = Nothing
        pbposterIMP21.ImageLocation = Nothing
        pbposterIMP21.Enabled = False
        pbposterIMP21.Image = Nothing
        pbposterIMP22.ImageLocation = Nothing
        pbposterIMP22.Enabled = False
        pbposterIMP22.Image = Nothing
        pbposterIMP23.ImageLocation = Nothing
        pbposterIMP23.Enabled = False
        pbposterIMP23.Image = Nothing
        pbposterIMP24.ImageLocation = Nothing
        pbposterIMP24.Enabled = False
        pbposterIMP24.Image = Nothing

        'clear TMDB Poster Labels
        klblposterTMDB1.Text = ""
        klblposterTMDB2.Text = ""
        klblposterTMDB3.Text = ""
        klblposterTMDB4.Text = ""
        klblposterTMDB5.Text = ""
        klblposterTMDB6.Text = ""
        klblposterTMDB7.Text = ""
        klblposterTMDB8.Text = ""
        klblposterTMDB9.Text = ""
        klblposterTMDB10.Text = ""
        klblposterTMDB11.Text = ""
        klblposterTMDB12.Text = ""
        klblposterTMDB13.Text = ""
        klblposterTMDB14.Text = ""
        klblposterTMDB15.Text = ""
        klblposterTMDB16.Text = ""
        klblposterTMDB17.Text = ""
        klblposterTMDB18.Text = ""
        klblposterTMDB19.Text = ""
        klblposterTMDB20.Text = ""
        klblposterTMDB21.Text = ""
        klblposterTMDB22.Text = ""
        klblposterTMDB23.Text = ""
        klblposterTMDB24.Text = ""
        klblposterTMDB1.Visible = False
        klblposterTMDB2.Visible = False
        klblposterTMDB3.Visible = False
        klblposterTMDB4.Visible = False
        klblposterTMDB5.Visible = False
        klblposterTMDB6.Visible = False
        klblposterTMDB7.Visible = False
        klblposterTMDB8.Visible = False
        klblposterTMDB9.Visible = False
        klblposterTMDB10.Visible = False
        klblposterTMDB11.Visible = False
        klblposterTMDB12.Visible = False
        klblposterTMDB13.Visible = False
        klblposterTMDB14.Visible = False
        klblposterTMDB15.Visible = False
        klblposterTMDB16.Visible = False
        klblposterTMDB17.Visible = False
        klblposterTMDB18.Visible = False
        klblposterTMDB19.Visible = False
        klblposterTMDB20.Visible = False
        klblposterTMDB21.Visible = False
        klblposterTMDB22.Visible = False
        klblposterTMDB23.Visible = False
        klblposterTMDB24.Visible = False

        'clear TMDB posters
        pbposterTMDB1.Image = Nothing
        pbposterTMDB2.Image = Nothing
        pbposterTMDB3.Image = Nothing
        pbposterTMDB4.Image = Nothing
        pbposterTMDB5.Image = Nothing
        pbposterTMDB6.Image = Nothing
        pbposterTMDB7.Image = Nothing
        pbposterTMDB8.Image = Nothing

        pbposterTMDB1.ImageLocation = Nothing
        pbposterTMDB2.ImageLocation = Nothing
        pbposterTMDB3.ImageLocation = Nothing
        pbposterTMDB4.ImageLocation = Nothing
        pbposterTMDB5.ImageLocation = Nothing
        pbposterTMDB6.ImageLocation = Nothing
        pbposterTMDB7.ImageLocation = Nothing
        pbposterTMDB8.ImageLocation = Nothing

        pbposterTMDB1.Enabled = False
        pbposterTMDB2.Enabled = False
        pbposterTMDB3.Enabled = False
        pbposterTMDB4.Enabled = False
        pbposterTMDB5.Enabled = False
        pbposterTMDB6.Enabled = False
        pbposterTMDB7.Enabled = False
        pbposterTMDB8.Enabled = False

        pbposterTMDB9.ImageLocation = Nothing
        pbposterTMDB9.Enabled = False
        pbposterTMDB9.Image = Nothing
        pbposterTMDB10.ImageLocation = Nothing
        pbposterTMDB10.Enabled = False
        pbposterTMDB10.Image = Nothing
        pbposterTMDB11.ImageLocation = Nothing
        pbposterTMDB11.Enabled = False
        pbposterTMDB11.Image = Nothing
        pbposterTMDB12.ImageLocation = Nothing
        pbposterTMDB12.Enabled = False
        pbposterTMDB12.Image = Nothing
        pbposterTMDB13.ImageLocation = Nothing
        pbposterTMDB13.Enabled = False
        pbposterTMDB13.Image = Nothing
        pbposterTMDB14.ImageLocation = Nothing
        pbposterTMDB14.Enabled = False
        pbposterTMDB14.Image = Nothing
        pbposterTMDB15.ImageLocation = Nothing
        pbposterTMDB15.Enabled = False
        pbposterTMDB15.Image = Nothing
        pbposterTMDB16.ImageLocation = Nothing
        pbposterTMDB16.Enabled = False
        pbposterTMDB16.Image = Nothing
        pbposterTMDB17.ImageLocation = Nothing
        pbposterTMDB17.Enabled = False
        pbposterTMDB17.Image = Nothing
        pbposterTMDB18.ImageLocation = Nothing
        pbposterTMDB18.Enabled = False
        pbposterTMDB18.Image = Nothing
        pbposterTMDB19.ImageLocation = Nothing
        pbposterTMDB19.Enabled = False
        pbposterTMDB19.Image = Nothing
        pbposterTMDB20.ImageLocation = Nothing
        pbposterTMDB20.Enabled = False
        pbposterTMDB20.Image = Nothing
        pbposterTMDB21.ImageLocation = Nothing
        pbposterTMDB21.Enabled = False
        pbposterTMDB21.Image = Nothing
        pbposterTMDB22.ImageLocation = Nothing
        pbposterTMDB22.Enabled = False
        pbposterTMDB22.Image = Nothing
        pbposterTMDB23.ImageLocation = Nothing
        pbposterTMDB23.Enabled = False
        pbposterTMDB23.Image = Nothing
        pbposterTMDB24.ImageLocation = Nothing
        pbposterTMDB24.Enabled = False
        pbposterTMDB24.Image = Nothing


        'wide icons
        ''wide no style
        pbwns1.ImageLocation = Nothing
        pbwns2.ImageLocation = Nothing
        pbwns3.ImageLocation = Nothing
        pbwns4.ImageLocation = Nothing
        pbwns5.ImageLocation = Nothing
        pbwns6.ImageLocation = Nothing
        pbwns7.ImageLocation = Nothing
        pbwns8.ImageLocation = Nothing
        pbwns9.ImageLocation = Nothing
        pbwns10.ImageLocation = Nothing
        pbwns11.ImageLocation = Nothing
        pbwns12.ImageLocation = Nothing
        pbwns13.ImageLocation = Nothing
        pbwns14.ImageLocation = Nothing
        pbwns15.ImageLocation = Nothing
        pbwns16.ImageLocation = Nothing
        pbwns17.ImageLocation = Nothing
        pbwns18.ImageLocation = Nothing
        pbwns19.ImageLocation = Nothing
        pbwns20.ImageLocation = Nothing
        pbwns21.ImageLocation = Nothing
        pbwns22.ImageLocation = Nothing
        pbwns23.ImageLocation = Nothing
        pbwns24.ImageLocation = Nothing
        pbwns25.ImageLocation = Nothing
        pbwns26.ImageLocation = Nothing
        pbwns27.ImageLocation = Nothing
        pbwns28.ImageLocation = Nothing
        pbwns29.ImageLocation = Nothing
        pbwns30.ImageLocation = Nothing
        pbwns31.ImageLocation = Nothing
        pbwns32.ImageLocation = Nothing
        pbwns33.ImageLocation = Nothing
        pbwns34.ImageLocation = Nothing
        pbwns35.ImageLocation = Nothing
        pbwns36.ImageLocation = Nothing
        ''wide round shadow style
        pbwrs1.ImageLocation = Nothing
        pbwrs2.ImageLocation = Nothing
        pbwrs3.ImageLocation = Nothing
        pbwrs4.ImageLocation = Nothing
        pbwrs5.ImageLocation = Nothing
        pbwrs6.ImageLocation = Nothing
        pbwrs7.ImageLocation = Nothing
        pbwrs8.ImageLocation = Nothing
        pbwrs9.ImageLocation = Nothing
        pbwrs10.ImageLocation = Nothing
        pbwrs11.ImageLocation = Nothing
        pbwrs12.ImageLocation = Nothing
        pbwrs13.ImageLocation = Nothing
        pbwrs14.ImageLocation = Nothing
        pbwrs15.ImageLocation = Nothing
        pbwrs16.ImageLocation = Nothing
        pbwrs17.ImageLocation = Nothing
        pbwrs18.ImageLocation = Nothing
        pbwrs19.ImageLocation = Nothing
        pbwrs20.ImageLocation = Nothing
        pbwrs21.ImageLocation = Nothing
        pbwrs22.ImageLocation = Nothing
        pbwrs23.ImageLocation = Nothing
        pbwrs24.ImageLocation = Nothing
        pbwrs25.ImageLocation = Nothing
        pbwrs26.ImageLocation = Nothing
        pbwrs27.ImageLocation = Nothing
        pbwrs28.ImageLocation = Nothing
        pbwrs29.ImageLocation = Nothing
        pbwrs30.ImageLocation = Nothing
        pbwrs31.ImageLocation = Nothing
        pbwrs32.ImageLocation = Nothing
        pbwrs33.ImageLocation = Nothing
        pbwrs34.ImageLocation = Nothing
        pbwrs35.ImageLocation = Nothing
        pbwrs36.ImageLocation = Nothing
        ''wide round shadow scan style
        pbwrsscan1.ImageLocation = Nothing
        pbwrsscan2.ImageLocation = Nothing
        pbwrsscan3.ImageLocation = Nothing
        pbwrsscan4.ImageLocation = Nothing
        pbwrsscan5.ImageLocation = Nothing
        pbwrsscan6.ImageLocation = Nothing
        pbwrsscan7.ImageLocation = Nothing
        pbwrsscan8.ImageLocation = Nothing
        pbwrsscan9.ImageLocation = Nothing
        pbwrsscan10.ImageLocation = Nothing
        pbwrsscan11.ImageLocation = Nothing
        pbwrsscan12.ImageLocation = Nothing
        pbwrsscan13.ImageLocation = Nothing
        pbwrsscan14.ImageLocation = Nothing
        pbwrsscan15.ImageLocation = Nothing
        pbwrsscan16.ImageLocation = Nothing
        pbwrsscan17.ImageLocation = Nothing
        pbwrsscan18.ImageLocation = Nothing
        pbwrsscan19.ImageLocation = Nothing
        pbwrsscan20.ImageLocation = Nothing
        pbwrsscan21.ImageLocation = Nothing
        pbwrsscan22.ImageLocation = Nothing
        pbwrsscan23.ImageLocation = Nothing
        pbwrsscan24.ImageLocation = Nothing
        pbwrsscan25.ImageLocation = Nothing
        pbwrsscan26.ImageLocation = Nothing
        pbwrsscan27.ImageLocation = Nothing
        pbwrsscan28.ImageLocation = Nothing
        pbwrsscan29.ImageLocation = Nothing
        pbwrsscan30.ImageLocation = Nothing
        pbwrsscan31.ImageLocation = Nothing
        pbwrsscan32.ImageLocation = Nothing
        pbwrsscan33.ImageLocation = Nothing
        pbwrsscan34.ImageLocation = Nothing
        pbwrsscan35.ImageLocation = Nothing
        pbwrsscan36.ImageLocation = Nothing

        ''wide rounded shadow glass style
        pb1.ImageLocation = Nothing
        pb2.ImageLocation = Nothing
        pb3.ImageLocation = Nothing
        pb4.ImageLocation = Nothing
        pb5.ImageLocation = Nothing
        pb6.ImageLocation = Nothing
        pb7.ImageLocation = Nothing
        pb8.ImageLocation = Nothing
        pb9.ImageLocation = Nothing
        pb10.ImageLocation = Nothing
        pb11.ImageLocation = Nothing
        pb12.ImageLocation = Nothing
        pb13.ImageLocation = Nothing
        pb14.ImageLocation = Nothing
        pb15.ImageLocation = Nothing
        pb16.ImageLocation = Nothing
        pb17.ImageLocation = Nothing
        pb18.ImageLocation = Nothing
        pb19.ImageLocation = Nothing
        pb20.ImageLocation = Nothing
        pb21.ImageLocation = Nothing
        pb22.ImageLocation = Nothing
        pb23.ImageLocation = Nothing
        pb24.ImageLocation = Nothing
        pb25.ImageLocation = Nothing
        pb26.ImageLocation = Nothing
        pb27.ImageLocation = Nothing
        pb28.ImageLocation = Nothing
        pb29.ImageLocation = Nothing
        pb30.ImageLocation = Nothing
        pb31.ImageLocation = Nothing
        pb32.ImageLocation = Nothing
        pb33.ImageLocation = Nothing
        pb34.ImageLocation = Nothing
        pb35.ImageLocation = Nothing
        pb36.ImageLocation = Nothing


        pb1.Enabled = False
        pb2.Enabled = False
        pb3.Enabled = False
        pb4.Enabled = False
        pb5.Enabled = False
        pb6.Enabled = False
        pb7.Enabled = False
        pb8.Enabled = False
        pb9.Enabled = False
        pb10.Enabled = False
        pb11.Enabled = False
        pb12.Enabled = False
        pb13.Enabled = False
        pb14.Enabled = False
        pb15.Enabled = False
        pb16.Enabled = False
        pb17.Enabled = False
        pb18.Enabled = False
        pb19.Enabled = False
        pb20.Enabled = False
        pb21.Enabled = False
        pb22.Enabled = False
        pb23.Enabled = False
        pb24.Enabled = False
        pb25.Enabled = False
        pb26.Enabled = False
        pb27.Enabled = False
        pb28.Enabled = False
        pb29.Enabled = False
        pb30.Enabled = False
        pb31.Enabled = False
        pb32.Enabled = False
        pb33.Enabled = False
        pb34.Enabled = False
        pb35.Enabled = False
        pb36.Enabled = False
        pbwns1.Enabled = False
        pbwns2.Enabled = False
        pbwns3.Enabled = False
        pbwns4.Enabled = False
        pbwns5.Enabled = False
        pbwns6.Enabled = False
        pbwns7.Enabled = False
        pbwns8.Enabled = False
        pbwns9.Enabled = False
        pbwns10.Enabled = False
        pbwns11.Enabled = False
        pbwns12.Enabled = False
        pbwns13.Enabled = False
        pbwns14.Enabled = False
        pbwns15.Enabled = False
        pbwns16.Enabled = False
        pbwns17.Enabled = False
        pbwns18.Enabled = False
        pbwns19.Enabled = False
        pbwns20.Enabled = False
        pbwns21.Enabled = False
        pbwns22.Enabled = False
        pbwns23.Enabled = False
        pbwns24.Enabled = False
        pbwns25.Enabled = False
        pbwns26.Enabled = False
        pbwns27.Enabled = False
        pbwns28.Enabled = False
        pbwns29.Enabled = False
        pbwns30.Enabled = False
        pbwns31.Enabled = False
        pbwns32.Enabled = False
        pbwns33.Enabled = False
        pbwns34.Enabled = False
        pbwns35.Enabled = False
        pbwns36.Enabled = False
        pbwrs1.Enabled = False
        pbwrs2.Enabled = False
        pbwrs3.Enabled = False
        pbwrs4.Enabled = False
        pbwrs5.Enabled = False
        pbwrs6.Enabled = False
        pbwrs7.Enabled = False
        pbwrs8.Enabled = False
        pbwrs9.Enabled = False
        pbwrs10.Enabled = False
        pbwrs11.Enabled = False
        pbwrs12.Enabled = False
        pbwrs13.Enabled = False
        pbwrs14.Enabled = False
        pbwrs15.Enabled = False
        pbwrs16.Enabled = False
        pbwrs17.Enabled = False
        pbwrs18.Enabled = False
        pbwrs19.Enabled = False
        pbwrs20.Enabled = False
        pbwrs21.Enabled = False
        pbwrs22.Enabled = False
        pbwrs23.Enabled = False
        pbwrs24.Enabled = False
        pbwrs25.Enabled = False
        pbwrs26.Enabled = False
        pbwrs27.Enabled = False
        pbwrs28.Enabled = False
        pbwrs29.Enabled = False
        pbwrs30.Enabled = False
        pbwrs31.Enabled = False
        pbwrs32.Enabled = False
        pbwrs33.Enabled = False
        pbwrs34.Enabled = False
        pbwrs35.Enabled = False
        pbwrs36.Enabled = False
        pbwrsscan1.Enabled = False
        pbwrsscan2.Enabled = False
        pbwrsscan3.Enabled = False
        pbwrsscan4.Enabled = False
        pbwrsscan5.Enabled = False
        pbwrsscan6.Enabled = False
        pbwrsscan7.Enabled = False
        pbwrsscan8.Enabled = False
        pbwrsscan9.Enabled = False
        pbwrsscan10.Enabled = False
        pbwrsscan11.Enabled = False
        pbwrsscan12.Enabled = False
        pbwrsscan13.Enabled = False
        pbwrsscan14.Enabled = False
        pbwrsscan15.Enabled = False
        pbwrsscan16.Enabled = False
        pbwrsscan17.Enabled = False
        pbwrsscan18.Enabled = False
        pbwrsscan19.Enabled = False
        pbwrsscan20.Enabled = False
        pbwrsscan21.Enabled = False
        pbwrsscan22.Enabled = False
        pbwrsscan23.Enabled = False
        pbwrsscan24.Enabled = False
        pbwrsscan25.Enabled = False
        pbwrsscan26.Enabled = False
        pbwrsscan27.Enabled = False
        pbwrsscan28.Enabled = False
        pbwrsscan29.Enabled = False
        pbwrsscan30.Enabled = False
        pbwrsscan31.Enabled = False
        pbwrsscan32.Enabled = False
        pbwrsscan33.Enabled = False
        pbwrsscan34.Enabled = False
        pbwrsscan35.Enabled = False
        pbwrsscan36.Enabled = False

        '------------ TOKEN PICTURE BOX CLEAR AND DISABLE
        tpb1.ImageLocation = Nothing
        tpb2.ImageLocation = Nothing
        tpb3.ImageLocation = Nothing
        tpb4.ImageLocation = Nothing
        tpb5.ImageLocation = Nothing
        tpb6.ImageLocation = Nothing
        tpb7.ImageLocation = Nothing
        tpb8.ImageLocation = Nothing
        tpb9.ImageLocation = Nothing
        tpb10.ImageLocation = Nothing
        tpb11.ImageLocation = Nothing
        tpb12.ImageLocation = Nothing
        'tpb13.Image = Nothing
        'tpb14.Image = Nothing
        'tpb15.Image = Nothing
        'tpb16.Image = Nothing
        'tpb17.Image = Nothing
        'tpb18.Image = Nothing
        'tpb19.Image = Nothing
        'tpb20.Image = Nothing
        'tpb21.Image = Nothing
        'tpb22.Image = Nothing
        'tpb23.Image = Nothing
        'tpb24.Image = Nothing

        tpb1.Enabled = False
        tpb2.Enabled = False
        tpb3.Enabled = False
        tpb4.Enabled = False
        tpb5.Enabled = False
        tpb6.Enabled = False
        tpb7.Enabled = False
        tpb8.Enabled = False
        tpb9.Enabled = False
        tpb10.Enabled = False
        tpb11.Enabled = False
        tpb12.Enabled = False
        'tpb13.Enabled = False
        'tpb14.Enabled = False
        'tpb15.Enabled = False
        'tpb16.Enabled = False
        'tpb17.Enabled = False
        'tpb18.Enabled = False
        'tpb19.Enabled = False
        'tpb20.Enabled = False

        '-------------- SQUARE PB CLEAR AND DISABLE
        spb1.ImageLocation = Nothing
        spb2.ImageLocation = Nothing
        spb3.ImageLocation = Nothing
        spb4.ImageLocation = Nothing
        spb5.ImageLocation = Nothing
        spb6.ImageLocation = Nothing
        spb7.ImageLocation = Nothing
        spb8.ImageLocation = Nothing
        spb9.ImageLocation = Nothing
        spb10.ImageLocation = Nothing
        spb11.ImageLocation = Nothing
        spb12.ImageLocation = Nothing
        spb13.ImageLocation = Nothing
        spb14.ImageLocation = Nothing
        spb15.ImageLocation = Nothing
        spb16.ImageLocation = Nothing
        spb17.ImageLocation = Nothing
        spb18.ImageLocation = Nothing
        spb19.ImageLocation = Nothing
        spb20.ImageLocation = Nothing
        spb21.ImageLocation = Nothing
        spb22.ImageLocation = Nothing
        spb23.ImageLocation = Nothing
        spb24.ImageLocation = Nothing

        spb1.Enabled = False
        spb2.Enabled = False
        spb3.Enabled = False
        spb4.Enabled = False
        spb5.Enabled = False
        spb6.Enabled = False
        spb7.Enabled = False
        spb8.Enabled = False
        spb9.Enabled = False
        spb10.Enabled = False
        spb11.Enabled = False
        spb12.Enabled = False
        spb13.Enabled = False
        spb14.Enabled = False
        spb15.Enabled = False
        spb16.Enabled = False
        spb17.Enabled = False
        spb18.Enabled = False
        spb19.Enabled = False
        spb20.Enabled = False
        spb21.Enabled = False
        spb22.Enabled = False
        spb23.Enabled = False
        spb24.Enabled = False

        '-------- BOX SHOT CLEAR AND DISABLE
        ' Box Shot PB 0
        bspb1.ImageLocation = Nothing
        bspb1.Enabled = False
        bspb1.Image = Nothing
        ' Box Shot PB 1
        bspb2.ImageLocation = Nothing
        bspb2.Enabled = False
        bspb2.Image = Nothing
        ' Box Shot PB 2
        bspb3.ImageLocation = Nothing
        bspb3.Enabled = False
        bspb3.Image = Nothing
        ' Box Shot PB 3
        bspb4.ImageLocation = Nothing
        bspb4.Enabled = False
        bspb4.Image = Nothing
        ' Box Shot PB 4
        bspb5.ImageLocation = Nothing
        bspb5.Enabled = False
        bspb5.Image = Nothing
        ' Box Shot PB 5
        bspb6.ImageLocation = Nothing
        bspb6.Enabled = False
        bspb6.Image = Nothing
        ' Box Shot PB 6
        bspb7.ImageLocation = Nothing
        bspb7.Enabled = False
        bspb7.Image = Nothing
        ' Box Shot PB 7
        bspb8.ImageLocation = Nothing
        bspb8.Enabled = False
        bspb8.Image = Nothing
        ' Box Shot PB 8
        bspb9.ImageLocation = Nothing
        bspb9.Enabled = False
        bspb9.Image = Nothing
        ' Box Shot PB 9
        bspb10.ImageLocation = Nothing
        bspb10.Enabled = False
        bspb10.Image = Nothing
        ' Box Shot PB 10
        bspb11.ImageLocation = Nothing
        bspb11.Enabled = False
        bspb11.Image = Nothing
        ' Box Shot PB 11
        bspb12.ImageLocation = Nothing
        bspb12.Enabled = False
        bspb12.Image = Nothing
        ' Box Shot PB 12
        bspb13.ImageLocation = Nothing
        bspb13.Enabled = False
        bspb13.Image = Nothing
        ' Box Shot PB 13
        bspb14.ImageLocation = Nothing
        bspb14.Enabled = False
        bspb14.Image = Nothing
        ' Box Shot PB 14
        bspb15.ImageLocation = Nothing
        bspb15.Enabled = False
        bspb15.Image = Nothing
        ' Box Shot PB 15
        bspb16.ImageLocation = Nothing
        bspb16.Enabled = False
        bspb16.Image = Nothing
        ' Box Shot PB 16
        bspb17.ImageLocation = Nothing
        bspb17.Enabled = False
        bspb17.Image = Nothing
        ' Box Shot PB 17
        bspb18.ImageLocation = Nothing
        bspb18.Enabled = False
        bspb18.Image = Nothing
        ' Box Shot PB 18
        bspb19.ImageLocation = Nothing
        bspb19.Enabled = False
        bspb19.Image = Nothing
        ' Box Shot PB 19
        bspb20.ImageLocation = Nothing
        bspb20.Enabled = False
        bspb20.Image = Nothing
        ' Box Shot PB 20
        bspb21.ImageLocation = Nothing
        bspb21.Enabled = False
        bspb21.Image = Nothing
        ' Box Shot PB 21
        bspb22.ImageLocation = Nothing
        bspb22.Enabled = False
        bspb22.Image = Nothing
        ' Box Shot PB 22
        bspb23.ImageLocation = Nothing
        bspb23.Enabled = False
        bspb23.Image = Nothing
        ' Box Shot PB 23
        bspb24.ImageLocation = Nothing
        bspb24.Enabled = False
        bspb24.Image = Nothing
        ' Box Shot PB 24
        bspb25.ImageLocation = Nothing
        bspb25.Enabled = False
        bspb25.Image = Nothing
        ' Box Shot PB 25
        bspb26.ImageLocation = Nothing
        bspb26.Enabled = False
        bspb26.Image = Nothing
        ' Box Shot PB 26
        bspb27.ImageLocation = Nothing
        bspb27.Enabled = False
        bspb27.Image = Nothing
        ' Box Shot PB 27
        bspb28.ImageLocation = Nothing
        bspb28.Enabled = False
        bspb28.Image = Nothing
        ' Box Shot PB 28
        bspb29.ImageLocation = Nothing
        bspb29.Enabled = False
        bspb29.Image = Nothing
        ' Box Shot PB 29
        bspb30.ImageLocation = Nothing
        bspb30.Enabled = False
        bspb30.Image = Nothing
        ' Box Shot PB 30
        bspb31.ImageLocation = Nothing
        bspb31.Enabled = False
        bspb31.Image = Nothing
        ' Box Shot PB 31
        bspb32.ImageLocation = Nothing
        bspb32.Enabled = False
        bspb32.Image = Nothing
        ' Box Shot PB 32
        bspb33.ImageLocation = Nothing
        bspb33.Enabled = False
        bspb33.Image = Nothing
        ' Box Shot PB 33
        bspb34.ImageLocation = Nothing
        bspb34.Enabled = False
        bspb34.Image = Nothing
        ' Box Shot PB 34
        bspb35.ImageLocation = Nothing
        bspb35.Enabled = False
        bspb35.Image = Nothing
        ' Box Shot PB 35
        bspb36.ImageLocation = Nothing
        bspb36.Enabled = False
        bspb36.Image = Nothing
        ' Box Shot PB 36
        bspb37.ImageLocation = Nothing
        bspb37.Enabled = False
        bspb37.Image = Nothing
        ' Box Shot PB 37
        bspb38.ImageLocation = Nothing
        bspb38.Enabled = False
        bspb38.Image = Nothing
        ' Box Shot PB 38
        bspb39.ImageLocation = Nothing
        bspb39.Enabled = False
        bspb39.Image = Nothing
        ' Box Shot PB 39
        bspb40.ImageLocation = Nothing
        bspb40.Enabled = False
        bspb40.Image = Nothing
        ' Box Shot PB 40
        bspb41.ImageLocation = Nothing
        bspb41.Enabled = False
        bspb41.Image = Nothing
        ' Box Shot PB 41
        bspb42.ImageLocation = Nothing
        bspb42.Enabled = False
        bspb42.Image = Nothing
        ' Box Shot PB 42
        bspb43.ImageLocation = Nothing
        bspb43.Enabled = False
        bspb43.Image = Nothing
        ' Box Shot PB 43
        bspb44.ImageLocation = Nothing
        bspb44.Enabled = False
        bspb44.Image = Nothing
        ' Box Shot PB 44
        bspb45.ImageLocation = Nothing
        bspb45.Enabled = False
        bspb45.Image = Nothing
        ' Box Shot PB 45
        bspb46.ImageLocation = Nothing
        bspb46.Enabled = False
        bspb46.Image = Nothing
        ' Box Shot PB 46
        bspb47.ImageLocation = Nothing
        bspb47.Enabled = False
        bspb47.Image = Nothing
        ' Box Shot PB 47
        bspb48.ImageLocation = Nothing
        bspb48.Enabled = False
        bspb48.Image = Nothing
        ' Box Shot PB 48
        bspb49.ImageLocation = Nothing
        bspb49.Enabled = False
        bspb49.Image = Nothing
        ' Box Shot PB 49
        bspb50.ImageLocation = Nothing
        bspb50.Enabled = False
        bspb50.Image = Nothing
        ' Box Shot PB 50
        bspb51.ImageLocation = Nothing
        bspb51.Enabled = False
        bspb51.Image = Nothing
        ' Box Shot PB 51
        bspb52.ImageLocation = Nothing
        bspb52.Enabled = False
        bspb52.Image = Nothing
        ' Box Shot PB 52
        bspb53.ImageLocation = Nothing
        bspb53.Enabled = False
        bspb53.Image = Nothing
        ' Box Shot PB 53
        bspb54.ImageLocation = Nothing
        bspb54.Enabled = False
        bspb54.Image = Nothing
        ' Box Shot PB 54
        bspb55.ImageLocation = Nothing
        bspb55.Enabled = False
        bspb55.Image = Nothing
        ' Box Shot PB 55
        bspb56.ImageLocation = Nothing
        bspb56.Enabled = False
        bspb56.Image = Nothing
        ' Box Shot PB 56
        bspb57.ImageLocation = Nothing
        bspb57.Enabled = False
        bspb57.Image = Nothing
        ' Box Shot PB 57
        bspb58.ImageLocation = Nothing
        bspb58.Enabled = False
        bspb58.Image = Nothing
        ' Box Shot PB 58
        bspb59.ImageLocation = Nothing
        bspb59.Enabled = False
        bspb59.Image = Nothing
        ' Box Shot PB 59
        bspb60.ImageLocation = Nothing
        bspb60.Enabled = False
        bspb60.Image = Nothing
        ' Box Shot PB 60
        bspb61.ImageLocation = Nothing
        bspb61.Enabled = False
        bspb61.Image = Nothing
        ' Box Shot PB 61
        bspb62.ImageLocation = Nothing
        bspb62.Enabled = False
        bspb62.Image = Nothing
        ' Box Shot PB 62
        bspb63.ImageLocation = Nothing
        bspb63.Enabled = False
        bspb63.Image = Nothing
        ' Box Shot PB 63
        bspb64.ImageLocation = Nothing
        bspb64.Enabled = False
        bspb64.Image = Nothing
        ' Box Shot PB 64
        bspb65.ImageLocation = Nothing
        bspb65.Enabled = False
        bspb65.Image = Nothing
        ' Box Shot PB 65
        bspb66.ImageLocation = Nothing
        bspb66.Enabled = False
        bspb66.Image = Nothing
        ' Box Shot PB 66
        bspb67.ImageLocation = Nothing
        bspb67.Enabled = False
        bspb67.Image = Nothing
        ' Box Shot PB 67
        bspb68.ImageLocation = Nothing
        bspb68.Enabled = False
        bspb68.Image = Nothing
        ' Box Shot PB 68
        bspb69.ImageLocation = Nothing
        bspb69.Enabled = False
        bspb69.Image = Nothing
        ' Box Shot PB 69
        bspb70.ImageLocation = Nothing
        bspb70.Enabled = False
        bspb70.Image = Nothing
        ' Box Shot PB 70
        bspb71.ImageLocation = Nothing
        bspb71.Enabled = False
        bspb71.Image = Nothing
        ' Box Shot PB 71
        bspb72.ImageLocation = Nothing
        bspb72.Enabled = False
        bspb72.Image = Nothing
        ' Box Shot PB 72
        bspb73.ImageLocation = Nothing
        bspb73.Enabled = False
        bspb73.Image = Nothing
        ' Box Shot PB 73
        bspb74.ImageLocation = Nothing
        bspb74.Enabled = False
        bspb74.Image = Nothing
        ' Box Shot PB 74
        bspb75.ImageLocation = Nothing
        bspb75.Enabled = False
        bspb75.Image = Nothing
        ' Box Shot PB 75
        bspb76.ImageLocation = Nothing
        bspb76.Enabled = False
        bspb76.Image = Nothing
        ' Box Shot PB 76
        bspb77.ImageLocation = Nothing
        bspb77.Enabled = False
        bspb77.Image = Nothing
        ' Box Shot PB 77
        bspb78.ImageLocation = Nothing
        bspb78.Enabled = False
        bspb78.Image = Nothing
        ' Box Shot PB 78
        bspb79.ImageLocation = Nothing
        bspb79.Enabled = False
        bspb79.Image = Nothing
        ' Box Shot PB 79
        bspb80.ImageLocation = Nothing
        bspb80.Enabled = False
        bspb80.Image = Nothing
        ' Box Shot PB 80
        bspb81.ImageLocation = Nothing
        bspb81.Enabled = False
        bspb81.Image = Nothing
        ' Box Shot PB 81
        bspb82.ImageLocation = Nothing
        bspb82.Enabled = False
        bspb82.Image = Nothing
        ' Box Shot PB 82
        bspb83.ImageLocation = Nothing
        bspb83.Enabled = False
        bspb83.Image = Nothing
        ' Box Shot PB 83
        bspb84.ImageLocation = Nothing
        bspb84.Enabled = False
        bspb84.Image = Nothing
        ' Box Shot PB 84
        bspb85.ImageLocation = Nothing
        bspb85.Enabled = False
        bspb85.Image = Nothing
        ' Box Shot PB 85
        bspb86.ImageLocation = Nothing
        bspb86.Enabled = False
        bspb86.Image = Nothing
        ' Box Shot PB 86
        bspb87.ImageLocation = Nothing
        bspb87.Enabled = False
        bspb87.Image = Nothing
        ' Box Shot PB 87
        bspb88.ImageLocation = Nothing
        bspb88.Enabled = False
        bspb88.Image = Nothing
        ' Box Shot PB 88
        bspb89.ImageLocation = Nothing
        bspb89.Enabled = False
        bspb89.Image = Nothing
        ' Box Shot PB 89
        bspb90.ImageLocation = Nothing
        bspb90.Enabled = False
        bspb90.Image = Nothing
        ' Box Shot PB 90
        bspb91.ImageLocation = Nothing
        bspb91.Enabled = False
        bspb91.Image = Nothing
        ' Box Shot PB 91
        bspb92.ImageLocation = Nothing
        bspb92.Enabled = False
        bspb92.Image = Nothing
        ' Box Shot PB 92
        bspb93.ImageLocation = Nothing
        bspb93.Enabled = False
        bspb93.Image = Nothing
        GC.Collect()
    End Sub
    Public Function FileExists(ByVal FileFullPath As String) _
     As Boolean

        Dim f As New IO.FileInfo(FileFullPath)
        Return f.Exists

    End Function
    Public Sub processdropdownsnfoupdates()
        'set locals

        Dim maxDisplayedIcons As Integer = 0
        'Dim tmovie As movie
        Try
            currentmovie = CType(movies(CInt(lbMyMovies.SelectedValue)), movie)
        Catch ex As Exception
            Debug.Print(ex.ToString)
            Exit Sub
        End Try

        Dim dname, curpath As String
        dname = currentmovie.getmoviename
        tbnewname.Text = dname
        curpath = currentmovie.getmoviepath

        lblPbar.Text = "-- Working On: " + dname + "--"
        ''If messageprompts Then Me.Refresh()()

        ' ---- IMDB AND NFO -----
        Dim hasnfoalready As Boolean = False
        Dim haveidonly As Boolean = False
        'see if movie data was loaded from nfo file during folder scan
        If Not currentmovie.pdatafromnfo Then
            'we don't have data so try to get it
            'see if nfo file exsists for movie, if it does, read it up to speed it up
            haveidonly = checkforIMDBIDinnfofile(currentmovie)
            If Not haveidonly Then
                'if there is no nfo file, check for a poster file (they have the imdbid in them)
                haveidonly = checkforposterfiletogetimdbid(currentmovie)
            End If
        Else
            hasnfoalready = True
        End If
        

        '-------------------------------- IMDB Information and .nfo file creation 
        If rconf.pcbGetIMDBInfo And Not hasnfoalready Then 'get imdb info
            'If messageprompts Then lblPbar.Text = "-- Getting IMDB for " + tmovie.getmoviename.ToString + "--"
            ''If messageprompts Then Me.Refresh()()
            If currentmovie.pimdbnumber = "" Then
                Debug.Print("no id in movie, grabbing imdb info")
                If messageprompts Then lblPbar.Text = "-- Connecting to IMDB: " + dname + "--"
                'If messageprompts Then Me.Refresh()()
                Dim tstringofimdbpage As String = getimdbidsearch(dname)
                If messageprompts Then lblPbar.Text = " -- Searching IMDB for: " + dname + "--"
                'If messageprompts Then Me.Refresh()()
                currentmovie.pimdbnumber = snagimdbid(dname, currentmovie, tstringofimdbpage)
            Else
                'do not grab the data, we know the id already
                'hasnfoalready = True
                Debug.Print("we have an id, not parseing imdb again for it")
            End If
            'getimdbidsearchwithwget(tmovie)

            If rbem.Checked = True Then 'download mode
                If File.Exists(rconf.imdbcachefolder + "/" + currentmovie.pimdbnumber + ".xml") Then 'And Not cbOverwriteNFO.Checked Then
                    'lblPbar.Text = " __-- XML already in Cache: IMDB Information for " + tmovie.getmoviename.ToString + "--__ "
                    'do nothing yet, nfo exsists -- add load nfo code here as well as the option to overwrite nfos in gui
                    Debug.Print(".xml already exsists") ' + cbOverwriteNFO.Checked.ToString)
                Else
                    If messageprompts Then lblPbar.Text = "-- NO XML Cached: Connecting to IMDB: " + dname + "--"
                    'If messageprompts Then Me.Refresh()()
                    If Not haveidonly Then
                        'no nfo so get the data
                        If messageprompts Then lblPbar.Text = "-- Searching IMDB: " + dname + "--"
                        'If messageprompts Then Me.Refresh()()
                        Dim tstringofimdbpage As String = getimdbidsearch(dname)
                        If messageprompts Then lblPbar.Text = "-- Gathering IMDB: " + dname + "--"
                        'If messageprompts Then Me.Refresh()()
                        currentmovie.pimdbnumber = snagimdbid(dname, currentmovie, tstringofimdbpage)
                        snagyear(dname, currentmovie, tstringofimdbpage)
                    End If
                    ' getimdbdata(tmovie)
                    Dim imdbinfo As New IMDB
                    Dim imdbidtemp As String = currentmovie.getimdbid
                    If imdbidtemp = "" Then
                        If messageprompts Then MsgBox("NO IMDB DATA FOUND, UNABLE TO SAVE NFO FILE")
                        Debug.Print("NO IMDB DATA FOUND, UNABLE TO SAVE NFO FILE")
                    Else
                        If messageprompts Then lblPbar.Text = "-- Parsing IMDB: " + dname + "--"
                        'If messageprompts Then Me.Refresh()()
                        imdbinfo = imdbparse(imdbidtemp)
                        'save xml to imdbcache reguardless of gui setting to write nfo
                        ' tmovie.Actors = imdbinfo.Actors
                        imdbinfo.writeIMDBXML(imdbinfo, currentmovie, rconf.imdbcachefolder, True)
                        'If cbSaveNFO.Checked Then
                        '    'imdbinfo.writeIMDBXML(imdbinfo, tmovie)
                        '    tmovie.saveimdbinfo(tmovie)
                        'End If
                    End If
                End If
            End If
        End If

        'get fanart links only 
        getfanart(currentmovie, False, True, True)

        'display movie name and information in gui
        'read up .nfo file from xml
      
        If File.Exists(rconf.imdbcachefolder + currentmovie.pimdbnumber + ".xml") And Not currentmovie.pdatafromnfo Then 'tmovie.getmoviepath + "\" + tmovie.getmoviename + ".nfo") Then
            Dim timdb As New IMDB
            timdb.readIMDBXML(currentmovie, rconf.imdbcachefolder) 'parses movie from the xml file
        Else
            Debug.Print("Note: Display movie name and info - no xml or data was loaded from nfo file into the program. No concern here.")
        End If

        currentmovie.saveimdbinfomanual(currentmovie, rconf.pcbCreateMovieNFO, rconf.pcbcreatemovienamedotnfo)
        movies.Item(CInt(lbMyMovies.SelectedValue)) = currentmovie
        'MsgBox(tmovie.getmoviename + " ------- " + tmovie.getthumbxml)
        btnRetryName.Enabled = True
        tbnewname.Enabled = True
        'set movie to current movie
        'currentmovie = tmovie
    End Sub

    Public Sub processdropdownitems_debug()
        dlgMovieDebug.Show()
        'reset curtmdbfacount
        If messageprompts Then curtmdbfacount = 0
        If messageprompts Then curtmdbpostercounter = 0
        If messageprompts Then curtimppostercounter = 0
        'reset curtmdbpostercount

        'bwStartupDisplayMovieData()
        'Exit Sub
        'breakout test loop of new bw for processing data


        dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + lbMyMovies.SelectedValue.ToString
        dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + lbMyMovies.SelectedItem.ToString
        dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "start: " + TimeString()
        'set locals
        dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "mode: " + rbem.Checked.ToString
        messageprompts = rbem.Checked 'rbem is online mode, if it's not checked, we want to turn off labels
        Dim skt As Boolean = rconf.pcbSkipTransparency 'cbSkipTransparency.Checked
        Dim ais As Boolean = cbAllowIconSelection.Checked
        dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "max icons: " + rconf.pcbMaxIconsToDisplay.ToString
        Dim maxDisplayedIcons As Integer = rconf.pcbMaxIconsToDisplay
        'Dim tmovie As movie
        Try
            currentmovie = CType(movies(CInt(lbMyMovies.SelectedValue)), movie)
        Catch ex As Exception
            Debug.Print(ex.ToString)
            Exit Sub
        End Try

        Dim dname, curpath As String
        dname = currentmovie.getmoviename
        tbnewname.Text = dname
        curpath = currentmovie.getmoviepath

        dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "dname: " + dname
        dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "curpath: " + curpath


        dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "cleanup old items"
        pbFrame.Hide()
        pbCurIconUsed.Hide()
        pbCurIconUsed2.Hide()
        pbCurrentIconUsedNT.Hide()
        pbFrameTBN.Hide()
        pbCurTBNUsed.Hide()
        pbCurTBNUsed2.Hide()
        klblmovietbn.Hide()
        klblmovietbn.Hide()
        dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "cleanup old items - done"
        fanartpb1.Image = Nothing
        fanartpb1.ImageLocation = Nothing
        dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "resetting images"
        If ais Then resetanddisableimages() 'allow icon selection, clears old pictureboxes
        dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "resetting images completed"
        'turn on the progress bar
        Me.pbar1.Visible = True
        pbar1.Value = pbar1.Maximum
        lblPbar.Visible = True
        lblPbar.BringToFront()
        lblPbar.Text = "-- Working On: " + dname + "--"
        'If messageprompts then me.refresh()()

        dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + " ---- IMDB AND NFO -----"
        Dim hasnfoalready As Boolean = False
        Dim haveidonly As Boolean = False
        'see if movie data was loaded from nfo file during folder scan
        If Not currentmovie.pdatafromnfo Then
            dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "we don't have data so try to get it"
            dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "see if nfo file exsists for movie, if it does, read it up to speed it up"
            haveidonly = checkforIMDBIDinnfofile(currentmovie)
            If Not haveidonly Then
                dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "see if there is an nfo file in the folder"
                'Dim parentfolder As String = getparentdirectory(currentmovie.getmoviepath)
                Dim curnfoname As String = ""
                If moviemode = "file" Then
                    curnfoname = stripstackforfilemode(removeextension(currentmovie.preservedmoviename))
                Else
                    curnfoname = currentmovie.pmoviename
                End If
                dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "curnfoname: " + curnfoname
                If File.Exists(addfiletofolder(currentmovie.getmoviepath, curnfoname + ".nfo")) Then
                    dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "read it up to see if we have a tt/d{6,7} in it if we do set haveidonly to true and set the id in the movie"
                    Dim strwork As String = File.ReadAllText(addfiletofolder(currentmovie.getmoviepath, curnfoname + ".nfo"))
                    Try
                        If Regex.IsMatch(strwork, "(tt\d{6,7})") Then
                            currentmovie.pimdbnumber = Regex.Match(strwork, "(tt\d{6,7})").Groups(1).Value
                            dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "imdb found: " + currentmovie.pimdbnumber
                            haveidonly = True
                        End If
                    Catch ex As ArgumentException
                        dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + ex.ToString 'Syntax error in the regular expression
                    End Try
                    strwork = ""
                End If
            End If

            If Not haveidonly And Not moviemode = "file" Then
                dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "Have id only"
                Dim filelist() As String '  As New ArrayList
                dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "getting file listing"
                filelist = Directory.GetFiles(currentmovie.getmoviepath)
                'Dim totfilecount As Integer = filelist.
                dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "grabbing file listing completed"
                For Each pathedfile As String In filelist
                    Dim strnfoextonfile As String = ""
                    strnfoextonfile = Strings.Right(pathedfile, 4)
                    If strnfoextonfile = ".nfo" Then
                        dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "found an .nfo file, checking it"
                        'read it up to see if we have a tt/d{6,7} in it if we do set haveidonly to true set the id in the movie
                        Dim strwork As String = File.ReadAllText(pathedfile)
                        dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "file: " + pathedfile + " ... read completed"
                        Try
                            If Regex.IsMatch(strwork, "(tt\d{6,7})") Then
                                currentmovie.pimdbnumber = Regex.Match(strwork, "(tt\d{6,7})").Groups(1).Value
                                dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "found a match in file: " + currentmovie.pimdbnumber
                                haveidonly = True
                            End If
                        Catch ex As ArgumentException
                            dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + ex.ToString 'Syntax error in the regular expression
                        End Try
                        strwork = ""
                    End If
                    If haveidonly Then
                        Exit For
                    End If
                Next
            End If

            If Not haveidonly Then
                dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "we didn't find an id, searching for it" 'if there is no nfo file, check for a poster file (they have the imdbid in them)
                haveidonly = checkforposterfiletogetimdbid(currentmovie)
                dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "searching completed"
            End If
        Else
            hasnfoalready = True
        End If

        dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "IMDB Information and .nfo creation"
        '-------------------------------- IMDB Information and .nfo file creation 
        If rconf.pcbGetIMDBInfo And Not hasnfoalready Then 'get imdb info
            dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "-- Getting IMDB for " + currentmovie.getmoviename.ToString + "--"
            'If messageprompts then me.refresh()()
            If currentmovie.pimdbnumber = "" Then
                dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "no id in movie, grabbing imdb info"
                dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "-- Connecting to IMDB: " + dname + "--"
                If messageprompts Then Me.Refresh()
                Dim tstringofimdbpage As String = getimdbidsearch(dname)
                dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + " -- Searching IMDB for: " + dname + "--"
                If messageprompts Then Me.Refresh()
                currentmovie.pimdbnumber = snagimdbid(dname, currentmovie, tstringofimdbpage)
            Else
                'do not grab the data, we know the id already
                'hasnfoalready = True
                Debug.Print("we have an id, not parseing imdb again for it")
            End If
            'getimdbidsearchwithwget(tmovie)

            If rbem.Checked = True Then 'download mode
                If File.Exists(rconf.imdbcachefolder + "/" + currentmovie.pimdbnumber + ".xml") Then 'And Not cbOverwriteNFO.Checked Then
                    'lblPbar.Text = " __-- XML already in Cache: IMDB Information for " + tmovie.getmoviename.ToString + "--__ "
                    dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "do nothing yet, nfo exsists -- add load nfo code here as well as the option to overwrite nfos in gui"
                    dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + ".xml already exsists" ' + cbOverwriteNFO.Checked.ToString)
                Else
                    dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "-- NO XML Cached: Connecting to IMDB: " + dname + "--"
                    'If messageprompts Then Me.Refresh()()
                    If Not haveidonly Then
                        'no nfo so get the data
                        dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "-- Searching IMDB: " + dname + "--"
                        If messageprompts Then Me.Refresh()
                        Dim tstringofimdbpage As String = getimdbidsearch(dname)
                        dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "-- Gathering IMDB: " + dname + "--"
                        If messageprompts Then Me.Refresh()
                        currentmovie.pimdbnumber = snagimdbid(dname, currentmovie, tstringofimdbpage)
                        snagyear(dname, currentmovie, tstringofimdbpage)
                    End If
                    ' getimdbdata(tmovie)
                    Dim imdbinfo As New IMDB
                    Dim imdbidtemp As String = currentmovie.getimdbid
                    If imdbidtemp = "" Then
                        dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "NO IMDB DATA FOUND, UNABLE TO SAVE NFO FILE"
                        dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "NO IMDB DATA FOUND, UNABLE TO SAVE NFO FILE"
                    Else
                        dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "-- Parsing IMDB: " + dname + "--"
                        'If messageprompts Then Me.Refresh()
                        imdbinfo = imdbparse(imdbidtemp)
                        'save xml to imdbcache reguardless of gui setting to write nfo
                        ' tmovie.Actors = imdbinfo.Actors
                        imdbinfo.writeIMDBXML(imdbinfo, currentmovie, rconf.imdbcachefolder, True)
                        'If cbSaveNFO.Checked Then
                        '    'imdbinfo.writeIMDBXML(imdbinfo, tmovie)
                        '    tmovie.saveimdbinfo(tmovie)
                        'End If
                    End If
                End If
            End If
        End If

        Dim selectedNameXMLfile As String
        selectedNameXMLfile = Strings.Replace(dname, " ", ".")
        currentmovie.setthumbxml(rconf.xmlfolder + selectedNameXMLfile + ".xml")

        'logic flow - first poster, then fanart, then save nfo (if checked and not local), then display imdb info
        dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "get Movie Poster"

        If ais Then
            Dim impaname As String = cleanname(dname)
            If rconf.pcbDownloadPoster Then
                dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "-- Gathering IMP Poster Data: " + dname + "--"
                If messageprompts Then Me.Refresh()
                Dim nolinksinxml As Boolean = False
                Dim curposterxmlname As String = ""
                Dim useimdbid As Boolean = False
                If File.Exists(rconf.xmlfolderposters + currentmovie.pimdbnumber + ".xml") Then
                    useimdbid = True
                    curposterxmlname = rconf.xmlfolderposters + currentmovie.pimdbnumber + ".xml"
                ElseIf File.Exists(rconf.xmlfolderposters + impaname + ".xml") Then
                    curposterxmlname = rconf.xmlfolderposters + impaname + ".xml"
                End If
                If File.Exists(curposterxmlname) And Not curposterxmlname = "" Then
                    Dim curposter As New posters
                    curposter.pmoviename = impaname
                    curposter.readxml(curposter, rconf.xmlfolderposters, useimdbid, currentmovie.pimdbnumber)

                    If curposter.pposters.Count = 0 Then
                        nolinksinxml = True
                        dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "Found an xml for " + impaname + ". No links where found in that file"
                    Else
                        getdisplayposter(curposter)
                    End If
                Else
                    nolinksinxml = True
                End If

                If nolinksinxml = True Then
                    If messageprompts Then lblPbar.Text = "-- Downloading Poster for " + dname + "--"
                    ''If messageprompts Then Me.Refresh()()
                    dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "When Getting Posters: Blank XML or No XML for: " + impaname
                End If
            End If
        End If
        '-- END NEW POSTER CODE --

        dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "get posters - first check to see if it's enabled"
        If rconf.pcbGetTMDBPosters Then
            dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "-- Getting TMDB Posters: " + currentmovie.getmoviename.ToString + "--"
            If messageprompts Then Me.Refresh()
            getpostersfromtmdb(currentmovie, ais, True) 'move this to the correct location once a gui option is there for it
        End If

        'get fanart - first check to see if it's enabled
        If rconf.pcbGetFanart Then
            dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "-- Getting Fanart: " + currentmovie.getmoviename.ToString + "--"
            If messageprompts Then Me.Refresh()
            getfanart(currentmovie, ais, True)
        End If

        Dim curfanart As String = ""

        dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "Checking for fanart"
        If moviemode = "file" Then
            curfanart = checkforlocalfanart(curpath, stripstackforfilemode(removeextension(currentmovie.preservedmoviename)))
        Else
            curfanart = checkforlocalfanart(curpath, dname)
        End If
        dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "Checking for fanart - done"

        If curfanart = "" Then 'try to grab a fanart image
            dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "no fanart, attempting to set one"
            If Me.pbfatmdb1.Enabled Then
                Dim newfanartimage As System.Drawing.Image
                Try
                    dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "try to load it to verify it's a valid image"
                    newfanartimage = System.Drawing.Image.FromFile(pbfatmdb1.AccessibleName)
                    Try
                        dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "try to save it local, since there should not be any file already, overwrite is off"
                        Dim curdname As String = ""
                        If moviemode = "file" Then
                            dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "Moviemode: File : " + moviemode
                            curdname = stripstackforfilemode(removeextension(currentmovie.preservedmoviename))
                        Else
                            dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "Moviemode: Folder : " + moviemode
                            curdname = dname
                        End If
                        dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "attempting to copy fanart"
                        File.Copy(pbfatmdb1.AccessibleDescription, addfiletofolder(curpath, curdname + "-fanart.jpg"), False)
                        dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "attempting to copy fanart completed"
                        If Not moviemode = "file" And rconf.pcbcreatefanartjpg Then File.Copy(pbfatmdb1.AccessibleDescription, addfiletofolder(curpath, "fanart.jpg"), False)
                        dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "additional copy completed"
                    Catch ex As Exception
                        dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + ex.ToString
                    End Try
                Catch ex As Exception
                    dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "Unable to load fanart image, suspect image detected"
                    dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + ex.ToString
                End Try
            End If
        End If
        dlgMovieDebug.rtbDebugInfo.Text += vbNewLine
        dlgMovieDebug.rtbDebugInfo.Text += vbNewLine
        dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "loading fanart started"
        If Not curfanart = "" And Me.showfanart Then
            fanartpb1.ImageLocation = curfanart
            'tpcm.BackgroundImage = fanartpb1.Image
            fanartpb1.Enabled = True
            Try
                fanartpb1.Load()
            Catch ex As Exception
                Try
                    File.Delete(curfanart)
                Catch ex2 As Exception
                    Debug.Print(ex2.ToString)
                End Try
                dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + ex.ToString
            End Try

        End If
        File.WriteAllText(rconf.basefolder + "debug\" + "moviedebug" + currentmovie.pmoviename + ".txt", dlgMovieDebug.rtbDebugInfo.Text)
        'end of fanart
        dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "fanart load completed"
        dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "display movie name and information in gui"
        'read up .nfo file from xml
        If messageprompts Then lblPbar.Text = "-- Setting .nfo file for: " + dname + "--"
        If messageprompts Then Me.Refresh()
        If File.Exists(rconf.imdbcachefolder + currentmovie.pimdbnumber + ".xml") And Not currentmovie.pdatafromnfo Then 'tmovie.getmoviepath + "\" + tmovie.getmoviename + ".nfo") Then
            Dim timdb As New IMDB
            timdb.readIMDBXML(currentmovie, rconf.imdbcachefolder) 'parses movie from the xml file
        Else
            dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "display movie name and info - no movie nfo file found"
        End If

        If rconf.pcbSaveNFO And Not currentmovie.pdatafromnfo Then 'don't save it if we loaded it from the nfo
            'imdbinfo.writeIMDBXML(imdbinfo, tmovie)
            If Not currentmovie.pimdbnumber = Nothing Then currentmovie.saveimdbinfomanual(currentmovie, rconf.pcbCreateMovieNFO, rconf.pcbcreatemovienamedotnfo)
        End If
        'display imdb info
        'get moviename from nfo if it exists
        'If Not currentmovie.pdatafromnfo Then 'movie data did not come from nfo, set it to the folder name if it's blank
        If currentmovie.peditedmoviename = "" Or currentmovie.peditedmoviename = Nothing Then
            currentmovie.peditedmoviename = currentmovie.pmoviename
        End If
        'End If
        Me.tbEditableTitle.Text = currentmovie.peditedmoviename
        Me.tbMovieName.Text = currentmovie.getmoviename
        khgMovieNameGroup.ValuesPrimary.Heading = currentmovie.getmoviename 'moviename to group box label area
        Me.tbMovieNameE.Text = currentmovie.getmoviename
        Me.tbCredits.Text = currentmovie.pcredits
        Me.tbDirector.Text = currentmovie.pdirector
        Me.tbGenre.Text = currentmovie.pgenre
        Me.tbIMDBID.Text = currentmovie.pimdbnumber
        Me.tbMpaa.Text = currentmovie.pmpaa
        Me.rtbPlotOutline.Text = currentmovie.pplotoutline
        Me.rtbPlot.Text = currentmovie.pplot
        Me.tbRating.Text = currentmovie.prating
        Me.tbOriginalTitle.Text = currentmovie.poriginaltitle
        Me.tbRuntime.Text = currentmovie.pruntime
        Me.rtbTagline.Text = currentmovie.ptagline
        Me.tbVotes.Text = currentmovie.pvotes
        Me.tbStudio.Text = currentmovie.pstudio 'tmovie.ptitle
        Me.tbyear.Text = currentmovie.pyear.ToString
        Me.tbTop250.Text = currentmovie.ptop250
        Me.tbTrailer.Text = currentmovie.ptrailer
        File.WriteAllText(rconf.basefolder + "debug\" + "moviedebug1" + currentmovie.pmoviename + ".txt", dlgMovieDebug.rtbDebugInfo.Text)
        dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "mediaicons selection started"
        '---------------------------- Mediaicons Section ---------------------------
        If ais Then 'allow thumbnail selection
            'check to see if there is already an xml file in there
            Dim xmltemppathname As String = rconf.xmlfolder + selectedNameXMLfile
            If rconf.pcbf1s0 Then
                If rbem.Checked = True Then
                    If messageprompts Then lblPbar.Text = "-- Getting Square (no style) icon for " + dname + "--"
                    'If messageprompts Then Me.gbDisplay.Refresh()
                    xmlDownload(currentmovie, xmltemppathname, "1", "2", "0") 'square no style
                End If
                getdisplayimages(selectedNameXMLfile, "1", "2", "0")
            End If
            If rconf.pcbf1s3 Then
                If rbem.Checked = True Then
                    If messageprompts Then lblPbar.Text = "-- Getting Square Box Shot for " + dname + "--"
                    'If messageprompts Then Me.gbDisplay.Refresh()
                    xmlDownload(currentmovie, xmltemppathname, "1", "2", "3") 'square box shot
                End If
                getdisplayimages(selectedNameXMLfile, "1", "2", "3")
            End If
            If rconf.pcbf1s9 Then
                If rbem.Checked = True Then
                    If messageprompts Then lblPbar.Text = "-- Getting Round icon for " + dname + "--"
                    'If messageprompts Then Me.gbDisplay.Refresh()
                    xmlDownload(currentmovie, xmltemppathname, "1", "2", "9") 'square classification, but it's a round token
                End If
                getdisplayimages(selectedNameXMLfile, "1", "2", "9")
            End If
            If rconf.pcbf2s0 Then
                If rbem.Checked = True Then
                    If messageprompts Then lblPbar.Text = "-- Getting Wide (no style) icon for " + dname + "--"
                    'If messageprompts Then Me.gbDisplay.Refresh()
                    xmlDownload(currentmovie, xmltemppathname, "2", "2", "0") 'wide no style
                End If
                getdisplayimages(selectedNameXMLfile, "2", "2", "0")
            End If
            If rconf.pcbf2s2 Then
                If rbem.Checked = True Then
                    If messageprompts Then lblPbar.Text = "-- Getting Wide (rounded shadow scanlines) icon for " + dname + "--"
                    'If messageprompts Then Me.gbDisplay.Refresh()
                    xmlDownload(currentmovie, xmltemppathname, "2", "2", "2") 'wide rounded shadow with scanlines
                End If
                getdisplayimages(selectedNameXMLfile, "2", "2", "2")
            End If
            If rconf.pcbf2s8 Then
                If rbem.Checked = True Then
                    If messageprompts Then lblPbar.Text = "-- Getting Wide (round shadow) icon for " + dname + "--"
                    'If messageprompts Then Me.gbDisplay.Refresh()
                    xmlDownload(currentmovie, xmltemppathname, "2", "2", "8") 'wide rounded shadow
                End If
                getdisplayimages(selectedNameXMLfile, "2", "2", "8")
            End If
            If rconf.pcbf2s10 Then
                If rbem.Checked = True Then
                    If messageprompts Then lblPbar.Text = "-- Getting Wide (round shadow Glass overlay) icon for " + dname + "--"
                    'If messageprompts Then Me.gbDisplay.Refresh()
                    xmlDownload(currentmovie, xmltemppathname, "2", "2", "10") 'wide rounded shadow with glass overlay
                End If
                getdisplayimages(selectedNameXMLfile, "2", "2", "10")
            End If
            If rconf.pcbf3s0 Then
                If rbem.Checked = True Then
                    If messageprompts Then lblPbar.Text = "-- Getting Tall (no style) icon for " + dname + "--"
                    'If messageprompts Then Me.gbDisplay.Refresh()
                    xmlDownload(currentmovie, xmltemppathname, "3", "2", "0") 'tall no style
                End If
                getdisplayimages(selectedNameXMLfile, "3", "2", "0")
            End If
        End If
        dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "mediaicons finished"
        'MsgBox(tmovie.getmoviename + " ------- " + tmovie.getthumbxml)
        btnRetryName.Enabled = True
        tbnewname.Enabled = True
        pbTick.Stop()
        pbar1.Visible = False
        lblPbar.Visible = False
        'set movie to current movie
        'currentmovie = tmovie
        File.WriteAllText(rconf.basefolder + "debug\" + "moviedebug2" + currentmovie.pmoviename + ".txt", dlgMovieDebug.rtbDebugInfo.Text)
        dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "displaying images for current movie"
        '---Show folderjpg and tbn file
        'lblCurMovieFolder.Text = currentmovie.getmoviepath
        If Not moviemode = "file" Then showfolderjpginmainwindow(currentmovie.getmoviepath, skt)
        showtbninmainwindow(currentmovie.getmoviepath, skt)
        Try
            validatefoldercontents()
        Catch ex As Exception
            dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "DEBUG: " + ex.ToString
        End Try

        If messageprompts Then
            Dim newtmdbfanart As Boolean = False
            Dim newtmdbposter As Boolean = False
            Dim newimpposter As Boolean = False
            Dim strNewMessage As String = ""

            If curtmdbfacount > 0 Then
                newtmdbfanart = True
                strNewMessage += "New TMDB Fanart Images Available: " + curtmdbfacount.ToString + vbNewLine
            End If
            If curtmdbpostercounter > 0 Then
                newtmdbposter = True
                strNewMessage += "New TMDB Poster Images Available: " + curtmdbpostercounter.ToString + vbNewLine
            End If
            If curtimppostercounter > 0 Then
                newimpposter = True
                strNewMessage += "New Impawards Poster Images Available: " + curtimppostercounter.ToString + vbNewLine
            End If
            If newtmdbfanart Or newtmdbposter Or newimpposter Then
                MessageBox.Show(strNewMessage, "New Images are available", MessageBoxButtons.OK, MessageBoxIcon.Information)
            End If
        End If
        'show video file information (video and audio)
        Try
            If Not currentmovie.fileinfo.version = 1.3 Then
                getmoviemediainfo_bw()
            Else
                krtbMovieVideoInfo.Text = currentmovie.fileinfo.objtostring(currentmovie.fileinfo)
                'Dim MI As New MediaInfo
                'MI.getdata(currentmovie, moviemode)
                '
            End If
        Catch ex As Exception
            dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "DEBUG: " + ex.ToString
        End Try


        dlgMovieDebug.rtbDebugInfo.Text += vbNewLine + "============ MOVIE DONE ================="
        If Not Directory.Exists(rconf.basefolder + "debug") Then Directory.CreateDirectory(rconf.basefolder + "debug")
        File.WriteAllText(rconf.basefolder + "debug\" + "moviedebug3" + currentmovie.pmoviename + ".txt", dlgMovieDebug.rtbDebugInfo.Text)
        dlgMovieDebug.Dispose()
        dlgMovieDebug.Close()
    End Sub
    Public Sub processdropdownitems()

        'reset curtmdbfacount
        If messageprompts Then curtmdbfacount = 0
        If messageprompts Then curtmdbpostercounter = 0
        If messageprompts Then curtimppostercounter = 0
        'reset curtmdbpostercount
        If messageprompts Then fanarttotal = 0
        If messageprompts Then postertotal = 0
        If messageprompts Then iconsboxshottotal = 0
        If messageprompts Then newnicecovercounter = 0
        Debug.Print("start: " + TimeString())
        'set locals
        messageprompts = rbem.Checked 'rbem is online mode, if it's not checked, we want to turn off labels
        Dim skt As Boolean = rconf.pcbSkipTransparency '

        Dim ais As Boolean = cbAllowIconSelection.Checked
        Dim maxDisplayedIcons As Integer = rconf.pcbMaxIconsToDisplay
        'Dim tmovie As movie
        Try
            currentmovie = CType(movies(CInt(lbMyMovies.SelectedValue)), movie)
            If currentmovie.pfilemode = True Then
                moviemode = "file"
                If Not File.Exists(addfiletofolder(currentmovie.getmoviepath, currentmovie.preservedmoviename)) Then
                    If messageprompts Then MsgBox("File is no longer at this location, please rescan your movies by clicking Load Movies")
                    Exit Sub
                End If
                bshgMovieFiletofolder.Visible = True
            Else
                moviemode = "folder"
                bshgMovieFiletofolder.Visible = False
            End If

        Catch ex As Exception
            Debug.Print(ex.ToString)
            Exit Sub
        End Try
        currentmovie.pdownloadlist = New ArrayList

        Dim dname, curpath As String
        dname = currentmovie.getmoviename
        tbnewname.Text = dname
        curpath = currentmovie.getmoviepath
        If Not Directory.Exists(curpath) Then Exit Sub
        'cleanup old items
        pbFrame.Hide()
        pbCurIconUsed.Hide()
        pbCurIconUsed2.Hide()
        pbCurrentIconUsedNT.Hide()
        pbFrameTBN.Hide()
        pbCurTBNUsed.Hide()
        pbCurTBNUsed2.Hide()
        klblmovietbn.Hide()
        klblmovietbn.Hide()

        fanartpb1.Image = Nothing
        fanartpb1.ImageLocation = Nothing
        If ais Then resetanddisableimages() 'allow icon selection, clears old pictureboxes

        'turn on the progress bar
        Me.pbar1.Visible = True
        pbar1.Value = pbar1.Maximum
        lblPbar.Visible = True
        lblPbar.BringToFront()
        lblPbar.Text = "-- Working On: " + dname + "--"

        'If messageprompts then me.refresh()()
        checknfodata(currentmovie, dname, rbem.Checked)
        Debug.Print("IMDB Information and .nfo creation - completed")

        'check tmdbid
        checktmdbid(currentmovie)

        Dim curposter As New posters
        Dim selectedNameXMLfile As String
        selectedNameXMLfile = Strings.Replace(dname, " ", ".")
        currentmovie.setthumbxml(rconf.xmlfolder + selectedNameXMLfile + ".xml")

        'logic flow - first poster, then fanart, then save nfo (if checked and not local), then display imdb info
        'get Movie Poster

        If ais Then
            Dim impaname As String = cleanname(dname)
            If rconf.pcbDownloadPoster Then
                If messageprompts Then lblPbar.Text = "-- Gathering IMP Poster Data: " + dname + "--"
                If messageprompts Then Me.Refresh()
                Dim nolinksinxml As Boolean = False
                Dim curposterxmlname As String = ""
                Dim useimdbid As Boolean = False
                If File.Exists(rconf.xmlfolderposters + currentmovie.pimdbnumber + ".xml") Then
                    useimdbid = True
                    curposterxmlname = rconf.xmlfolderposters + currentmovie.pimdbnumber + ".xml"
                ElseIf File.Exists(rconf.xmlfolderposters + impaname + ".xml") Then
                    curposterxmlname = rconf.xmlfolderposters + impaname + ".xml"
                End If
                If File.Exists(curposterxmlname) And Not curposterxmlname = "" Then

                    curposter.pmoviename = impaname
                    curposter.readxml(curposter, rconf.xmlfolderposters, useimdbid, currentmovie.pimdbnumber)

                    If curposter.pposters.Count = 0 Then
                        nolinksinxml = True
                        Debug.Print("Found an xml for " + impaname + ". No links where found in that file")
                    Else
                        If rbem.Checked Then downloadimpposter(curposter)
                        'getdisplayposter(curposter)
                    End If
                Else
                    nolinksinxml = True
                End If

                If nolinksinxml = True Then
                    If messageprompts Then lblPbar.Text = "-- Downloading Poster for " + dname + "--"
                    ''If messageprompts Then Me.Refresh()()
                    Debug.Print("When Getting Posters: Blank XML or No XML for: " + impaname)
                End If
            End If
        End If
        '-- END NEW POSTER CODE --
        Debug.Print("end of impawards data")
        'calgorydotnet data
        If rconf.pcbGetcaldnPosters Then
            If messageprompts Then lblPbar.Text = "-- Getting Posters: " + currentmovie.getmoviename.ToString + "--"
            If messageprompts Then Me.Refresh()
            If rbem.Checked Then downloadcaldnposters()
            'getpostersfromtmdb(currentmovie, ais, True) 'move this to the correct location once a gui option is there for it
        End If
        Debug.Print("tmdb posters download done")
        'get posters - first check to see if it's enabled
        If rconf.pcbGetTMDBPosters Then
            If messageprompts Then lblPbar.Text = "-- Getting TMDB Posters: " + currentmovie.getmoviename.ToString + "--"
            If messageprompts Then Me.Refresh()
            If rbem.Checked Then downloadtmdbposters()
            'getpostersfromtmdb(currentmovie, ais, True) 'move this to the correct location once a gui option is there for it
        End If
        Debug.Print("tmdb posters download done")
        'get fanart - first check to see if it's enabled
        If rconf.pcbGetFanart Then
            If messageprompts Then lblPbar.Text = "-- Getting Fanart: " + currentmovie.getmoviename.ToString + "--"
            If messageprompts Then Me.Refresh()
            If rbem.Checked Then downloadtmdbfanart()
            'getfanart(currentmovie, ais, True)
        End If
        Debug.Print("tmdb fanart download done")

        'download mediaicons (new)
        '---------------------------- Mediaicons Section ---------------------------
        If ais Then 'allow thumbnail selection
            'check to see if there is already an xml file in there
            Dim xmltemppathname As String = rconf.xmlfolder + selectedNameXMLfile
            If rconf.pcbf1s0 Then
                If rbem.Checked = True Then
                    If messageprompts Then lblPbar.Text = "-- Getting Square (no style) icon for " + dname + "--"
                    'If messageprompts Then Me.gbDisplay.Refresh()
                    xmlDownload(currentmovie, xmltemppathname, "1", "2", "0") 'square no style
                End If
                getdisplayimages(selectedNameXMLfile, "1", "2", "0", "", True)
            End If
            If rconf.pcbf1s3 Then
                If rbem.Checked = True Then
                    If messageprompts Then lblPbar.Text = "-- Getting Square Box Shot for " + dname + "--"
                    'If messageprompts Then Me.gbDisplay.Refresh()
                    xmlDownload(currentmovie, xmltemppathname, "1", "2", "3") 'square box shot
                End If
                getdisplayimages(selectedNameXMLfile, "1", "2", "3", "", True)
            End If
            If rconf.pcbf1s9 Then
                If rbem.Checked = True Then
                    If messageprompts Then lblPbar.Text = "-- Getting Round icon for " + dname + "--"
                    'If messageprompts Then Me.gbDisplay.Refresh()
                    xmlDownload(currentmovie, xmltemppathname, "1", "2", "9") 'square classification, but it's a round token
                End If
                getdisplayimages(selectedNameXMLfile, "1", "2", "9", "", True)
            End If
            If rconf.pcbf2s0 Then
                If rbem.Checked = True Then
                    If messageprompts Then lblPbar.Text = "-- Getting Wide (no style) icon for " + dname + "--"
                    'If messageprompts Then Me.gbDisplay.Refresh()
                    xmlDownload(currentmovie, xmltemppathname, "2", "2", "0") 'wide no style
                End If
                getdisplayimages(selectedNameXMLfile, "2", "2", "0", "", True)
            End If
            If rconf.pcbf2s2 Then
                If rbem.Checked = True Then
                    If messageprompts Then lblPbar.Text = "-- Getting Wide (rounded shadow scanlines) icon for " + dname + "--"
                    'If messageprompts Then Me.gbDisplay.Refresh()
                    xmlDownload(currentmovie, xmltemppathname, "2", "2", "2") 'wide rounded shadow with scanlines
                End If
                getdisplayimages(selectedNameXMLfile, "2", "2", "2", "", True)
            End If
            If rconf.pcbf2s8 Then
                If rbem.Checked = True Then
                    If messageprompts Then lblPbar.Text = "-- Getting Wide (round shadow) icon for " + dname + "--"
                    'If messageprompts Then Me.gbDisplay.Refresh()
                    xmlDownload(currentmovie, xmltemppathname, "2", "2", "8") 'wide rounded shadow
                End If
                getdisplayimages(selectedNameXMLfile, "2", "2", "8", "", True)
            End If
            If rconf.pcbf2s10 Then
                If rbem.Checked = True Then
                    If messageprompts Then lblPbar.Text = "-- Getting Wide (round shadow Glass overlay) icon for " + dname + "--"
                    'If messageprompts Then Me.gbDisplay.Refresh()
                    xmlDownload(currentmovie, xmltemppathname, "2", "2", "10") 'wide rounded shadow with glass overlay
                End If
                getdisplayimages(selectedNameXMLfile, "2", "2", "10", "", True)
            End If
            If rconf.pcbf3s0 Then
                If rbem.Checked = True Then
                    If messageprompts Then lblPbar.Text = "-- Getting Tall (no style) icon for " + dname + "--"
                    'If messageprompts Then Me.gbDisplay.Refresh()
                    xmlDownload(currentmovie, xmltemppathname, "3", "2", "0") 'tall no style
                End If
                getdisplayimages(selectedNameXMLfile, "3", "2", "0", "", True)
            End If
        End If

        If rbem.Checked Then
            getfcdn_movie_front()
            getfcdn_movie_back()
            getfcdn_movie_cd1()
            getfcdn_movie_cd2()
            getfcdn_movie_cd3()
            getfcdn_movie_cd4()
            getfcdn_movie_inlay()
            getfcdn_movie_insert()
        End If
        'download images (new)
        If Not currentmovie.pdownloadlist.Count = 0 Then
            'dlgDownloadingFile.downloadertxtFileName.Text = url
            'dlgDownloadingFile.whereToSave = folder + tfanartfilename
            dlgDownloadingFile.downloadingmutliimages = True
            dlgDownloadingFile.downloadlist = currentmovie.pdownloadlist
            dlgDownloadingFile.ShowDialog()
        End If
        If ais Then
            showfcdn_movie_front()
            showfcdn_movie_Back()
            showfcdn_movie_cd1()
            showfcdn_movie_cd2()
            showfcdn_movie_cd3()
            showfcdn_movie_cd4()
            showfcdn_movie_inlay()
            showfcdn_movie_insert()
        End If


        currentmovie.pimpawardsposters.Clear()
        currentmovie.ptmdbposters.Clear()
        If ais Then
            If rconf.pcbDownloadPoster Then
                prepimppostersfordisplay(curposter)
            End If
            If rconf.pcbGetcaldnPosters Then
                If messageprompts Then lblPbar.Text = "-- Loading TMDB Posters: " + currentmovie.getmoviename.ToString + "--"
                If messageprompts Then Me.Refresh()
                'downloadtmdbposters()
                prepcaldnpostersfordisplay(currentmovie, ais, True, 0, True)
                'getpostersfromtmdb(currentmovie, ais, True, 0, True) 'move this to the correct location once a gui option is there for it
            End If
            If rconf.pcbGetTMDBPosters Then
                If messageprompts Then lblPbar.Text = "-- Loading TMDB Posters: " + currentmovie.getmoviename.ToString + "--"
                If messageprompts Then Me.Refresh()
                'downloadtmdbposters()
                preptmdbpostersfordisplay(currentmovie, ais, True, 0, True)
                'getpostersfromtmdb(currentmovie, ais, True, 0, True) 'move this to the correct location once a gui option is there for it
            End If

            'do the display of the posters
            displaymovieposters()

            Debug.Print("tmdb posters download done")

            'get fanart - first check to see if it's enabled
            If rconf.pcbGetFanart Then
                If messageprompts Then lblPbar.Text = "-- Loading Fanart: " + currentmovie.getmoviename.ToString + "--"
                If messageprompts Then Me.Refresh()
                'downloadtmdbfanart(currentmovie)
                getfanart(currentmovie, ais, True, False, True)
            End If
        End If



        Dim curfanart As String = ""
        If moviemode = "file" Then
            curfanart = checkforlocalfanart(curpath, stripstackforfilemode(removeextension(currentmovie.preservedmoviename)))
        Else
            curfanart = checkforlocalfanart(curpath, dname)
        End If
        Debug.Print("done setting curfanart file name based on mode")
        If curfanart = "" Then 'try to grab a fanart image since we don't have one yet
            If Me.pbfatmdb1.Enabled Then
                Dim newfanartimage As System.Drawing.Image
                Try 'try to load it to verify it's a valid image
                    newfanartimage = System.Drawing.Image.FromFile(pbfatmdb1.AccessibleName)
                    Try 'try to save it local, since there should not be any file already, overwrite is off
                        Dim curdname As String = ""

                        If moviemode = "file" And rconf.pcbcreatemovienamedashfanartjpg Then
                            curdname = stripstackforfilemode(removeextension(currentmovie.preservedmoviename)) + "-fanart.jpg"
                            File.Copy(pbfatmdb1.AccessibleName, addfiletofolder(curpath, curdname), False)
                        End If

                        If rconf.pcbcreatefanartjpg And Not moviemode = "file" Then 'not for file mode
                            curdname = "fanart.jpg"
                            File.Copy(pbfatmdb1.AccessibleName, addfiletofolder(curpath, curdname), False)
                        End If

                        If rconf.pcbcreatemovienamedashfanartjpg And Not moviemode = "file" Then 'not for file modes
                            curdname = dname + "-fanart.jpg"
                            File.Copy(pbfatmdb1.AccessibleName, addfiletofolder(curpath, curdname), False)
                        End If

                    Catch ex As Exception
                        Debug.Print(ex.ToString)
                    End Try
                Catch ex As Exception
                    Debug.Print(ex.ToString)
                End Try
            End If
        End If
        Debug.Print("checking again for fanart for display as we may have new items from the last function")
        'check again for fanart, display it if we have one
        Dim curfanartnow As String = ""
        If moviemode = "file" Then
            curfanartnow = checkforlocalfanart(curpath, stripstackforfilemode(removeextension(currentmovie.preservedmoviename)))
        Else
            curfanartnow = checkforlocalfanart(curpath, dname)
        End If
        Debug.Print("done setting curfanartnow name")
        If Not curfanartnow = "" And rconf.pdisplayfanart Then
            fanartpb1.ImageLocation = curfanartnow
            'tpcm.BackgroundImage = fanartpb1.Image
            fanartpb1.Enabled = True
            Debug.Print("done setup of fanart location, starting load of fanart image")
            If messageprompts Then lblPbar.Text = "Loading Fanart into gui, if slow, check file size"
            If messageprompts Then Me.Refresh()
            Try
                fanartpb1.Load()
            Catch ex As Exception
                Debug.Print(ex.ToString)
                fanartpb1.ImageLocation = Nothing
                fanartpb1.Image = Nothing
                Try
                    File.Delete(curfanartnow)
                Catch ex2 As Exception
                    Debug.Print(ex2.ToString)
                End Try

            End Try
            If Not fanartpb1.ImageLocation Is Nothing Then
                If messageprompts Then
                    Dim objImage2 As System.Drawing.Image = System.Drawing.Image.FromFile(fanartpb1.ImageLocation)
                    CurrentBackgroundSizeToolStripMenuItem.Text = "Current Background Size: " & objImage2.Width.ToString & "x" & objImage2.Height.ToString & " Size: " & getFileSize(fanartpb1.ImageLocation)
                    tsl_movies_fanartsize.Text = CurrentBackgroundSizeToolStripMenuItem.Text
                    objImage2.Dispose()
                End If
            End If
        End If
        'end of fanart
        Debug.Print("fanart is done loading now")
        'display movie name and information in gui
        'read up .nfo file from xml
        If messageprompts Then lblPbar.Text = "-- Setting .nfo file for: " + dname + "--"
        If messageprompts Then Me.Refresh()
        If File.Exists(rconf.imdbcachefolder + currentmovie.pimdbnumber + ".xml") And Not currentmovie.pdatafromnfo Then 'tmovie.getmoviepath + "\" + tmovie.getmoviename + ".nfo") Then
            Dim timdb As New IMDB
            timdb.readIMDBXML(currentmovie, rconf.imdbcachefolder) 'parses movie from the xml file
        Else
            Debug.Print("display movie name and info - no movie nfo file found")
        End If

        If (rconf.pcbSaveNFO And Not currentmovie.pdatafromnfo) Or rconf.pcbOverwriteNFO Then 'don't save it if we loaded it from the nfo
            'imdbinfo.writeIMDBXML(imdbinfo, tmovie)
            If Not currentmovie.pimdbnumber = Nothing Then
                If rconf.pcbCreateMovieNFO Or rconf.pcbcreatemovienamedotnfo Then
                    If rconf.pcbcopyplotsummaryifnoplot Then
                        If currentmovie.pplot = "" Then currentmovie.pplot = currentmovie.pplotoutline
                    End If
                    currentmovie.saveimdbinfomanual(currentmovie, rconf.pcbCreateMovieNFO, rconf.pcbcreatemovienamedotnfo)
                End If
            End If
        End If

        'display imdb info
        'get moviename from nfo if it exists
        'If Not currentmovie.pdatafromnfo Then 'movie data did not come from nfo, set it to the folder name if it's blank
        If currentmovie.peditedmoviename = "" Or currentmovie.peditedmoviename = Nothing Then
            currentmovie.peditedmoviename = currentmovie.pmoviename
        End If
        'End If
        Me.tbEditableTitle.Text = currentmovie.peditedmoviename
        Me.tbMovieName.Text = currentmovie.getmoviename
        khgMovieNameGroup.ValuesPrimary.Heading = currentmovie.getmoviename 'moviename to group box label area
        Me.tbMovieNameE.Text = currentmovie.getmoviename
        Me.tbCredits.Text = currentmovie.pcredits
        Me.tbDirector.Text = currentmovie.pdirector
        Me.tbGenre.Text = currentmovie.pgenre
        Me.tbIMDBID.Text = currentmovie.pimdbnumber
        'If rconf.pcbmovie_use_certification_for_mpaa Then
        '    Me.tbMpaa.Text = currentmovie.certification
        'Else
        '    Me.tbMpaa.Text = currentmovie.pmpaa
        'End If
        Me.tbMpaa.Text = currentmovie.pmpaa
        Me.tbcertification.Text = currentmovie.certification
        Me.tbStudioReal.Text = currentmovie.pstudioreal
        Me.rtbPlotOutline.Text = currentmovie.pplotoutline
        Me.rtbPlot.Text = currentmovie.pplot
        Me.tbRating.Text = currentmovie.prating
        Me.tbOriginalTitle.Text = currentmovie.poriginaltitle
        Me.tbRuntime.Text = currentmovie.pruntime
        Me.rtbTagline.Text = currentmovie.ptagline
        Me.tbVotes.Text = currentmovie.pvotes
        Me.tbStudio.Text = currentmovie.pstudio 'tmovie.ptitle
        Me.tbyear.Text = currentmovie.pyear.ToString
        Me.tbTop250.Text = currentmovie.ptop250
        Me.tbTrailer.Text = currentmovie.ptrailer

        '---------------------------- Mediaicons Section ---------------------------
        If ais Then 'allow thumbnail selection
            'check to see if there is already an xml file in there
            Dim xmltemppathname As String = rconf.xmlfolder + selectedNameXMLfile
            If rconf.pcbf1s0 Then
                If rbem.Checked = True Then
                    If messageprompts Then lblPbar.Text = "-- Getting Square (no style) icon for " + dname + "--"
                    'If messageprompts Then Me.gbDisplay.Refresh()
                    xmlDownload(currentmovie, xmltemppathname, "1", "2", "0") 'square no style
                End If
                getdisplayimages(selectedNameXMLfile, "1", "2", "0")
            End If
            If rconf.pcbf1s3 Then
                If rbem.Checked = True Then
                    If messageprompts Then lblPbar.Text = "-- Getting Square Box Shot for " + dname + "--"
                    'If messageprompts Then Me.gbDisplay.Refresh()
                    xmlDownload(currentmovie, xmltemppathname, "1", "2", "3") 'square box shot
                End If
                getdisplayimages(selectedNameXMLfile, "1", "2", "3")
            End If
            If rconf.pcbf1s9 Then
                If rbem.Checked = True Then
                    If messageprompts Then lblPbar.Text = "-- Getting Round icon for " + dname + "--"
                    'If messageprompts Then Me.gbDisplay.Refresh()
                    xmlDownload(currentmovie, xmltemppathname, "1", "2", "9") 'square classification, but it's a round token
                End If
                getdisplayimages(selectedNameXMLfile, "1", "2", "9")
            End If
            If rconf.pcbf2s0 Then
                If rbem.Checked = True Then
                    If messageprompts Then lblPbar.Text = "-- Getting Wide (no style) icon for " + dname + "--"
                    'If messageprompts Then Me.gbDisplay.Refresh()
                    xmlDownload(currentmovie, xmltemppathname, "2", "2", "0") 'wide no style
                End If
                getdisplayimages(selectedNameXMLfile, "2", "2", "0")
            End If
            If rconf.pcbf2s2 Then
                If rbem.Checked = True Then
                    If messageprompts Then lblPbar.Text = "-- Getting Wide (rounded shadow scanlines) icon for " + dname + "--"
                    'If messageprompts Then Me.gbDisplay.Refresh()
                    xmlDownload(currentmovie, xmltemppathname, "2", "2", "2") 'wide rounded shadow with scanlines
                End If
                getdisplayimages(selectedNameXMLfile, "2", "2", "2")
            End If
            If rconf.pcbf2s8 Then
                If rbem.Checked = True Then
                    If messageprompts Then lblPbar.Text = "-- Getting Wide (round shadow) icon for " + dname + "--"
                    'If messageprompts Then Me.gbDisplay.Refresh()
                    xmlDownload(currentmovie, xmltemppathname, "2", "2", "8") 'wide rounded shadow
                End If
                getdisplayimages(selectedNameXMLfile, "2", "2", "8")
            End If
            If rconf.pcbf2s10 Then
                If rbem.Checked = True Then
                    If messageprompts Then lblPbar.Text = "-- Getting Wide (round shadow Glass overlay) icon for " + dname + "--"
                    'If messageprompts Then Me.gbDisplay.Refresh()
                    xmlDownload(currentmovie, xmltemppathname, "2", "2", "10") 'wide rounded shadow with glass overlay
                End If
                getdisplayimages(selectedNameXMLfile, "2", "2", "10")
            End If
            If rconf.pcbf3s0 Then
                If rbem.Checked = True Then
                    If messageprompts Then lblPbar.Text = "-- Getting Tall (no style) icon for " + dname + "--"
                    'If messageprompts Then Me.gbDisplay.Refresh()
                    xmlDownload(currentmovie, xmltemppathname, "3", "2", "0") 'tall no style
                End If
                getdisplayimages(selectedNameXMLfile, "3", "2", "0")
            End If
        End If
        'MsgBox(tmovie.getmoviename + " ------- " + tmovie.getthumbxml)
        btnRetryName.Enabled = True
        tbnewname.Enabled = True
        pbTick.Stop()
        pbar1.Visible = False
        lblPbar.Visible = False
        'set movie to current movie
        'currentmovie = tmovie

        'download nicecover poster if avail
        'If rconf.pcbgetncposters Then getdisplayposternicecovers(currentmovie)

        'if there is no folder.jpg, based on configured options, set one (not for filemode)
        If rconf.pcbCreateFolderjpg And Not File.Exists(addfiletofolder(currentmovie.getmoviepath, "folder.jpg")) And Not moviemode = "file" Then
            If rconf.pcbautocreatefolderjpg Then getdefaultfolderjpg(currentmovie)
        End If

        'if there is no <moviename>.tbn, based on configured options, set one (ok for both modes)
        Dim curtbnfile As String = ""
        If moviemode = "file" Then
            curtbnfile = addfiletofolder(currentmovie.getmoviepath, stripstackforfilemode(removeextension(currentmovie.preservedmoviename)) + ".tbn")
        Else
            curtbnfile = addfiletofolder(currentmovie.getmoviepath, currentmovie.pmoviename + ".tbn")
        End If
        If rconf.pcbcreatemovienamedottbn And Not File.Exists(curtbnfile) Then
            If rconf.pcbautocreatemovienametbn Then getdefaultmovienametbn(currentmovie)
        End If

        'if there is no movie.tbn, based on configured options, set one (not for filemode)
        If rconf.pcbcreatemovietbn And Not File.Exists(addfiletofolder(currentmovie.getmoviepath, "movie.tbn")) And Not moviemode = "file" Then
            If rconf.pcbautocreatemovietbn Then getdefaultmovietbn(currentmovie)
        End If

        '---Show folderjpg and tbn file
        ' lblCurMovieFolder.Text = currentmovie.getmoviepath
        If Not moviemode = "file" Then showfolderjpginmainwindow(currentmovie.getmoviepath, skt)
        showtbninmainwindow(currentmovie.getmoviepath, skt)

        populatemediaimagethumbs(addfiletofolder(currentmovie.getmoviepath, "extras"), flpMoviesMI, False, "")


        Try
            validatefoldercontents()
        Catch ex As Exception
            If messageprompts Then MsgBox("DEBUG: " + ex.ToString)
        End Try

        If messageprompts And Not rconf.pcbnopromptfornewposters Then
            Dim newtmdbfanart As Boolean = False
            Dim newtmdbposter As Boolean = False
            Dim newimpposter As Boolean = False
            Dim newniceposter As Boolean = False
            Dim strNewMessage As String = ""

            If newnicecovercounter > 0 Then
                newniceposter = True
                strNewMessage += "New NiceCovers Poster Images Available: " + newnicecovercounter.ToString + vbNewLine
            End If
            If curtmdbfacount > 0 Then
                newtmdbfanart = True
                strNewMessage += "New TMDB Fanart Images Available: " + curtmdbfacount.ToString + vbNewLine
            End If
            If curtmdbpostercounter > 0 Then
                newtmdbposter = True
                strNewMessage += "New TMDB Poster Images Available: " + curtmdbpostercounter.ToString + vbNewLine
            End If
            If curtimppostercounter > 0 Then
                newimpposter = True
                strNewMessage += "New Impawards Poster Images Available: " + curtimppostercounter.ToString + vbNewLine
            End If
            If newtmdbfanart Or newtmdbposter Or newimpposter Or newniceposter Then
                MessageBox.Show(strNewMessage, "New Images are available", MessageBoxButtons.OK, MessageBoxIcon.Information)
            End If
        End If
        If messageprompts Then
            If fanarttotal = 0 Then
                tpFanart.Text = "Backgounds"
            Else
                tpFanart.Text = "Backgounds (" & fanarttotal.ToString & ")"
            End If

            If postertotal = 0 Then
                tpTallImages.Text = "Posters"
            Else
                tpTallImages.Text = "Posters (" & postertotal.ToString & ")"
            End If

            If iconsboxshottotal = 0 Then
                tpmipf.Text = "Wide Images / 3D Boxes"
            Else
                tpmipf.Text = "Wide Images / 3D Boxes (" & iconsboxshottotal.ToString & ")"
            End If
        End If
        'check for video_ts, if found, check md5 on images, recopy if needed
        If Not currentmovie.pfilemode Then checkVideoTSforcurrentmovie()



        'show video file information (video and audio)
        If rconf.pcbscanformoviemediainformation Then
            Try
                If Not currentmovie.fileinfo.version = 1.3 Or rconf.pcbOverwriteNFO Then
                    getmoviemediainfo_bw()

                Else
                    krtbMovieVideoInfo.Text = currentmovie.fileinfo.objtostring(currentmovie.fileinfo)
                    'Dim MI As New MediaInfo
                    'MI.getdata(currentmovie, moviemode)
                    'krtbMovieVideoInfo.Text = currentmovie.fileinfo.objtostring(currentmovie.fileinfo)
                End If
            Catch ex As Exception
                If messageprompts Then MsgBox("DEBUG: " + ex.ToString)
            End Try
        End If
    End Sub

    Private Sub checkVideoTSforcurrentmovie()
        If currentmovie Is Nothing Then Exit Sub
        If Directory.Exists(addfiletofolder(currentmovie.getmoviepath, "VIDEO_TS")) Then
            Dim curMovieNFO As String = addfiletofolder(currentmovie.getmoviepath, "movie.nfo")
            Dim curFolderjpg As String = addfiletofolder(currentmovie.getmoviepath, "folder.jpg")
            Dim curMovieTBN As String = addfiletofolder(currentmovie.getmoviepath, "movie.tbn")
            'Dim curMovienameTBN As String = addfiletofolder(currentmovie.getmoviepath, currentmovie.getmoviename & ".tbn")
            Dim curFanart As String = addfiletofolder(currentmovie.getmoviepath, "fanart.jpg")
            Dim curFanartMN As String = addfiletofolder(currentmovie.getmoviepath, currentmovie.getmoviename & "-fanart.jpg")

            Dim curVTSMovieNFO As String = addfiletofolder(currentmovie.getmoviepath, "VIDEO_TS\" & "movie.nfo")
            Dim curVTSFolderjpg As String = addfiletofolder(currentmovie.getmoviepath, "VIDEO_TS\" & "folder.jpg")
            Dim curVTSMovieTBN As String = addfiletofolder(currentmovie.getmoviepath, "VIDEO_TS\" & "movie.tbn")
            'Dim curVTSMovienameTBN As String = addfiletofolder(currentmovie.getmoviepath, "VIDEO_TS\" & currentmovie.getmoviename & ".tbn")
            Dim curVTSFanart As String = addfiletofolder(currentmovie.getmoviepath, "VIDEO_TS\" & "fanart.jpg")
            'Dim curVTSFanartMN As String = addfiletofolder(currentmovie.getmoviepath, "VIDEO_TS\" & currentmovie.getmoviename & "-fanart.jpg")


            Dim curfile As String
            Dim curVTS As String

            curfile = curMovieNFO
            curVTS = curVTSMovieNFO
            If File.Exists(curVTS) Then
                If File.Exists(curfile) Then
                    'check hash
                    Dim curhash As String
                    Dim curVTShash As String
                    Dim curh1 As New crypto
                    Dim curh2 As New crypto
                    curhash = curh1.GenerateHash(curfile)
                    curVTShash = curh2.GenerateHash(curVTS)
                    If Not curhash = curVTShash Then
                        Try
                            File.SetAttributes(curVTS, FileAttributes.Normal)
                            File.Delete(curVTS)
                        Catch ex As Exception

                        End Try
                        File.Copy(curfile, curVTS, True)
                    End If
                End If

            Else
                'copy
                If File.Exists(curfile) Then File.Copy(curfile, curVTS)
            End If

            'folder jpg
            curfile = curFolderjpg
            curVTS = curVTSFolderjpg
            If File.Exists(curVTS) Then
                If File.Exists(curfile) Then
                    'check hash
                    Dim curhash As String
                    Dim curVTShash As String
                    Dim curh1 As New crypto
                    Dim curh2 As New crypto
                    curhash = curh1.GenerateHash(curfile)
                    curVTShash = curh2.GenerateHash(curVTS)
                    If Not curhash = curVTShash Then
                        Try
                            File.SetAttributes(curVTS, FileAttributes.Normal)
                            File.Delete(curVTS)
                        Catch ex As Exception

                        End Try
                        File.Copy(curfile, curVTS, True)
                    End If
                End If
            Else
                'copy
                If File.Exists(curfile) Then File.Copy(curfile, curVTS)
            End If

            'movietbn
            curfile = curMovieTBN
            curVTS = curVTSMovieTBN
            If File.Exists(curVTS) Then
                If File.Exists(curfile) Then
                    'check hash
                    Dim curhash As String
                    Dim curVTShash As String
                    Dim curh1 As New crypto
                    Dim curh2 As New crypto
                    curhash = curh1.GenerateHash(curfile)
                    curVTShash = curh2.GenerateHash(curVTS)
                    If Not curhash = curVTShash Then
                        Try
                            File.SetAttributes(curVTS, FileAttributes.Normal)
                            File.Delete(curVTS)
                        Catch ex As Exception

                        End Try
                        File.Copy(curfile, curVTS, True)
                    End If
                End If
            Else
                'copy
                If File.Exists(curfile) Then File.Copy(curfile, curVTS)
            End If

            ''movienametbn
            'curfile = curMovienameTBN
            'curVTS = curVTSMovienameTBN
            'If File.Exists(curVTS) Then
            '    If File.Exists(curfile) Then
            '        'check hash
            '        Dim curhash As String
            '        Dim curVTShash As String
            '        Dim curh1 As New crypto
            '        Dim curh2 As New crypto
            '        curhash = curh1.GenerateHash(curfile)
            '        curVTShash = curh2.GenerateHash(curVTS)
            '        If Not curhash = curVTShash Then
            '            Try
            '                File.SetAttributes(curVTS, FileAttributes.Normal)
            '                File.Delete(curVTS)
            '            Catch ex As Exception

            '            End Try
            '            File.Copy(curfile, curVTS, True)
            '        End If
            '    End If
            'Else
            '    'copy
            '    If File.Exists(curfile) Then File.Copy(curfile, curVTS)
            'End If

            'curVTSFanart
            curfile = curFanart
            curVTS = curVTSFanart
            If File.Exists(curVTS) Then
                If File.Exists(curfile) Then
                    'check hash
                    Dim curhash As String
                    Dim curVTShash As String
                    Dim curh1 As New crypto
                    Dim curh2 As New crypto
                    curhash = curh1.GenerateHash(curfile)
                    curVTShash = curh2.GenerateHash(curVTS)
                    If Not curhash = curVTShash Then
                        Try
                            File.SetAttributes(curVTS, FileAttributes.Normal)
                            File.Delete(curVTS)
                        Catch ex As Exception

                        End Try
                        File.Copy(curfile, curVTS, True)
                    End If
                End If
            Else
                'copy
                If File.Exists(curfile) Then File.Copy(curfile, curVTS)
            End If
            'special handler for fanart
            If Not File.Exists(curVTS) And File.Exists(curFanartMN) Then
                File.Copy(curFanartMN, curVTS)
            End If


            ''curVTSFanartMN
            'curfile = curFanartMN
            'curVTS = curVTSFanartMN
            'If File.Exists(curVTS) Then
            '    If File.Exists(curfile) Then
            '        'check hash
            '        Dim curhash As String
            '        Dim curVTShash As String
            '        Dim curh1 As New crypto
            '        Dim curh2 As New crypto
            '        curhash = curh1.GenerateHash(curfile)
            '        curVTShash = curh2.GenerateHash(curVTS)
            '        If Not curhash = curVTShash Then
            '            Try
            '                File.SetAttributes(curVTS, FileAttributes.Normal)
            '                File.Delete(curVTS)
            '            Catch ex As Exception

            '            End Try
            '            File.Copy(curfile, curVTS, True)
            '        End If
            '    End If
            'Else
            '    'copy
            '    If File.Exists(curfile) Then File.Copy(curfile, curVTS)
            'End If

            End If

    End Sub

    Private Sub getdefaultfolderjpg(ByRef currentmovie As movie, Optional ByVal autopilotrunningnow As Boolean = False)
        'first we look for folder.jpg (if it's enabled in the settings) and we are not in filemode
        Dim nowhavefolderjpg As Boolean = False
        If rconf.pcbCreateFolderjpg And Not File.Exists(addfiletofolder(currentmovie.getmoviepath, "folder.jpg")) And Not moviemode = "file" Then
            'config is set to use folder.jpg, but there is not one

            'we look to see if <moviename>.tbn is there, if it is then we copy that file to folder.jpg
            If File.Exists(addfiletofolder(currentmovie.getmoviepath, currentmovie.pmoviename + ".tbn")) Then
                File.Copy(addfiletofolder(currentmovie.getmoviepath, currentmovie.pmoviename + ".tbn"), addfiletofolder(currentmovie.getmoviepath, "folder.jpg"))
                nowhavefolderjpg = True
            End If

            'if we did not have a <moviename>.tbn we will look for movie.tbn, if it is there we copy that file to folder.jpg
            If Not nowhavefolderjpg And File.Exists(addfiletofolder(currentmovie.getmoviepath, "movie.tbn")) Then
                File.Copy(addfiletofolder(currentmovie.getmoviepath, "movie.tbn"), addfiletofolder(currentmovie.getmoviepath, "folder.jpg"))
                nowhavefolderjpg = True
            End If

            'if we didn't have a movie.tbn then lets see if there is any .tbn file in the folder, if it is we will use that
            If Not nowhavefolderjpg Then
                Dim dlistoffiles() As String
                Dim imagefilefound As String = ""
                dlistoffiles = Directory.GetFiles(currentmovie.getmoviepath)
                For Each listedfile As String In dlistoffiles
                    If listedfile.Length > 4 Then
                        Dim extoffile As String = Strings.Right(listedfile, 4)
                        If extoffile.ToLower = ".tbn" Then
                            If Not listedfile.ToLower.Contains("fanart") Then
                                imagefilefound = listedfile
                                Exit For
                            End If
                        End If
                    End If
                Next

                If imagefilefound = "" Then 'look for png
                    For Each listedfile As String In dlistoffiles
                        If listedfile.Length > 4 Then
                            Dim extoffile As String = Strings.Right(listedfile, 4)
                            If extoffile.ToLower = ".png" Then
                                If Not listedfile.ToLower.Contains("fanart") Then
                                    imagefilefound = listedfile
                                    Exit For
                                End If
                            End If
                        End If
                    Next
                End If

                If imagefilefound = "" Then 'look for jpg
                    For Each listedfile As String In dlistoffiles
                        If listedfile.Length > 4 Then
                            Dim extoffile As String = Strings.Right(listedfile, 4)
                            If extoffile.ToLower = ".jpg" Then
                                If Not listedfile.ToLower.Contains("fanart") Then
                                    imagefilefound = listedfile
                                    Exit For
                                End If
                            End If
                        End If
                    Next
                End If

                If Not imagefilefound = "" Then
                    File.Copy(imagefilefound, addfiletofolder(currentmovie.getmoviepath, "folder.jpg"))
                    nowhavefolderjpg = True
                End If
            End If

            If Not autopilotrunningnow Then
                'if we did not have a .tbn file we will attempt to use the first poster we find
                If Not nowhavefolderjpg And Not pbti1.ImageLocation Is Nothing Then
                    File.Copy(pbti1.ImageLocation, addfiletofolder(currentmovie.getmoviepath, "folder.jpg"))
                    nowhavefolderjpg = True
                End If

                ''if we still dont have a folder.jpg, try the first tmdb image
                'If Not nowhavefolderjpg And Not pbposterTMDB1.ImageLocation Is Nothing Then
                '    File.Copy(pbposterTMDB1.ImageLocation, addfiletofolder(currentmovie.getmoviepath, "folder.jpg"))
                '    nowhavefolderjpg = True
                'End If

                'if we still don't have a folder.jpg, try the first nicecovers poster 
                'If Not nowhavefolderjpg And Not pbNiceCovers1.ImageLocation Is Nothing Then
                '    File.Copy(pbNiceCovers1.ImageLocation, addfiletofolder(currentmovie.getmoviepath, "folder.jpg"))
                '    nowhavefolderjpg = True
                'End If
            End If
        End If

    End Sub

    Private Sub getdefaultmovienametbn(ByRef currentmovie As movie, Optional ByVal autopilotrunningnow As Boolean = False)

        Dim nowhavemovienametbn As Boolean = False

        'if we are not in filemode, first we look for folder.jpg (if it's enabled in the settings)
        If Not moviemode = "file" Then
            If Not nowhavemovienametbn And File.Exists(addfiletofolder(currentmovie.getmoviepath, "folder.jpg")) Then
                File.Copy(addfiletofolder(currentmovie.getmoviepath, "folder.jpg"), addfiletofolder(currentmovie.getmoviepath, currentmovie.pmoviename + ".tbn"))
                nowhavemovienametbn = True
            End If
        End If

        If Not autopilotrunningnow Then
            'if we did not have a <moviename>.tbn file we will attempt to use the first poster
            If Not nowhavemovienametbn And Not pbti1.ImageLocation Is Nothing Then
                Dim newnamedtbnfile As String = ""
                If moviemode = "file" Then
                    newnamedtbnfile = stripstackforfilemode(removeextension(currentmovie.preservedmoviename)) + ".tbn"
                Else
                    newnamedtbnfile = currentmovie.pmoviename + ".tbn"
                End If
                If Not newnamedtbnfile = "" Then
                    File.Copy(pbti1.ImageLocation, addfiletofolder(currentmovie.getmoviepath, newnamedtbnfile))
                    nowhavemovienametbn = True
                End If
            End If

            ''if we still dont have a <moviename>.tbn try the first tmdb image
            'If Not nowhavemovienametbn And Not pbposterTMDB1.ImageLocation Is Nothing Then
            '    File.Copy(pbposterTMDB1.AccessibleDescription, addfiletofolder(currentmovie.getmoviepath, currentmovie.pmoviename + ".tbn"))
            '    nowhavemovienametbn = True
            'End If

            ''if we still don't have a <moviename>.tbn, try the first nicecovers poster 
            'If Not nowhavemovienametbn And Not pbNiceCovers1.ImageLocation Is Nothing Then
            '    File.Copy(pbNiceCovers1.ImageLocation, addfiletofolder(currentmovie.getmoviepath, currentmovie.pmoviename + ".tbn"))
            '    nowhavemovienametbn = True
            'End If
        End If
    End Sub

    Private Sub getdefaultmovietbn(ByRef currentmovie As movie, Optional ByVal autopilotrunningnow As Boolean = False)

        Dim nowhavemovietbn As Boolean = False

        'if we are not in filemode, first we look for folder.jpg (if it's enabled in the settings)
        If Not moviemode = "file" Then
            If Not nowhavemovietbn And File.Exists(addfiletofolder(currentmovie.getmoviepath, "folder.jpg")) Then
                File.Copy(addfiletofolder(currentmovie.getmoviepath, "folder.jpg"), addfiletofolder(currentmovie.getmoviepath, "movie.tbn"))
                nowhavemovietbn = True
            End If

            If Not autopilotrunningnow Then
                'if we did not have a movie.tbn file we will attempt to use the first impawards poster
                If Not nowhavemovietbn And Not pbti1.ImageLocation Is Nothing Then
                    File.Copy(pbti1.ImageLocation, addfiletofolder(currentmovie.getmoviepath, "movie.tbn"))
                    nowhavemovietbn = True
                End If

                ''if we still dont have a movie.tbn try the first tmdb image
                'If Not nowhavemovietbn And Not pbposterTMDB1.ImageLocation Is Nothing Then
                '    File.Copy(pbposterTMDB1.AccessibleDescription, addfiletofolder(currentmovie.getmoviepath, "movie.tbn"))
                '    nowhavemovietbn = True
                'End If

                ''if we still don't have a movie.tbn, try the first nicecovers poster 
                'If Not nowhavemovietbn And Not pbNiceCovers1.ImageLocation Is Nothing Then
                '    File.Copy(pbNiceCovers1.ImageLocation, addfiletofolder(currentmovie.getmoviepath, "movie.tbn"))
                '    nowhavemovietbn = True
                'End If
            End If
        End If
    End Sub

    Private Sub getdisplayposternicecovers(ByRef currentmovie1 As movie)

        Dim newncp As New nicecoverposters
        Dim newncpname As String = ""
        newncpname = Strings.Replace(currentmovie1.pmoviename, " ", "-")
        newncpname = newncpname.ToLower
        newncp.pmoviename = newncpname
        If File.Exists(rconf.nicecoverxmlcachefolderlocation + newncpname + ".xml") Then
            newncp.readxml(newncp, rconf.nicecoverxmlcachefolderlocation, False)
        End If
        If newncp.pposters.Count > 0 Then
            'get the filename from the link 
            Dim url As String = newncp.pposters.Item(0).ToString
            Dim filename As String = ""
            Try
                filename = Regex.Match(url, "/{1}(\w*?.jpg)").Groups(1).Value
            Catch ex As ArgumentException
                'Syntax error in the regular expression
            End Try


            'download the poster if we don't have it
            If rbem.Checked And Not File.Exists(rconf.nicecovercachefolder + filename) And Not filename = "" Then
                dlgDownloadingFile.downloadertxtFileName.Text = url
                dlgDownloadingFile.whereToSave = rconf.nicecovercachefolder + filename
                dlgDownloadingFile.ShowDialog()
                If messageprompts Then newnicecovercounter = 1
            End If
            'If cbAllowIconSelection.Checked And File.Exists(rconf.nicecovercachefolder + filename) Then
            '    pbNiceCovers1.ImageLocation = rconf.nicecovercachefolder + filename
            '    pbNiceCovers1.Load()
            '    postertotal += 1
            'End If

            'Else
            '    pbNiceCovers1.ImageLocation = Nothing
            '    pbNiceCovers1.Image = Nothing
        End If
    End Sub

    Private Function checkforlocalfanart(ByVal curpath As String, ByVal dname As String) As String
        Dim lvStr_curfanart As String = ""
        If File.Exists(addfiletofolder(curpath, dname) + "-fanart.jpg") Then
            lvStr_curfanart = addfiletofolder(curpath, dname) + "-fanart.jpg"
        ElseIf File.Exists(addfiletofolder(curpath, dname) + "-fanart.png") Then
            lvStr_curfanart = addfiletofolder(curpath, dname) + "-fanart.png"
        ElseIf File.Exists(addfiletofolder(curpath, "fanart.jpg")) Then
            lvStr_curfanart = addfiletofolder(curpath, "fanart.jpg")
        ElseIf File.Exists(addfiletofolder(curpath, "fanart.png")) Then
            lvStr_curfanart = addfiletofolder(curpath, "fanart.png")
        End If
        Return lvStr_curfanart
    End Function
    Private Sub showfolderjpginmainwindow(ByVal curpath As String, ByVal skt As Boolean)
        kgCurMovieImagetbn.Visible = False
        pbCurrentIconUsedNT.Visible = False
        kgCurMovieImageFolderjpg.Visible = False
        '---Show folderjpg and tbn file
        If skt Then
            If File.Exists(curpath + "\folder.jpg") And Me.showposter Then
                Try
                    pbCurrentIconUsedNT.ImageLocation = curpath + "\folder.jpg"
                    'pbCurrentIconUsedNT.Load()
                    pbCurrentIconUsedNT.Show()
                    pbCurrentIconUsedNT.Enabled = True
                    kgCurMovieImagetbn.Visible = False
                Catch
                    'MsgBox("file bad, delete?", MsgBoxStyle.YesNo, "Unable to load folder.jpg")
                    ' If MsgBoxResult.Yes = MsgBox("Unable to load folder.jpg, it appears to be corrupted." + vbNewLine + vbNewLine + "Do you want to delete it and the associated tbn file?") Then
                    File.Delete(curpath + "\folder.jpg")
                    'If File.Exists(lblCurMovieFolder.Text + "\" + tbMovieName.Text + ".tbn") Then File.Delete(lblCurMovieFolder.Text + "\" + tbMovieName.Text + ".tbn")
                    'End If
                    '    MsgBox("Image located at: " + Path + "\folder.jpg" + " is corrupted, I'm deleting it")
                    'if this fails, the file is corrupt, delete it and the tbn file
                    pbCurIconUsed.ImageLocation = Nothing
                    pbCurIconUsed.Hide()
                    pbCurIconUsed2.ImageLocation = Nothing
                    pbCurIconUsed2.Hide()
                    'kgCurMovieImagetbn.Visible = False
                End Try
            Else 'no folder.jpg found - tbn's are not loaded into the first window
                ''if we are using folder.jpg for tbn's look for moviename.tbn then movie.tbn
                'Dim curicontouse As String = ""
                'If File.Exists(addfiletofolder(currentmovie.getmoviepath, currentmovie.pmoviename + ".tbn")) Then
                '    curicontouse = addfiletofolder(currentmovie.getmoviepath, currentmovie.pmoviename + ".tbn")
                'ElseIf File.Exists(addfiletofolder(currentmovie.getmoviepath, "movie.tbn")) Then
                '    curicontouse = addfiletofolder(currentmovie.getmoviepath, "movie.tbn")
                'End If

                pbCurIconUsed.ImageLocation = Nothing
                pbCurIconUsed.Hide()
                pbCurIconUsed2.ImageLocation = Nothing
                pbCurIconUsed2.Hide()
                'kgCurMovieImagetbn.Visible = False
            End If
        End If
        If Not skt Then
            If File.Exists(curpath + "\folder.jpg") And Me.showposter Then
                Try
                    pbCurIconUsed.ImageLocation = curpath + "\folder.jpg"
                    'pbCurIconUsed.Load()
                    pbCurIconUsed.Hide() 'hide basic image
                    pbCurIconUsed2.Hide() 'hide poster version
                    'Me.Refresh()
                    Dim bmpImage As System.Drawing.Image
                    bmpImage = System.Drawing.Image.FromFile(curpath + "\folder.jpg")
                    'aspect ratio items
                    Dim imagetype As String

                    Dim taspect As Double = aspectratio(bmpImage)
                    If taspect < 0.25 Then
                        'wide(Icon)
                        If bmpImage.Width >= 500 Then
                            imagetype = "widenoformat"
                        Else
                            imagetype = "wideicon"
                        End If

                    ElseIf taspect >= 0.98 And taspect <= 1.02 Then
                        imagetype = "square"
                    ElseIf (taspect > 0.8 Or taspect < 0.95) And bmpImage.Height < 500 And bmpImage.Width < 450 Then
                        'boxed icon or maybe squared poster
                        imagetype = "boxed"
                    Else
                        imagetype = "poster" 'consider it a poster
                    End If
                    'set pb to bmp size
                    Try 'fix to check file first and remove try block
                        Dim x, y As Integer
                        If (bmpImage.Width >= 400 Or bmpImage.Height > 299 Or Not rconf.pcbDlFormat = 2 Or imagetype = "poster") And Not imagetype = "wideicon" And Not imagetype = "widenoformat" Then

                            Debug.Print("no transparency attempted for current icon, too big, quality setting not highest, or it's a poster")
                            'scale image size
                            'set the fixed height and get the new width (based on aspect) then set the picture box sizes
                            Dim fixedHeight As Double
                            If rconf.pcbshowtbn Then
                                fixedHeight = rconf.pknudPosterHeightfolderjpg '245
                                If fixedHeight < 86 Then fixedHeight = 86
                            Else
                                fixedHeight = rconf.pknudPosterHeightfolderjpg '400
                                If fixedHeight < 86 Then fixedHeight = 86
                            End If
                            Dim newWidth As Double = fixedHeight / taspect
                            ''''Dim framefixedheight As Double ' = 285
                            ' ''If rconf.pcbshowtbn Then
                            ' ''    framefixedheight = (rconf.pknudPosterHeightfolderjpg * rconf.pkknudframeratio.Value) '285
                            ' ''Else
                            ' ''    framefixedheight = (rconf.pknudPosterHeightfolderjpg * knudframeratio.Value) '.162265) '450
                            ' ''End If
                            ' ''Dim framenewWidth As Double = framefixedheight / taspect

                            'pbCurIconUsed.Image = bmpImage
                            'pbFrame.Show()
                            '' ''pbFrame.Height = Convert.ToInt32(framefixedheight)
                            '' ''pbFrame.Width = Convert.ToInt32(framenewWidth)
                            'pbCurIconUsed.Image = bmpImage
                            'pbFrame.Show()
                            'If knudPosterHeightfolderjpg.Value > 100 And knudPosterHeightfolderjpg.Value < 200 Then
                            '    Me.pbCurIconUsed2.Location = New System.Drawing.Point(5, 5)
                            'ElseIf knudPosterHeightfolderjpg.Value > 200 And knudPosterHeightfolderjpg.Value < 300 Then
                            '    Me.pbCurIconUsed2.Location = New System.Drawing.Point(10, 15)
                            'ElseIf knudPosterHeightfolderjpg.Value > 300 And knudPosterHeightfolderjpg.Value < 401 Then
                            '    Me.pbCurIconUsed2.Location = New System.Drawing.Point(15, 25)
                            'ElseIf knudPosterHeightfolderjpg.Value > 401 And knudPosterHeightfolderjpg.Value < 500 Then
                            '    Me.pbCurIconUsed2.Location = New System.Drawing.Point(20, 30)
                            'ElseIf knudPosterHeightfolderjpg.Value > 500 And knudPosterHeightfolderjpg.Value < 600 Then
                            '    Me.pbCurIconUsed2.Location = New System.Drawing.Point(25, 35)
                            'ElseIf knudPosterHeightfolderjpg.Value > 600 And knudPosterHeightfolderjpg.Value < 700 Then
                            '    Me.pbCurIconUsed2.Location = New System.Drawing.Point(30, 40)
                            'ElseIf knudPosterHeightfolderjpg.Value > 700 And knudPosterHeightfolderjpg.Value < 800 Then
                            '    Me.pbCurIconUsed2.Location = New System.Drawing.Point(37, 47)
                            'ElseIf knudPosterHeightfolderjpg.Value > 800 And knudPosterHeightfolderjpg.Value < 900 Then
                            '    Me.pbCurIconUsed2.Location = New System.Drawing.Point(43, 52)
                            'ElseIf knudPosterHeightfolderjpg.Value > 900 And knudPosterHeightfolderjpg.Value < 1000 Then
                            '    Me.pbCurIconUsed2.Location = New System.Drawing.Point(48, 57)
                            'ElseIf knudPosterHeightfolderjpg.Value > 1000 And knudPosterHeightfolderjpg.Value < 1100 Then
                            '    Me.pbCurIconUsed2.Location = New System.Drawing.Point(53, 62)
                            'ElseIf knudPosterHeightfolderjpg.Value > 1100 And knudPosterHeightfolderjpg.Value < 1200 Then
                            '    Me.pbCurIconUsed2.Location = New System.Drawing.Point(58, 67)
                            'ElseIf knudPosterHeightfolderjpg.Value > 1200 And knudPosterHeightfolderjpg.Value < 1300 Then
                            '    Me.pbCurIconUsed2.Location = New System.Drawing.Point(63, 72)
                            'ElseIf knudPosterHeightfolderjpg.Value > 1300 And knudPosterHeightfolderjpg.Value < 1400 Then
                            '    Me.pbCurIconUsed2.Location = New System.Drawing.Point(68, 77)
                            'ElseIf knudPosterHeightfolderjpg.Value > 1400 And knudPosterHeightfolderjpg.Value < 1501 Then
                            '    Me.pbCurIconUsed2.Location = New System.Drawing.Point(73, 82)
                            'End If

                            pbCurIconUsed2.Show()
                            pbCurIconUsed2.Width = Convert.ToInt32(newWidth)
                            pbCurIconUsed2.Height = Convert.ToInt32(fixedHeight)
                            pbCurIconUsed2.Image = pbCurIconUsed.Image
                            '       pbCurIconUsed2.Load()
                            pbCurIconUsed2.BringToFront()
                            kgCurMovieImageFolderjpg.Visible = True
                            klblmoviefolderjpg.Visible = True
                            klblmoviefolderjpg.BringToFront()
                            pbCurIconUsed2.Enabled = True
                            pbCurIconUsed.Enabled = False
                            'do not attempt transparency
                        ElseIf imagetype = "widenoformat" Then
                            pbCurIconUsed.Region = Nothing
                            pbCurIconUsed.BackColor = System.Drawing.Color.Transparent

                            pbCurIconUsed.ImageLocation = curpath + "\folder.jpg"
                            pbCurIconUsed.Enabled = True
                            pbCurIconUsed2.Enabled = False
                            kgCurMovieImagetbn.Visible = False
                            '      pbCurIconUsed2.Load()
                            pbCurIconUsed.Visible = True
                            pbCurIconUsed.BringToFront()
                            klblmoviefolderjpg.Visible = True
                            klblmoviefolderjpg.BringToFront()
                            kpMovieData.BringToFront() 'if not full screen, the wide icon wide will overlap the movie data, so put it on top

                        Else
                            If messageprompts Then lblPbar.Text = "---- Processing Transparency ----"
                            'If messageprompts Then Me.Refresh()()
                            Debug.Print("start: " + TimeString())
                            Dim bmp As New Bitmap(curpath + "\folder.jpg")
                            Dim gp As New System.Drawing.Drawing2D.GraphicsPath
                            Dim mask1 As System.Drawing.Color = System.Drawing.Color.White
                            Dim mask2 As System.Drawing.Color = System.Drawing.Color.Transparent
                            Dim noshow As String = "Color [A=0, R=0, G=0, B=0]"
                            For x = 0 To bmp.Width - 1
                                For y = 0 To bmp.Height - 1
                                    Dim curPixAlpha As Integer = Convert.ToInt16(Strings.Replace(Strings.Replace(Strings.Right(Strings.Left(bmp.GetPixel(x, y).ToString, 12), 3), ",", ""), " ", ""))
                                    If curPixAlpha >= 128 Then
                                        'Debug.Print("More then 127: " + curPixAlpha.ToString)
                                        gp.AddRectangle(New Rectangle(x, y, 1, 1))
                                    Else
                                        'Debug.Print("mask1" + bmp.GetPixel(x, y).ToString)
                                    End If
                                    curPixAlpha = Nothing
                                Next
                            Next

                            'set pbsize
                            pbCurIconUsed.Height = bmp.Height
                            pbCurIconUsed.Width = bmp.Width
                            'setitem
                            pbCurIconUsed.BackColor = System.Drawing.Color.Transparent
                            pbCurIconUsed.Region = New System.Drawing.Region(gp)
                            '     pbCurIconUsed.Load()
                            pbCurIconUsed.Show()
                            pbCurIconUsed.Enabled = True
                            klblmoviefolderjpg.Visible = True
                            klblmoviefolderjpg.BringToFront()
                            pbCurIconUsed2.Enabled = False
                            'kgCurMovieImagetbn.Visible = False
                            'cleanup
                            bmp.Dispose()
                            bmp = Nothing
                            gp.Dispose()
                            Debug.Print("end: " + TimeString())
                            'End If
                        End If
                    Catch ex As Exception
                        Debug.Print(ex.ToString)
                    End Try
                    bmpImage.Dispose()
                Catch ex As Exception
                    'MsgBox("file bad, delete?", MsgBoxStyle.YesNo, "Unable to load folder.jpg")
                    ' If MsgBoxResult.Yes = MsgBox("Unable to load folder.jpg, it appears to be corrupted." + vbNewLine + vbNewLine + "Do you want to delete it and the associated tbn file?") Then
                    File.Delete(curpath + "\folder.jpg")
                    'If File.Exists(lblCurMovieFolder.Text + "\" + tbMovieName.Text + ".tbn") Then File.Delete(lblCurMovieFolder.Text + "\" + tbMovieName.Text + ".tbn")
                    'End If
                    '    MsgBox("Image located at: " + Path + "\folder.jpg" + " is corrupted, I'm deleting it")
                    'if this fails, the file is corrupt, delete it and the tbn file
                    pbCurIconUsed.ImageLocation = Nothing
                    pbCurIconUsed.Hide()
                    pbCurIconUsed2.ImageLocation = Nothing
                    pbCurIconUsed2.Hide()
                    kgCurMovieImagetbn.Visible = False
                    'klblmoviefolderjpg.Visible = False

                End Try
                'end cur image processing
            Else 'used when no folder.jpg exsist
                pbCurIconUsed.ImageLocation = Nothing
                pbCurIconUsed.Hide()
                pbCurIconUsed2.ImageLocation = Nothing
                pbCurIconUsed2.Hide()
                klblmoviefolderjpg.Visible = False
            End If
        End If
        Debug.Print("done: " + TimeString())
        ' tcMain.SelectTab(0)
        If Not pbCurIconUsed.ImageLocation Is Nothing Then
            Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(pbCurIconUsed.ImageLocation)
            klblImageSizeFolderJpg.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(pbCurIconUsed.ImageLocation)
            objImage.Dispose()
            klblImageSizeFolderJpg.BringToFront()
            ''getfanart size and append to text
            'If Not fanartpb1.ImageLocation Is Nothing Then
            '    Dim objImage2 As System.Drawing.Image = System.Drawing.Image.FromFile(fanartpb1.ImageLocation)
            '    klblImageSizeFolderJpg.Text += " - Fanart: " & objImage2.Width.ToString & "x" & objImage2.Height.ToString & " Size: " & getFileSize(fanartpb1.ImageLocation)
            '    objImage2.Dispose()
            'End If
        Else
            If Not pbCurIconUsed2.ImageLocation Is Nothing Then
                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(pbCurIconUsed2.ImageLocation)
                klblImageSizeFolderJpg.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(pbCurIconUsed2.ImageLocation)
                objImage.Dispose()
                klblImageSizeFolderJpg.BringToFront()
                'If Not fanartpb1.ImageLocation Is Nothing Then
                '    Dim objImage2 As System.Drawing.Image = System.Drawing.Image.FromFile(fanartpb1.ImageLocation)
                '    klblImageSizeFolderJpg.Text += " - Fanart: " & objImage2.Width.ToString & "x" & objImage2.Height.ToString & " Size: " & getFileSize(fanartpb1.ImageLocation)
                '    objImage2.Dispose()
                'End If
            End If
        End If
        GC.Collect()
    End Sub

    Private Sub showtbninmainwindow(ByVal curpath As String, ByVal skt As Boolean)
        kgCurMovieImagetbn.Visible = False
        If rconf.pcbshowtbn And Not skt Then
            'figure out which icon box is showing
            Dim curboxstartpoint As Double

            If pbCurIconUsed.Enabled = True Then
                curboxstartpoint = pbCurIconUsed.Location.Y + pbCurIconUsed.Height + 20
            End If

            If pbCurIconUsed2.Enabled = True Then
                curboxstartpoint = pbCurIconUsed2.Location.Y + pbCurIconUsed2.Height + 20
            End If

            If pbCurIconUsed.Enabled And pbCurIconUsed2.Enabled Then
                'MessageBox.Show("This should not be possible, please restart.")
            End If
            'Handler for movie.tbn or <moviename>.tbn
            'first look for <moviename>.tbn, then movie.tbn - the order xbmc loads them based on the lastest svn
            Dim curtbn As String = ""
            Dim tbnbasedonmodename As String = ""
            If moviemode = "file" Then
                tbnbasedonmodename = stripstackforfilemode(removeextension(currentmovie.preservedmoviename))
            Else
                tbnbasedonmodename = currentmovie.getmoviename
            End If

            If File.Exists(addfiletofolder(curpath, tbnbasedonmodename + ".tbn")) And Me.showposter Then
                curtbn = addfiletofolder(curpath, tbnbasedonmodename + ".tbn")
            ElseIf File.Exists(addfiletofolder(curpath, "movie.tbn")) And Me.showposter And Not moviemode = "file" Then
                curtbn = addfiletofolder(curpath, "movie.tbn")
            End If
            Debug.Print(curtbn)
            Debug.Print(rconf.pcbUseFolderJpgforTBN.ToString)
            If Not curtbn = "" And Me.showposter Then
                Try
                    pbCurTBNUsed.ImageLocation = curtbn
                    'pbCurTBNUsed.Load()
                    pbCurTBNUsed.Hide() 'hide basic image
                    pbCurTBNUsed2.Hide() 'hide poster version
                    'Me.Refresh()
                    Dim bmpImage As System.Drawing.Image
                    bmpImage = System.Drawing.Image.FromFile(curtbn)
                    'aspect ratio items
                    Dim imagetype As String

                    Dim taspect As Double = aspectratio(bmpImage)

                    If taspect < 0.25 Then
                        'wide(Icon)
                        If bmpImage.Width >= 500 Then
                            imagetype = "widenoformat"
                        Else
                            imagetype = "wideicon"
                        End If
                    ElseIf taspect >= 0.98 And taspect <= 1.02 Then
                        imagetype = "square"
                    ElseIf (taspect > 0.8 Or taspect < 0.95) And bmpImage.Height < 500 And bmpImage.Width < 450 Then
                        'boxed icon or maybe squared poster
                        imagetype = "boxed"
                    Else
                        imagetype = "poster" 'consider it a poster
                    End If
                    'set pb to bmp size
                    Try 'fix to check file first and remove try block
                        Dim x, y As Integer
                        If (bmpImage.Width >= 400 Or bmpImage.Height > 299 Or Not rconf.pcbDlFormat = 2 Or imagetype = "poster") And Not imagetype = "wideicon" And Not imagetype = "widenoformat" Then

                            Debug.Print("no transparency attempted for current icon, too big, quality setting not highest, or it's a poster")
                            'scale image size
                            'set the fixed height and get the new width (based on aspect) then set the picture box sizes
                            Dim fixedHeight As Double
                            If rconf.pcbshowtbn Then
                                fixedHeight = rconf.pknudPosterHeightTBN '245
                                If fixedHeight < 86 Then fixedHeight = 86
                            Else
                                fixedHeight = rconf.pknudPosterHeightTBN '400
                                If fixedHeight < 86 Then fixedHeight = 86
                            End If
                            Dim newWidth As Double = fixedHeight / taspect
                            'Dim framefixedheight As Double ' = 285
                            'If rconf.pcbshowtbn Then
                            '    framefixedheight = (rconf.pknudPosterHeightfolderjpg * knudframeratio.Value) '285
                            'Else
                            '    framefixedheight = (rconf.pknudPosterHeightfolderjpg * knudframeratio.Value) '.162265) '450
                            'End If
                            'Dim framenewWidth As Double = framefixedheight / taspect


                            ''Dim fixedHeight As Double = 245
                            ''Dim newWidth As Double = fixedHeight / taspect
                            ''Dim framefixedheight As Double = 285
                            ''Dim framenewWidth As Double = framefixedheight / taspect

                            ''pbCurIconUsed.Image = bmpImage
                            ''pbFrame.Show()
                            'pbFrameTBN.Height = Convert.ToInt32(framefixedheight)
                            'pbFrameTBN.Width = Convert.ToInt32(framenewWidth)
                            'pbFrameTBN.Location = New System.Drawing.Point(pbCurTBNUsed.Location.X, CInt(curboxstartpoint))
                            'pbCurIconUsed.Image = bmpImage
                            ' pbFrameTBN.Show()
                            kgCurMovieImagetbn.Location = New System.Drawing.Point(pbCurTBNUsed2.Location.X, CInt(curboxstartpoint + 28))
                            'pbCurTBNUsed2.Load()
                            pbCurTBNUsed2.Show()
                            pbCurTBNUsed2.Width = Convert.ToInt32(newWidth)
                            pbCurTBNUsed2.Height = Convert.ToInt32(fixedHeight)
                            pbCurTBNUsed2.Image = pbCurTBNUsed.Image
                            pbCurTBNUsed2.BringToFront()
                            kgCurMovieImagetbn.Visible = True
                            klblmovietbn.Visible = True
                            klblmovietbn.BringToFront()
                            pbCurTBNUsed2.Enabled = True
                            'do not attempt transparency
                        ElseIf imagetype = "widenoformat" Then
                            pbCurTBNUsed.Location = New System.Drawing.Point(pbCurTBNUsed.Location.X, CInt(curboxstartpoint))
                            pbCurTBNUsed.Region = Nothing
                            pbCurTBNUsed.ImageLocation = curtbn
                            'pbCurTBNUsed.Load()
                            pbCurTBNUsed.Enabled = True
                            pbCurTBNUsed.Visible = True
                            pbCurTBNUsed.BringToFront()
                            klblmovietbn.Visible = True
                            klblmovietbn.BringToFront()
                            kgCurMovieImagetbn.Visible = False
                        Else
                            If messageprompts Then lblPbar.Text = "---- Processing Transparency ----"
                            'If messageprompts Then Me.Refresh()()
                            Debug.Print("start: " + TimeString())
                            Dim bmp As New Bitmap(curtbn)
                            Dim gp As New System.Drawing.Drawing2D.GraphicsPath
                            Dim mask1 As System.Drawing.Color = System.Drawing.Color.White
                            Dim mask2 As System.Drawing.Color = System.Drawing.Color.Transparent
                            Dim noshow As String = "Color [A=0, R=0, G=0, B=0]"
                            For x = 0 To bmp.Width - 1
                                For y = 0 To bmp.Height - 1
                                    Dim curPixAlpha As Integer = Convert.ToInt16(Strings.Replace(Strings.Replace(Strings.Right(Strings.Left(bmp.GetPixel(x, y).ToString, 12), 3), ",", ""), " ", ""))
                                    If curPixAlpha >= 128 Then
                                        'Debug.Print("More then 127: " + curPixAlpha.ToString)
                                        gp.AddRectangle(New Rectangle(x, y, 1, 1))
                                    Else
                                        'Debug.Print("mask1" + bmp.GetPixel(x, y).ToString)
                                    End If
                                    curPixAlpha = Nothing
                                Next
                            Next

                            'set pbsize
                            pbCurTBNUsed.Height = bmp.Height
                            pbCurTBNUsed.Width = bmp.Width
                            'setitem
                            pbCurTBNUsed.BackColor = System.Drawing.Color.Transparent
                            pbCurTBNUsed.Region = Nothing
                            pbCurTBNUsed.Region = New System.Drawing.Region(gp)
                            pbCurTBNUsed.Location = New System.Drawing.Point(pbCurTBNUsed.Location.X, CInt(curboxstartpoint))
                            'pbCurTBNUsed.Load()
                            pbCurTBNUsed.Show()
                            klblmovietbn.Visible = True
                            klblmovietbn.BringToFront()
                            pbCurTBNUsed.Enabled = True
                            'cleanup
                            bmp.Dispose()
                            bmp = Nothing
                            gp.Dispose()
                            Debug.Print("end: " + TimeString())
                            kgCurMovieImagetbn.Visible = False
                            'End If
                        End If
                    Catch ex As Exception
                        Debug.Print(ex.ToString)
                    End Try
                    bmpImage.Dispose()
                Catch ex As Exception
                    'MsgBox("file bad, delete?", MsgBoxStyle.YesNo, "Unable to load folder.jpg")
                    ' If MsgBoxResult.Yes = MsgBox("Unable to load folder.jpg, it appears to be corrupted." + vbNewLine + vbNewLine + "Do you want to delete it and the associated tbn file?") Then
                    File.Delete(curtbn)
                    'If File.Exists(lblCurMovieFolder.Text + "\" + tbMovieName.Text + ".tbn") Then File.Delete(lblCurMovieFolder.Text + "\" + tbMovieName.Text + ".tbn")
                    'End If
                    '    MsgBox("Image located at: " + Path + "\folder.jpg" + " is corrupted, I'm deleting it")
                    'if this fails, the file is corrupt, delete it and the tbn file
                    pbCurTBNUsed.ImageLocation = Nothing
                    pbCurTBNUsed.Hide()
                    pbCurTBNUsed2.ImageLocation = Nothing
                    pbCurTBNUsed2.Hide()
                    kgCurMovieImagetbn.Visible = False
                End Try
                'end cur image processing
            Else 'used when no folder.jpg exsist
                pbCurTBNUsed.ImageLocation = Nothing
                pbCurTBNUsed.Hide()
                pbCurTBNUsed2.ImageLocation = Nothing
                pbCurTBNUsed2.Hide()
                klblmovietbn.Visible = False
                kgCurMovieImagetbn.Visible = False
            End If

        End If
        Debug.Print("done: " + TimeString())

        If Not pbCurTBNUsed.ImageLocation Is Nothing Then
            Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(pbCurTBNUsed.ImageLocation)
            klblImageSizeMovienameTbn.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(pbCurTBNUsed.ImageLocation)
            objImage.Dispose()
            klblImageSizeMovienameTbn.BringToFront()
            'Dim objImage2 As System.Drawing.Image = System.Drawing.Image.FromFile(fanartpb1.ImageLocation)
            'klblImageSizeFolderJpg.Text += " - Fanart: " & objImage2.Width.ToString & "x" & objImage2.Height.ToString & " Size: " & getFileSize(fanartpb1.ImageLocation)
            'objImage2.Dispose()
        Else
            If Not pbCurTBNUsed2.ImageLocation Is Nothing Then
                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(pbCurTBNUsed2.ImageLocation)
                klblImageSizeMovienameTbn.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(pbCurTBNUsed2.ImageLocation)
                objImage.Dispose()
                klblImageSizeMovienameTbn.BringToFront()
                'Dim objImage2 As System.Drawing.Image = System.Drawing.Image.FromFile(fanartpb1.ImageLocation)
                'klblImageSizeFolderJpg.Text += " - Fanart: " & objImage2.Width.ToString & "x" & objImage2.Height.ToString & " Size: " & getFileSize(fanartpb1.ImageLocation)
                'objImage2.Dispose()
            End If
        End If
        GC.Collect()

        ' tcMain.SelectTab(0)
        validatefoldercontents()
    End Sub

    

    Private Sub getfanart(ByRef tmovie As movie, ByRef ais As Boolean, ByRef singlefiledownload As Boolean, Optional ByVal linksonly As Boolean = False, Optional ByVal nonewdatacheck As Boolean = False)
        'get fanart
        Dim cbackdrops As New tmdbapiv2.Backdrops 'mip.themoviedb.backdrop.backdrops
        If rbem.Checked And Not nonewdatacheck Then 'working online, get latest info
            tmdbapiv2.Results.getbackdrops(tmovie, cbackdrops, tmovie.pimdbnumber, rconf.wgetfolder, rconf.xmlfoldertmdbv2, singlefiledownload, True, True, False)
        Else 'not working online, do not overwrite, will not attempt to download
            tmdbapiv2.Results.getbackdrops(tmovie, cbackdrops, tmovie.pimdbnumber, rconf.wgetfolder, rconf.xmlfoldertmdbv2, singlefiledownload, False, True, True)
        End If

        tmovie.pbackdrops = cbackdrops
        If linksonly Then Exit Sub

        'if allow icon selection then set the picture boxes for the fanart items

        Dim tbdcount As Integer = tmovie.pbackdrops.backdrops.Count
        If tbdcount = 0 Then
            Debug.Print("no items in the pbackdrop")
        Else
            Debug.Print(tbdcount.ToString + ": is the count of backdrops")
        End If
        If messageprompts Then fanarttotal = tbdcount
        If Not tbdcount = 0 Then
            'count is not 0, process items
            Dim tbdcou As Integer = 0
            While tbdcou < tbdcount
                Debug.Print(tbdcou.ToString)
                'if the file is not local download it
                Dim currentitem As New tmdbapiv2.backdrop 'mip.themoviedb.backdrop.Item
                currentitem = cbackdrops.backdrops.Item(tbdcou)
                'only process original size
                If Not currentitem.Size = "original" Then
                    tbdcou += 1
                    Continue While
                End If
                Dim fanarturl As String = currentitem.Text
                Dim fanartpostcard As String = Strings.Left(currentitem.Text, currentitem.Text.Length - 4) + "_poster.jpg"
                Dim fanartfilename As String = Regex.Match(fanarturl, "backdrops/(.{1,8})/(.*?.).jpg", RegexOptions.IgnoreCase).Groups(2).Value
                Dim fanartfilesubfoldername As String = Regex.Match(fanarturl, "backdrops/(.{1,8})/(.*?.).jpg", RegexOptions.IgnoreCase).Groups(1).Value
                If fanartfilename = "" Then
                    'fanartfilename = Regex.Match(fanarturl, "backdrops/.{1,8}/(.*?.).png", RegexOptions.IgnoreCase).Groups(1).Value
                    'skip it
                    Debug.Print("Skipping :" + fanarturl + " -- The results from the API are not in the correct format, expecting .jpg with associated _poster")
                    tbdcou += 1
                    Continue While
                End If
                If Not Directory.Exists(rconf.tmdbfanartcachefolder + tmovie.pimdbnumber + "\" + fanartfilesubfoldername + "\") Then Directory.CreateDirectory(rconf.tmdbfanartcachefolder + tmovie.pimdbnumber + "\" + fanartfilesubfoldername + "\")

                'check for invalid file size
                checkAndRemoveSmallPictureFile(rconf.tmdbfanartcachefolder + tmovie.pimdbnumber + "\" + fanartfilesubfoldername + "\" + fanartfilename + ".jpg")
                checkAndRemoveSmallPictureFile(rconf.tmdbfanartcachefolder + tmovie.pimdbnumber + "\" + fanartfilesubfoldername + "\" + fanartfilename + "_poster.jpg")

                'if working online (not display only) then try to get the full size fanart image
                If rbem.Checked Then
                    If Not File.Exists(rconf.tmdbfanartcachefolder + tmovie.pimdbnumber + "\" + fanartfilesubfoldername + "\" + fanartfilename + ".jpg") Then
                        'download it with wget, must wait for download to finish
                        wgetfanart(fanarturl, rconf.tmdbfanartcachefolder + tmovie.pimdbnumber + "\" + fanartfilesubfoldername + "\", True, fanartfilename + ".jpg")
                        If messageprompts Then curtmdbfacount += 1
                    End If
                    'skip downloading _poster for fanart - for speed
                    'If Not File.Exists(rconf.tmdbfanartcachefolder + tmovie.pimdbnumber + "\" + fanartfilesubfoldername + "\" + fanartfilename + "_poster.jpg") Then
                    '    'download it with wget, must wait for download to finish
                    '    wgetfanart(fanartpostcard, rconf.tmdbfanartcachefolder + tmovie.pimdbnumber + "\" + fanartfilesubfoldername + "\", True, fanartfilename + "_poster.jpg")
                    'End If
                End If

                'after downloading display the local file (better gui look)
                If ais Then
                    'temp mod to fanart filename
                    fanartfilename = tmovie.pimdbnumber + "\" + fanartfilesubfoldername + "\" + fanartfilename
                    Select Case tbdcou
                        'the try block is an attempt to load the image and set the sizelbl for it, this also validates the download of the full size image
                        Case 0
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                klblfatmdb1.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                'objImage = Nothing
                                klblfatmdb1.Visible = True
                                Me.pbfatmdb1.Image = objImage 'Location = rconf.tmdbfanartcachefolder + fanartfilename + "_poster.jpg"
                                Me.pbfatmdb1.ImageLocation = rconf.tmdbfanartcachefolder + fanartfilename + ".jpg"
                                Me.pbfatmdb1.Enabled = True
                                Me.pbfatmdb1.Visible = True
                                Me.pbfatmdb1.AccessibleName = rconf.tmdbfanartcachefolder + fanartfilename + ".jpg"
                                'pbfatmdb1.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try

                        Case 1
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                klblfatmdb2.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                'objImage = Nothing
                                klblfatmdb2.Visible = True
                                Me.pbfatmdb2.Image = objImage 'Location = rconf.tmdbfanartcachefolder + fanartfilename + "_poster.jpg"
                                Me.pbfatmdb2.Enabled = True
                                Me.pbfatmdb2.Visible = True
                                Me.pbfatmdb2.AccessibleName = rconf.tmdbfanartcachefolder + fanartfilename + ".jpg"
                                'pbfatmdb2.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 2
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                klblfatmdb3.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                'objImage = Nothing
                                klblfatmdb3.Visible = True
                                Me.pbfatmdb3.Image = objImage 'Location = rconf.tmdbfanartcachefolder + fanartfilename + "_poster.jpg"
                                Me.pbfatmdb3.Enabled = True
                                Me.pbfatmdb3.Visible = True
                                Me.pbfatmdb3.AccessibleName = rconf.tmdbfanartcachefolder + fanartfilename + ".jpg"
                                'pbfatmdb3.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 3
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                klblfatmdb4.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                'objImage = Nothing
                                klblfatmdb4.Visible = True
                                Me.pbfatmdb4.Image = objImage 'Location = rconf.tmdbfanartcachefolder + fanartfilename + "_poster.jpg"
                                Me.pbfatmdb4.Enabled = True
                                Me.pbfatmdb4.Visible = True
                                Me.pbfatmdb4.AccessibleName = rconf.tmdbfanartcachefolder + fanartfilename + ".jpg"
                                'pbfatmdb4.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 4
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                klblfatmdb5.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                'objImage = Nothing
                                klblfatmdb5.Visible = True
                                Me.pbfatmdb5.Image = objImage 'Location = rconf.tmdbfanartcachefolder + fanartfilename + "_poster.jpg"
                                Me.pbfatmdb5.Enabled = True
                                Me.pbfatmdb5.Visible = True
                                Me.pbfatmdb5.AccessibleName = rconf.tmdbfanartcachefolder + fanartfilename + ".jpg"
                                'pbfatmdb5.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 5
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                klblfatmdb6.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                'objImage = Nothing
                                klblfatmdb6.Visible = True
                                Me.pbfatmdb6.Image = objImage 'Location = rconf.tmdbfanartcachefolder + fanartfilename + "_poster.jpg"
                                Me.pbfatmdb6.Enabled = True
                                Me.pbfatmdb6.Visible = True
                                Me.pbfatmdb6.AccessibleName = rconf.tmdbfanartcachefolder + fanartfilename + ".jpg"
                                'pbfatmdb6.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try

                        Case 6
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                klblfatmdb7.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                'objImage = Nothing
                                klblfatmdb7.Visible = True
                                Me.pbfatmdb7.Image = objImage 'Location = rconf.tmdbfanartcachefolder + fanartfilename + "_poster.jpg"
                                Me.pbfatmdb7.Enabled = True
                                Me.pbfatmdb7.Visible = True
                                Me.pbfatmdb7.AccessibleName = rconf.tmdbfanartcachefolder + fanartfilename + ".jpg"
                                'pbfatmdb7.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 7
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                klblfatmdb8.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                'objImage = Nothing
                                klblfatmdb8.Visible = True
                                Me.pbfatmdb8.Image = objImage 'Location = rconf.tmdbfanartcachefolder + fanartfilename + "_poster.jpg"
                                Me.pbfatmdb8.Enabled = True
                                Me.pbfatmdb8.Visible = True
                                Me.pbfatmdb8.AccessibleName = rconf.tmdbfanartcachefolder + fanartfilename + ".jpg"
                                'pbfatmdb8.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 8
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                klblfatmdb9.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                'objImage = Nothing
                                klblfatmdb9.Visible = True
                                Me.pbfatmdb9.Image = objImage 'Location = rconf.tmdbfanartcachefolder + fanartfilename + "_poster.jpg"
                                Me.pbfatmdb9.Enabled = True
                                Me.pbfatmdb9.Visible = True
                                Me.pbfatmdb9.AccessibleName = rconf.tmdbfanartcachefolder + fanartfilename + ".jpg"
                                'pbfatmdb9.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 9
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                klblfatmdb10.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                'objImage = Nothing
                                klblfatmdb10.Visible = True
                                Me.pbfatmdb10.Image = objImage 'Location = rconf.tmdbfanartcachefolder + fanartfilename + "_poster.jpg"
                                Me.pbfatmdb10.Enabled = True
                                Me.pbfatmdb10.Visible = True
                                Me.pbfatmdb10.AccessibleName = rconf.tmdbfanartcachefolder + fanartfilename + ".jpg"
                                'pbfatmdb10.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 10
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                klblfatmdb11.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                'objImage = Nothing
                                klblfatmdb11.Visible = True
                                Me.pbfatmdb11.Image = objImage 'Location = rconf.tmdbfanartcachefolder + fanartfilename + "_poster.jpg"
                                Me.pbfatmdb11.Enabled = True
                                Me.pbfatmdb11.Visible = True
                                Me.pbfatmdb11.AccessibleName = rconf.tmdbfanartcachefolder + fanartfilename + ".jpg"
                                'pbfatmdb11.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 11
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                klblfatmdb12.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                'objImage = Nothing
                                klblfatmdb12.Visible = True
                                Me.pbfatmdb12.Image = objImage 'Location = rconf.tmdbfanartcachefolder + fanartfilename + "_poster.jpg"
                                Me.pbfatmdb12.Enabled = True
                                Me.pbfatmdb12.Visible = True
                                Me.pbfatmdb12.AccessibleName = rconf.tmdbfanartcachefolder + fanartfilename + ".jpg"
                                'pbfatmdb12.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 12
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                klblfatmdb13.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                'objImage = Nothing
                                klblfatmdb13.Visible = True
                                Me.pbfatmdb13.Image = objImage 'Location = rconf.tmdbfanartcachefolder + fanartfilename + "_poster.jpg"
                                Me.pbfatmdb13.Enabled = True
                                Me.pbfatmdb13.Visible = True
                                Me.pbfatmdb13.AccessibleName = rconf.tmdbfanartcachefolder + fanartfilename + ".jpg"
                                'pbfatmdb13.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 13
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                klblfatmdb14.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                'objImage = Nothing
                                klblfatmdb14.Visible = True
                                Me.pbfatmdb14.Image = objImage 'Location = rconf.tmdbfanartcachefolder + fanartfilename + "_poster.jpg"
                                Me.pbfatmdb14.Enabled = True
                                Me.pbfatmdb14.Visible = True
                                Me.pbfatmdb14.AccessibleName = rconf.tmdbfanartcachefolder + fanartfilename + ".jpg"
                                'pbfatmdb14.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 14
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                klblfatmdb15.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                'objImage = Nothing
                                klblfatmdb15.Visible = True
                                Me.pbfatmdb15.Image = objImage 'Location = rconf.tmdbfanartcachefolder + fanartfilename + "_poster.jpg"
                                Me.pbfatmdb15.Enabled = True
                                Me.pbfatmdb15.Visible = True
                                Me.pbfatmdb15.AccessibleName = rconf.tmdbfanartcachefolder + fanartfilename + ".jpg"
                                'pbfatmdb16.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 15
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                klblfatmdb16.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                'objImage = Nothing
                                klblfatmdb16.Visible = True
                                Me.pbfatmdb16.Image = objImage 'Location = rconf.tmdbfanartcachefolder + fanartfilename + "_poster.jpg"
                                Me.pbfatmdb16.Enabled = True
                                Me.pbfatmdb16.Visible = True
                                Me.pbfatmdb16.AccessibleName = rconf.tmdbfanartcachefolder + fanartfilename + ".jpg"
                                'pbfatmdb16.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 16
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                klblfatmdb17.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                'objImage = Nothing
                                klblfatmdb17.Visible = True
                                Me.pbfatmdb17.Image = objImage 'Location = rconf.tmdbfanartcachefolder + fanartfilename + "_poster.jpg"
                                Me.pbfatmdb17.Enabled = True
                                Me.pbfatmdb17.Visible = True
                                Me.pbfatmdb17.AccessibleName = rconf.tmdbfanartcachefolder + fanartfilename + ".jpg"
                                'pbfatmdb17.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 17
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                klblfatmdb18.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                'objImage = Nothing
                                klblfatmdb18.Visible = True
                                Me.pbfatmdb18.Image = objImage 'Location = rconf.tmdbfanartcachefolder + fanartfilename + "_poster.jpg"
                                Me.pbfatmdb18.Enabled = True
                                Me.pbfatmdb18.Visible = True
                                Me.pbfatmdb18.AccessibleName = rconf.tmdbfanartcachefolder + fanartfilename + ".jpg"
                                'pbfatmdb18.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 18
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                klblfatmdb19.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                'objImage = Nothing
                                klblfatmdb19.Visible = True
                                Me.pbfatmdb19.Image = objImage 'Location = rconf.tmdbfanartcachefolder + fanartfilename + "_poster.jpg"
                                Me.pbfatmdb19.Enabled = True
                                Me.pbfatmdb19.Visible = True
                                Me.pbfatmdb19.AccessibleName = rconf.tmdbfanartcachefolder + fanartfilename + ".jpg"
                                'pbfatmdb19.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 19
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                klblfatmdb20.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                'objImage = Nothing
                                klblfatmdb20.Visible = True
                                Me.pbfatmdb20.Image = objImage 'Location = rconf.tmdbfanartcachefolder + fanartfilename + "_poster.jpg"
                                Me.pbfatmdb20.Enabled = True
                                Me.pbfatmdb20.Visible = True
                                Me.pbfatmdb20.AccessibleName = rconf.tmdbfanartcachefolder + fanartfilename + ".jpg"
                                'pbfatmdb20.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try

                        Case 20
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                klblfatmdb21.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                'objImage = Nothing
                                klblfatmdb21.Visible = True
                                Me.pbfatmdb21.Image = objImage 'Location = rconf.tmdbfanartcachefolder + fanartfilename + "_poster.jpg"
                                Me.pbfatmdb21.Enabled = True
                                Me.pbfatmdb21.Visible = True
                                Me.pbfatmdb21.AccessibleName = rconf.tmdbfanartcachefolder + fanartfilename + ".jpg"
                                'pbfatmdb21.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 21
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                klblfatmdb22.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                'objImage = Nothing
                                klblfatmdb22.Visible = True
                                Me.pbfatmdb22.Image = objImage 'Location = rconf.tmdbfanartcachefolder + fanartfilename + "_poster.jpg"
                                Me.pbfatmdb22.Enabled = True
                                Me.pbfatmdb22.Visible = True
                                Me.pbfatmdb22.AccessibleName = rconf.tmdbfanartcachefolder + fanartfilename + ".jpg"
                                'pbfatmdb22.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 22
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                klblfatmdb23.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                'objImage = Nothing
                                klblfatmdb23.Visible = True
                                Me.pbfatmdb23.Image = objImage 'Location = rconf.tmdbfanartcachefolder + fanartfilename + "_poster.jpg"
                                Me.pbfatmdb23.Enabled = True
                                Me.pbfatmdb23.Visible = True
                                Me.pbfatmdb23.AccessibleName = rconf.tmdbfanartcachefolder + fanartfilename + ".jpg"
                                'pbfatmdb23.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 23
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                klblfatmdb24.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                'objImage = Nothing
                                klblfatmdb24.Visible = True
                                Me.pbfatmdb24.Image = objImage 'Location = rconf.tmdbfanartcachefolder + fanartfilename + "_poster.jpg"
                                Me.pbfatmdb24.Enabled = True
                                Me.pbfatmdb24.Visible = True
                                Me.pbfatmdb24.AccessibleName = rconf.tmdbfanartcachefolder + fanartfilename + ".jpg"
                                'pbfatmdb24.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 24
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                klblfatmdb25.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                'objImage = Nothing
                                klblfatmdb25.Visible = True
                                Me.pbfatmdb25.Image = objImage 'Location = rconf.tmdbfanartcachefolder + fanartfilename + "_poster.jpg"
                                Me.pbfatmdb25.Enabled = True
                                Me.pbfatmdb25.Visible = True
                                Me.pbfatmdb25.AccessibleName = rconf.tmdbfanartcachefolder + fanartfilename + ".jpg"
                                'pbfatmdb26.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 25
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                klblfatmdb26.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                'objImage = Nothing
                                klblfatmdb26.Visible = True
                                Me.pbfatmdb26.Image = objImage 'Location = rconf.tmdbfanartcachefolder + fanartfilename + "_poster.jpg"
                                Me.pbfatmdb26.Enabled = True
                                Me.pbfatmdb26.Visible = True
                                Me.pbfatmdb26.AccessibleName = rconf.tmdbfanartcachefolder + fanartfilename + ".jpg"
                                'pbfatmdb26.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 26
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                klblfatmdb27.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                'objImage = Nothing
                                klblfatmdb27.Visible = True
                                Me.pbfatmdb27.Image = objImage 'Location = rconf.tmdbfanartcachefolder + fanartfilename + "_poster.jpg"
                                Me.pbfatmdb27.Enabled = True
                                Me.pbfatmdb27.Visible = True
                                Me.pbfatmdb27.AccessibleName = rconf.tmdbfanartcachefolder + fanartfilename + ".jpg"
                                'pbfatmdb27.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 27
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                klblfatmdb28.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                'objImage = Nothing
                                klblfatmdb28.Visible = True
                                Me.pbfatmdb28.Image = objImage 'Location = rconf.tmdbfanartcachefolder + fanartfilename + "_poster.jpg"
                                Me.pbfatmdb28.Enabled = True
                                Me.pbfatmdb28.Visible = True
                                Me.pbfatmdb28.AccessibleName = rconf.tmdbfanartcachefolder + fanartfilename + ".jpg"
                                'pbfatmdb28.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 28
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                klblfatmdb29.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                'objImage = Nothing
                                klblfatmdb29.Visible = True
                                Me.pbfatmdb29.Image = objImage 'Location = rconf.tmdbfanartcachefolder + fanartfilename + "_poster.jpg"
                                Me.pbfatmdb29.Enabled = True
                                Me.pbfatmdb29.Visible = True
                                Me.pbfatmdb29.AccessibleName = rconf.tmdbfanartcachefolder + fanartfilename + ".jpg"
                                'pbfatmdb29.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 29
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                klblfatmdb30.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                'objImage = Nothing
                                klblfatmdb30.Visible = True
                                Me.pbfatmdb30.Image = objImage 'Location = rconf.tmdbfanartcachefolder + fanartfilename + "_poster.jpg"
                                Me.pbfatmdb30.Enabled = True
                                Me.pbfatmdb30.Visible = True
                                Me.pbfatmdb30.AccessibleName = rconf.tmdbfanartcachefolder + fanartfilename + ".jpg"
                                'pbfatmdb20.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 30
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                klblfatmdb31.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                'objImage = Nothing
                                klblfatmdb31.Visible = True
                                Me.pbfatmdb31.Image = objImage 'Location = rconf.tmdbfanartcachefolder + fanartfilename + "_poster.jpg"
                                Me.pbfatmdb31.Enabled = True
                                Me.pbfatmdb31.Visible = True
                                Me.pbfatmdb31.AccessibleName = rconf.tmdbfanartcachefolder + fanartfilename + ".jpg"
                                'pbfatmdb31.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 31
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                klblfatmdb32.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                'objImage = Nothing
                                klblfatmdb32.Visible = True
                                Me.pbfatmdb32.Image = objImage 'Location = rconf.tmdbfanartcachefolder + fanartfilename + "_poster.jpg"
                                Me.pbfatmdb32.Enabled = True
                                Me.pbfatmdb32.Visible = True
                                Me.pbfatmdb32.AccessibleName = rconf.tmdbfanartcachefolder + fanartfilename + ".jpg"
                                'pbfatmdb32.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 32
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                klblfatmdb33.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                'objImage = Nothing
                                klblfatmdb33.Visible = True
                                Me.pbfatmdb33.Image = objImage 'Location = rconf.tmdbfanartcachefolder + fanartfilename + "_poster.jpg"
                                Me.pbfatmdb33.Enabled = True
                                Me.pbfatmdb33.Visible = True
                                Me.pbfatmdb33.AccessibleName = rconf.tmdbfanartcachefolder + fanartfilename + ".jpg"
                                'pbfatmdb33.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 33
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                klblfatmdb34.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                'objImage = Nothing
                                klblfatmdb34.Visible = True
                                Me.pbfatmdb34.Image = objImage 'Location = rconf.tmdbfanartcachefolder + fanartfilename + "_poster.jpg"
                                Me.pbfatmdb34.Enabled = True
                                Me.pbfatmdb34.Visible = True
                                Me.pbfatmdb34.AccessibleName = rconf.tmdbfanartcachefolder + fanartfilename + ".jpg"
                                'pbfatmdb34.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 34
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                klblfatmdb35.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                'objImage = Nothing
                                klblfatmdb35.Visible = True
                                Me.pbfatmdb35.Image = objImage 'Location = rconf.tmdbfanartcachefolder + fanartfilename + "_poster.jpg"
                                Me.pbfatmdb35.Enabled = True
                                Me.pbfatmdb35.Visible = True
                                Me.pbfatmdb35.AccessibleName = rconf.tmdbfanartcachefolder + fanartfilename + ".jpg"
                                'pbfatmdb36.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 35
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                klblfatmdb36.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg")
                                'objImage = Nothing
                                klblfatmdb36.Visible = True
                                Me.pbfatmdb36.Image = objImage 'Location = rconf.tmdbfanartcachefolder + fanartfilename + "_poster.jpg"
                                Me.pbfatmdb36.Enabled = True
                                Me.pbfatmdb36.Visible = True
                                Me.pbfatmdb36.AccessibleName = rconf.tmdbfanartcachefolder + fanartfilename + ".jpg"
                                'pbfatmdb36.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try


                        Case Else
                            Debug.Print("fanart image display greater then 24, nowhere to put the darn thing")
                    End Select
                End If
                tbdcou += 1
                'break out of loop if running autopilot after the 1st item (counter = 1)
                If autopilotrunning And tbdcou = 1 Then Exit Sub
                'break out of loop if there's more then 24 fanarts, there's no gui option for those
                If tbdcou = 25 Then Exit Sub

            End While
        End If
        'End If
        Debug.Print("end of fanart function")
    End Sub

    Private Sub displaymusicfanart(ByRef fanartarraylistBDitems As ArrayList, ByRef ais As Boolean)
        If fanartarraylistBDitems Is Nothing Then Exit Sub
        If fanartarraylistBDitems.Count = 0 Then Exit Sub
        Dim fanartarraylist As New ArrayList
        Dim fanartSname As New ArrayList

        For Each curdbitem As bditem In fanartarraylistBDitems
            Dim newdlo As New miplibfc.mip.dlobject
            newdlo.URL = curdbitem.url
            newdlo.misc = "HT Backdrops Item: " & currentartist.artistname
            newdlo.Destination = curdbitem.destinationfolder
            fanartarraylist.Add(curdbitem.destinationfolder)
            fanartSname.Add(curdbitem.sname)
        Next


        Dim total As Integer = fanartarraylist.Count 'tmovie.pbackdrops.backdrops.Count
        If total = Nothing Then Exit Sub

        If total = 0 Then
            Debug.Print("no items in the pbackdrop")
        Else
            Debug.Print(total.ToString + ": is the count of backdrops")
        End If
        If messageprompts Then fanarttotal = total

        If Not total = 0 Then
            Dim fanartfilename As String
            Dim tbdcou As Integer = 0
            While tbdcou < total
                'get fanart item from arraylist at tdbcou 
                'set the name
                fanartfilename = fanartarraylist(tbdcou).ToString
                'display the local file
                If ais Then
                    Select Case tbdcou
                        Case 0
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(fanartfilename)
                                klblfatmdb1.Text = fanartSname(tbdcou).ToString & ": " & objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(fanartfilename)
                                'objImage = Nothing
                                klblfatmdb1.Visible = True
                                Me.pbfatmdb1.Image = objImage
                                Me.pbfatmdb1.ImageLocation = fanartfilename
                                Me.pbfatmdb1.Enabled = True
                                Me.pbfatmdb1.Visible = True
                                Me.pbfatmdb1.AccessibleName = fanartfilename
                                'pbfatmdb1.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try

                        Case 1
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(fanartfilename)
                                klblfatmdb2.Text = fanartSname(tbdcou).ToString & ": " & objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(fanartfilename)
                                'objImage = Nothing
                                klblfatmdb2.Visible = True
                                Me.pbfatmdb2.Image = objImage
                                Me.pbfatmdb2.Enabled = True
                                Me.pbfatmdb2.Visible = True
                                Me.pbfatmdb2.AccessibleName = fanartfilename
                                'pbfatmdb2.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 2
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(fanartfilename)
                                klblfatmdb3.Text = fanartSname(tbdcou).ToString & ": " & objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(fanartfilename)
                                'objImage = Nothing
                                klblfatmdb3.Visible = True
                                Me.pbfatmdb3.Image = objImage
                                Me.pbfatmdb3.Enabled = True
                                Me.pbfatmdb3.Visible = True
                                Me.pbfatmdb3.AccessibleName = fanartfilename
                                'pbfatmdb3.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 3
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(fanartfilename)
                                klblfatmdb4.Text = fanartSname(tbdcou).ToString & ": " & objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(fanartfilename)
                                'objImage = Nothing
                                klblfatmdb4.Visible = True
                                Me.pbfatmdb4.Image = objImage
                                Me.pbfatmdb4.Enabled = True
                                Me.pbfatmdb4.Visible = True
                                Me.pbfatmdb4.AccessibleName = fanartfilename
                                'pbfatmdb4.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 4
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(fanartfilename)
                                klblfatmdb5.Text = fanartSname(tbdcou).ToString & ": " & objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(fanartfilename)
                                'objImage = Nothing
                                klblfatmdb5.Visible = True
                                Me.pbfatmdb5.Image = objImage
                                Me.pbfatmdb5.Enabled = True
                                Me.pbfatmdb5.Visible = True
                                Me.pbfatmdb5.AccessibleName = fanartfilename
                                'pbfatmdb5.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 5
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(fanartfilename)
                                klblfatmdb6.Text = fanartSname(tbdcou).ToString & ": " & objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(fanartfilename)
                                'objImage = Nothing
                                klblfatmdb6.Visible = True
                                Me.pbfatmdb6.Image = objImage
                                Me.pbfatmdb6.Enabled = True
                                Me.pbfatmdb6.Visible = True
                                Me.pbfatmdb6.AccessibleName = fanartfilename
                                'pbfatmdb6.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try

                        Case 6
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(fanartfilename)
                                klblfatmdb7.Text = fanartSname(tbdcou).ToString & ": " & objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(fanartfilename)
                                'objImage = Nothing
                                klblfatmdb7.Visible = True
                                Me.pbfatmdb7.Image = objImage
                                Me.pbfatmdb7.Enabled = True
                                Me.pbfatmdb7.Visible = True
                                Me.pbfatmdb7.AccessibleName = fanartfilename
                                'pbfatmdb7.Load() 
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 7
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(fanartfilename)
                                klblfatmdb8.Text = fanartSname(tbdcou).ToString & ": " & objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(fanartfilename)
                                'objImage = Nothing
                                klblfatmdb8.Visible = True
                                Me.pbfatmdb8.Image = objImage
                                Me.pbfatmdb8.Enabled = True
                                Me.pbfatmdb8.Visible = True
                                Me.pbfatmdb8.AccessibleName = fanartfilename
                                'pbfatmdb8.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 8
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(fanartfilename)
                                klblfatmdb9.Text = fanartSname(tbdcou).ToString & ": " & objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(fanartfilename)
                                'objImage = Nothing
                                klblfatmdb9.Visible = True
                                Me.pbfatmdb9.Image = objImage
                                Me.pbfatmdb9.Enabled = True
                                Me.pbfatmdb9.Visible = True
                                Me.pbfatmdb9.AccessibleName = fanartfilename
                                'pbfatmdb9.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 9
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(fanartfilename)
                                klblfatmdb10.Text = fanartSname(tbdcou).ToString & ": " & objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(fanartfilename)
                                'objImage = Nothing
                                klblfatmdb10.Visible = True
                                Me.pbfatmdb10.Image = objImage
                                Me.pbfatmdb10.Enabled = True
                                Me.pbfatmdb10.Visible = True
                                Me.pbfatmdb10.AccessibleName = fanartfilename
                                'pbfatmdb10.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 10
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(fanartfilename)
                                klblfatmdb11.Text = fanartSname(tbdcou).ToString & ": " & objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(fanartfilename)
                                'objImage = Nothing
                                klblfatmdb11.Visible = True
                                Me.pbfatmdb11.Image = objImage
                                Me.pbfatmdb11.Enabled = True
                                Me.pbfatmdb11.Visible = True
                                Me.pbfatmdb11.AccessibleName = fanartfilename
                                'pbfatmdb11.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 11
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(fanartfilename)
                                klblfatmdb12.Text = fanartSname(tbdcou).ToString & ": " & objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(fanartfilename)
                                'objImage = Nothing
                                klblfatmdb12.Visible = True
                                Me.pbfatmdb12.Image = objImage
                                Me.pbfatmdb12.Enabled = True
                                Me.pbfatmdb12.Visible = True
                                Me.pbfatmdb12.AccessibleName = fanartfilename
                                'pbfatmdb12.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 12
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(fanartfilename)
                                klblfatmdb13.Text = fanartSname(tbdcou).ToString & ": " & objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(fanartfilename)
                                'objImage = Nothing
                                klblfatmdb13.Visible = True
                                Me.pbfatmdb13.Image = objImage
                                Me.pbfatmdb13.Enabled = True
                                Me.pbfatmdb13.Visible = True
                                Me.pbfatmdb13.AccessibleName = fanartfilename
                                'pbfatmdb13.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 13
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(fanartfilename)
                                klblfatmdb14.Text = fanartSname(tbdcou).ToString & ": " & objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(fanartfilename)
                                'objImage = Nothing
                                klblfatmdb14.Visible = True
                                Me.pbfatmdb14.Image = objImage
                                Me.pbfatmdb14.Enabled = True
                                Me.pbfatmdb14.Visible = True
                                Me.pbfatmdb14.AccessibleName = fanartfilename
                                'pbfatmdb14.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 14
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(fanartfilename)
                                klblfatmdb15.Text = fanartSname(tbdcou).ToString & ": " & objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(fanartfilename)
                                'objImage = Nothing
                                klblfatmdb15.Visible = True
                                Me.pbfatmdb15.Image = objImage
                                Me.pbfatmdb15.Enabled = True
                                Me.pbfatmdb15.Visible = True
                                Me.pbfatmdb15.AccessibleName = fanartfilename
                                'pbfatmdb16.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 15
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(fanartfilename)
                                klblfatmdb16.Text = fanartSname(tbdcou).ToString & ": " & objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(fanartfilename)
                                'objImage = Nothing
                                klblfatmdb16.Visible = True
                                Me.pbfatmdb16.Image = objImage
                                Me.pbfatmdb16.Enabled = True
                                Me.pbfatmdb16.Visible = True
                                Me.pbfatmdb16.AccessibleName = fanartfilename
                                'pbfatmdb16.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 16
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(fanartfilename)
                                klblfatmdb17.Text = fanartSname(tbdcou).ToString & ": " & objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(fanartfilename)
                                'objImage = Nothing
                                klblfatmdb17.Visible = True
                                Me.pbfatmdb17.Image = objImage
                                Me.pbfatmdb17.Enabled = True
                                Me.pbfatmdb17.Visible = True
                                Me.pbfatmdb17.AccessibleName = fanartfilename
                                'pbfatmdb17.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 17
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(fanartfilename)
                                klblfatmdb18.Text = fanartSname(tbdcou).ToString & ": " & objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(fanartfilename)
                                'objImage = Nothing
                                klblfatmdb18.Visible = True
                                Me.pbfatmdb18.Image = objImage
                                Me.pbfatmdb18.Enabled = True
                                Me.pbfatmdb18.Visible = True
                                Me.pbfatmdb18.AccessibleName = fanartfilename
                                'pbfatmdb18.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 18
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(fanartfilename)
                                klblfatmdb19.Text = fanartSname(tbdcou).ToString & ": " & objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(fanartfilename)
                                'objImage = Nothing
                                klblfatmdb19.Visible = True
                                Me.pbfatmdb19.Image = objImage
                                Me.pbfatmdb19.Enabled = True
                                Me.pbfatmdb19.Visible = True
                                Me.pbfatmdb19.AccessibleName = fanartfilename
                                'pbfatmdb19.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 19
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(fanartfilename)
                                klblfatmdb20.Text = fanartSname(tbdcou).ToString & ": " & objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(fanartfilename)
                                'objImage = Nothing
                                klblfatmdb20.Visible = True
                                Me.pbfatmdb20.Image = objImage
                                Me.pbfatmdb20.Enabled = True
                                Me.pbfatmdb20.Visible = True
                                Me.pbfatmdb20.AccessibleName = fanartfilename
                                'pbfatmdb20.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try

                        Case 20
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(fanartfilename)
                                klblfatmdb21.Text = fanartSname(tbdcou).ToString & ": " & objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(fanartfilename)
                                'objImage = Nothing
                                klblfatmdb21.Visible = True
                                Me.pbfatmdb21.Image = objImage
                                Me.pbfatmdb21.Enabled = True
                                Me.pbfatmdb21.Visible = True
                                Me.pbfatmdb21.AccessibleName = fanartfilename
                                'pbfatmdb21.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 21
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(fanartfilename)
                                klblfatmdb22.Text = fanartSname(tbdcou).ToString & ": " & objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(fanartfilename)
                                'objImage = Nothing
                                klblfatmdb22.Visible = True
                                Me.pbfatmdb22.Image = objImage
                                Me.pbfatmdb22.Enabled = True
                                Me.pbfatmdb22.Visible = True
                                Me.pbfatmdb22.AccessibleName = fanartfilename
                                'pbfatmdb22.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 22
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(fanartfilename)
                                klblfatmdb23.Text = fanartSname(tbdcou).ToString & ": " & objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(fanartfilename)
                                'objImage = Nothing
                                klblfatmdb23.Visible = True
                                Me.pbfatmdb23.Image = objImage
                                Me.pbfatmdb23.Enabled = True
                                Me.pbfatmdb23.Visible = True
                                Me.pbfatmdb23.AccessibleName = fanartfilename
                                'pbfatmdb23.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 23
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(fanartfilename)
                                klblfatmdb24.Text = fanartSname(tbdcou).ToString & ": " & objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(fanartfilename)
                                'objImage = Nothing
                                klblfatmdb24.Visible = True
                                Me.pbfatmdb24.Image = objImage
                                Me.pbfatmdb24.Enabled = True
                                Me.pbfatmdb24.Visible = True
                                Me.pbfatmdb24.AccessibleName = fanartfilename
                                'pbfatmdb24.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 24
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(fanartfilename)
                                klblfatmdb25.Text = fanartSname(tbdcou).ToString & ": " & objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(fanartfilename)
                                'objImage = Nothing
                                klblfatmdb25.Visible = True
                                Me.pbfatmdb25.Image = objImage
                                Me.pbfatmdb25.Enabled = True
                                Me.pbfatmdb25.Visible = True
                                Me.pbfatmdb25.AccessibleName = fanartfilename
                                'pbfatmdb26.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 25
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(fanartfilename)
                                klblfatmdb26.Text = fanartSname(tbdcou).ToString & ": " & objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(fanartfilename)
                                'objImage = Nothing
                                klblfatmdb26.Visible = True
                                Me.pbfatmdb26.Image = objImage
                                Me.pbfatmdb26.Enabled = True
                                Me.pbfatmdb26.Visible = True
                                Me.pbfatmdb26.AccessibleName = fanartfilename
                                'pbfatmdb26.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 26
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(fanartfilename)
                                klblfatmdb27.Text = fanartSname(tbdcou).ToString & ": " & objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(fanartfilename)
                                'objImage = Nothing
                                klblfatmdb27.Visible = True
                                Me.pbfatmdb27.Image = objImage
                                Me.pbfatmdb27.Enabled = True
                                Me.pbfatmdb27.Visible = True
                                Me.pbfatmdb27.AccessibleName = fanartfilename
                                'pbfatmdb27.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 27
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(fanartfilename)
                                klblfatmdb28.Text = fanartSname(tbdcou).ToString & ": " & objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(fanartfilename)
                                'objImage = Nothing
                                klblfatmdb28.Visible = True
                                Me.pbfatmdb28.Image = objImage
                                Me.pbfatmdb28.Enabled = True
                                Me.pbfatmdb28.Visible = True
                                Me.pbfatmdb28.AccessibleName = fanartfilename
                                'pbfatmdb28.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 28
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(fanartfilename)
                                klblfatmdb29.Text = fanartSname(tbdcou).ToString & ": " & objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(fanartfilename)
                                'objImage = Nothing
                                klblfatmdb29.Visible = True
                                Me.pbfatmdb29.Image = objImage
                                Me.pbfatmdb29.Enabled = True
                                Me.pbfatmdb29.Visible = True
                                Me.pbfatmdb29.AccessibleName = fanartfilename
                                'pbfatmdb29.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 29
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(fanartfilename)
                                klblfatmdb30.Text = fanartSname(tbdcou).ToString & ": " & objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(fanartfilename)
                                'objImage = Nothing
                                klblfatmdb30.Visible = True
                                Me.pbfatmdb30.Image = objImage
                                Me.pbfatmdb30.Enabled = True
                                Me.pbfatmdb30.Visible = True
                                Me.pbfatmdb30.AccessibleName = fanartfilename
                                'pbfatmdb20.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 30
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(fanartfilename)
                                klblfatmdb31.Text = fanartSname(tbdcou).ToString & ": " & objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(fanartfilename)
                                'objImage = Nothing
                                klblfatmdb31.Visible = True
                                Me.pbfatmdb31.Image = objImage
                                Me.pbfatmdb31.Enabled = True
                                Me.pbfatmdb31.Visible = True
                                Me.pbfatmdb31.AccessibleName = fanartfilename
                                'pbfatmdb31.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 31
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(fanartfilename)
                                klblfatmdb32.Text = fanartSname(tbdcou).ToString & ": " & objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(fanartfilename)
                                'objImage = Nothing
                                klblfatmdb32.Visible = True
                                Me.pbfatmdb32.Image = objImage
                                Me.pbfatmdb32.Enabled = True
                                Me.pbfatmdb32.Visible = True
                                Me.pbfatmdb32.AccessibleName = fanartfilename
                                'pbfatmdb32.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 32
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(fanartfilename)
                                klblfatmdb33.Text = fanartSname(tbdcou).ToString & ": " & objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(fanartfilename)
                                'objImage = Nothing
                                klblfatmdb33.Visible = True
                                Me.pbfatmdb33.Image = objImage
                                Me.pbfatmdb33.Enabled = True
                                Me.pbfatmdb33.Visible = True
                                Me.pbfatmdb33.AccessibleName = fanartfilename
                                'pbfatmdb33.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 33
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(fanartfilename)
                                klblfatmdb34.Text = fanartSname(tbdcou).ToString & ": " & objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(fanartfilename)
                                'objImage = Nothing
                                klblfatmdb34.Visible = True
                                Me.pbfatmdb34.Image = objImage
                                Me.pbfatmdb34.Enabled = True
                                Me.pbfatmdb34.Visible = True
                                Me.pbfatmdb34.AccessibleName = fanartfilename
                                'pbfatmdb34.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 34
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(fanartfilename)
                                klblfatmdb35.Text = fanartSname(tbdcou).ToString & ": " & objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(fanartfilename)
                                'objImage = Nothing
                                klblfatmdb35.Visible = True
                                Me.pbfatmdb35.Image = objImage
                                Me.pbfatmdb35.Enabled = True
                                Me.pbfatmdb35.Visible = True
                                Me.pbfatmdb35.AccessibleName = fanartfilename
                                'pbfatmdb36.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                        Case 35
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(fanartfilename)
                                klblfatmdb36.Text = fanartSname(tbdcou).ToString & ": " & objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(fanartfilename)
                                'objImage = Nothing
                                klblfatmdb36.Visible = True
                                Me.pbfatmdb36.Image = objImage
                                Me.pbfatmdb36.Enabled = True
                                Me.pbfatmdb36.Visible = True
                                Me.pbfatmdb36.AccessibleName = fanartfilename
                                'pbfatmdb36.Load()
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try


                        Case Else
                            Debug.Print("fanart image display greater then 24, nowhere to put the darn thing")
                    End Select
                End If
                tbdcou += 1
                'break out of loop if running autopilot after the 1st item (counter = 1)
                If autopilotrunning And tbdcou = 1 Then Exit Sub
                'break out of loop if there's more then 24 fanarts, there's no gui option for those
                If tbdcou = 25 Then Exit Sub

            End While
        End If
        'End If
        Debug.Print("end of fanart function")
    End Sub


    Private Sub precachefanart(ByRef tmovie As movie)
        'get fanart
        Dim cbackdrops As New tmdbapiv2.Backdrops 'mip.themoviedb.backdrop.backdrops
        If rbem.Checked Then 'working online, get latest info
            tmdbapiv2.Results.getbackdrops(tmovie, cbackdrops, tmovie.pimdbnumber, rconf.wgetfolder, rconf.xmlfoldertmdbv2, False, True, True, False)
        Else 'not working online, do not overwrite, will not attempt to download
            tmdbapiv2.Results.getbackdrops(tmovie, cbackdrops, tmovie.pimdbnumber, rconf.wgetfolder, rconf.xmlfoldertmdbv2, False, False, True, True)
        End If

        tmovie.pbackdrops = cbackdrops

        Dim tbdcount As Integer = tmovie.pbackdrops.backdrops.Count
        If Not tbdcount = 0 Then
            'count is not 0, process items
            Dim tbdcou As Integer = 0
            While tbdcou < tbdcount
                Dim currentitem As New tmdbapiv2.backdrop 'mip.themoviedb.backdrop.Item
                currentitem = cbackdrops.backdrops.Item(tbdcou)
                'only process original size
                If Not currentitem.Size = "original" Then
                    tbdcou += 1
                    Continue While
                End If
                Dim fanarturl As String = currentitem.Text
                Dim fanartpostcard As String = Strings.Left(currentitem.Text, currentitem.Text.Length - 4) + "_poster.jpg"
                Dim fanartfilename As String = Regex.Match(fanarturl, "backdrops/(.{1,8})/(.*?.).jpg", RegexOptions.IgnoreCase).Groups(2).Value
                Dim fanartfilesubfoldername As String = Regex.Match(fanarturl, "backdrops/(.{1,8})/(.*?.).jpg", RegexOptions.IgnoreCase).Groups(1).Value
                If fanartfilename = "" Then
                    'fanartfilename = Regex.Match(fanarturl, "backdrops/.{1,8}/(.*?.).png", RegexOptions.IgnoreCase).Groups(1).Value
                    'skip it
                    Debug.Print("Skipping :" + fanarturl + " -- The results from the API are not in the correct format, expecting .jpg with associated _poster")
                    tbdcou += 1
                    Continue While
                End If
                If Not Directory.Exists(rconf.tmdbfanartcachefolder + tmovie.pimdbnumber + "\" + fanartfilesubfoldername + "\") Then Directory.CreateDirectory(rconf.tmdbfanartcachefolder + tmovie.pimdbnumber + "\" + fanartfilesubfoldername + "\")

                'check for invalid file size
                checkAndRemoveSmallPictureFile(rconf.tmdbfanartcachefolder + tmovie.pimdbnumber + "\" + fanartfilesubfoldername + "\" + fanartfilename + ".jpg")
                checkAndRemoveSmallPictureFile(rconf.tmdbfanartcachefolder + tmovie.pimdbnumber + "\" + fanartfilesubfoldername + "\" + fanartfilename + "_poster.jpg")

                'if working online (not display only) then try to get the full size fanart image
                If rbem.Checked Then
                    If Not File.Exists(rconf.tmdbfanartcachefolder + tmovie.pimdbnumber + "\" + fanartfilesubfoldername + "\" + fanartfilename + ".jpg") Then
                        'download it with wget, must wait for download to finish
                        wgetfanart(fanarturl, rconf.tmdbfanartcachefolder + tmovie.pimdbnumber + "\" + fanartfilesubfoldername + "\", True, fanartfilename + ".jpg")
                    End If
                    'skip downloading _poster for fanart - for speed
                    'If Not File.Exists(rconf.tmdbfanartcachefolder + tmovie.pimdbnumber + "\" + fanartfilesubfoldername + "\" + fanartfilename + "_poster.jpg") Then
                    '    'download it with wget, must wait for download to finish
                    '    wgetfanart(fanartpostcard, rconf.tmdbfanartcachefolder + tmovie.pimdbnumber + "\" + fanartfilesubfoldername + "\", True, fanartfilename + "_poster.jpg")
                    'End If
                End If
                tbdcou += 1
                'break out of loop if there's more then 24 fanarts, there's no gui option for those
                If tbdcou = 25 Then Exit Sub
            End While
        End If
        'End If
        Debug.Print("end of fanart function")
    End Sub
    Protected Sub checkAndRemoveSmallPictureFile(ByVal vFile As String)
        If File.Exists(vFile) Then
            Dim curfile As FileInfo = My.Computer.FileSystem.GetFileInfo(vFile)
            Dim fileSize As Double = curfile.Length
            If fileSize < 5000 Then
                Try
                    File.SetAttributes(vFile, FileAttributes.Normal)
                Catch ex As Exception
                    Debug.Print(ex.ToString)
                End Try
                Try
                    File.Delete(vFile)
                Catch ex2 As Exception
                    Debug.Print(ex2.ToString)
                End Try
            End If
        End If
    End Sub
    Protected Function getFileSizeExact(ByVal vFile As String) As Double
        'Dim curFile As FileInfo
        Dim curfile As FileInfo = My.Computer.FileSystem.GetFileInfo(vFile)
        Dim fileSize As Double = curfile.Length
        Return fileSize
    End Function
    Protected Function getFileSize(ByVal vFile As String) As String
        'Dim curFile As FileInfo
        Dim curfile As FileInfo = My.Computer.FileSystem.GetFileInfo(vFile)
        Dim fileSize As Double = curfile.Length
        If fileSize < 1024 Then
            Return String.Format("{0:N0} B", fileSize)
        ElseIf (fileSize < 1024 * 1024) Then
            Return String.Format("{0:N2} KB", fileSize / 1024)
        Else
            Return String.Format("{0:N2} MB", fileSize / (1024 * 1024))
        End If
        Return fileSize.ToString
    End Function
    Private Sub prepcaldnpostersfordisplay(ByRef tmovie As movie, ByRef ais As Boolean, ByRef singledownload As Boolean, Optional ByRef bwcount As Integer = 0, Optional ByVal nonewdatacheck As Boolean = False)
        'get posters
        If singleMovieBeingDisplayed Then
            bwcount += 1
            bwDisplayMovieData.ReportProgress(bwcount, "Cal dot net Poster Check Starting")
        End If

        If currentmovie.pimdbnumber Is Nothing Then Exit Sub
        If currentmovie.pimdbnumber = "" Then Exit Sub
        Dim filename As String = currentmovie.pimdbnumber + ".jpg"
        Dim fullpath As String = addfiletofolder(rconf.calgorydotnetfolder, filename)
        Dim baseurl As String = "http://www.calagregory.net/dvdcovers/frontcovers/"
        Dim posterurl As String = baseurl + filename

        If Not File.Exists(fullpath) Then Exit Sub
        'check file size, 0k = fail

        'we already tried once, since this is a small site, we are not going to try to download it again

        'if allow icon selection then set the picture boxes for the tmdb poster items
        If ais Then 'it exists and we are allowing icon selection, add to tmdb poster items (this will be main posters, not need for another)
            currentmovie.ptmdbposters.Add(fullpath)
        End If

    End Sub

    Private Sub preptmdbpostersfordisplay(ByRef tmovie As movie, ByRef ais As Boolean, ByRef singledownload As Boolean, Optional ByRef bwcount As Integer = 0, Optional ByVal nonewdatacheck As Boolean = False)
        'get posters
        If singleMovieBeingDisplayed Then
            bwcount += 1
            bwDisplayMovieData.ReportProgress(bwcount, "TMDB Poster Check Starting")
        End If

        Dim cposters As New tmdbapiv2.Posters 'mip.themoviedb.backdrop.backdrops
        If rbem.Checked And Not nonewdatacheck Then 'working online, get latest info
            tmdbapiv2.Results.getposters(tmovie, cposters, tmovie.pimdbnumber, rconf.wgetfolder, rconf.xmlfoldertmdbv2, singledownload, True, True)
        Else 'not working online, do not overwrite, will still attempt to download if missing
            tmdbapiv2.Results.getposters(tmovie, cposters, tmovie.pimdbnumber, rconf.wgetfolder, rconf.xmlfoldertmdbv2, singledownload, False, True)
        End If
        'we should now have the id from getting the posters
        If tmovie.ptmdbid Is Nothing Or tmovie.ptmdbid = "" Then tmovie.ptmdbid = cposters.tmdbid
        'set tmdbid

        Dim tbdcount As Integer = cposters.posters.Count 'tmovie.pbackdrops.backdrops.Count
        'If messageprompts Then postertotal += tbdcount
        If pclogging Then pclog.WriteLine(tbdcount.ToString + ": is the count of Posters from TMDB")
        If singleMovieBeingDisplayed Then
            bwcount += 1
            bwDisplayMovieData.ReportProgress(bwcount, "TMDB Poster Found - " + tbdcount.ToString) ' Check Starting")
        End If
        If Not tbdcount = 0 Then
            'count is not 0, process items
            Dim tbdcou As Integer = 0
            While tbdcou < tbdcount
                'if the file is not local download it
                Dim currentitem As New tmdbapiv2.Poster 'mip.themoviedb.backdrop.Item
                currentitem = cposters.posters.Item(tbdcou)
                'only process original size
                If Not currentitem.Size = "original" Then
                    tbdcou += 1
                    Continue While
                End If
                Dim posterurl As String = currentitem.Text
                If pclogging Then pclog.WriteLine("Attempting to download" + posterurl)
                If singleMovieBeingDisplayed Then
                    bwcount += 1
                    bwDisplayMovieData.ReportProgress(bwcount, "Checking" + posterurl)
                End If
                'Dim posterpostcard As String = Strings.Left(currentitem.Text, currentitem.Text.Length - 4) + "_poster.jpg"
                Dim posterfilename As String = Regex.Match(posterurl, "posters/(.{1,8})/(.*?.).jpg", RegexOptions.IgnoreCase).Groups(2).Value
                Dim posterfilesubfoldername As String = Regex.Match(posterurl, "posters/(.{1,8})/(.*?.).jpg", RegexOptions.IgnoreCase).Groups(1).Value
                If posterfilename = "" Then
                    'fanartfilename = Regex.Match(fanarturl, "backdrops/.{1,8}/(.*?.).png", RegexOptions.IgnoreCase).Groups(1).Value
                    'skip it
                    If pclogging Then pclog.WriteLine("Skipping :" + posterurl + " -- The results from the API are not in the correct format, expecting .jpg with associated _poster")
                    tbdcou += 1
                    Continue While
                End If
                Dim posterurl_mid As String = Strings.Left(currentitem.Text, currentitem.Text.Length - 4) + "_mid.jpg"
                Dim posterurl_cover As String = Strings.Left(currentitem.Text, currentitem.Text.Length - 4) + "_cover.jpg"
                If Not Directory.Exists(rconf.tmdbpostercachefolder + tmovie.pimdbnumber + "\" + posterfilesubfoldername + "\") Then Directory.CreateDirectory(rconf.tmdbpostercachefolder + tmovie.pimdbnumber + "\" + posterfilesubfoldername + "\")
                If Not File.Exists(rconf.tmdbpostercachefolder + tmovie.pimdbnumber + "\" + posterfilesubfoldername + "\" + posterfilename + "_cover.jpg") Then 'thumbnail
                    'download it
                    If pclogging Then pclog.WriteLine("Download starting for: " + posterfilename + "_cover.jpg")

                    If singleMovieBeingDisplayed Then
                        bwcount += 1
                        bwDisplayMovieData.ReportProgress(bwcount, "Downloading: " + posterurl_cover)
                    End If
                    '
                    If rbem.Checked Then wgetpostertmdb(posterurl_cover, rconf.tmdbpostercachefolder + tmovie.pimdbnumber + "\" + posterfilesubfoldername + "\", True, posterfilename + "_cover.jpg")
                    If messageprompts Then curtmdbpostercounter += 1
                End If

                'If Not File.Exists(rconf.tmdbpostercachefolder + tmovie.pimdbnumber + "\" + tmovie.pimdbnumber + posterfilename + "_mid.jpg") Then 'normal rez
                '    'download it
                'If pclogging then pclog.WriteLine("Download starting for: " + posterfilename + "_mid.jpg")
                '    wgetpostertmdb(posterurl_mid, rconf.tmdbpostercachefolder + tmovie.pimdbnumber + "\", True, tmovie.pimdbnumber + posterfilename + "_mid.jpg")
                'End If

                If Not File.Exists(rconf.tmdbpostercachefolder + tmovie.pimdbnumber + "\" + posterfilesubfoldername + "\" + posterfilename + ".jpg") Then 'high rez
                    If pclogging Then pclog.WriteLine("Download starting for: " + posterfilename + ".jpg")
                    If singleMovieBeingDisplayed Then
                        bwcount += 1
                        bwDisplayMovieData.ReportProgress(bwcount, "Downloading: " + posterurl)
                    End If
                    'download it
                    If rbem.Checked Then wgetpostertmdb(posterurl, rconf.tmdbpostercachefolder + tmovie.pimdbnumber + "\" + posterfilesubfoldername + "\", True, posterfilename + ".jpg")
                    If pclogging Then pclog.WriteLine("Download completed for: " + posterfilename + ".jpg")
                End If

                'if allow icon selection then set the picture boxes for the tmdb poster items
                If ais Then
                    'after downloading display the local file (better gui look)
                    'modify posterfilename for mid icon
                    posterfilename = tmovie.pimdbnumber + "\" + posterfilesubfoldername + "\" + posterfilename '+ "_cover"
                    currentmovie.ptmdbposters.Add(addfiletofolder(rconf.tmdbpostercachefolder, posterfilename + ".jpg"))
                    'Select Case tbdcou
                    '    Case 0
                    '        Try
                    '            Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(addfiletofolder(rconf.tmdbpostercachefolder, posterfilename + ".jpg"))
                    '            klblposterTMDB1.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(addfiletofolder(rconf.tmdbpostercachefolder, posterfilename + ".jpg"))
                    '            'objImage = Nothing
                    '            klblposterTMDB1.Visible = True
                    '            pbposterTMDB1.Image = objImage 'Location = rconf.tmdbpostercachefolder + posterfilename + "_cover.jpg"
                    '            pbposterTMDB1.ImageLocation = addfiletofolder(rconf.tmdbpostercachefolder, posterfilename + ".jpg")
                    '            pbposterTMDB1.Enabled = True
                    '            pbposterTMDB1.Visible = True
                    '            pbposterTMDB1.AccessibleName = rconf.tmdbpostercachefolder + posterfilename + ".jpg"
                    '            kpIMPPosterSelection.Visible = True
                    '            ' MsgBox("poster TMDB1 loaded" + " .. Location: " + pbposterTMDB1.Location.ToString + " .. Visible ..: " + pbposterTMDB1.Visible.ToString + vbNewLine + kpIMPPosterSelection.Visible.ToString)
                    '            'Try
                    '            '    pbposterTMDB1.Load()
                    '            'Catch ex As Exception
                    '            '    File.Delete(rconf.tmdbpostercachefolder + posterfilename + "_cover.jpg")
                    '            'End Try
                    '        Catch exerror As Exception
                    '            Debug.Print(exerror.ToString)
                    '            'MsgBox(exerror.ToString)
                    '        End Try

                    '    Case Else
                    '        Debug.Print("Poster image that was set for display greater then the 24 allowed in the GUI, I have nowhere to put the darn thing so I'll act like it was never there!")
                    'End Select
                End If
                tbdcou += 1
                If autopilotrunning And tbdcou = 1 Then Exit Sub 'only need 1 for autopilot
                'If tbdcou = 25 Then Exit Sub 'more then gui has 
            End While
        End If

    End Sub

    'Private Sub getpostersfromcalagregorydotnet()
    '    If currentmovie.pimdbnumber Is Nothing Then Exit Sub
    '    If currentmovie.pimdbnumber = "" Then Exit Sub
    '    Dim filename As String = currentmovie.pimdbnumber + ".jpg"
    '    'see if the file is already in cache
    '    If File.Exists(addfiletofolder(rconf.calgorydotnetfolder, filename)) Then Exit Sub

    '    Dim baseurl As String = "http://www.calagregory.net/dvdcovers/frontcovers/"
    '    Dim fullpath As String = baseurl + filename
    '    asdf()
    'End Sub
    Private Sub getpostersfromtmdb(ByRef tmovie As movie, ByRef ais As Boolean, ByRef singledownload As Boolean, Optional ByRef bwcount As Integer = 0, Optional ByVal nonewdatacheck As Boolean = False)
        'get posters
        If singleMovieBeingDisplayed Then
            bwcount += 1
            bwDisplayMovieData.ReportProgress(bwcount, "TMDB Poster Check Starting")
        End If

        Dim cposters As New tmdbapiv2.Posters 'mip.themoviedb.backdrop.backdrops
        If rbem.Checked And Not nonewdatacheck Then 'working online, get latest info
            tmdbapiv2.Results.getposters(tmovie, cposters, tmovie.pimdbnumber, rconf.wgetfolder, rconf.xmlfoldertmdbv2, singledownload, True, True)
        Else 'not working online, do not overwrite, will still attempt to download if missing
            tmdbapiv2.Results.getposters(tmovie, cposters, tmovie.pimdbnumber, rconf.wgetfolder, rconf.xmlfoldertmdbv2, singledownload, False, True)
        End If

        'tmovie.posters = cbackdrops
        'If tmovie.pbackdrops.backdrops.Count = 0 Then
        '    Debug.Print("no items in the pbackdrop")
        'Else

        'End If


        Dim tbdcount As Integer = cposters.posters.Count 'tmovie.pbackdrops.backdrops.Count
        'If messageprompts Then postertotal += tbdcount
        If pclogging Then pclog.WriteLine(tbdcount.ToString + ": is the count of Posters from TMDB")
        If singleMovieBeingDisplayed Then
            bwcount += 1
            bwDisplayMovieData.ReportProgress(bwcount, "TMDB Poster Found - " + tbdcount.ToString) ' Check Starting")
        End If
        If Not tbdcount = 0 Then
            'count is not 0, process items
            Dim tbdcou As Integer = 0
            While tbdcou < tbdcount
                'if the file is not local download it
                Dim currentitem As New tmdbapiv2.Poster 'mip.themoviedb.backdrop.Item
                currentitem = cposters.posters.Item(tbdcou)
                'only process original size
                If Not currentitem.Size = "original" Then
                    tbdcou += 1
                    Continue While
                End If
                Dim posterurl As String = currentitem.Text
                If pclogging Then pclog.WriteLine("Attempting to download" + posterurl)
                If singleMovieBeingDisplayed Then
                    bwcount += 1
                    bwDisplayMovieData.ReportProgress(bwcount, "Checking" + posterurl)
                End If
                'Dim posterpostcard As String = Strings.Left(currentitem.Text, currentitem.Text.Length - 4) + "_poster.jpg"
                Dim posterfilename As String = Regex.Match(posterurl, "posters/(.{1,8})/(.*?.).jpg", RegexOptions.IgnoreCase).Groups(2).Value
                Dim posterfilesubfoldername As String = Regex.Match(posterurl, "posters/(.{1,8})/(.*?.).jpg", RegexOptions.IgnoreCase).Groups(1).Value
                If posterfilename = "" Then
                    'fanartfilename = Regex.Match(fanarturl, "backdrops/.{1,8}/(.*?.).png", RegexOptions.IgnoreCase).Groups(1).Value
                    'skip it
                    If pclogging Then pclog.WriteLine("Skipping :" + posterurl + " -- The results from the API are not in the correct format, expecting .jpg with associated _poster")
                    tbdcou += 1
                    Continue While
                End If
                Dim posterurl_mid As String = Strings.Left(currentitem.Text, currentitem.Text.Length - 4) + "_mid.jpg"
                Dim posterurl_cover As String = Strings.Left(currentitem.Text, currentitem.Text.Length - 4) + "_cover.jpg"
                If Not Directory.Exists(rconf.tmdbpostercachefolder + tmovie.pimdbnumber + "\" + posterfilesubfoldername + "\") Then Directory.CreateDirectory(rconf.tmdbpostercachefolder + tmovie.pimdbnumber + "\" + posterfilesubfoldername + "\")
                If Not File.Exists(rconf.tmdbpostercachefolder + tmovie.pimdbnumber + "\" + posterfilesubfoldername + "\" + posterfilename + "_cover.jpg") Then 'thumbnail
                    'download it
                    If pclogging Then pclog.WriteLine("Download starting for: " + posterfilename + "_cover.jpg")

                    If singleMovieBeingDisplayed Then
                        bwcount += 1
                        bwDisplayMovieData.ReportProgress(bwcount, "Downloading: " + posterurl_cover)
                    End If
                    '
                    If rbem.Checked Then wgetpostertmdb(posterurl_cover, rconf.tmdbpostercachefolder + tmovie.pimdbnumber + "\" + posterfilesubfoldername + "\", True, posterfilename + "_cover.jpg")
                    If messageprompts Then curtmdbpostercounter += 1
                End If

                If Not File.Exists(rconf.tmdbpostercachefolder + tmovie.pimdbnumber + "\" + tmovie.pimdbnumber + posterfilename + "_mid.jpg") Then 'normal rez
                    'download it
                    If pclogging Then pclog.WriteLine("Download starting for: " + posterfilename + "_mid.jpg")
                    wgetpostertmdb(posterurl_mid, rconf.tmdbpostercachefolder + tmovie.pimdbnumber + "\", True, tmovie.pimdbnumber + posterfilename + "_mid.jpg")
                End If

                If Not File.Exists(rconf.tmdbpostercachefolder + tmovie.pimdbnumber + "\" + posterfilesubfoldername + "\" + posterfilename + ".jpg") Then 'high rez
                    If pclogging Then pclog.WriteLine("Download starting for: " + posterfilename + ".jpg")
                    If singleMovieBeingDisplayed Then
                        bwcount += 1
                        bwDisplayMovieData.ReportProgress(bwcount, "Downloading: " + posterurl)
                    End If
                    'download it
                    If rbem.Checked Then wgetpostertmdb(posterurl, rconf.tmdbpostercachefolder + tmovie.pimdbnumber + "\" + posterfilesubfoldername + "\", True, posterfilename + ".jpg")
                    If pclogging Then pclog.WriteLine("Download completed for: " + posterfilename + ".jpg")
                End If

                'if allow icon selection then set the picture boxes for the tmdb poster items
                If ais Then
                    'after downloading display the local file (better gui look)
                    'modify posterfilename for mid icon
                    posterfilename = tmovie.pimdbnumber + "\" + posterfilesubfoldername + "\" + posterfilename
                    Select Case tbdcou
                        Case 0
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(addfiletofolder(rconf.tmdbpostercachefolder, posterfilename + ".jpg"))
                                klblposterTMDB1.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(addfiletofolder(rconf.tmdbpostercachefolder, posterfilename + ".jpg"))
                                'objImage = Nothing
                                klblposterTMDB1.Visible = True
                                pbposterTMDB1.Image = objImage 'Location = rconf.tmdbpostercachefolder + posterfilename + "_cover.jpg"
                                pbposterTMDB1.ImageLocation = addfiletofolder(rconf.tmdbpostercachefolder, posterfilename + ".jpg")
                                pbposterTMDB1.Enabled = True
                                pbposterTMDB1.Visible = True
                                pbposterTMDB1.AccessibleName = rconf.tmdbpostercachefolder + posterfilename + ".jpg"
                                kpIMPPosterSelection.Visible = True
                                ' MsgBox("poster TMDB1 loaded" + " .. Location: " + pbposterTMDB1.Location.ToString + " .. Visible ..: " + pbposterTMDB1.Visible.ToString + vbNewLine + kpIMPPosterSelection.Visible.ToString)
                                'Try
                                '    pbposterTMDB1.Load()
                                'Catch ex As Exception
                                '    File.Delete(rconf.tmdbpostercachefolder + posterfilename + "_cover.jpg")
                                'End Try
                            Catch exerror As Exception
                                Debug.Print(exerror.ToString)
                                'MsgBox(exerror.ToString)
                            End Try
                        Case 1
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(addfiletofolder(rconf.tmdbpostercachefolder, posterfilename + ".jpg"))
                                klblposterTMDB2.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(addfiletofolder(rconf.tmdbpostercachefolder, posterfilename + ".jpg"))
                                'objImage = Nothing
                                klblposterTMDB2.Visible = True
                                pbposterTMDB2.Image = objImage 'Location = rconf.tmdbpostercachefolder + posterfilename + "_cover.jpg"
                                pbposterTMDB2.Enabled = True
                                pbposterTMDB2.Visible = True
                                pbposterTMDB2.AccessibleName = rconf.tmdbpostercachefolder + posterfilename + ".jpg"
                                'Try
                                '    pbposterTMDB2.Load()
                                'Catch ex As Exception
                                '    File.Delete(rconf.tmdbpostercachefolder + posterfilename + "_cover.jpg")
                                'End Try
                            Catch exerror As Exception
                                Debug.Print(exerror.ToString)
                            End Try
                        Case 2
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(addfiletofolder(rconf.tmdbpostercachefolder, posterfilename + ".jpg"))
                                klblposterTMDB3.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(addfiletofolder(rconf.tmdbpostercachefolder, posterfilename + ".jpg"))
                                'objImage = Nothing
                                klblposterTMDB3.Visible = True
                                pbposterTMDB3.Image = objImage 'Location = rconf.tmdbpostercachefolder + posterfilename + "_cover.jpg"
                                pbposterTMDB3.Enabled = True
                                pbposterTMDB3.Visible = True
                                pbposterTMDB3.AccessibleName = rconf.tmdbpostercachefolder + posterfilename + ".jpg"
                                'Try
                                '    pbposterTMDB3.Load()
                                'Catch ex As Exception
                                '    File.Delete(rconf.tmdbpostercachefolder + posterfilename + "_cover.jpg")
                                'End Try
                            Catch exerror As Exception
                                Debug.Print(exerror.ToString)
                            End Try
                        Case 3
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(addfiletofolder(rconf.tmdbpostercachefolder, posterfilename + ".jpg"))
                                klblposterTMDB4.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(addfiletofolder(rconf.tmdbpostercachefolder, posterfilename + ".jpg"))
                                'objImage = Nothing
                                klblposterTMDB4.Visible = True
                                Me.pbposterTMDB4.Image = objImage 'Location = rconf.tmdbpostercachefolder + posterfilename + "_cover.jpg"
                                Me.pbposterTMDB4.Enabled = True
                                Me.pbposterTMDB4.Visible = True
                                Me.pbposterTMDB4.AccessibleName = rconf.tmdbpostercachefolder + posterfilename + ".jpg"
                                'Try
                                '    pbposterTMDB4.Load()
                                'Catch ex As Exception
                                '    File.Delete(rconf.tmdbpostercachefolder + posterfilename + "_cover.jpg")
                                'End Try
                            Catch exerror As Exception
                                Debug.Print(exerror.ToString)
                            End Try
                        Case 4
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(addfiletofolder(rconf.tmdbpostercachefolder, posterfilename + ".jpg"))
                                klblposterTMDB5.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(addfiletofolder(rconf.tmdbpostercachefolder, posterfilename + ".jpg"))
                                ' objImage = Nothing
                                klblposterTMDB5.Visible = True
                                Me.pbposterTMDB5.Image = objImage 'Location = rconf.tmdbpostercachefolder + posterfilename + "_cover.jpg"
                                Me.pbposterTMDB5.Enabled = True
                                Me.pbposterTMDB5.Visible = True
                                Me.pbposterTMDB5.AccessibleName = rconf.tmdbpostercachefolder + posterfilename + ".jpg"
                                'Try
                                '    pbposterTMDB5.Load()
                                'Catch ex As Exception
                                '    File.Delete(rconf.tmdbpostercachefolder + posterfilename + "_cover.jpg")
                                'End Try
                            Catch exerror As Exception
                                Debug.Print(exerror.ToString)
                            End Try
                        Case 5
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(addfiletofolder(rconf.tmdbpostercachefolder, posterfilename + ".jpg"))
                                klblposterTMDB6.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(addfiletofolder(rconf.tmdbpostercachefolder, posterfilename + ".jpg"))
                                'objImage = Nothing
                                klblposterTMDB6.Visible = True
                                Me.pbposterTMDB6.Image = objImage 'Location = rconf.tmdbpostercachefolder + posterfilename + "_cover.jpg"
                                Me.pbposterTMDB6.AccessibleName = rconf.tmdbpostercachefolder + posterfilename + ".jpg"
                                Me.pbposterTMDB6.Enabled = True
                                Me.pbposterTMDB6.Visible = True
                                'Try
                                '    pbposterTMDB6.Load()

                                'Catch ex As Exception
                                '    File.Delete(rconf.tmdbpostercachefolder + posterfilename + "_cover.jpg")
                                'End Try
                            Catch exerror As Exception
                                Debug.Print(exerror.ToString)
                            End Try
                        Case 6
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(addfiletofolder(rconf.tmdbpostercachefolder, posterfilename + ".jpg"))
                                klblposterTMDB7.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(addfiletofolder(rconf.tmdbpostercachefolder, posterfilename + ".jpg"))
                                'objImage = Nothing
                                klblposterTMDB7.Visible = True
                                Me.pbposterTMDB7.Image = objImage 'Location = rconf.tmdbpostercachefolder + posterfilename + "_cover.jpg"
                                Me.pbposterTMDB7.Enabled = True
                                Me.pbposterTMDB7.Visible = True
                                Me.pbposterTMDB7.AccessibleName = rconf.tmdbpostercachefolder + posterfilename + ".jpg"
                                'Try
                                '    pbposterTMDB7.Load()

                                'Catch ex As Exception
                                '    File.Delete(rconf.tmdbpostercachefolder + posterfilename + "_cover.jpg")
                                'End Try
                            Catch exerror As Exception
                                Debug.Print(exerror.ToString)
                            End Try
                        Case 7
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(addfiletofolder(rconf.tmdbpostercachefolder, posterfilename + ".jpg"))
                                klblposterTMDB8.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(addfiletofolder(rconf.tmdbpostercachefolder, posterfilename + ".jpg"))
                                ' objImage = Nothing
                                klblposterTMDB8.Visible = True
                                Me.pbposterTMDB8.Image = objImage 'Location = rconf.tmdbpostercachefolder + posterfilename + "_cover.jpg"
                                Me.pbposterTMDB8.Enabled = True
                                Me.pbposterTMDB8.Visible = True
                                Me.pbposterTMDB8.AccessibleName = rconf.tmdbpostercachefolder + posterfilename + ".jpg"
                                'Try
                                '    pbposterTMDB8.Load()
                                'Catch ex As Exception
                                '    File.Delete(rconf.tmdbpostercachefolder + posterfilename + "_cover.jpg")
                                'End Try
                            Catch exerror As Exception
                                Debug.Print(exerror.ToString)
                            End Try
                        Case 8
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(addfiletofolder(rconf.tmdbpostercachefolder, posterfilename + ".jpg"))
                                klblposterTMDB9.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(addfiletofolder(rconf.tmdbpostercachefolder, posterfilename + ".jpg"))
                                ' objImage = Nothing
                                klblposterTMDB9.Visible = True
                                Me.pbposterTMDB9.Image = objImage 'Location = rconf.tmdbpostercachefolder + posterfilename + "_cover.jpg"
                                Me.pbposterTMDB9.Enabled = True
                                Me.pbposterTMDB9.Visible = True
                                Me.pbposterTMDB9.AccessibleName = rconf.tmdbpostercachefolder + posterfilename + ".jpg"
                                'Try
                                '    pbposterTMDB9.Load()
                                'Catch ex As Exception
                                '    File.Delete(rconf.tmdbpostercachefolder + posterfilename + "_cover.jpg")
                                'End Try
                            Catch exerror As Exception
                                Debug.Print(exerror.ToString)
                            End Try
                        Case 9

                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(addfiletofolder(rconf.tmdbpostercachefolder, posterfilename + ".jpg"))
                                klblposterTMDB10.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(addfiletofolder(rconf.tmdbpostercachefolder, posterfilename + ".jpg"))
                                ' objImage = Nothing
                                klblposterTMDB10.Visible = True
                                Me.pbposterTMDB10.Image = objImage 'Location = rconf.tmdbpostercachefolder + posterfilename + "_cover.jpg"
                                Me.pbposterTMDB10.Enabled = True
                                Me.pbposterTMDB10.Visible = True
                                Me.pbposterTMDB10.AccessibleName = rconf.tmdbpostercachefolder + posterfilename + ".jpg"
                                'Try
                                '    pbposterTMDB10.Load()
                                'Catch ex As Exception
                                '    File.Delete(rconf.tmdbpostercachefolder + posterfilename + "_cover.jpg")
                                'End Try
                            Catch exerror As Exception
                                Debug.Print(exerror.ToString)
                            End Try
                        Case 10
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(addfiletofolder(rconf.tmdbpostercachefolder, posterfilename + ".jpg"))
                                klblposterTMDB11.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(addfiletofolder(rconf.tmdbpostercachefolder, posterfilename + ".jpg"))
                                'objImage = Nothing
                                klblposterTMDB11.Visible = True
                                Me.pbposterTMDB11.Image = objImage 'Location = rconf.tmdbpostercachefolder + posterfilename + "_cover.jpg"
                                Me.pbposterTMDB11.Enabled = True
                                Me.pbposterTMDB11.Visible = True
                                Me.pbposterTMDB11.AccessibleName = rconf.tmdbpostercachefolder + posterfilename + ".jpg"
                                'Try
                                '    pbposterTMDB11.Load()
                                'Catch ex As Exception
                                '    File.Delete(rconf.tmdbpostercachefolder + posterfilename + "_cover.jpg")
                                'End Try
                            Catch exerror As Exception
                                Debug.Print(exerror.ToString)
                            End Try
                        Case 11
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(addfiletofolder(rconf.tmdbpostercachefolder, posterfilename + ".jpg"))
                                klblposterTMDB12.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(addfiletofolder(rconf.tmdbpostercachefolder, posterfilename + ".jpg"))
                                'objImage = Nothing
                                klblposterTMDB12.Visible = True
                                Me.pbposterTMDB12.Image = objImage 'Location = rconf.tmdbpostercachefolder + posterfilename + "_cover.jpg"
                                Me.pbposterTMDB12.Enabled = True
                                Me.pbposterTMDB12.Visible = True
                                Me.pbposterTMDB12.AccessibleName = rconf.tmdbpostercachefolder + posterfilename + ".jpg"
                                'Try
                                '    pbposterTMDB12.Load()
                                'Catch ex As Exception
                                '    File.Delete(rconf.tmdbpostercachefolder + posterfilename + "_cover.jpg")
                                'End Try
                            Catch exerror As Exception
                                Debug.Print(exerror.ToString)
                            End Try
                        Case 12
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(addfiletofolder(rconf.tmdbpostercachefolder, posterfilename + ".jpg"))
                                klblposterTMDB13.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(addfiletofolder(rconf.tmdbpostercachefolder, posterfilename + ".jpg"))
                                ' objImage = Nothing
                                klblposterTMDB13.Visible = True
                                Me.pbposterTMDB13.Image = objImage 'Location = rconf.tmdbpostercachefolder + posterfilename + "_cover.jpg"
                                Me.pbposterTMDB13.Enabled = True
                                Me.pbposterTMDB13.Visible = True
                                Me.pbposterTMDB13.AccessibleName = rconf.tmdbpostercachefolder + posterfilename + ".jpg"
                                'Try
                                '    pbposterTMDB13.Load()
                                'Catch ex As Exception
                                '    File.Delete(rconf.tmdbpostercachefolder + posterfilename + "_cover.jpg")
                                'End Try
                            Catch exerror As Exception
                                Debug.Print(exerror.ToString)
                            End Try
                        Case 13
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(addfiletofolder(rconf.tmdbpostercachefolder, posterfilename + ".jpg"))
                                klblposterTMDB14.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(addfiletofolder(rconf.tmdbpostercachefolder, posterfilename + ".jpg"))
                                '  objImage = Nothing
                                klblposterTMDB14.Visible = True
                                Me.pbposterTMDB14.Image = objImage 'Location = rconf.tmdbpostercachefolder + posterfilename + "_cover.jpg"
                                Me.pbposterTMDB14.Enabled = True
                                Me.pbposterTMDB14.Visible = True
                                Me.pbposterTMDB14.AccessibleName = rconf.tmdbpostercachefolder + posterfilename + ".jpg"
                                'Try
                                '    pbposterTMDB14.Load()
                                'Catch ex As Exception
                                '    File.Delete(rconf.tmdbpostercachefolder + posterfilename + "_cover.jpg")
                                'End Try
                            Catch exerror As Exception
                                Debug.Print(exerror.ToString)
                            End Try
                        Case 14
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(addfiletofolder(rconf.tmdbpostercachefolder, posterfilename + ".jpg"))
                                klblposterTMDB15.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(addfiletofolder(rconf.tmdbpostercachefolder, posterfilename + ".jpg"))
                                '  objImage = Nothing
                                klblposterTMDB15.Visible = True
                                Me.pbposterTMDB15.Image = objImage 'Location = rconf.tmdbpostercachefolder + posterfilename + "_cover.jpg"
                                Me.pbposterTMDB15.Enabled = True
                                Me.pbposterTMDB15.Visible = True
                                Me.pbposterTMDB15.AccessibleName = rconf.tmdbpostercachefolder + posterfilename + ".jpg"
                                'Try
                                '    pbposterTMDB15.Load()
                                'Catch ex As Exception
                                '    File.Delete(rconf.tmdbpostercachefolder + posterfilename + "_cover.jpg")
                                'End Try
                            Catch exerror As Exception
                                Debug.Print(exerror.ToString)
                            End Try
                        Case 15
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(addfiletofolder(rconf.tmdbpostercachefolder, posterfilename + ".jpg"))
                                klblposterTMDB16.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(addfiletofolder(rconf.tmdbpostercachefolder, posterfilename + ".jpg"))
                                ' objImage = Nothing
                                klblposterTMDB16.Visible = True
                                Me.pbposterTMDB16.Image = objImage 'Location = rconf.tmdbpostercachefolder + posterfilename + "_cover.jpg"
                                Me.pbposterTMDB16.AccessibleName = rconf.tmdbpostercachefolder + posterfilename + ".jpg"
                                Me.pbposterTMDB16.Enabled = True
                                Me.pbposterTMDB16.Visible = True
                                'Try
                                '    pbposterTMDB16.Load()
                                'Catch ex As Exception
                                '    File.Delete(rconf.tmdbpostercachefolder + posterfilename + "_cover.jpg")
                                'End Try
                            Catch exerror As Exception
                                Debug.Print(exerror.ToString)
                            End Try
                        Case 16
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(addfiletofolder(rconf.tmdbpostercachefolder, posterfilename + ".jpg"))
                                klblposterTMDB17.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(addfiletofolder(rconf.tmdbpostercachefolder, posterfilename + ".jpg"))
                                '  objImage = Nothing
                                klblposterTMDB17.Visible = True
                                Me.pbposterTMDB17.Image = objImage 'Location = rconf.tmdbpostercachefolder + posterfilename + "_cover.jpg"
                                Me.pbposterTMDB17.Enabled = True
                                Me.pbposterTMDB17.Visible = True
                                Me.pbposterTMDB17.AccessibleName = rconf.tmdbpostercachefolder + posterfilename + ".jpg"
                                'Try
                                '    pbposterTMDB17.Load()
                                'Catch ex As Exception
                                '    File.Delete(rconf.tmdbpostercachefolder + posterfilename + "_cover.jpg")
                                'End Try
                            Catch exerror As Exception
                                Debug.Print(exerror.ToString)
                            End Try
                        Case 17
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(addfiletofolder(rconf.tmdbpostercachefolder, posterfilename + ".jpg"))
                                klblposterTMDB18.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(addfiletofolder(rconf.tmdbpostercachefolder, posterfilename + ".jpg"))
                                '  objImage = Nothing
                                klblposterTMDB18.Visible = True
                                Me.pbposterTMDB18.Image = objImage 'Location = rconf.tmdbpostercachefolder + posterfilename + "_cover.jpg"
                                Me.pbposterTMDB18.Enabled = True
                                Me.pbposterTMDB18.Visible = True
                                Me.pbposterTMDB18.AccessibleName = rconf.tmdbpostercachefolder + posterfilename + ".jpg"
                                'Try
                                '    pbposterTMDB18.Load()
                                'Catch ex As Exception
                                '    File.Delete(rconf.tmdbpostercachefolder + posterfilename + "_cover.jpg")
                                'End Try
                            Catch exerror As Exception
                                Debug.Print(exerror.ToString)
                            End Try
                        Case 18
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(addfiletofolder(rconf.tmdbpostercachefolder, posterfilename + ".jpg"))
                                klblposterTMDB19.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(addfiletofolder(rconf.tmdbpostercachefolder, posterfilename + ".jpg"))
                                '   objImage = Nothing
                                klblposterTMDB19.Visible = True
                                Me.pbposterTMDB19.Image = objImage 'Location = rconf.tmdbpostercachefolder + posterfilename + "_cover.jpg"
                                Me.pbposterTMDB19.Enabled = True
                                Me.pbposterTMDB19.Visible = True
                                Me.pbposterTMDB19.AccessibleName = rconf.tmdbpostercachefolder + posterfilename + ".jpg"
                                'Try
                                '    pbposterTMDB19.Load()
                                'Catch ex As Exception
                                '    File.Delete(rconf.tmdbpostercachefolder + posterfilename + "_cover.jpg")
                                'End Try
                            Catch exerror As Exception
                                Debug.Print(exerror.ToString)
                            End Try
                        Case 19
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(addfiletofolder(rconf.tmdbpostercachefolder, posterfilename + ".jpg"))
                                klblposterTMDB20.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(addfiletofolder(rconf.tmdbpostercachefolder, posterfilename + ".jpg"))
                                '  objImage = Nothing
                                klblposterTMDB20.Visible = True
                                Me.pbposterTMDB20.Image = objImage 'Location = rconf.tmdbpostercachefolder + posterfilename + "_cover.jpg"
                                Me.pbposterTMDB20.Enabled = True
                                Me.pbposterTMDB20.Visible = True
                                Me.pbposterTMDB20.AccessibleName = rconf.tmdbpostercachefolder + posterfilename + ".jpg"
                                'Try
                                '    pbposterTMDB20.Load()

                                'Catch ex As Exception
                                '    File.Delete(rconf.tmdbpostercachefolder + posterfilename + "_cover.jpg")
                                'End Try
                            Catch exerror As Exception
                                Debug.Print(exerror.ToString)
                            End Try
                        Case 20
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(addfiletofolder(rconf.tmdbpostercachefolder, posterfilename + ".jpg"))
                                klblposterTMDB21.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(addfiletofolder(rconf.tmdbpostercachefolder, posterfilename + ".jpg"))
                                '   objImage = Nothing
                                klblposterTMDB21.Visible = True
                                Me.pbposterTMDB21.Image = objImage 'Location = rconf.tmdbpostercachefolder + posterfilename + "_cover.jpg"
                                Me.pbposterTMDB21.Enabled = True
                                Me.pbposterTMDB21.Visible = True
                                Me.pbposterTMDB21.AccessibleName = rconf.tmdbpostercachefolder + posterfilename + ".jpg"
                                'Try
                                '    pbposterTMDB21.Load()
                                'Catch ex As Exception
                                '    File.Delete(rconf.tmdbpostercachefolder + posterfilename + "_cover.jpg")
                                'End Try
                            Catch exerror As Exception
                                Debug.Print(exerror.ToString)
                            End Try
                        Case 21
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(addfiletofolder(rconf.tmdbpostercachefolder, posterfilename + ".jpg"))
                                klblposterTMDB22.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(addfiletofolder(rconf.tmdbpostercachefolder, posterfilename + ".jpg"))
                                ' objImage = Nothing
                                klblposterTMDB22.Visible = True
                                Me.pbposterTMDB22.Image = objImage 'Location = rconf.tmdbpostercachefolder + posterfilename + "_cover.jpg"
                                Me.pbposterTMDB22.AccessibleName = rconf.tmdbpostercachefolder + posterfilename + ".jpg"
                                Me.pbposterTMDB22.Enabled = True
                                Me.pbposterTMDB22.Visible = True
                                'Try
                                '    pbposterTMDB22.Load()
                                'Catch ex As Exception
                                '    File.Delete(rconf.tmdbpostercachefolder + posterfilename + "_cover.jpg")
                                'End Try
                            Catch exerror As Exception
                                Debug.Print(exerror.ToString)
                            End Try
                        Case 22
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(addfiletofolder(rconf.tmdbpostercachefolder, posterfilename + ".jpg"))
                                klblposterTMDB23.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(addfiletofolder(rconf.tmdbpostercachefolder, posterfilename + ".jpg"))
                                '   objImage = Nothing
                                klblposterTMDB23.Visible = True
                                Me.pbposterTMDB23.Image = objImage 'Location = rconf.tmdbpostercachefolder + posterfilename + "_cover.jpg"
                                Me.pbposterTMDB23.Enabled = True
                                Me.pbposterTMDB23.Visible = True
                                Me.pbposterTMDB23.AccessibleName = rconf.tmdbpostercachefolder + posterfilename + ".jpg"
                                'Try
                                '    pbposterTMDB23.Load()
                                'Catch ex As Exception
                                '    File.Delete(rconf.tmdbpostercachefolder + posterfilename + "_cover.jpg")
                                'End Try
                            Catch exerror As Exception
                                Debug.Print(exerror.ToString)
                            End Try
                        Case 23
                            Try
                                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(addfiletofolder(rconf.tmdbpostercachefolder, posterfilename + ".jpg"))
                                klblposterTMDB24.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(addfiletofolder(rconf.tmdbpostercachefolder, posterfilename + ".jpg"))
                                '   objImage = Nothing
                                klblposterTMDB24.Visible = True
                                Me.pbposterTMDB24.Image = objImage 'Location = rconf.tmdbpostercachefolder + posterfilename + "_cover.jpg"
                                Me.pbposterTMDB24.Enabled = True
                                Me.pbposterTMDB24.Visible = True
                                Me.pbposterTMDB24.AccessibleName = rconf.tmdbpostercachefolder + posterfilename + ".jpg"
                                'Try
                                '    pbposterTMDB24.Load()
                                'Catch ex As Exception
                                '    File.Delete(rconf.tmdbpostercachefolder + posterfilename + "_cover.jpg")
                                'End Try
                            Catch exerror As Exception
                                Debug.Print(exerror.ToString)
                                If File.Exists(rconf.basefolder + "debugmodeon") Then MsgBox(exerror.ToString)
                            End Try
                        Case Else
                            Debug.Print("Poster image that was set for display greater then the 24 allowed in the GUI, I have nowhere to put the darn thing so I'll act like it was never there!")
                    End Select
                End If
                tbdcou += 1
                If autopilotrunning And tbdcou = 1 Then Exit Sub 'only need 1 for autopilot
                If tbdcou = 25 Then Exit Sub 'more then gui has 
            End While
        End If

    End Sub

    Private Sub precachepostersfromtmdb(ByRef tmovie As movie, Optional ByRef bwcount As Integer = 0)
        'get posters
        Dim cposters As New tmdbapiv2.Posters 'mip.themoviedb.backdrop.backdrops
        If rbem.Checked Then 'working online, get latest info
            tmdbapiv2.Results.getposters(tmovie, cposters, tmovie.pimdbnumber, rconf.wgetfolder, rconf.xmlfoldertmdbv2, True, True, True)
        Else 'not working online, do not overwrite, will still attempt to download if missing
            tmdbapiv2.Results.getposters(tmovie, cposters, tmovie.pimdbnumber, rconf.wgetfolder, rconf.xmlfoldertmdbv2, True, False, True)
        End If

        Dim tbdcount As Integer = cposters.posters.Count 'tmovie.pbackdrops.backdrops.Count
        If Not tbdcount = 0 Then
            Dim tbdcou As Integer = 0
            While tbdcou < tbdcount
                Dim currentitem As New tmdbapiv2.Poster 'mip.themoviedb.backdrop.Item
                currentitem = cposters.posters.Item(tbdcou)
                If Not currentitem.Size = "original" Then
                    tbdcou += 1
                    Continue While
                End If
                Dim posterurl As String = currentitem.Text
                If pclogging Then pclog.WriteLine("Attempting to download" + posterurl)
                If singleMovieBeingDisplayed Then
                    bwcount += 1
                    bwDisplayMovieData.ReportProgress(bwcount, "Checking" + posterurl)
                End If
                'Dim posterpostcard As String = Strings.Left(currentitem.Text, currentitem.Text.Length - 4) + "_poster.jpg"
                Dim posterfilename As String = Regex.Match(posterurl, "posters/(.{1,8})/(.*?.).jpg", RegexOptions.IgnoreCase).Groups(2).Value
                Dim posterfilesubfoldername As String = Regex.Match(posterurl, "posters/(.{1,8})/(.*?.).jpg", RegexOptions.IgnoreCase).Groups(1).Value
                If posterfilename = "" Then
                    'fanartfilename = Regex.Match(fanarturl, "backdrops/.{1,8}/(.*?.).png", RegexOptions.IgnoreCase).Groups(1).Value
                    'skip it
                    If pclogging Then pclog.WriteLine("Skipping :" + posterurl + " -- The results from the API are not in the correct format, expecting .jpg with associated _poster")
                    tbdcou += 1
                    Continue While
                End If
                Dim posterurl_mid As String = Strings.Left(currentitem.Text, currentitem.Text.Length - 4) + "_mid.jpg"
                Dim posterurl_cover As String = Strings.Left(currentitem.Text, currentitem.Text.Length - 4) + "_cover.jpg"
                If Not Directory.Exists(rconf.tmdbpostercachefolder + tmovie.pimdbnumber + "\" + posterfilesubfoldername + "\") Then Directory.CreateDirectory(rconf.tmdbpostercachefolder + tmovie.pimdbnumber + "\" + posterfilesubfoldername + "\")
                If Not File.Exists(rconf.tmdbpostercachefolder + tmovie.pimdbnumber + "\" + posterfilesubfoldername + "\" + posterfilename + "_cover.jpg") Then 'thumbnail
                    'download it
                    If pclogging Then pclog.WriteLine("Download starting for: " + posterfilename + "_cover.jpg")

                    If singleMovieBeingDisplayed Then
                        bwcount += 1
                        bwDisplayMovieData.ReportProgress(bwcount, "Downloading: " + posterurl_cover)
                    End If
                    '
                    If rbem.Checked Then wgetpostertmdb(posterurl_cover, rconf.tmdbpostercachefolder + tmovie.pimdbnumber + "\" + posterfilesubfoldername + "\", True, posterfilename + "_cover.jpg")
                    If messageprompts Then curtmdbpostercounter += 1
                End If

                If Not File.Exists(rconf.tmdbpostercachefolder + tmovie.pimdbnumber + "\" + posterfilesubfoldername + "\" + posterfilename + ".jpg") Then 'high rez
                    If pclogging Then pclog.WriteLine("Download starting for: " + posterfilename + ".jpg")
                    If singleMovieBeingDisplayed Then
                        bwcount += 1
                        bwDisplayMovieData.ReportProgress(bwcount, "Downloading: " + posterurl)
                    End If
                    'download it
                    If rbem.Checked Then wgetpostertmdb(posterurl, rconf.tmdbpostercachefolder + tmovie.pimdbnumber + "\" + posterfilesubfoldername + "\", True, posterfilename + ".jpg")
                    If pclogging Then pclog.WriteLine("Download completed for: " + posterfilename + ".jpg")
                End If
                tbdcou += 1
                If tbdcou = 25 Then Exit Sub 'more then gui has 
            End While
        End If

    End Sub


    'Public Sub processdropdownitems_old()
    '    messageprompts = rbem.Checked 'rbem is online mode, if it's not checked, we want to turn off labels
    '    Dim skt As Boolean = cbSkipTransparency.Checked
    '    Dim ais As Boolean = cbAllowIconSelection.Checked
    '    'hide current icons from view
    '    pbFrame.Hide()
    '    pbCurIconUsed.Hide()
    '    pbCurIconUsed2.Hide()
    '    pbCurrentIconUsedNT.Hide()
    '    'clear fanart
    '    fanartpb1.Image = Nothing
    '    fanartpb1.ImageLocation = Nothing

    '    'Me.Refresh()
    '    If ais Then resetanddisableimages()
    '    Me.pbar1.Visible = True
    '    ''If messageprompts Then Me.Refresh()()
    '    'pbTick.Start()

    '    pbar1.Value = pbar1.Maximum
    '    lblPbar.Visible = True
    '    'lblPbar.Text = " ____---- WORKING ----____ "
    '    'Me.Refresh()

    '    Dim maxDisplayedIcons As Integer = rconf.pcbMaxIconsToDisplay
    '    If lbMyMovies.SelectedIndex = -1 Then
    '        '  MsgBox("You should select an item from the drop down first. Since no item was selected, the first item in the list will be used")
    '        Try
    '            lbMyMovies.SelectedIndex = 0
    '        Catch ex As Exception
    '            Debug.Print(ex.ToString)
    '        End Try
    '    End If

    '    Dim tmovie As movie = CType(movies(CInt(lbMyMovies.SelectedValue)), movie)
    '    'dim tmovie as new movie 
    '    'tmovie.setmoviepath = cbox1.SelectedValue

    '    Dim dname As String
    '    dname = tmovie.getmoviename
    '    lblPbar.Text = " ____---- WORKING ON: " + dname + "----____ "
    '    'see if a folder icon exsists 
    '    Dim Path As String = tmovie.getmoviepath
    '    Debug.Print("starting cur icon and transparency")
    '    Debug.Print(Path)
    '    pbCurIconUsed.Enabled = True


    '    'see if nfo file exsists for movie, if it does, read it up to speed it up
    '    Dim nfoexsists As Boolean = checkforIMDBIDinnfofile(tmovie)
    '    If Not nfoexsists Then
    '        'if there is no nfo file, check for a poster file (they have the imdbid in them)
    '        nfoexsists = checkforposterfiletogetimdbid(tmovie)
    '    End If


    '    Dim selectedName As String = tmovie.getmoviename
    '    tbnewname.Text = selectedName
    '    lblCurMovieFolder.Text = tmovie.getmoviepath
    '    Dim selectedNameXMLfile As String
    '    selectedNameXMLfile = Strings.Replace(selectedName, " ", ".")
    '    'populate movieobject
    '    'tmovie.setmoviename(selectedName)
    '    'remed in 1.4.8.23 for speed 'lblPbar.Text = " ____---- Setting up XML ----____ "
    '    'remed in 1.4.8.23 for speed 'Me.Refresh()
    '    tmovie.setthumbxml(rconf.xmlfolder + selectedNameXMLfile + ".xml")
    '    '-------------------------------- IMDB Information and .nfo file creation 
    '    Dim hasnfoalready As Boolean = False
    '    If rconf.pcbGetIMDBInfo Then 'get imdb info
    '        If messageprompts Then lblPbar.Text = " __-- Getting IMDB Information for " + tmovie.getmoviename.ToString + "--__ "
    '        ''If messageprompts Then Me.Refresh()()
    '        If tmovie.pimdbnumber = "" Then
    '            Debug.Print("no id in movie, grabbing imdb info")
    '            Dim tstringofimdbpage As String = getimdbidsearch(tmovie.getmoviename)
    '            snagimdbid(tmovie.getmoviename, tmovie, tstringofimdbpage)
    '        Else
    '            'do not grab the data, we know the id already
    '            hasnfoalready = True
    '            Debug.Print("we have an id, not parseing imdb again for it")
    '        End If
    '        'getimdbidsearchwithwget(tmovie)


    '        If rbem.Checked = True Then
    '            If File.Exists(rconf.imdbcachefolder + "/" + tmovie.pimdbnumber + ".xml") Then 'And Not cbOverwriteNFO.Checked Then
    '                'lblPbar.Text = " __-- XML already in Cache: IMDB Information for " + tmovie.getmoviename.ToString + "--__ "
    '                'do nothing yet, nfo exsists -- add load nfo code here as well as the option to overwrite nfos in gui
    '                Debug.Print(".xml already exsists") ' + cbOverwriteNFO.Checked.ToString)
    '            Else
    '                If Not hasnfoalready Then
    '                    'no nfo so get the data
    '                    Dim tstringofimdbpage As String = getimdbidsearch(tmovie.getmoviename)
    '                    snagimdbid(tmovie.getmoviename, tmovie, tstringofimdbpage)
    '                    snagyear(tmovie.getmoviename, tmovie, tstringofimdbpage)
    '                End If
    '                ' getimdbdata(tmovie)
    '                Dim imdbinfo As New IMDB
    '                Dim imdbidtemp As String = tmovie.getimdbid
    '                If imdbidtemp = "" Then
    '                    If messageprompts Then MsgBox("NO IMDB DATA FOUND, UNABLE TO SAVE NFO FILE")
    '                    Debug.Print("NO IMDB DATA FOUND, UNABLE TO SAVE NFO FILE")
    '                Else
    '                    imdbinfo = imdbparse(imdbidtemp)
    '                    'save xml to imdbcache reguardless of gui setting to write nfo
    '                    imdbinfo.writeIMDBXML(imdbinfo, tmovie, rconf.imdbcachefolder, True)
    '                    'If cbSaveNFO.Checked Then
    '                    '    'imdbinfo.writeIMDBXML(imdbinfo, tmovie)
    '                    '    tmovie.saveimdbinfo(tmovie)
    '                    'End If
    '                End If
    '            End If
    '        End If
    '    End If
    '    'get fanart
    '    Dim cbackdrops As New mip.themoviedb.backdrop.backdrops
    '    getbackdrop(cbackdrops, tmovie.pimdbnumber, rconf.wgetfolder, rconf.xmlfoldertmdbbackdrops, True, True, False)
    '    'tmovie.pbackdrops = cbackdrops
    '    'If tmovie.pbackdrops.Items.Count = 0 Then
    '    Debug.Print("no items in the pbackdrop")
    '    ' Else
    '    'Debug.Print(tmovie.pbackdrops.Items.Count.ToString + ": is the count of backdrops")
    '    'End If
    '    'if allow icon selection then set the picture boxes for the fanart items
    '    If ais Then
    '        '   Dim tbdcount As Integer = tmovie.pbackdrops.Items.Count
    '        '   If Not tbdcount = 0 Then
    '        'count is not 0, process items
    '        Dim tbdcou As Integer = 0
    '        'While tbdcou < tbdcount
    '        'if the file is not local download it
    '        Dim currentitem As New mip.themoviedb.backdrop.Item
    '        currentitem = cbackdrops.Items.Item(tbdcou)
    '        Dim fanarturl As String = currentitem.URL
    '        Dim fanartpostcard As String = currentitem.Postcard
    '        Dim fanartfilename As String = Regex.Match(fanarturl, "backdrops/.{1,8}/(.*?.).jpg", RegexOptions.IgnoreCase).Groups(1).Value
    '        If Not File.Exists(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg") Then
    '            'download it
    '            wgetfanart(fanarturl, rconf.tmdbfanartcachefolder, True, fanartfilename + ".jpg")
    '        End If

    '        If Not File.Exists(rconf.tmdbfanartcachefolder + fanartfilename + "_poster.jpg") Then
    '            'download it
    '            wgetfanart(fanartpostcard, rconf.tmdbfanartcachefolder, True, fanartfilename + "_poster.jpg")
    '        End If

    '        'after downloading display the local file (better gui look)
    '        Select Case tbdcou
    '            Case 0
    '                Me.pbfatmdb1.ImageLocation = rconf.tmdbfanartcachefolder + fanartfilename + "_poster.jpg"
    '                Me.pbfatmdb1.Enabled = True
    '                Me.pbfatmdb1.AccessibleName = rconf.tmdbfanartcachefolder + fanartfilename + ".jpg"
    '            Case 1
    '                Me.pbfatmdb2.ImageLocation = rconf.tmdbfanartcachefolder + fanartfilename + "_poster.jpg"
    '                Me.pbfatmdb2.Enabled = True
    '                Me.pbfatmdb2.AccessibleName = rconf.tmdbfanartcachefolder + fanartfilename + ".jpg"
    '            Case 2
    '                Me.pbfatmdb3.ImageLocation = rconf.tmdbfanartcachefolder + fanartfilename + "_poster.jpg"
    '                Me.pbfatmdb3.Enabled = True
    '                Me.pbfatmdb3.AccessibleName = rconf.tmdbfanartcachefolder + fanartfilename + ".jpg"
    '            Case 3
    '                Me.pbfatmdb4.ImageLocation = rconf.tmdbfanartcachefolder + fanartfilename + "_poster.jpg"
    '                Me.pbfatmdb4.Enabled = True
    '                Me.pbfatmdb4.AccessibleName = rconf.tmdbfanartcachefolder + fanartfilename + ".jpg"
    '            Case 4
    '                Me.pbfatmdb5.ImageLocation = rconf.tmdbfanartcachefolder + fanartfilename + "_poster.jpg"
    '                Me.pbfatmdb5.Enabled = True
    '                Me.pbfatmdb5.AccessibleName = rconf.tmdbfanartcachefolder + fanartfilename + ".jpg"
    '            Case 5
    '                Me.pbfatmdb6.ImageLocation = rconf.tmdbfanartcachefolder + fanartfilename + "_poster.jpg"
    '                Me.pbfatmdb6.AccessibleName = rconf.tmdbfanartcachefolder + fanartfilename + ".jpg"
    '                Me.pbfatmdb6.Enabled = True
    '            Case Else
    '                Debug.Print("fanart image display greater then 6, nowhere to put the darn thing")
    '        End Select
    '        tbdcou += 1
    '        End While
    '    End If
    '    End If

    '    'Dim bdicount As Integer = cbackdrops.Items.Count
    '    'Dim bdcounter As Integer = 0
    '    'While bdcounter < bdicount
    '    ' tmovie.pbackdrops.Insert(cbackdrops.Items.Item(bdcounter))
    '    ' End While

    '    'get fanart
    '    'first check to see if it's enabled
    '    If rconf.pcbGetFanart Then
    '        If messageprompts Then lblPbar.Text = " __-- Getting Fanart for " + dname + "--__ "
    '        Dim haslocalfanart As Boolean = False
    '        If FileExists(lblCurMovieFolder.Text + "\" + tbnewname.Text + "-fanart.jpg") Then
    '            Debug.Print("Fanart file already exists: " + lblCurMovieFolder.Text + "\" + dname + "-fanart.jpg")
    '            haslocalfanart = True
    '        Else
    '            If rconf.pcbGetFanart Then 'get fanart checked
    '                If messageprompts Then lblPbar.Text = " __-- Getting Fanart for " + dname + "--__ "
    '                If rbem.Checked = True Then 'working online 
    '                    If tmovie.pimdbnumber = "" Then
    '                        Debug.Print("No Imdb id in movie object tmovie, no attempt made to download - Fanart ")
    '                    Else
    '                        Dim fanarturl As String = "http://www.meligrove.com/images/posters/movies/jpg/" + tmovie.pimdbnumber + ".jpg"
    '                        If messageprompts Then lblPbar.Text = " __-- Getting Fanart for " + dname + "--__ "
    '                        ''If messageprompts Then Me.Refresh()()
    '                        Try
    '                            If messageprompts Then lblPbar.Text = " __-- Downloading Fanart for " + dname + "--__ "
    '                            SavePhotoFromUrl(lblCurMovieFolder.Text + "\" + tbnewname.Text + "-fanart.jpg", fanarturl)
    '                            haslocalfanart = True
    '                        Catch ex As Exception
    '                            Debug.Print("Failed downloading fanart" + fanarturl)
    '                            pbTick.Stop()
    '                            pbar1.Visible = False
    '                            lblPbar.Visible = False
    '                        End Try
    '                        'savefanart(fanartpb1)
    '                    End If
    '                End If
    '            End If
    '        End If
    '        If haslocalfanart And Me.showfanart Then
    '            fanartpb1.ImageLocation = lblCurMovieFolder.Text + "\" + tbnewname.Text + "-fanart.jpg"
    '            fanartpb1.Enabled = True
    '        End If
    '    End If
    '    'end of fanart
    '    'TabPage5.Refresh()
    '    ' Exit Sub
    '    'get Movie Poster
    '    If ais Then
    '        Dim impaname As String = cleanname(tmovie.getmoviename)
    '        If rconf.pcbDownloadPoster Then
    '            'save a new xml file for the posters
    '            Dim nolinksinxml As Boolean = False
    '            'see if the posterxml file exsists in the posters folder
    '            If File.Exists(rconf.xmlfolderposters + impaname + ".xml") Then
    '                Dim curposter As New posters
    '                curposter.pmoviename = impaname
    '                curposter.readxml(curposter)
    '                'precacheposter(curposter)
    '                If curposter.pposters.Count = 0 Then
    '                    nolinksinxml = True
    '                    Debug.Print("Found an xml for " + impaname + ". No links where found in that file")
    '                Else
    '                    getdisplayposter(curposter)
    '                End If
    '            Else
    '                nolinksinxml = True
    '            End If

    '            If nolinksinxml = True Then
    '                If messageprompts Then lblPbar.Text = " __-- Getting Poster for " + dname + "--__ "
    '                ''If messageprompts Then Me.Refresh()()
    '                Debug.Print("When Getting Posters: Blank XML or No XML for: " + impaname)
    '                'no poster xml, revert to older method of finding poster
    '                If rconf.pcbGetIMDBInfo Then
    '                    'do nothing, we already polled that data for the movie
    '                Else
    '                    'get imdb info since we need the movie year
    '                    If rbem.Checked = True Then
    '                        Dim tstringofimdbpage As String = getimdbidsearch(tmovie.getmoviename)
    '                        snagimdbid(tmovie.getmoviename, tmovie, tstringofimdbpage)
    '                        snagyear(tmovie.getmoviename, tmovie, tstringofimdbpage)
    '                    End If
    '                End If

    '                'old method of posters, used when no poster xml is found, limited to 2 posters to speed up processing
    '                If rbem.Checked = True Then
    '                    Dim postericons As New icontoxml
    '                    postericons.seticon1("http://www.impawards.com/" + Convert.ToString(tmovie.getyear) + "/posters/" + impaname + ".jpg")
    '                    postericons.seticon2("http://www.impawards.com/" + Convert.ToString(tmovie.getyear) + "/posters/" + impaname + "_ver1.jpg")
    '                    postericons.seticon3("http://www.impawards.com/" + Convert.ToString(tmovie.getyear) + "/posters/" + impaname + "_ver2.jpg")
    '                    postericons.seticon4("http://www.impawards.com/" + Convert.ToString(tmovie.getyear) + "/posters/" + impaname + "_ver3.jpg")
    '                    'postericons.seticon5("http://www.impawards.com/" + Convert.ToString(tmovie.getyear) + "/posters/" + impaname + "_ver4.jpg")
    '                    'postericons.seticon6("http://www.impawards.com/" + Convert.ToString(tmovie.getyear) + "/posters/" + impaname + "_ver5.jpg")
    '                    'postericons.seticon7("http://www.impawards.com/" + Convert.ToString(tmovie.getyear) + "/posters/" + impaname + "_ver6.jpg")
    '                    'postericons.seticon8("http://www.impawards.com/" + Convert.ToString(tmovie.getyear) + "/posters/" + impaname + "_ver7.jpg")
    '                    postericons.savexmliconwriter(postericons, selectedNameXMLfile, "070", "0", "0")

    '                End If

    '                Try
    '                    If rbem.Checked = True Then
    '                        precacheicons(selectedNameXMLfile, "070", "0", "0")
    '                    End If
    '                    getdisplayimages(selectedNameXMLfile, "070", "0", "0")
    '                Catch ex As Exception

    '                End Try
    '                'Try
    '                'grab the xml data and save the icons

    '                '    Me.posterpb1.ImageLocation = "http://www.impawards.com/" + Convert.ToString(tmovie.getyear) + "/posters/" + impaname + ".jpg"
    '                '    Me.posterpb2.ImageLocation = "http://www.impawards.com/" + Convert.ToString(tmovie.getyear) + "/posters/" + impaname + "_ver2.jpg"
    '                '    Me.posterpb3.ImageLocation = "http://www.impawards.com/" + Convert.ToString(tmovie.getyear) + "/posters/" + impaname + "_ver3.jpg"
    '                '    Me.posterpb4.ImageLocation = "http://www.impawards.com/" + Convert.ToString(tmovie.getyear) + "/posters/" + impaname + "_ver4.jpg"
    '                '    Me.posterpb5.ImageLocation = "http://www.impawards.com/" + Convert.ToString(tmovie.getyear) + "/posters/" + impaname + "_ver5.jpg"
    '                '    Me.posterpb6.ImageLocation = "http://www.impawards.com/" + Convert.ToString(tmovie.getyear) + "/posters/" + impaname + "_ver6.jpg"
    '                '    Me.posterpb7.ImageLocation = "http://www.impawards.com/" + Convert.ToString(tmovie.getyear) + "/posters/" + impaname + "_ver7.jpg"
    '                '    Me.posterpb8.ImageLocation = "http://www.impawards.com/" + Convert.ToString(tmovie.getyear) + "/posters/" + impaname + "_ver8.jpg"
    '                'Catch ex As Exception
    '                '    '   MsgBox("Unable to locate a Movie Poster for this movie" + ex.ToString, MsgBoxStyle.Information, "Unable to find a poster, no big deal.")
    '                '    Debug.Print("oops.. no poster info available")
    '                'End Try

    '            End If


    '        End If
    '        '-------------------------------- END NEW POSTER CODE
    '    End If
    '    'display movie name and information in gui
    '    'read up .nfo file
    '    If messageprompts Then lblPbar.Text = " __-- Setting .nfo file for: " + dname + "--__ "
    '    ''If messageprompts Then Me.Refresh()()
    '    If File.Exists(rconf.imdbcachefolder + tmovie.pimdbnumber + ".xml") Then 'tmovie.getmoviepath + "\" + tmovie.getmoviename + ".nfo") Then
    '        Dim timdb As New IMDB
    '        timdb.readIMDBXML(tmovie)
    '    Else
    '        Debug.Print("display movie name and info - no movie nfo file found")
    '    End If

    '    If cbSaveNFO.Checked Then
    '        'imdbinfo.writeIMDBXML(imdbinfo, tmovie)
    '        If Not tmovie.pimdbnumber = Nothing Then tmovie.saveimdbinfomanual(tmovie)
    '    End If
    '    'display imdb info
    '    Me.tbMovieName.Text = tmovie.getmoviename
    '    khgMovieNameGroup.ValuesPrimary.Heading = tmovie.getmoviename
    '    Me.tbMovieNameE.Text = tmovie.getmoviename
    '    Me.tbCredits.Text = tmovie.pcredits
    '    Me.tbDirector.Text = tmovie.pdirector
    '    Me.tbGenre.Text = tmovie.pgenre
    '    Me.tbIMDBID.Text = tmovie.pimdbnumber
    '    Me.tbMpaa.Text = tmovie.pmpaa
    '    Me.rtbPlotOutline.Text = tmovie.pplotoutline
    '    Me.rtbPlot.Text = tmovie.pplot
    '    Me.tbRating.Text = tmovie.prating
    '    Me.tbOriginalTitle.Text = tmovie.poriginaltitle
    '    Me.tbRuntime.Text = tmovie.pruntime
    '    Me.rtbTagline.Text = tmovie.ptagline
    '    Me.tbVotes.Text = tmovie.pvotes
    '    Me.tbStudio.Text = tmovie.pstudio 'tmovie.ptitle
    '    Me.tbyear.Text = tmovie.pyear.ToString
    '    Me.tbTop250.Text = tmovie.ptop250
    '    Me.tbTrailer.Text = tmovie.ptrailer
    '    'Me.Refresh()


    '    'getdisplayimages(selectedNameXMLfile, "2", "2", "2")
    '    'End If
    '    'make sure we have an imdb id


    '    'pbTick.Stop()
    '    'pbar1.Visible = False
    '    'lblPbar.Visible = False

    '    '   Debug.Print(Me.tp2pb1.ImageLocation)
    '    '  Debug.Print(Convert.ToString(tmovie.getyear) + "  " + Convert.ToString(tmovie.getimdbid))

    '    'get images (wide as example)
    '    '---------------------------- XML FILE CHECK ---------------------------
    '    If ais Then 'allow thumbnail selection
    '        'check to see if there is already an xml file in there
    '        Dim xmltemppathname As String = rconf.xmlfolder + selectedNameXMLfile
    '        If rconf.pcbf1s0 Then
    '            If rbem.Checked = True Then
    '                If messageprompts Then lblPbar.Text = " __-- Getting Square (no style) icon for " + dname + "--__ "
    '                ' 'If messageprompts Then Me.Refresh()()
    '                xmlDownload(tmovie, xmltemppathname, "1", "2", "0") 'square no style
    '            End If
    '            getdisplayimages(selectedNameXMLfile, "1", "2", "0")
    '        End If
    '        If rconf.pcbf1s3 Then
    '            If rbem.Checked = True Then
    '                If messageprompts Then lblPbar.Text = " __-- Getting Square Box Shot for " + dname + "--__ "
    '                ''If messageprompts Then Me.Refresh()()
    '                xmlDownload(tmovie, xmltemppathname, "1", "2", "3") 'square box shot
    '            End If
    '            getdisplayimages(selectedNameXMLfile, "1", "2", "3")
    '        End If
    '        If rconf.pcbf1s9 Then
    '            If rbem.Checked = True Then
    '                If messageprompts Then lblPbar.Text = " __-- Getting Round icon for " + dname + "--__ "
    '                ''If messageprompts Then Me.Refresh()()
    '                xmlDownload(tmovie, xmltemppathname, "1", "2", "9") 'square classification, but it's a round token
    '            End If
    '            getdisplayimages(selectedNameXMLfile, "1", "2", "9")
    '        End If
    '        If rconf.pcbf2s0 Then
    '            If rbem.Checked = True Then
    '                If messageprompts Then lblPbar.Text = " __-- Getting Wide (no style) icon for " + dname + "--__ "
    '                ''If messageprompts Then Me.Refresh()()
    '                xmlDownload(tmovie, xmltemppathname, "2", "2", "0") 'wide no style
    '            End If
    '            getdisplayimages(selectedNameXMLfile, "2", "2", "0")
    '        End If
    '        If rconf.pcbf2s2 Then
    '            If rbem.Checked = True Then
    '                If messageprompts Then lblPbar.Text = " __-- Getting Wide (rounded shadow scanlines) icon for " + dname + "--__ "
    '                ''If messageprompts Then Me.Refresh()()
    '                xmlDownload(tmovie, xmltemppathname, "2", "2", "2") 'wide rounded shadow with scanlines
    '            End If
    '            getdisplayimages(selectedNameXMLfile, "2", "2", "2")
    '        End If
    '        If rconf.pcbf2s8 Then
    '            If rbem.Checked = True Then
    '                If messageprompts Then lblPbar.Text = " __-- Getting Wide (round shadow) icon for " + dname + "--__ "
    '                ''If messageprompts Then Me.Refresh()()
    '                xmlDownload(tmovie, xmltemppathname, "2", "2", "8") 'wide rounded shadow
    '            End If
    '            getdisplayimages(selectedNameXMLfile, "2", "2", "8")
    '        End If
    '        If rconf.pcbf2s10 Then
    '            If rbem.Checked = True Then
    '                If messageprompts Then lblPbar.Text = " __-- Getting Wide (round shadow Glass overlay) icon for " + dname + "--__ "
    '                ''If messageprompts Then Me.Refresh()()
    '                xmlDownload(tmovie, xmltemppathname, "2", "2", "10") 'wide rounded shadow with glass overlay
    '            End If
    '            getdisplayimages(selectedNameXMLfile, "2", "2", "10")
    '        End If
    '        If cbf3s0.Checked Then
    '            If rbem.Checked = True Then
    '                If messageprompts Then lblPbar.Text = " __-- Getting Tall (no style) icon for " + dname + "--__ "
    '                ''If messageprompts Then Me.Refresh()()
    '                xmlDownload(tmovie, xmltemppathname, "3", "2", "0") 'tall no style
    '            End If
    '            getdisplayimages(selectedNameXMLfile, "3", "2", "0")
    '        End If
    '    End If
    '    'MsgBox(tmovie.getmoviename + " ------- " + tmovie.getthumbxml)
    '    btnRetryName.Enabled = True
    '    tbnewname.Enabled = True
    '    pbTick.Stop()
    '    pbar1.Visible = False
    '    lblPbar.Visible = False
    '    'set movie to current movie
    '    currentmovie = tmovie

    '    '---POSTER
    '    If skt Then
    '        If File.Exists(Path + "\folder.jpg") And Me.showposter Then
    '            Try
    '                pbCurrentIconUsedNT.ImageLocation = Path + "\folder.jpg"
    '                pbCurrentIconUsedNT.Show()
    '            Catch
    '                'MsgBox("file bad, delete?", MsgBoxStyle.YesNo, "Unable to load folder.jpg")
    '                ' If MsgBoxResult.Yes = MsgBox("Unable to load folder.jpg, it appears to be corrupted." + vbNewLine + vbNewLine + "Do you want to delete it and the associated tbn file?") Then
    '                File.Delete(Path + "\folder.jpg")
    '                If File.Exists(lblCurMovieFolder.Text + "\" + tbMovieName.Text + ".tbn") Then File.Delete(lblCurMovieFolder.Text + "\" + tbMovieName.Text + ".tbn")
    '                'End If
    '                '    MsgBox("Image located at: " + Path + "\folder.jpg" + " is corrupted, I'm deleting it")
    '                'if this fails, the file is corrupt, delete it and the tbn file
    '                pbCurIconUsed.ImageLocation = Nothing
    '                pbCurIconUsed.Hide()
    '                pbCurIconUsed2.ImageLocation = Nothing
    '                pbCurIconUsed2.Hide()
    '            End Try
    '        Else 'no folder.jpg found
    '            pbCurIconUsed.ImageLocation = Nothing
    '            pbCurIconUsed.Hide()
    '            pbCurIconUsed2.ImageLocation = Nothing
    '            pbCurIconUsed2.Hide()
    '        End If
    '    End If
    '    If Not skt Then
    '        If File.Exists(Path + "\folder.jpg") And Me.showposter Then
    '            Try
    '                pbCurIconUsed.ImageLocation = Path + "\folder.jpg"
    '                pbCurIconUsed.Hide() 'hide basic image
    '                pbCurIconUsed2.Hide() 'hide poster version
    '                'Me.Refresh()
    '                Dim bmpImage As Image
    '                bmpImage = Image.FromFile(Path + "\folder.jpg")
    '                'aspect ratio items
    '                Dim imagetype As String

    '                Dim taspect As Double = aspectratio(bmpImage)

    '                If taspect < 0.25 Then
    '                    'wide(Icon)
    '                    imagetype = "wideicon"
    '                ElseIf taspect >= 0.98 And taspect <= 1.02 Then
    '                    imagetype = "square"
    '                ElseIf (taspect > 0.8 Or taspect < 0.95) And bmpImage.Height < 500 And bmpImage.Width < 450 Then
    '                    'boxed icon or maybe squared poster
    '                    imagetype = "boxed"
    '                Else
    '                    imagetype = "poster" 'consider it a poster
    '                End If
    '                'set pb to bmp size
    '                Try 'fix to check file first and remove try block
    '                    Dim x, y As Integer
    '                    If (bmpImage.Width >= 400 Or bmpImage.Height > 299 Or Not cbDlFormat.SelectedIndex = 2 Or imagetype = "poster") And Not imagetype = "wideicon" Then

    '                        Debug.Print("no transparency attempted for current icon, too big, quality setting not highest, or it's a poster")
    '                        'scale image size
    '                        'set the fixed height and get the new width (based on aspect) then set the picture box sizes
    '                        Dim fixedHeight As Double = 350
    '                        Dim newWidth As Double = fixedHeight / taspect
    '                        Dim framefixedheight As Double = 393
    '                        Dim framenewWidth As Double = framefixedheight / taspect

    '                        'pbCurIconUsed.Image = bmpImage
    '                        pbFrame.Show()
    '                        pbFrame.Height = Convert.ToInt32(framefixedheight)
    '                        pbFrame.Width = Convert.ToInt32(framenewWidth)
    '                        pbCurIconUsed2.Show()
    '                        pbCurIconUsed2.Width = Convert.ToInt32(newWidth)
    '                        pbCurIconUsed2.Height = Convert.ToInt32(fixedHeight)
    '                        pbCurIconUsed2.Image = pbCurIconUsed.Image

    '                        'do not attempt transparency
    '                    Else
    '                        If messageprompts Then lblPbar.Text = " ____---- Processing Transparency ----____ "
    '                        If messageprompts Then Me.gbDisplay.Refresh()
    '                        Debug.Print("start: " + TimeString())
    '                        Dim bmp As New Bitmap(Path + "\folder.jpg")
    '                        Dim gp As New System.Drawing.Drawing2D.GraphicsPath
    '                        Dim mask1 As Color = System.Drawing.Color.White
    '                        Dim mask2 As Color = System.Drawing.Color.Transparent
    '                        Dim noshow As String = "Color [A=0, R=0, G=0, B=0]"
    '                        For x = 0 To bmp.Width - 1
    '                            For y = 0 To bmp.Height - 1
    '                                Dim curPixAlpha As Integer = Convert.ToInt16(Strings.Replace(Strings.Replace(Strings.Right(Strings.Left(bmp.GetPixel(x, y).ToString, 12), 3), ",", ""), " ", ""))
    '                                If curPixAlpha >= 128 Then
    '                                    'Debug.Print("More then 127: " + curPixAlpha.ToString)
    '                                    gp.AddRectangle(New Rectangle(x, y, 1, 1))
    '                                Else
    '                                    'Debug.Print("mask1" + bmp.GetPixel(x, y).ToString)
    '                                End If
    '                                curPixAlpha = Nothing
    '                            Next
    '                        Next

    '                        'set pbsize
    '                        pbCurIconUsed.Height = bmp.Height
    '                        pbCurIconUsed.Width = bmp.Width
    '                        'setitem
    '                        pbCurIconUsed.BackColor = Color.Transparent
    '                        pbCurIconUsed.Region = New System.Drawing.Region(gp)
    '                        pbCurIconUsed.Show()
    '                        'cleanup
    '                        bmp.Dispose()
    '                        bmp = Nothing
    '                        gp.Dispose()
    '                        Debug.Print("end: " + TimeString())
    '                        'End If
    '                    End If
    '                Catch ex As Exception
    '                    Debug.Print(ex.ToString)
    '                End Try
    '                bmpImage.Dispose()
    '            Catch ex As Exception
    '                'MsgBox("file bad, delete?", MsgBoxStyle.YesNo, "Unable to load folder.jpg")
    '                ' If MsgBoxResult.Yes = MsgBox("Unable to load folder.jpg, it appears to be corrupted." + vbNewLine + vbNewLine + "Do you want to delete it and the associated tbn file?") Then
    '                File.Delete(Path + "\folder.jpg")
    '                If File.Exists(lblCurMovieFolder.Text + "\" + tbMovieName.Text + ".tbn") Then File.Delete(lblCurMovieFolder.Text + "\" + tbMovieName.Text + ".tbn")
    '                'End If
    '                '    MsgBox("Image located at: " + Path + "\folder.jpg" + " is corrupted, I'm deleting it")
    '                'if this fails, the file is corrupt, delete it and the tbn file
    '                pbCurIconUsed.ImageLocation = Nothing
    '                pbCurIconUsed.Hide()
    '                pbCurIconUsed2.ImageLocation = Nothing
    '                pbCurIconUsed2.Hide()
    '            End Try
    '            'end cur image processing
    '        Else 'used when no folder.jpg exsist
    '            pbCurIconUsed.ImageLocation = Nothing
    '            pbCurIconUsed.Hide()
    '            pbCurIconUsed2.ImageLocation = Nothing
    '            pbCurIconUsed2.Hide()
    '        End If
    '    End If
    '    Debug.Print("done: " + TimeString())
    '    '----END POSTER

    '    validatefoldercontents()
    '    ''


    'End Sub



    Private Sub getfilelistingforgui()
        'get folder contents and display in gui
        tbFDNFOFile.Text = ""
        tbFDIconfile.Text = ""
        tbFDFanartFile.Text = ""
        tbFDTBNFile.Text = ""
        tbFDMovieFile1.Text = ""
        tbFDMovieFile2.Text = ""
        Dim filelisting As New ArrayList
        filelisting = getFiles(currentmovie.getmoviepath)
        For Each fileinlisting In filelisting
            If Strings.Right(fileinlisting.ToString, 4).ToLower = ".nfo" Then
                tbFDNFOFile.Text += Regex.Match(fileinlisting.ToString, "[\\]{1}([^\\]*?\.nfo)", RegexOptions.IgnoreCase).Groups(1).Value + " "
            ElseIf Strings.Right(fileinlisting.ToString, 10).ToLower = "folder.jpg" Then
                tbFDIconfile.Text += Regex.Match(fileinlisting.ToString, "[\\]{1}([^\\]*?folder.jpg)", RegexOptions.IgnoreCase).Groups(1).Value + " "
            ElseIf Strings.Right(fileinlisting.ToString, 10).ToLower = "fanart.jpg" Then
                tbFDFanartFile.Text += Regex.Match(fileinlisting.ToString, "[\\]{1}([^\\]*?-fanart.jpg)", RegexOptions.IgnoreCase).Groups(1).Value + " "
            ElseIf Strings.Right(fileinlisting.ToString, 4).ToLower = ".tbn" Then
                tbFDTBNFile.Text += Regex.Match(fileinlisting.ToString, "[\\]{1}([^\\]*?\.tbn)", RegexOptions.IgnoreCase).Groups(1).Value + " "
            ElseIf Strings.Right(fileinlisting.ToString, 4).ToLower = ".iso" Or Strings.Right(fileinlisting.ToString, 4).ToLower = ".wmv" Or Strings.Right(fileinlisting.ToString, 4).ToLower = ".avi" Or Strings.Right(fileinlisting.ToString, 4).ToLower = ".mpg" Or Strings.Right(fileinlisting.ToString, 4).ToLower = ".mpeg" Or Strings.Right(fileinlisting.ToString, 4).ToLower = ".img" Or Strings.Right(fileinlisting.ToString, 4).ToLower = ".mp4" Or Strings.Right(fileinlisting.ToString, 4).ToLower = ".mkv" Or Strings.Right(fileinlisting.ToString, 4).ToLower = ".mov" Then
                tbFDMovieFile1.Text += Regex.Match(fileinlisting.ToString, "[\\]{1}([^\\]*?\.(?:(?:iso)?(?:wmv)?(?:mpg)?(?:mpeg)?(?:avi)?(?:img)?(?:mp4)?(?:mkv)?(?:mov)?){1})", RegexOptions.IgnoreCase).Groups(1).Value + " "
            Else
                tbFDMovieFile2.Text += Regex.Match(fileinlisting.ToString, "[\\]{1}([^\\]*?\..{3,4})").Groups(1).Value + " "
            End If
            Debug.Print(fileinlisting.ToString)
        Next
    End Sub
    Private Sub tmdbbackdrops(ByRef vtmovie As movie)
        '
        getthemoviedbbackdrop(vtmovie.pimdbnumber, False, True, False)
        'read xml and set it back to the movies

    End Sub
  
    Private Function checkforposterfiletogetimdbid(ByRef tmovie As movie) As Boolean
        'grabs id from a poster xml file if it exsists
        'since posters are run cleanname on them during creation, we must clean the name to look for it.
        Dim cleandupname As String
        cleandupname = cleanname(tmovie.getmoviename)
        Dim pathtonfo As String = rconf.xmlfolderposters + cleandupname + ".xml"
        'Debug.Print(tmovie.getmoviepath + "\" + tmovie.getmoviename + ".nfo")
        If File.Exists(pathtonfo) Then
            tmovie.pimdbnumber = tmovie.readposterfiletogetimdbid(pathtonfo)
            Return True
        End If
    End Function
    Private Sub getdisplayimages(ByVal selectedNameXMLfile As String, ByVal format As String, ByVal catagory As String, ByVal style As String, Optional ByVal currenttvshowname As String = "", Optional ByVal downloadonly As Boolean = False)
        'take name, read xml, generate up to 24 images in boxes
        Dim maxDisplayedIcons As Integer = rconf.pcbMaxIconsToDisplay 'rconf.pcbMaxIconsToDisplay
        ReadXMLforSelection(rconf.xmlfolder + selectedNameXMLfile + "f" + format + "c" + catagory + "s" + style + ".xml", currenttvshowname)
        'Me.Refresh()
        Dim counter As Integer = 0
        If messageprompts And Not downloadonly Then
            If urllist.Count > maxDisplayedIcons Then
                iconsboxshottotal += maxDisplayedIcons
            Else
                iconsboxshottotal += urllists.Count
            End If

        End If

            For Each sname As String In urllists
                'get only the id (regex)
                Dim fromcache As Boolean
                Dim keyid As String
                If format = "070" Then
                    'no matching needed url is complete and is a poster
                    keyid = selectedNameXMLfile + counter.ToString 'generic
                    'sname is already set from the url in the xml file
                Else
                    If format = "1" Then
                        Try
                            keyid = Regex.Match(sname.ToString, ".*key=(?<gkeyid>\d{1,10})&").Groups("gkeyid").Value
                            sname = "http://www.mediaicons.org/Services/GetIcon.ashx?key=" + Convert.ToString(keyid) + "&format=" + format + "&style=" + style + "&type=" + dltype
                            'Debug.Print(sname.ToString)
                        Catch ex As ArgumentException
                            Debug.Print("Syntax error in the regular expression")
                            keyid = "0000"
                        End Try
                    Else
                        Try
                            keyid = Regex.Match(sname.ToString, ".*key=(?<gkeyid>\d{1,10})&").Groups("gkeyid").Value
                            sname = "http://www.mediaicons.org/Services/GetIcon.ashx?key=" + Convert.ToString(keyid) + "&format=" + format + "&style=" + style + "&type=" + dltype
                            'Debug.Print(sname.ToString)
                        Catch ex As ArgumentException
                            Debug.Print("Syntax error in the regular expression")
                            keyid = "0000"
                        End Try
                    End If
                End If

                '-------------------------------- CACHE CHECK --------------------------------
                'see if we have a cached copy first
                'regex'key+f(number)+s(number)+t(number)
                Dim checklocal As String = rconf.iconcachefolder + Convert.ToString(keyid) + "f" + format + "c" + catagory + "s" + style + ".jpg"
                If File.Exists(checklocal) Then
                    sname = checklocal
                    fromcache = True
                Else
                    If rbem.Checked = True Then
                        fromcache = False
                        'download (with waiting since this is display mode) the image
                        If counter < maxDisplayedIcons Then

                            lblPbar.Text = "Getting MediaIcons " + counter.ToString + " - Format: " + format + " : Style: " + style
                            'If messageprompts Then Me.gbDisplay.Refresh()
                            Try
                                'dlgDownloadingFile.downloadertxtFileName.Text = sname
                                'dlgDownloadingFile.whereToSave = checklocal
                                'dlgDownloadingFile.ShowDialog()
                                If cmmode = "movie" Then
                                addtodownloadlist(currentmovie, sname, checklocal, currentmovie.pmoviename + ": MediaIcons.org image- " + " - Format: " + format + " : Style: " + style)
                                ElseIf cmmode = "tv" Then
                                addtodownloadlist(currenttvshowdownloadlist, sname, checklocal, currenttvshowname + ": MediaIcons.org image- " + " - Format: " + format + " : Style: " + style)
                                End If
                            Catch ex As Exception
                                Debug.Print(ex.ToString)
                            End Try
                            'wget(sname, checklocal, "mediaicon", True)
                            'set it to the local path
                            sname = checklocal
                        Else
                            Exit Sub
                        End If

                    Else
                        'offline mode, set sname = nothing
                        sname = ""
                        fromcache = False
                    End If
                End If

                If Not downloadonly Then
                    'new case switch method
                    If counter = 0 Or counter <= (maxDisplayedIcons - 1) Then
                        If counter >= urllists.Count Then Exit Sub
                        Try
                            If format = "1" Then
                                'square
                                If style = "0" Then
                                    'no style fill in suare icons area spb1 = spb24
                                    Select Case counter
                                        Case 0
                                            spb1.ImageLocation = sname.ToString
                                            spb1.Enabled = True
                                            spb1.Load()
                                        Case 1
                                            spb2.ImageLocation = sname.ToString
                                            spb2.Enabled = True
                                            spb2.Load()
                                        Case 2
                                            spb3.ImageLocation = sname.ToString
                                            spb3.Enabled = True
                                            spb3.Load()
                                        Case 3
                                            spb4.ImageLocation = sname.ToString
                                            spb4.Enabled = True
                                            spb4.Load()
                                        Case 4
                                            spb5.ImageLocation = sname.ToString
                                            spb5.Enabled = True
                                            spb5.Load()
                                        Case 5
                                            spb6.ImageLocation = sname.ToString
                                            spb6.Enabled = True
                                            spb6.Load()
                                        Case 6
                                            spb7.ImageLocation = sname.ToString
                                            spb7.Enabled = True
                                            spb7.Load()
                                        Case 7
                                            spb8.ImageLocation = sname.ToString
                                            spb8.Enabled = True
                                            spb8.Load()
                                        Case 8
                                            spb9.ImageLocation = sname.ToString
                                            spb9.Enabled = True
                                            spb9.Load()
                                        Case 9
                                            spb10.ImageLocation = sname.ToString
                                            spb10.Enabled = True
                                            spb10.Load()
                                        Case 10
                                            spb11.ImageLocation = sname.ToString
                                            spb11.Enabled = True
                                            spb11.Load()
                                        Case 11
                                            spb12.ImageLocation = sname.ToString
                                            spb12.Enabled = True
                                            spb12.Load()
                                        Case 12
                                            spb13.ImageLocation = sname.ToString
                                            spb13.Enabled = True
                                            spb13.Load()
                                        Case 13
                                            spb14.ImageLocation = sname.ToString
                                            spb14.Enabled = True
                                            spb14.Load()
                                        Case 14
                                            spb15.ImageLocation = sname.ToString
                                            spb15.Enabled = True
                                            spb15.Load()
                                        Case 15
                                            spb16.ImageLocation = sname.ToString
                                            spb16.Enabled = True
                                            spb16.Load()
                                        Case 16
                                            spb17.ImageLocation = sname.ToString
                                            spb17.Enabled = True
                                            spb17.Load()
                                        Case 17
                                            spb18.ImageLocation = sname.ToString
                                            spb18.Enabled = True
                                            spb18.Load()
                                        Case 18
                                            spb19.ImageLocation = sname.ToString
                                            spb19.Enabled = True
                                            spb19.Load()
                                        Case 19
                                            spb20.ImageLocation = sname.ToString
                                            spb20.Enabled = True
                                            spb20.Load()
                                        Case 20
                                            spb21.ImageLocation = sname.ToString
                                            spb21.Enabled = True
                                            spb21.Load()
                                        Case 21
                                            spb22.ImageLocation = sname.ToString
                                            spb22.Enabled = True
                                            spb22.Load()
                                        Case 22
                                            spb23.ImageLocation = sname.ToString
                                            spb23.Enabled = True
                                            spb23.Load()
                                        Case 23
                                            spb24.ImageLocation = sname.ToString
                                            spb24.Enabled = True
                                            spb24.Load()
                                        Case Else
                                            Debug.WriteLine("square image out of bounds")
                                    End Select
                                ElseIf style = "3" Then
                                    'style 3 titled case
                                    Select Case counter
                                        Case 0
                                            bspb1.ImageLocation = sname.ToString
                                            bspb1.Enabled = True
                                            bspb1.Load()
                                        Case 1
                                            bspb2.ImageLocation = sname.ToString
                                            bspb2.Enabled = True
                                            bspb2.Load()
                                        Case 2
                                            bspb3.ImageLocation = sname.ToString
                                            bspb3.Enabled = True
                                            bspb3.Load()
                                        Case 3
                                            bspb4.ImageLocation = sname.ToString
                                            bspb4.Enabled = True
                                            bspb4.Load()
                                        Case 4
                                            bspb5.ImageLocation = sname.ToString
                                            bspb5.Enabled = True
                                            bspb5.Load()
                                        Case 5
                                            bspb6.ImageLocation = sname.ToString
                                            bspb6.Enabled = True
                                            bspb6.Load()
                                        Case 6
                                            bspb7.ImageLocation = sname.ToString
                                            bspb7.Enabled = True
                                            bspb7.Load()
                                        Case 7
                                            bspb8.ImageLocation = sname.ToString
                                            bspb8.Enabled = True
                                            bspb8.Load()
                                        Case 8
                                            bspb9.ImageLocation = sname.ToString
                                            bspb9.Enabled = True
                                            bspb9.Load()
                                        Case 9
                                            bspb10.ImageLocation = sname.ToString
                                            bspb10.Enabled = True
                                            bspb10.Load()
                                        Case 10
                                            bspb11.ImageLocation = sname.ToString
                                            bspb11.Enabled = True
                                            bspb11.Load()
                                        Case 11
                                            bspb12.ImageLocation = sname.ToString
                                            bspb12.Enabled = True
                                            bspb12.Load()
                                        Case 12
                                            bspb13.ImageLocation = sname.ToString
                                            bspb13.Enabled = True
                                            bspb13.Load()
                                        Case 13
                                            bspb14.ImageLocation = sname.ToString
                                            bspb14.Enabled = True
                                            bspb14.Load()
                                        Case 14
                                            bspb15.ImageLocation = sname.ToString
                                            bspb15.Enabled = True
                                            bspb15.Load()
                                        Case 15
                                            bspb16.ImageLocation = sname.ToString
                                            bspb16.Enabled = True
                                            bspb16.Load()
                                        Case 16
                                            bspb17.ImageLocation = sname.ToString
                                            bspb17.Enabled = True
                                            bspb17.Load()
                                        Case 17
                                            bspb18.ImageLocation = sname.ToString
                                            bspb18.Enabled = True
                                            bspb18.Load()
                                        Case 18
                                            bspb19.ImageLocation = sname.ToString
                                            bspb19.Enabled = True
                                            bspb19.Load()
                                        Case 19
                                            bspb20.ImageLocation = sname.ToString
                                            bspb20.Enabled = True
                                            bspb20.Load()
                                        Case 20
                                            bspb21.ImageLocation = sname.ToString
                                            bspb21.Enabled = True
                                            bspb21.Load()
                                        Case 21
                                            bspb22.ImageLocation = sname.ToString
                                            bspb22.Enabled = True
                                            bspb22.Load()
                                        Case 22
                                            bspb23.ImageLocation = sname.ToString
                                            bspb23.Enabled = True
                                            bspb23.Load()
                                        Case 23
                                            bspb24.ImageLocation = sname.ToString
                                            bspb24.Enabled = True
                                            bspb24.Load()
                                        Case 24
                                            bspb25.ImageLocation = sname.ToString
                                            bspb25.Enabled = True
                                            bspb25.Load()
                                        Case 25
                                            bspb26.ImageLocation = sname.ToString
                                            bspb26.Enabled = True
                                            bspb26.Load()
                                        Case 26
                                            bspb27.ImageLocation = sname.ToString
                                            bspb27.Enabled = True
                                            bspb27.Load()
                                        Case 27
                                            bspb28.ImageLocation = sname.ToString
                                            bspb28.Enabled = True
                                            bspb28.Load()
                                        Case 28
                                            bspb29.ImageLocation = sname.ToString
                                            bspb29.Enabled = True
                                            bspb29.Load()
                                        Case 29
                                            bspb30.ImageLocation = sname.ToString
                                            bspb30.Enabled = True
                                            bspb30.Load()
                                        Case 30
                                            bspb31.ImageLocation = sname.ToString
                                            bspb31.Enabled = True
                                            bspb31.Load()
                                        Case 31
                                            bspb32.ImageLocation = sname.ToString
                                            bspb32.Enabled = True
                                            bspb32.Load()
                                        Case 32
                                            bspb33.ImageLocation = sname.ToString
                                            bspb33.Enabled = True
                                            bspb33.Load()
                                        Case 33
                                            bspb34.ImageLocation = sname.ToString
                                            bspb34.Enabled = True
                                            bspb34.Load()
                                        Case 34
                                            bspb35.ImageLocation = sname.ToString
                                            bspb35.Enabled = True
                                            bspb35.Load()
                                        Case 35
                                            bspb36.ImageLocation = sname.ToString
                                            bspb36.Enabled = True
                                            bspb36.Load()
                                        Case 36
                                            bspb37.ImageLocation = sname.ToString
                                            bspb37.Enabled = True
                                            bspb37.Load()
                                        Case 37
                                            bspb38.ImageLocation = sname.ToString
                                            bspb38.Enabled = True
                                            bspb38.Load()
                                        Case 38
                                            bspb39.ImageLocation = sname.ToString
                                            bspb39.Enabled = True
                                            bspb39.Load()
                                        Case 39
                                            bspb40.ImageLocation = sname.ToString
                                            bspb40.Enabled = True
                                            bspb40.Load()
                                        Case 40
                                            bspb41.ImageLocation = sname.ToString
                                            bspb41.Enabled = True
                                            bspb41.Load()
                                        Case 41
                                            bspb42.ImageLocation = sname.ToString
                                            bspb42.Enabled = True
                                            bspb42.Load()
                                        Case 42
                                            bspb43.ImageLocation = sname.ToString
                                            bspb43.Enabled = True
                                            bspb43.Load()
                                        Case 43
                                            bspb44.ImageLocation = sname.ToString
                                            bspb44.Enabled = True
                                            bspb44.Load()
                                        Case 44
                                            bspb45.ImageLocation = sname.ToString
                                            bspb45.Enabled = True
                                            bspb45.Load()
                                        Case 45
                                            bspb46.ImageLocation = sname.ToString
                                            bspb46.Enabled = True
                                            bspb46.Load()
                                        Case 46
                                            bspb47.ImageLocation = sname.ToString
                                            bspb47.Enabled = True
                                            bspb47.Load()
                                        Case 47
                                            bspb48.ImageLocation = sname.ToString
                                            bspb48.Enabled = True
                                            bspb48.Load()
                                        Case 48
                                            bspb49.ImageLocation = sname.ToString
                                            bspb49.Enabled = True
                                            bspb49.Load()
                                        Case 49
                                            bspb50.ImageLocation = sname.ToString
                                            bspb50.Enabled = True
                                            bspb50.Load()
                                        Case 50
                                            bspb51.ImageLocation = sname.ToString
                                            bspb51.Enabled = True
                                            bspb51.Load()
                                        Case 51
                                            bspb52.ImageLocation = sname.ToString
                                            bspb52.Enabled = True
                                            bspb52.Load()
                                        Case 52
                                            bspb53.ImageLocation = sname.ToString
                                            bspb53.Enabled = True
                                            bspb53.Load()
                                        Case 53
                                            bspb54.ImageLocation = sname.ToString
                                            bspb54.Enabled = True
                                            bspb54.Load()
                                        Case 54
                                            bspb55.ImageLocation = sname.ToString
                                            bspb55.Enabled = True
                                            bspb55.Load()
                                        Case 55
                                            bspb56.ImageLocation = sname.ToString
                                            bspb56.Enabled = True
                                            bspb56.Load()
                                        Case 56
                                            bspb57.ImageLocation = sname.ToString
                                            bspb57.Enabled = True
                                            bspb57.Load()
                                        Case 57
                                            bspb58.ImageLocation = sname.ToString
                                            bspb58.Enabled = True
                                            bspb58.Load()
                                        Case 58
                                            bspb59.ImageLocation = sname.ToString
                                            bspb59.Enabled = True
                                            bspb59.Load()
                                        Case 59
                                            bspb60.ImageLocation = sname.ToString
                                            bspb60.Enabled = True
                                            bspb60.Load()
                                        Case 60
                                            bspb61.ImageLocation = sname.ToString
                                            bspb61.Enabled = True
                                            bspb61.Load()
                                        Case 61
                                            bspb62.ImageLocation = sname.ToString
                                            bspb62.Enabled = True
                                            bspb62.Load()
                                        Case 62
                                            bspb63.ImageLocation = sname.ToString
                                            bspb63.Enabled = True
                                            bspb63.Load()
                                        Case 63
                                            bspb64.ImageLocation = sname.ToString
                                            bspb64.Enabled = True
                                            bspb64.Load()
                                        Case 64
                                            bspb65.ImageLocation = sname.ToString
                                            bspb65.Enabled = True
                                            bspb65.Load()
                                        Case 65
                                            bspb66.ImageLocation = sname.ToString
                                            bspb66.Enabled = True
                                            bspb66.Load()
                                        Case 66
                                            bspb67.ImageLocation = sname.ToString
                                            bspb67.Enabled = True
                                            bspb67.Load()
                                        Case 67
                                            bspb68.ImageLocation = sname.ToString
                                            bspb68.Enabled = True
                                            bspb68.Load()
                                        Case 68
                                            bspb69.ImageLocation = sname.ToString
                                            bspb69.Enabled = True
                                            bspb69.Load()
                                        Case 69
                                            bspb70.ImageLocation = sname.ToString
                                            bspb70.Enabled = True
                                            bspb70.Load()
                                        Case 70
                                            bspb71.ImageLocation = sname.ToString
                                            bspb71.Enabled = True
                                            bspb71.Load()
                                        Case 71
                                            bspb72.ImageLocation = sname.ToString
                                            bspb72.Enabled = True
                                            bspb72.Load()
                                        Case 72
                                            bspb73.ImageLocation = sname.ToString
                                            bspb73.Enabled = True
                                            bspb73.Load()
                                        Case 73
                                            bspb74.ImageLocation = sname.ToString
                                            bspb74.Enabled = True
                                            bspb74.Load()
                                        Case 74
                                            bspb75.ImageLocation = sname.ToString
                                            bspb75.Enabled = True
                                            bspb75.Load()
                                        Case 75
                                            bspb76.ImageLocation = sname.ToString
                                            bspb76.Enabled = True
                                            bspb76.Load()
                                        Case 76
                                            bspb77.ImageLocation = sname.ToString
                                            bspb77.Enabled = True
                                            bspb77.Load()
                                        Case 77
                                            bspb78.ImageLocation = sname.ToString
                                            bspb78.Enabled = True
                                            bspb78.Load()
                                        Case 78
                                            bspb79.ImageLocation = sname.ToString
                                            bspb79.Enabled = True
                                            bspb79.Load()
                                        Case 79
                                            bspb80.ImageLocation = sname.ToString
                                            bspb80.Enabled = True
                                            bspb80.Load()
                                        Case 80
                                            bspb81.ImageLocation = sname.ToString
                                            bspb81.Enabled = True
                                            bspb81.Load()
                                        Case 81
                                            bspb82.ImageLocation = sname.ToString
                                            bspb82.Enabled = True
                                            bspb82.Load()
                                        Case 82
                                            bspb83.ImageLocation = sname.ToString
                                            bspb83.Enabled = True
                                            bspb83.Load()
                                        Case 83
                                            bspb84.ImageLocation = sname.ToString
                                            bspb84.Enabled = True
                                            bspb84.Load()
                                        Case 84
                                            bspb85.ImageLocation = sname.ToString
                                            bspb85.Enabled = True
                                            bspb85.Load()
                                        Case 85
                                            bspb86.ImageLocation = sname.ToString
                                            bspb86.Enabled = True
                                            bspb86.Load()
                                        Case 86
                                            bspb87.ImageLocation = sname.ToString
                                            bspb87.Enabled = True
                                            bspb87.Load()
                                        Case 87
                                            bspb88.ImageLocation = sname.ToString
                                            bspb88.Enabled = True
                                            bspb88.Load()
                                        Case 88
                                            bspb89.ImageLocation = sname.ToString
                                            bspb89.Enabled = True
                                            bspb89.Load()
                                        Case 89
                                            bspb90.ImageLocation = sname.ToString
                                            bspb90.Enabled = True
                                            bspb90.Load()
                                        Case 90
                                            bspb91.ImageLocation = sname.ToString
                                            bspb91.Enabled = True
                                            bspb91.Load()
                                        Case 91
                                            bspb92.ImageLocation = sname.ToString
                                            bspb92.Enabled = True
                                            bspb92.Load()
                                        Case 92
                                            bspb93.ImageLocation = sname.ToString
                                            bspb93.Enabled = True
                                            bspb93.Load()
                                            'Case 3
                                            '    bspb4.ImageLocation = sname.ToString
                                            '    bspb4.Enabled = True
                                            '    bspb4.Load()
                                            'Case 4
                                            '    bspb5.ImageLocation = sname.ToString
                                            '    bspb5.Enabled = True
                                            '    bspb5.Load()
                                            'Case 5
                                            '    bspb6.ImageLocation = sname.ToString
                                            '    bspb6.Enabled = True
                                            '    bspb6.Load()
                                            'Case 6
                                            '    bspb7.ImageLocation = sname.ToString
                                            '    bspb7.Enabled = True
                                            '    bspb7.Load()
                                            'Case 7
                                            '    bspb8.ImageLocation = sname.ToString
                                            '    bspb8.Enabled = True
                                            '    bspb8.Load()
                                            'Case 8
                                            '    bspb9.ImageLocation = sname.ToString
                                            '    bspb9.Enabled = True
                                            '    bspb9.Load()
                                            'Case 9
                                            '    bspb10.ImageLocation = sname.ToString
                                            '    bspb10.Enabled = True
                                            '    bspb10.Load()
                                        Case Else
                                            Debug.WriteLine("tited box shot square image out of bounds")
                                    End Select
                                ElseIf style = "9" Then
                                    'style 9 token
                                    Select Case counter
                                        Case 0
                                            tpb1.ImageLocation = sname.ToString
                                            tpb1.Enabled = True
                                            tpb1.Load()
                                        Case 1
                                            tpb2.ImageLocation = sname.ToString
                                            tpb2.Enabled = True
                                            tpb2.Load()
                                        Case 2
                                            tpb3.ImageLocation = sname.ToString
                                            tpb3.Enabled = True
                                            tpb3.Load()
                                        Case 3
                                            tpb4.ImageLocation = sname.ToString
                                            tpb4.Enabled = True
                                            tpb4.Load()
                                        Case 4
                                            tpb5.ImageLocation = sname.ToString
                                            tpb5.Enabled = True
                                            tpb5.Load()
                                        Case 5
                                            tpb6.ImageLocation = sname.ToString
                                            tpb6.Enabled = True
                                            tpb6.Load()
                                        Case 6
                                            tpb7.ImageLocation = sname.ToString
                                            tpb7.Enabled = True
                                            tpb7.Load()
                                        Case 7
                                            tpb8.ImageLocation = sname.ToString
                                            tpb8.Enabled = True
                                            tpb8.Load()
                                        Case 8
                                            tpb9.ImageLocation = sname.ToString
                                            tpb9.Enabled = True
                                            tpb9.Load()
                                        Case 9
                                            tpb10.ImageLocation = sname.ToString
                                            tpb10.Enabled = True
                                            tpb10.Load()
                                        Case 10
                                            tpb11.ImageLocation = sname.ToString
                                            tpb11.Enabled = True
                                            tpb11.Load()
                                        Case 11
                                            tpb12.ImageLocation = sname.ToString
                                            tpb12.Enabled = True
                                            tpb12.Load()
                                            'Case 12
                                            '    tpb13.ImageLocation = sname.ToString
                                            '    tpb13.Enabled = True
                                            'Case 13
                                            '    tpb14.ImageLocation = sname.ToString
                                            '    tpb14.Enabled = True
                                            'Case 14
                                            '    tpb15.ImageLocation = sname.ToString
                                            '    tpb15.Enabled = True
                                            'Case 15
                                            '    tpb16.ImageLocation = sname.ToString
                                            '    tpb16.Enabled = True
                                            'Case 16
                                            '    tpb17.ImageLocation = sname.ToString
                                            '    tpb17.Enabled = True
                                            'Case 17
                                            '    tpb18.ImageLocation = sname.ToString
                                            '    tpb18.Enabled = True
                                            'Case 18
                                            '    tpb19.ImageLocation = sname.ToString
                                            '    tpb19.Enabled = True
                                            'Case 19
                                            '    tpb20.ImageLocation = sname.ToString
                                            '    tpb20.Enabled = True
                                            'Case 20
                                            '    tpb21.ImageLocation = sname.ToString
                                            '    tpb21.Enabled = True
                                            'Case 21
                                            '    tpb22.ImageLocation = sname.ToString
                                            '    tpb22.Enabled = True
                                            'Case 22
                                            '    tpb23.ImageLocation = sname.ToString
                                            '    tpb23.Enabled = True
                                            'Case 23
                                            '    tpb24.ImageLocation = sname.ToString
                                            '    tpb24.Enabled = True
                                        Case Else
                                            Debug.WriteLine("token image out of bounds")
                                    End Select
                                End If
                            ElseIf format = "2" Then
                                'wide
                                '<style key="0" name="(No Style)" format="2" desc="No style specified.  An icon with no style will support dynamic styles."/>
                                If style = "0" Then
                                    Select Case counter
                                        Case 0
                                            pbwns1.ImageLocation = sname.ToString
                                            pbwns1.Enabled = True
                                            pbwns1.Load()
                                        Case 1
                                            pbwns2.ImageLocation = sname.ToString
                                            pbwns2.Enabled = True
                                            pbwns2.Load()
                                        Case 2
                                            pbwns3.ImageLocation = sname.ToString
                                            pbwns3.Enabled = True
                                            pbwns3.Load()
                                        Case 3
                                            pbwns4.ImageLocation = sname.ToString
                                            pbwns4.Enabled = True
                                            pbwns4.Load()
                                        Case 4
                                            pbwns5.ImageLocation = sname.ToString
                                            pbwns5.Enabled = True
                                            pbwns5.Load()
                                        Case 5
                                            pbwns6.ImageLocation = sname.ToString
                                            pbwns6.Enabled = True
                                            pbwns6.Load()
                                        Case 6
                                            pbwns7.ImageLocation = sname.ToString
                                            pbwns7.Enabled = True
                                            pbwns7.Load()
                                        Case 7
                                            pbwns8.ImageLocation = sname.ToString
                                            pbwns8.Enabled = True
                                            pbwns8.Load()
                                        Case 8
                                            pbwns9.ImageLocation = sname.ToString
                                            pbwns9.Enabled = True
                                            pbwns9.Load()
                                        Case 9
                                            pbwns10.ImageLocation = sname.ToString
                                            pbwns10.Enabled = True
                                            pbwns10.Load()
                                        Case 10
                                            pbwns11.ImageLocation = sname.ToString
                                            pbwns11.Enabled = True
                                            pbwns11.Load()
                                        Case 11
                                            pbwns12.ImageLocation = sname.ToString
                                            pbwns12.Enabled = True
                                            pbwns12.Load()
                                        Case 12
                                            pbwns13.ImageLocation = sname.ToString
                                            pbwns13.Enabled = True
                                            pbwns13.Load()
                                        Case 13
                                            pbwns14.ImageLocation = sname.ToString
                                            pbwns14.Enabled = True
                                            pbwns14.Load()
                                        Case 14
                                            pbwns15.ImageLocation = sname.ToString
                                            pbwns15.Enabled = True
                                            pbwns15.Load()
                                        Case 15
                                            pbwns16.ImageLocation = sname.ToString
                                            pbwns16.Enabled = True
                                            pbwns16.Load()
                                        Case 16
                                            pbwns17.ImageLocation = sname.ToString
                                            pbwns17.Enabled = True
                                            pbwns17.Load()
                                        Case 17
                                            pbwns18.ImageLocation = sname.ToString
                                            pbwns18.Enabled = True
                                            pbwns18.Load()
                                        Case 18
                                            pbwns19.ImageLocation = sname.ToString
                                            pbwns19.Enabled = True
                                            pbwns19.Load()
                                        Case 19
                                            pbwns20.ImageLocation = sname.ToString
                                            pbwns20.Enabled = True
                                            pbwns20.Load()
                                        Case 20
                                            pbwns21.ImageLocation = sname.ToString
                                            pbwns21.Enabled = True
                                            pbwns21.Load()
                                        Case 21
                                            pbwns22.ImageLocation = sname.ToString
                                            pbwns22.Enabled = True
                                            pbwns22.Load()
                                        Case 22
                                            pbwns23.ImageLocation = sname.ToString
                                            pbwns23.Enabled = True
                                            pbwns23.Load()
                                        Case 23
                                            pbwns24.ImageLocation = sname.ToString
                                            pbwns24.Enabled = True
                                            pbwns24.Load()
                                        Case 24
                                            pbwns25.ImageLocation = sname.ToString
                                            pbwns25.Enabled = True
                                        Case 25
                                            pbwns26.ImageLocation = sname.ToString
                                            pbwns26.Enabled = True
                                        Case 26
                                            pbwns27.ImageLocation = sname.ToString
                                            pbwns27.Enabled = True
                                        Case 27
                                            pbwns28.ImageLocation = sname.ToString
                                            pbwns28.Enabled = True
                                        Case 28
                                            pbwns29.ImageLocation = sname.ToString
                                            pbwns29.Enabled = True
                                        Case 29
                                            pbwns30.ImageLocation = sname.ToString
                                            pbwns30.Enabled = True
                                        Case 30
                                            pbwns31.ImageLocation = sname.ToString
                                            pbwns31.Enabled = True
                                        Case 31
                                            pbwns32.ImageLocation = sname.ToString
                                            pbwns32.Enabled = True
                                        Case 32
                                            pbwns33.ImageLocation = sname.ToString
                                            pbwns33.Enabled = True
                                        Case 33
                                            pbwns34.ImageLocation = sname.ToString
                                            pbwns34.Enabled = True
                                        Case 34
                                            pbwns35.ImageLocation = sname.ToString
                                            pbwns35.Enabled = True
                                        Case 35
                                            pbwns36.ImageLocation = sname.ToString
                                            pbwns36.Enabled = True
                                        Case Else
                                            Debug.WriteLine("wide no style out of set bounds")
                                    End Select
                                    '<style key="2" name="Rounded + Shadow + Scanlines" format="2" desc="This style has rounded corners, a shadow, and scanlines."/>
                                ElseIf style = "8" Then
                                    Select Case counter
                                        Case 0
                                            pbwrs1.ImageLocation = sname.ToString
                                            pbwrs1.Enabled = True
                                            pbwrs1.Load()
                                        Case 1
                                            pbwrs2.ImageLocation = sname.ToString
                                            pbwrs2.Enabled = True
                                            pbwrs2.Load()
                                        Case 2
                                            pbwrs3.ImageLocation = sname.ToString
                                            pbwrs3.Enabled = True
                                            pbwrs3.Load()
                                        Case 3
                                            pbwrs4.ImageLocation = sname.ToString
                                            pbwrs4.Enabled = True
                                            pbwrs4.Load()
                                        Case 4
                                            pbwrs5.ImageLocation = sname.ToString
                                            pbwrs5.Enabled = True
                                            pbwrs5.Load()
                                        Case 5
                                            pbwrs6.ImageLocation = sname.ToString
                                            pbwrs6.Enabled = True
                                            pbwrs6.Load()
                                        Case 6
                                            pbwrs7.ImageLocation = sname.ToString
                                            pbwrs7.Enabled = True
                                            pbwrs7.Load()
                                        Case 7
                                            pbwrs8.ImageLocation = sname.ToString
                                            pbwrs8.Enabled = True
                                            pbwrs8.Load()
                                        Case 8
                                            pbwrs9.ImageLocation = sname.ToString
                                            pbwrs9.Enabled = True
                                            pbwrs9.Load()
                                        Case 9
                                            pbwrs10.ImageLocation = sname.ToString
                                            pbwrs10.Enabled = True
                                            pbwrs10.Load()
                                        Case 10
                                            pbwrs11.ImageLocation = sname.ToString
                                            pbwrs11.Enabled = True
                                            pbwrs11.Load()
                                        Case 11
                                            pbwrs12.ImageLocation = sname.ToString
                                            pbwrs12.Enabled = True
                                            pbwrs12.Load()
                                        Case 12
                                            pbwrs13.ImageLocation = sname.ToString
                                            pbwrs13.Enabled = True
                                            pbwrs13.Load()
                                        Case 13
                                            pbwrs14.ImageLocation = sname.ToString
                                            pbwrs14.Enabled = True
                                            pbwrs14.Load()
                                        Case 14
                                            pbwrs15.ImageLocation = sname.ToString
                                            pbwrs15.Enabled = True
                                            pbwrs15.Load()
                                        Case 15
                                            pbwrs16.ImageLocation = sname.ToString
                                            pbwrs16.Enabled = True
                                            pbwrs16.Load()
                                        Case 16
                                            pbwrs17.ImageLocation = sname.ToString
                                            pbwrs17.Enabled = True
                                            pbwrs17.Load()
                                        Case 17
                                            pbwrs18.ImageLocation = sname.ToString
                                            pbwrs18.Enabled = True
                                            pbwrs18.Load()
                                        Case 18
                                            pbwrs19.ImageLocation = sname.ToString
                                            pbwrs19.Enabled = True
                                            pbwrs19.Load()
                                        Case 19
                                            pbwrs20.ImageLocation = sname.ToString
                                            pbwrs20.Enabled = True
                                            pbwrs20.Load()
                                        Case 20
                                            pbwrs21.ImageLocation = sname.ToString
                                            pbwrs21.Enabled = True
                                            pbwrs21.Load()
                                        Case 21
                                            pbwrs22.ImageLocation = sname.ToString
                                            pbwrs22.Enabled = True
                                            pbwrs22.Load()
                                        Case 22
                                            pbwrs23.ImageLocation = sname.ToString
                                            pbwrs23.Enabled = True
                                            pbwrs23.Load()
                                        Case 23
                                            pbwrs24.ImageLocation = sname.ToString
                                            pbwrs24.Enabled = True
                                            pbwrs24.Load()
                                        Case 24
                                            pbwrs25.ImageLocation = sname.ToString
                                            pbwrs25.Enabled = True
                                        Case 25
                                            pbwrs26.ImageLocation = sname.ToString
                                            pbwrs26.Enabled = True
                                        Case 26
                                            pbwrs27.ImageLocation = sname.ToString
                                            pbwrs27.Enabled = True
                                        Case 27
                                            pbwrs28.ImageLocation = sname.ToString
                                            pbwrs28.Enabled = True
                                        Case 28
                                            pbwrs29.ImageLocation = sname.ToString
                                            pbwrs29.Enabled = True
                                        Case 29
                                            pbwrs30.ImageLocation = sname.ToString
                                            pbwrs30.Enabled = True
                                        Case 30
                                            pbwrs31.ImageLocation = sname.ToString
                                            pbwrs31.Enabled = True
                                        Case 31
                                            pbwrs32.ImageLocation = sname.ToString
                                            pbwrs32.Enabled = True
                                        Case 32
                                            pbwrs33.ImageLocation = sname.ToString
                                            pbwrs33.Enabled = True
                                        Case 33
                                            pbwrs34.ImageLocation = sname.ToString
                                            pbwrs34.Enabled = True
                                        Case 34
                                            pbwrs35.ImageLocation = sname.ToString
                                            pbwrs35.Enabled = True
                                        Case 35
                                            pbwrs36.ImageLocation = sname.ToString
                                            pbwrs36.Enabled = True
                                        Case Else
                                            Debug.WriteLine("wide no style out of set bounds")
                                    End Select
                                    '<style key="8" name="Rounded + Shadow" format="2" desc="This style has rounded corners and a shadow."/>
                                ElseIf style = "2" Then 'note it's style 2
                                    Select Case counter
                                        Case 0
                                            pbwrsscan1.ImageLocation = sname.ToString
                                            pbwrsscan1.Enabled = True
                                            pbwrsscan1.Load()
                                        Case 1
                                            pbwrsscan2.ImageLocation = sname.ToString
                                            pbwrsscan2.Enabled = True
                                            pbwrsscan2.Load()
                                        Case 2
                                            pbwrsscan3.ImageLocation = sname.ToString
                                            pbwrsscan3.Enabled = True
                                            pbwrsscan3.Load()
                                        Case 3
                                            pbwrsscan4.ImageLocation = sname.ToString
                                            pbwrsscan4.Enabled = True
                                            pbwrsscan4.Load()
                                        Case 4
                                            pbwrsscan5.ImageLocation = sname.ToString
                                            pbwrsscan5.Enabled = True
                                            pbwrsscan5.Load()
                                        Case 5
                                            pbwrsscan6.ImageLocation = sname.ToString
                                            pbwrsscan6.Enabled = True
                                            pbwrsscan6.Load()
                                        Case 6
                                            pbwrsscan7.ImageLocation = sname.ToString
                                            pbwrsscan7.Enabled = True
                                            pbwrsscan7.Load()
                                        Case 7
                                            pbwrsscan8.ImageLocation = sname.ToString
                                            pbwrsscan8.Enabled = True
                                            pbwrsscan8.Load()
                                        Case 8
                                            pbwrsscan9.ImageLocation = sname.ToString
                                            pbwrsscan9.Enabled = True
                                            pbwrsscan9.Load()
                                        Case 9
                                            pbwrsscan10.ImageLocation = sname.ToString
                                            pbwrsscan10.Enabled = True
                                            pbwrsscan10.Load()
                                        Case 10
                                            pbwrsscan11.ImageLocation = sname.ToString
                                            pbwrsscan11.Enabled = True
                                            pbwrsscan11.Load()
                                        Case 11
                                            pbwrsscan12.ImageLocation = sname.ToString
                                            pbwrsscan12.Enabled = True
                                            pbwrsscan12.Load()
                                        Case 12
                                            pbwrsscan13.ImageLocation = sname.ToString
                                            pbwrsscan13.Enabled = True
                                            pbwrsscan13.Load()
                                        Case 13
                                            pbwrsscan14.ImageLocation = sname.ToString
                                            pbwrsscan14.Enabled = True
                                            pbwrsscan14.Load()
                                        Case 14
                                            pbwrsscan15.ImageLocation = sname.ToString
                                            pbwrsscan15.Enabled = True
                                            pbwrsscan15.Load()
                                        Case 15
                                            pbwrsscan16.ImageLocation = sname.ToString
                                            pbwrsscan16.Enabled = True
                                            pbwrsscan16.Load()
                                        Case 16
                                            pbwrsscan17.ImageLocation = sname.ToString
                                            pbwrsscan17.Enabled = True
                                            pbwrsscan17.Load()
                                        Case 17
                                            pbwrsscan18.ImageLocation = sname.ToString
                                            pbwrsscan18.Enabled = True
                                            pbwrsscan18.Load()
                                        Case 18
                                            pbwrsscan19.ImageLocation = sname.ToString
                                            pbwrsscan19.Enabled = True
                                            pbwrsscan19.Load()
                                        Case 19
                                            pbwrsscan20.ImageLocation = sname.ToString
                                            pbwrsscan20.Enabled = True
                                            pbwrsscan20.Load()
                                        Case 20
                                            pbwrsscan21.ImageLocation = sname.ToString
                                            pbwrsscan21.Enabled = True
                                            pbwrsscan21.Load()
                                        Case 21
                                            pbwrsscan22.ImageLocation = sname.ToString
                                            pbwrsscan22.Enabled = True
                                            pbwrsscan22.Load()
                                        Case 22
                                            pbwrsscan23.ImageLocation = sname.ToString
                                            pbwrsscan23.Enabled = True
                                            pbwrsscan23.Load()
                                        Case 23
                                            pbwrsscan24.ImageLocation = sname.ToString
                                            pbwrsscan24.Enabled = True
                                            pbwrsscan24.Load()
                                        Case 24
                                            pbwrsscan25.ImageLocation = sname.ToString
                                            pbwrsscan25.Enabled = True
                                        Case 25
                                            pbwrsscan26.ImageLocation = sname.ToString
                                            pbwrsscan26.Enabled = True
                                        Case 26
                                            pbwrsscan27.ImageLocation = sname.ToString
                                            pbwrsscan27.Enabled = True
                                        Case 27
                                            pbwrsscan28.ImageLocation = sname.ToString
                                            pbwrsscan28.Enabled = True
                                        Case 28
                                            pbwrsscan29.ImageLocation = sname.ToString
                                            pbwrsscan29.Enabled = True
                                        Case 29
                                            pbwrsscan30.ImageLocation = sname.ToString
                                            pbwrsscan30.Enabled = True
                                        Case 30
                                            pbwrsscan31.ImageLocation = sname.ToString
                                            pbwrsscan31.Enabled = True
                                        Case 31
                                            pbwrsscan32.ImageLocation = sname.ToString
                                            pbwrsscan32.Enabled = True
                                        Case 32
                                            pbwrsscan33.ImageLocation = sname.ToString
                                            pbwrsscan33.Enabled = True
                                        Case 33
                                            pbwrsscan34.ImageLocation = sname.ToString
                                            pbwrsscan34.Enabled = True
                                        Case 34
                                            pbwrsscan35.ImageLocation = sname.ToString
                                            pbwrsscan35.Enabled = True
                                        Case 35
                                            pbwrsscan36.ImageLocation = sname.ToString
                                            pbwrsscan36.Enabled = True
                                        Case Else
                                            Debug.WriteLine("wide shadow scanline style out of set bounds")
                                    End Select
                                    '<style key="10" name="Rounded + Shadow + Glass" format="2" desc="This style has a glassy look to it with rounded corners and a shadow."/>
                                ElseIf style = "10" Then
                                    Select Case counter
                                        Case 0
                                            pb1.ImageLocation = sname.ToString
                                            pb1.Enabled = True
                                            pb1.Load()
                                        Case 1
                                            pb2.ImageLocation = sname.ToString
                                            pb2.Enabled = True
                                            pb2.Load()
                                        Case 2
                                            pb3.ImageLocation = sname.ToString
                                            pb3.Enabled = True
                                            pb3.Load()
                                        Case 3
                                            pb4.ImageLocation = sname.ToString
                                            pb4.Enabled = True
                                            pb4.Load()
                                        Case 4
                                            pb5.ImageLocation = sname.ToString
                                            pb5.Enabled = True
                                            pb5.Load()
                                        Case 5
                                            pb6.ImageLocation = sname.ToString
                                            pb6.Enabled = True
                                            pb6.Load()
                                        Case 6
                                            pb7.ImageLocation = sname.ToString
                                            pb7.Enabled = True
                                            pb7.Load()
                                        Case 7
                                            pb8.ImageLocation = sname.ToString
                                            pb8.Enabled = True
                                            pb8.Load()
                                        Case 8
                                            pb9.ImageLocation = sname.ToString
                                            pb9.Enabled = True
                                            pb9.Load()
                                        Case 9
                                            pb10.ImageLocation = sname.ToString
                                            pb10.Enabled = True
                                            pb10.Load()
                                        Case 10
                                            pb11.ImageLocation = sname.ToString
                                            pb11.Enabled = True
                                            pb11.Load()
                                        Case 11
                                            pb12.ImageLocation = sname.ToString
                                            pb12.Enabled = True
                                            pb12.Load()
                                        Case 12
                                            pb13.ImageLocation = sname.ToString
                                            pb13.Enabled = True
                                            pb13.Load()
                                        Case 13
                                            pb14.ImageLocation = sname.ToString
                                            pb14.Enabled = True
                                            pb14.Load()
                                        Case 14
                                            pb15.ImageLocation = sname.ToString
                                            pb15.Enabled = True
                                            pb15.Load()
                                        Case 15
                                            pb16.ImageLocation = sname.ToString
                                            pb16.Enabled = True
                                            pb16.Load()
                                        Case 16
                                            pb17.ImageLocation = sname.ToString
                                            pb17.Enabled = True
                                            pb17.Load()
                                        Case 17
                                            pb18.ImageLocation = sname.ToString
                                            pb18.Enabled = True
                                            pb18.Load()
                                        Case 18
                                            pb19.ImageLocation = sname.ToString
                                            pb19.Enabled = True
                                            pb19.Load()
                                        Case 19
                                            pb20.ImageLocation = sname.ToString
                                            pb20.Enabled = True
                                            pb20.Load()
                                        Case 20
                                            pb21.ImageLocation = sname.ToString
                                            pb21.Enabled = True
                                            pb21.Load()
                                        Case 21
                                            pb22.ImageLocation = sname.ToString
                                            pb22.Enabled = True
                                            pb22.Load()
                                        Case 22
                                            pb23.ImageLocation = sname.ToString
                                            pb23.Enabled = True
                                            pb23.Load()
                                        Case 23
                                            pb24.ImageLocation = sname.ToString
                                            pb24.Enabled = True
                                            pb24.Load()
                                        Case 24
                                            pb25.ImageLocation = sname.ToString
                                            pb25.Enabled = True
                                        Case 25
                                            pb26.ImageLocation = sname.ToString
                                            pb26.Enabled = True
                                        Case 26
                                            pb27.ImageLocation = sname.ToString
                                            pb27.Enabled = True
                                        Case 27
                                            pb28.ImageLocation = sname.ToString
                                            pb28.Enabled = True
                                        Case 28
                                            pb29.ImageLocation = sname.ToString
                                            pb29.Enabled = True
                                        Case 29
                                            pb30.ImageLocation = sname.ToString
                                            pb30.Enabled = True
                                        Case 30
                                            pb31.ImageLocation = sname.ToString
                                            pb31.Enabled = True
                                        Case 31
                                            pb32.ImageLocation = sname.ToString
                                            pb32.Enabled = True
                                        Case 32
                                            pb33.ImageLocation = sname.ToString
                                            pb33.Enabled = True
                                        Case 33
                                            pb34.ImageLocation = sname.ToString
                                            pb34.Enabled = True
                                        Case 34
                                            pb35.ImageLocation = sname.ToString
                                            pb35.Enabled = True
                                        Case 35
                                            pb36.ImageLocation = sname.ToString
                                            pb36.Enabled = True
                                        Case Else
                                            Debug.WriteLine("wide round shadow glass out of set bounds")
                                    End Select
                                End If

                            ElseIf format = "3" Then
                                'tall
                            ElseIf format = "070" Then 'broken busted ruptured torn or cut ;)
                                'removed in beta1 - rarely worked, users can run update for posters in gui now

                                ''movie poster - localally derived
                                'Debug.Print(" ------------------------------------------- ")
                                'Debug.Print(counter.ToString + " ----- " + sname.ToString)
                                'Debug.Print(" ------------------------------------------- ")
                                'Try

                                '    Select Case counter
                                '        Case 0
                                '            posterpb1.ImageLocation = sname.ToString
                                '            posterpb1.Enabled = True
                                '        Case 1
                                '            posterpb2.ImageLocation = sname.ToString
                                '            posterpb2.Enabled = True
                                '        Case 2
                                '            posterpb3.ImageLocation = sname.ToString
                                '            posterpb3.Enabled = True
                                '        Case 3
                                '            posterpb4.ImageLocation = sname.ToString
                                '            posterpb4.Enabled = True
                                '        Case 4
                                '            'remed in 1.4.8.23 for speed 'posterpb5.ImageLocation = sname.ToString
                                '            'remed in 1.4.8.23 for speed 'posterpb5.Enabled = True
                                '        Case 5
                                '            'remed in 1.4.8.23 for speed 'posterpb6.ImageLocation = sname.ToString
                                '            'remed in 1.4.8.23 for speed 'posterpb6.Enabled = True
                                '        Case 6
                                '            'remed in 1.4.8.23 for speed 'posterpb7.ImageLocation = sname.ToString
                                '            'remed in 1.4.8.23 for speed 'posterpb7.Enabled = True
                                '        Case 7
                                '            'remed in 1.4.8.23 for speed 'posterpb8.ImageLocation = sname.ToString
                                '            'remed in 1.4.8.23 for speed 'posterpb8.Enabled = True
                                '        Case Else
                                '            'do nothing
                                '    End Select

                                'Catch ex As Exception
                                '    Debug.Print("failed during case selection for poster")
                                'End Try
                            End If

                        Catch ex As Exception

                        End Try


                        'Dim curcase As String = "f" + format + "c" + catagory + "s" + style + "i" + counter.ToString
                        'Select Case curcase
                        '    Case f2c2s10c0
                        '        pb1.ImageLocation = sname.ToString
                        '        pb1.Enabled = True
                        '    Case 1
                        '        pb2.ImageLocation = sname.ToString
                        '        pb2.Enabled = True
                        '    Case 2
                        '        Debug.WriteLine("Equal to 9 or 10")
                        '    Case Else
                        '        Debug.WriteLine("Not between 1 and 10, inclusive")
                        'End Select
                        'If Not fromcache Then
                        '    If format = "070" Then
                        '        'SavePhotoFromUrl2(sname.ToString, checklocal)
                        '        'do nothing, too much latency and BS when this is attempted
                        '    Else
                        '        SavePhotoFromUrl(checklocal, sname.ToString)
                        '        Debug.Print("saving " + checklocal.ToString + " for url: " + sname.ToString)
                        '    End If

                        'End If

                    End If
                End If

                counter = counter + 1
                Debug.Print(counter.ToString)
                ' '' ''parse to med size wide
                ' '' ''  Debug.Print(counter.ToString)
                '' ''If counter = 0 Or counter <= (maxDisplayedIcons - 1) Then
                '' ''    If counter = 0 Then
                '' ''        pb1.ImageLocation = sname.ToString
                '' ''        pb1.Enabled = True
                '' ''    ElseIf counter = 1 Then
                '' ''        pb2.ImageLocation = sname.ToString
                '' ''        pb2.Enabled = True
                '' ''    ElseIf counter = 2 Then
                '' ''        pb3.ImageLocation = sname.ToString
                '' ''        pb3.Enabled = True
                '' ''    ElseIf counter = 3 Then
                '' ''        pb4.ImageLocation = sname.ToString
                '' ''        pb4.Enabled = True
                '' ''    ElseIf counter = 4 Then
                '' ''        pb5.ImageLocation = sname.ToString
                '' ''        pb5.Enabled = True
                '' ''    ElseIf counter = 5 Then
                '' ''        pb6.ImageLocation = sname.ToString
                '' ''        pb6.Enabled = True
                '' ''    ElseIf counter = 6 Then
                '' ''        pb7.ImageLocation = sname.ToString
                '' ''        pb7.Enabled = True
                '' ''    ElseIf counter = 7 Then
                '' ''        pb8.ImageLocation = sname.ToString
                '' ''        pb8.Enabled = True
                '' ''    ElseIf counter = 8 Then
                '' ''        pb9.ImageLocation = sname.ToString
                '' ''        pb9.Enabled = True
                '' ''    ElseIf counter = 9 Then
                '' ''        pb10.ImageLocation = sname.ToString
                '' ''        pb10.Enabled = True
                '' ''    ElseIf counter = 10 Then
                '' ''        pb11.ImageLocation = sname.ToString
                '' ''        pb11.Enabled = True
                '' ''    ElseIf counter = 11 Then
                '' ''        pb12.ImageLocation = sname.ToString
                '' ''        pb12.Enabled = True
                '' ''    ElseIf counter = 12 Then
                '' ''        pb13.ImageLocation = sname.ToString
                '' ''        pb13.Enabled = True
                '' ''    ElseIf counter = 13 Then
                '' ''        pb14.ImageLocation = sname.ToString
                '' ''        pb14.Enabled = True
                '' ''    ElseIf counter = 14 Then
                '' ''        pb15.ImageLocation = sname.ToString
                '' ''        pb15.Enabled = True
                '' ''    ElseIf counter = 15 Then
                '' ''        pb16.ImageLocation = sname.ToString
                '' ''        pb16.Enabled = True
                '' ''    ElseIf counter = 16 Then
                '' ''        pb17.ImageLocation = sname.ToString
                '' ''        pb17.Enabled = True
                '' ''    ElseIf counter = 17 Then
                '' ''        pb18.ImageLocation = sname.ToString
                '' ''        pb18.Enabled = True
                '' ''    ElseIf counter = 18 Then
                '' ''        pb19.ImageLocation = sname.ToString
                '' ''        pb19.Enabled = True
                '' ''    ElseIf counter = 19 Then
                '' ''        pb20.ImageLocation = sname.ToString
                '' ''        pb20.Enabled = True
                '' ''        'ElseIf counter = 20 Then
                '' ''        '    pb21.ImageLocation = sname.ToString
                '' ''        '    pb21.Enabled = True
                '' ''        'ElseIf counter = 21 Then
                '' ''        '    pb22.ImageLocation = sname.ToString
                '' ''        '    pb22.Enabled = True
                '' ''        'ElseIf counter = 22 Then
                '' ''        '    pb23.ImageLocation = sname.ToString
                '' ''        '    pb23.Enabled = True
                '' ''        'ElseIf counter = 23 Then
                '' ''        '    pb24.ImageLocation = sname.ToString
                '' ''        '    pb24.Enabled = True
                '' ''    End If


            Next

    End Sub
    Private Sub getimdbdata(ByRef curmovie As movie)
        If curmovie.getimdbid = "" Then
            Debug.Print("NO IMDB ID FOR THIS MOVIE")
            Debug.Print(" ------ " + curmovie.preservedmoviename + " ----- ")
            Exit Sub
        End If
        Debug.Print(curmovie.getmoviename + "  :IMDBID: " + curmovie.getimdbid)
        Dim imdbbaseinfopage As String = "http://www.imdb.com/title/"
        Dim s, s2 As String
        Dim searchstring As String = imdbbaseinfopage + curmovie.getimdbid + "/"
        Dim searchstring2 As String = imdbbaseinfopage + curmovie.getimdbid + "/synopsis"
        Try
            Dim request As HttpWebRequest = CType(WebRequest.Create(searchstring), HttpWebRequest)
            Dim response As HttpWebResponse = CType(request.GetResponse(), System.Net.HttpWebResponse)
            Using reader As StreamReader = New StreamReader(response.GetResponseStream())
                s = reader.ReadToEnd()
            End Using
            Me.tp3rtbimdbdata.Text = Convert.ToString(s) '.ToLower
        Catch ex As Exception

        End Try

        Dim plotoutline, mpaa, runtime As String
        Try
            Dim RegexObj3 As New Regex("<h5>Plot Outline:</h5>(?<plotoutline>.+?)(?:<a){1}?.*<div class=""info"">.{0,3}<h5><a href=""/mpaa"">MPAA</a>:</h5>(?<mpaa>.{0,3}.+?)</div>.{0,5}<div class=""info"">.{0,3}<h5>Parents.Guide:</h5>.{0,3}.+?</div>.{0,5}<div class=""info"">.{0,3}<h5>Runtime:</h5>(?<runtime>.+?)</div>", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline)
            plotoutline = RegexObj3.Match(Me.tp3rtbimdbdata.Text).Groups("plotoutline").Value
            mpaa = RegexObj3.Match(Me.tp3rtbimdbdata.Text).Groups("mpaa").Value
            runtime = RegexObj3.Match(Me.tp3rtbimdbdata.Text).Groups("runtime").Value

            curmovie.pmpaa = mpaa
            curmovie.pruntime = runtime
            curmovie.pplotoutline = plotoutline

            ' curmovie.set
        Catch ex As ArgumentException
            'Syntax error in the regular expression
        End Try
        Dim request2 As HttpWebRequest = CType(WebRequest.Create(searchstring2), HttpWebRequest)
        Dim response2 As HttpWebResponse = CType(request2.GetResponse(), System.Net.HttpWebResponse)
        Using reader2 As StreamReader = New StreamReader(response2.GetResponseStream())
            s2 = reader2.ReadToEnd()
        End Using
        ' Me.tp3rtbimdbdata.Text = Convert.ToString(s2) '.ToLower
        Dim plottext As String
        Try
            Dim RegexObj3 As New Regex("<div id=""swiki.2.1"">(?<plot>.+?)(</div>){1}?", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline)
            plottext = RegexObj3.Match(Convert.ToString(s2)).Groups("plot").Value
            curmovie.pplot = plottext
        Catch ex As Exception

        End Try
        curmovie.writeMovieXML(curmovie, rconf.xmlfolderimdb)
    End Sub
    Private Sub getimdbidsearchwithwget(ByRef tmovie As movie)
        'http://akas.imdb.com/find?s=all&q=blood+diamond&x=0&y=0
        Try
            Dim baseurlsiid As String = "http://akas.imdb.com/find?s=all&q=" + tmovie.pmoviename + "+&x=0&y=0"
            'Dim foundimdbid, retid, retyr As String
            Dim s As String
            'openpagedata
            wget(baseurlsiid, rconf.tempfolder, "getimdbidsearch", True)
            'Dim reader As New StreamReader(tempfolder + imdbid.ToString + "index.html")
            Dim pathtofile As String = rconf.tempfolder + "getimdbidsearch\index.html"
            s = File.ReadAllText(pathtofile)

            '            Dim request As HttpWebRequest = CType(WebRequest.Create(baseurlsiid), HttpWebRequest)
            'Dim response As HttpWebResponse = CType(request.GetResponse(), System.Net.HttpWebResponse)
            'Using reader As StreamReader = New StreamReader(response.GetResponseStream())
            's = reader.ReadToEnd()
            'End Using
            Me.tp3rtbimdbdata.Text = Convert.ToString(s) '.ToLower
            'searchit
            'Dim RegexObj As New Regex("<a href=""/title/(?<greturnedid>tt\d{5,9})/"">Blood Diamond</a>.{1,2}((?<gyear>\d{4}))")
            'tmovie.pimdbnumber = RegexObj.Match(s).Groups("gfilename").Value
            'tmovie.pyear = CInt(RegexObj.Match(s).Groups("gyear").Value)
            'foundimdbid = retyr + retid
            'Return (foundimdbid)
        Catch ex As Exception
            Debug.Print("Error getting IMDB data for " + tmovie.pmoviename + ".")
        End Try
    End Sub

    Private Sub nonono()
        '<a href=./url.sa=U&start=1&q=http://www.imdb.com/title/tt0000359/&usg=.*?" class=l>(.*?) \(\d{4}\)??</a>
        Dim id As Integer = 81500 'starting number
        Dim id2 As String = ""

        While id < 999999
            If id.ToString.Length = 1 Then
                id2 = "000000" + id.ToString
            ElseIf id.ToString.Length = 2 Then
                id2 = "00000" + id.ToString
            ElseIf id.ToString.Length = 3 Then
                id2 = "0000" + id.ToString
            ElseIf id.ToString.Length = 4 Then
                id2 = "000" + id.ToString
            ElseIf id.ToString.Length = 5 Then
                id2 = "00" + id.ToString
            ElseIf id.ToString.Length = 6 Then
                id2 = "0" + id.ToString
            ElseIf id.ToString.Length = 7 Then
                id2 = id.ToString
            End If
            If Convert.ToInt16(Strings.Right(id.ToString, 1)) = 1 Then
                wget("http://www.imdb.com/title/tt" + id2, rconf.tempfolder, "tt" + id2, True) '+ ".html")
            Else
                wget("http://www.imdb.com/title/tt" + id2, rconf.tempfolder, "tt" + id2, False) '+ ".html")
            End If
            id += 1
        End While

        'wget("http://209.85.173.104/search?q=cache:www.imdb.com/title/tt" + id2 + "/+http://www.imdb.com/title/tt" + id2 + "/&hl=en&ct=clnk&cd=1&gl=us&client=firefox-a", tempfolder, id2)

    End Sub
    Private Sub getthemoviedbbackdrop(ByRef timdbid As String, ByVal wait As Boolean, ByVal usewget As Boolean, ByVal overwritefile As Boolean)
        If Not File.Exists(rconf.xmlfoldertmdbbackdrops + timdbid + ".xml") Or overwritefile Then
            'if there is no file or overwrite is on, get the file and overwrite it

            If usewget Then
                Dim url As String = "http://api.themoviedb.org/backdrop.php?imdb=" + timdbid
                Dim folder As String = rconf.xmlfoldertmdbbackdrops '"c:\test\"
                Dim binfilelocal As String = rconf.wgetfolder + "wget.exe"

                Dim pro1 As System.Diagnostics.Process = New System.Diagnostics.Process()
                pro1.StartInfo.FileName = binfilelocal
                pro1.StartInfo.Arguments = """" + url + """" + " -O " + """" + folder + "\" + timdbid + ".xml" + """"
                pro1.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden

                pro1.Start()
                If wait Then pro1.WaitForExit()
            Else
                'use built in http method
                Try
                    Dim url As String = "http://api.themoviedb.org/backdrop.php?imdb=" + timdbid
                    Dim folder As String = rconf.xmlfoldertmdbbackdrops '"c:\test\"
                    Dim aWebRequest As WebRequest
                    aWebRequest = WebRequest.Create(url.ToLower)
                    Dim aHttpWebResponse As HttpWebResponse
                    aHttpWebResponse = CType(aWebRequest.GetResponse, HttpWebResponse)
                    Dim readStream As Stream
                    readStream = aHttpWebResponse.GetResponseStream
                    Dim buffer As Byte() = New Byte(3000000) {}
                    Try
                        Dim outStream As Stream = System.IO.File.Create(folder + timdbid + ".xml")
                        'executing_assembly.GetManifestResourceStream(my_namespace _
                        '+ ".wget.exe")
                        Dim l As Integer
                        Do
                            l = readStream.Read(buffer, 0, buffer.Length)
                            If l > 0 Then
                                outStream.Write(buffer, 0, l)
                            End If
                        Loop While l > 0
                        outStream.Close()
                        aHttpWebResponse.Close()
                        readStream.Close()
                    Catch ex As Exception
                        Debug.Print(ex.ToString)
                        aHttpWebResponse.Close()
                        readStream.Close()
                    End Try
                Catch ex1 As Exception
                    Debug.Print(ex1.ToString)
                End Try
            End If
        End If
    End Sub
    Private Sub wgetfolderjpg(ByRef url As String, ByRef folder As String, ByVal fullcmname As String, ByVal wait As Boolean)
        Dim binfilelocal As String = rconf.wgetfolder + "wget.exe"
        'Debug.Print(binfilelocal + url + " -P " + """" + folder + """")
        Dim pro1 As System.Diagnostics.Process = New System.Diagnostics.Process()
        pro1.StartInfo.FileName = binfilelocal
        pro1.StartInfo.Arguments = """" + url + """" + " -O " + """" + folder + "\" + fullcmname + """"
        pro1.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden
        pro1.Start()
        If wait Then pro1.WaitForExit()
        'System.Diagnostics.Process.Start(binfilelocal, url + " -P " + """" + folder + cou.ToString + """")
        'myProcess.WaitForExit()
    End Sub
    Private Sub wgetfanart(ByRef url As String, ByRef folder As String, ByVal wait As Boolean, ByRef tfanartfilename As String)
        'If wait Then
        '    dlgDownloadingFile.downloadertxtFileName.Text = url
        '    dlgDownloadingFile.whereToSave = folder + tfanartfilename
        '    dlgDownloadingFile.ShowDialog()
        'Else

        Dim binfilelocal As String = rconf.wgetfolder + "wget.exe"
        Dim pro1fa As System.Diagnostics.Process = New System.Diagnostics.Process()
        pro1fa.StartInfo.FileName = binfilelocal
        pro1fa.StartInfo.Arguments = """" + url + """" + " -O " + """" + folder + tfanartfilename + """"
        pro1fa.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden
        pro1fa.Start()
        If wait Then

        End If
        pro1fa.WaitForExit()
        'End If
        'System.Diagnostics.Process.Start(binfilelocal, url + " -P " + """" + folder + cou.ToString + """")
        'myProcess.WaitForExit()
    End Sub
    Private Sub wgetpostertmdb(ByRef url As String, ByRef folder As String, ByVal wait As Boolean, ByRef tposterfilename As String)
        'downloaderPanel.Visible = True
        'downloaderwhattosave = url
        'downloaderwhereToSave = folder + tposterfilename
        'downloadergo()
        'downloaderPanel.Visible = False
        'If wait Then
        '    dlgDownloadingFile.downloadertxtFileName.Text = url
        '    dlgDownloadingFile.whereToSave = folder + tposterfilename
        '    dlgDownloadingFile.ShowDialog()
        'Else
        Dim binfilelocal As String = rconf.wgetfolder + "wget.exe"
        Dim pro1fa As System.Diagnostics.Process = New System.Diagnostics.Process()
        pro1fa.StartInfo.FileName = binfilelocal
        pro1fa.StartInfo.Arguments = """" + url + """" + " -O " + """" + folder + tposterfilename + """"
        Debug.Print("folder: " + folder)
        Debug.Print("filename: " + tposterfilename)
        pro1fa.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden
        pro1fa.Start()
        If wait Then

        End If
        pro1fa.WaitForExit()
        'System.Diagnostics.Process.Start(binfilelocal, url + " -P " + """" + folder + cou.ToString + """")
        'myProcess.WaitForExit()
        'End If


        'Dim binfilelocal As String = rconf.wgetfolder + "wget.exe"
        'Dim pro1fa As System.Diagnostics.Process = New System.Diagnostics.Process()
        'pro1fa.StartInfo.FileName = binfilelocal
        'pro1fa.StartInfo.Arguments = """" + url + """" + " -O " + """" + folder + tposterfilename + """"
        'Debug.Print("folder: " + folder)
        'Debug.Print("filename: " + tposterfilename)
        'pro1fa.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden
        'pro1fa.Start()
        'If wait Then pro1fa.WaitForExit()
        'System.Diagnostics.Process.Start(binfilelocal, url + " -P " + """" + folder + cou.ToString + """")
        'myProcess.WaitForExit()
    End Sub
    Public Shared Sub wget(ByRef url As String, ByRef folder As String, ByRef id As String, ByVal wait As Boolean, Optional ByVal delay As Integer = 200)
        Dim binfilelocal As String = rconf.wgetfolder + "wget.exe"
        Debug.Print(binfilelocal + url + " -P " + """" + folder + """")
        If id = "getimdbidsearch" Then
            If File.Exists(rconf.tempfolder + "getimdbidsearch\" + "index.html") Then
                File.Delete(rconf.tempfolder + "getimdbidsearch\" + "index.html")
            End If
        End If
        Dim pro1 As System.Diagnostics.Process = New System.Diagnostics.Process()
        pro1.StartInfo.FileName = binfilelocal

        If id = "getimdbidsearch" Then
            pro1.StartInfo.Arguments = """" + url + """" + " -O " + """" + folder + id.ToString + "\index.html" + """"
        Else
            If id = "mediaicon" Then
                pro1.StartInfo.Arguments = """" + url + """" + " -O " + """" + folder + """"
            Else
                pro1.StartInfo.Arguments = """" + url + """" + " -P " + """" + folder + id.ToString + """"
            End If
        End If

        If File.Exists(rconf.tempfolder + "getimdbidsearch\" + "index.html") Then
            File.Delete(rconf.tempfolder + "getimdbidsearch\" + "index.html")
        End If



        pro1.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden
        pro1.Start()
        If wait Then
            pro1.WaitForExit()
        Else
            System.Threading.Thread.Sleep(delay)
        End If

        'System.Diagnostics.Process.Start(binfilelocal, url + " -P " + """" + folder + cou.ToString + """")
        'myProcess.WaitForExit()
    End Sub
    Public Class imdbsearch
        Private pid As String
        Private pname As String
        Private pyear As String

        Property id() As String
            Get
                Return pid
            End Get
            Set(ByVal value As String)
                pid = value
            End Set
        End Property
        Property name() As String
            Get
                Return pname
            End Get
            Set(ByVal value As String)
                pname = value
            End Set
        End Property
        Property year() As String
            Get
                Return pyear
            End Get
            Set(ByVal value As String)
                pyear = value
            End Set
        End Property
    End Class

    Private Function snagimdbid(ByVal pmname As String, ByRef tmovie As movie, ByRef v1tstringofimdbpage As String) As String
        Dim lookupname As String = pmname.ToLower
        lookupname = Strings.Replace(lookupname, "(", "")
        lookupname = Strings.Replace(lookupname, ")", "")
        Dim retid As String = ""
        Try
            retid = Regex.Match(v1tstringofimdbpage, "/(?<imdbid1>tt\d{5,9})/").Groups(1).Value
            If Not retid = "" Then Return retid
        Catch ex As Exception
            Debug.Print(ex.ToString)
        End Try

        'Dim imdbidlist As New ArrayList
        'Try
        '    Dim RegexObj As New Regex("(tt\d{6,7})(?:/';"">){1}(.{1,255})</a>.\(\d{4}\)")
        '    Dim MatchResults As Match = RegexObj.Match(v1tstringofimdbpage)
        '    While MatchResults.Success
        '        Dim nid As New imdbsearch
        '        nid.id = MatchResults.Groups(0).Value.ToString
        '        nid.name = MatchResults.Groups(1).Value.ToString
        '        imdbidlist.Add(nid)
        '        MatchResults = MatchResults.NextMatch()
        '    End While
        'Catch ex As ArgumentException
        '    'Syntax error in the regular expression
        'End Try




        'skipping other 2 methods as this one is more generic, may result in more bogus results
        Return retid
        'Dim RegexObj As New Regex("<a href=""/title/(?<imdbid1>tt\d{5,9})/"">" + lookupname + "</a>.{1,2}((?<gyear>\d{4}))")
        'Try
        '    retid = RegexObj.Match(v1tstringofimdbpage).Groups("imdbid1").Value
        '    If Not retid = "" Then Return retid
        'Catch ex As Exception
        '    Debug.Print(ex.ToString)
        '    retid = ""
        'End Try

        'Dim RegexObj2 As New Regex("<input type=""hidden"" name=""auto"" value=""legacy/title/(?<imdbid2>.{2,9})/"">")
        'Dim retid2 As String = RegexObj2.Match(Me.tp3rtbimdbdata.Text).Groups("imdbid2").Value
        'If retid2 = "" Then
        '    'return "noid"
        '    Dim RegexObj3 As New Regex("<a href=""/title/(?<imdbid3>tt.{7})/"">.{2,85}\((?<imdbyear>\d{4})\)<br>.{0,6}aka.<em>""", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline)
        '    Dim retid3 As String = RegexObj3.Match(Me.tp3rtbimdbdata.Text).Groups("imdbid3").Value
        '    If retid3 = "" Then Return retid3
        'Else
        '    tmovie.pimdbnumber = retid2
        '    If Not retid2 = "" Then Return retid2
        'End If

    End Function
    
    Private Sub overlayfolderjpg(ByVal path As String)
        Try 'fix to check file first and remove try block
            Dim x, y As Integer
            Dim bmp As New Bitmap(path + "\folder.jpg")
            pbCurIconUsed.Height = bmp.Height
            pbCurIconUsed.Width = bmp.Width
            If bmp.Width > 580 Or bmp.Height > 500 Or Not rconf.pcbDlFormat = 2 Then
                '                MsgBox("no transparency attempted for current icon")
                'do not attempt transparency
                bmp.Dispose()
                bmp = Nothing
            Else
                Dim gp As New System.Drawing.Drawing2D.GraphicsPath
                Dim mask1 As System.Drawing.Color = System.Drawing.Color.White
                Dim mask2 As System.Drawing.Color = System.Drawing.Color.Transparent
                Dim noshow As String = "Color [A=0, R=0, G=0, B=0]"
                For x = 0 To bmp.Width - 1
                    For y = 0 To bmp.Height - 1
                        Dim curPixAlpha As Integer = Convert.ToInt16(Strings.Replace(Strings.Replace(Strings.Right(Strings.Left(bmp.GetPixel(x, y).ToString, 12), 3), ",", ""), " ", ""))
                        If curPixAlpha >= 128 Then
                            gp.AddRectangle(New Rectangle(x, y, 1, 1))
                        Else
                        End If
                        curPixAlpha = Nothing
                    Next
                Next
                bmp.Dispose()
                bmp = Nothing
                pbCurIconUsed.BackColor = System.Drawing.Color.Transparent
                pbCurIconUsed.Region = New System.Drawing.Region(gp)
                gp.Dispose()
                'End If
            End If
        Catch ex As Exception
            Debug.Print(ex.ToString)
        End Try

    End Sub

    Private Sub overlaytbnfile(ByVal path As String)
        Try 'fix to check file first and remove try block
            Dim x, y As Integer
            Dim curpath As String = ""
            If File.Exists(addfiletofolder(path, currentmovie.pmoviename + ".tbn")) Then
                curpath = addfiletofolder(path, currentmovie.pmoviename + ".tbn")
            ElseIf File.Exists(addfiletofolder(path, "movie.tbn")) Then
                curpath = addfiletofolder(path, "movie.tbn")
            End If
            If curpath = "" Then
                Exit Sub
            End If
            Dim bmp As New Bitmap(curpath)
            pbCurTBNUsed.Height = bmp.Height
            pbCurTBNUsed.Width = bmp.Width
            If bmp.Width > 580 Or bmp.Height > 500 Or Not rconf.pcbDlFormat = 2 Then
                '                MsgBox("no transparency attempted for current icon")
                'do not attempt transparency
                bmp.Dispose()
                bmp = Nothing
            Else
                Dim gp As New System.Drawing.Drawing2D.GraphicsPath
                Dim mask1 As System.Drawing.Color = System.Drawing.Color.White
                Dim mask2 As System.Drawing.Color = System.Drawing.Color.Transparent
                Dim noshow As String = "Color [A=0, R=0, G=0, B=0]"
                For x = 0 To bmp.Width - 1
                    For y = 0 To bmp.Height - 1
                        Dim curPixAlpha As Integer = Convert.ToInt16(Strings.Replace(Strings.Replace(Strings.Right(Strings.Left(bmp.GetPixel(x, y).ToString, 12), 3), ",", ""), " ", ""))
                        If curPixAlpha >= 128 Then
                            gp.AddRectangle(New Rectangle(x, y, 1, 1))
                        Else
                        End If
                        curPixAlpha = Nothing
                    Next
                Next
                bmp.Dispose()
                bmp = Nothing
                pbCurTBNUsed.BackColor = System.Drawing.Color.Transparent
                pbCurTBNUsed.Region = New System.Drawing.Region(gp)
                gp.Dispose()
                'End If
            End If
        Catch ex As Exception
            Debug.Print(ex.ToString)
        End Try

    End Sub

    Private Sub overlayp(ByVal path As String)
        Try
            Dim x, y As Integer
            Dim bmp As New Bitmap(path + "\folder.jpg")
            pbCurIconUsed.Height = bmp.Height
            pbCurIconUsed.Width = bmp.Width
            Dim gp As New System.Drawing.Drawing2D.GraphicsPath
            For x = 0 To bmp.Width - 1
                For y = 0 To bmp.Height - 1
                    gp.AddRectangle(New Rectangle(x, y, 1, 1))
                Next
            Next
            bmp.Dispose()
            pbCurIconUsed.BackColor = System.Drawing.Color.Transparent
            pbCurIconUsed.Region = New System.Drawing.Region(gp)
            gp.Dispose()
            'End If
            'End If
        Catch ex As Exception
            Debug.Print(ex.ToString)
        End Try

    End Sub
    Public Function aspectratio(ByRef timage As System.Drawing.Image) As Double
        Dim oH As Integer = timage.Height
        Dim oW As Integer = timage.Width
        Dim taspect As Double = oH / oW
        Return taspect
    End Function
    Private Sub btnNext_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnNext.Click
        fwdbackbuttons()
        Dim cbCount, cbCurIndex As Integer
        cbCount = lbMyMovies.Items.Count - 1
        cbCurIndex = lbMyMovies.SelectedIndex
        'MsgBox("cbCount: " + Convert.ToString(cbCount) + "  cbCurIndex: " + Convert.ToString(cbCurIndex))

        If cbCurIndex < cbCount Then
            lbMyMovies.SelectedIndex += 1
        Else
            Exit Sub
        End If

        processdropdownitems()
    End Sub
    'Sub showimages() 'not sure if this function is still used, check and update (fixme)
    '    Dim maxDisplayedIcons As Integer = rconf.pcbMaxIconsToDisplay
    '    pbar1.Enabled = True
    '    pbar1.Visible = True
    '    Me.Refresh()
    '    'cbox1.SelectedIndex = cbox1.SelectedIndex + 1


    '    'Dim curmovie As movie = 
    '    Dim tmovie As movie = CType(movies(CInt(lbMyMovies.SelectedValue)), movie)
    '    'see if a folder icon exsists 
    '    Dim Path As String = tmovie.getmoviepath
    '    pbCurIconUsed.ImageLocation = Path + "\folder.jpg"



    '    Dim selectedName As String = tmovie.getmoviename
    '    lblCurMovieFolder.Text = tmovie.getmoviepath
    '    Dim selectedNameXMLfile As String

    '    selectedNameXMLfile = Strings.Replace(selectedName, " ", ".")

    '    'populate movieobject
    '    'tmovie.setmoviename(selectedName)
    '    tmovie.setthumbxml(rconf.xmlfolder + selectedNameXMLfile + ".xml")
    '    getimdbidsearch(tmovie.getmoviename)
    '    snagimdbid(tmovie.getmoviename, tmovie)
    '    snagyear(tmovie.getmoviename, tmovie)
    '    Dim impaname As String = Strings.Replace(tmovie.getmoviename, " ", "_").ToLower

    '    If rconf.pcbDownloadPoster Then
    '        Try
    '            Me.posterpb1.ImageLocation = "http://www.impawards.com/" + Convert.ToString(tmovie.getyear) + "/posters/" + impaname + ".jpg"
    '        Catch ex As Exception
    '            '  MsgBox("Couldn't find a movie poster for this one", MsgBoxStyle.Information, "No poster found")
    '        End Try
    '    End If


    '    '  Debug.Print(Me.tp2pb1.ImageLocation)
    '    '  Debug.Print(Convert.ToString(tmovie.getyear) + "  " + Convert.ToString(tmovie.getimdbid))
    '    'MsgBox("you picked" + selectedName)
    '    'take name, read xml, generate 6 images in boxes

    '    '(fixme) = pretty sure setting images and disabling the items are depricated at this point, check for refrences
    '    ReadXMLforSelection(rconf.xmlfolder + selectedNameXMLfile + ".xml")
    '    pb1.Image = Nothing
    '    pb2.Image = Nothing
    '    pb3.Image = Nothing
    '    pb4.Image = Nothing
    '    pb5.Image = Nothing
    '    pb6.Image = Nothing
    '    pb7.Image = Nothing
    '    pb8.Image = Nothing
    '    pb9.Image = Nothing
    '    pb10.Image = Nothing
    '    pb11.Image = Nothing
    '    pb12.Image = Nothing

    '    pb1.Enabled = False
    '    pb2.Enabled = False
    '    pb3.Enabled = False
    '    pb4.Enabled = False
    '    pb5.Enabled = False
    '    pb6.Enabled = False
    '    pb7.Enabled = False
    '    pb8.Enabled = False
    '    pb9.Enabled = False
    '    pb10.Enabled = False
    '    pb11.Enabled = False
    '    pb12.Enabled = False

    '    Me.Refresh()

    '    Dim counter As Integer = 0
    '    For Each sname In urllists
    '        'get only the id (regex)
    '        Dim keyid As String
    '        pbar1mv(20)

    '        Try
    '            keyid = Regex.Match(sname.ToString, ".*key=(?<gkeyid>\d{1,10})&").Groups("gkeyid").Value
    '            'sname = new string for jpeg with key in it
    '            'http://www.mediaicons.org/Services/GetIcon.ashx?key=3095&format=2&style=0&type=large
    '            'Debug.Print("old sname: " + sname)
    '            sname = "http://www.mediaicons.org/Services/GetIcon.ashx?key=" + Convert.ToString(keyid) + "&format=2&style=10&type=large"
    '            'Debug.Print("new sname: " + sname)
    '        Catch ex As ArgumentException
    '            'Syntax error in the regular expression
    '        End Try
    '        lbldebug.Text = sname.ToString
    '        'parse to med size wide
    '        If counter = 0 Or counter <= (maxDisplayedIcons - 1) Then
    '            If counter = 0 Then
    '                pb1.ImageLocation = sname.ToString
    '                pb1.Enabled = True
    '            ElseIf counter = 1 Then
    '                pb2.ImageLocation = sname.ToString
    '                pb2.Enabled = True
    '            ElseIf counter = 2 Then
    '                pb3.ImageLocation = sname.ToString
    '                pb3.Enabled = True
    '            ElseIf counter = 3 Then
    '                pb4.ImageLocation = sname.ToString
    '                pb4.Enabled = True
    '            ElseIf counter = 4 Then
    '                pb5.ImageLocation = sname.ToString
    '                pb5.Enabled = True
    '            ElseIf counter = 5 Then
    '                pb6.ImageLocation = sname.ToString
    '                pb6.Enabled = True
    '            ElseIf counter = 6 Then
    '                pb7.ImageLocation = sname.ToString
    '                pb7.Enabled = True
    '            ElseIf counter = 7 Then
    '                pb8.ImageLocation = sname.ToString
    '                pb8.Enabled = True
    '            ElseIf counter = 8 Then
    '                pb9.ImageLocation = sname.ToString
    '                pb9.Enabled = True
    '            ElseIf counter = 9 Then
    '                pb10.ImageLocation = sname.ToString
    '                pb10.Enabled = True
    '            ElseIf counter = 10 Then
    '                pb11.ImageLocation = sname.ToString
    '                pb11.Enabled = True
    '            ElseIf counter = 11 Then
    '                pb12.ImageLocation = sname.ToString
    '                pb12.Enabled = True
    '            End If
    '        End If
    '        counter = counter + 1
    '    Next
    '    'Me.pb1.Load()
    '    'Me.pb2.Load()
    '    'Me.pb3.Load()
    '    'Me.pb4.Load()
    '    'Me.pb5.Load()
    '    'Me.pb6.Load()
    '    'Me.Refresh()
    '    pbar1.Visible = False
    'End Sub
    'Private Sub btnRetryName_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)

    '    MsgBox("runing btnRetryName")
    '    'get curent index id from drop down
    '    Dim curindex As Integer = cbox1.SelectedIndex
    '    Dim curmovie As movie = CType(movies(curindex), movie)
    '    curmovie.setmoviename(tbnewname.Text)
    '    'update xml name for id
    '    Dim curNameXMLfile As String = Strings.Replace(curmovie.getmoviename, " ", ".")
    '    curmovie.setthumbxml(Me.xmlfolder + curNameXMLfile + ".xml")
    '    'query webicons for new xml file generation
    '    Debug.Print(curmovie.getmoviename)
    '    'search for the icon which will return the xml results file
    '    Dim mfxname As String = searchForThumbFromUrl(curmovie.getmoviename)
    '    'grab the xml
    '    'mfxname = Strings.Replace(mname2, " ", ".")
    '    'set the url
    '    'ReadXMLGetImage(mfxname, curmovie.getmoviename)
    '    showimages()

    '    'display icons

    'End Sub
    'Private Sub cbformat_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs)
    '  gformat = cbformat.SelectedIndex + 1
    'End Sub
    Private Sub btnPrev_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnPrev.Click
        fwdbackbuttons()
        Dim cbCount, cbCurIndex As Integer
        cbCount = lbMyMovies.Items.Count - 1
        cbCurIndex = lbMyMovies.SelectedIndex
        '   MsgBox("cbCount: " + Convert.ToString(cbCount) + "  cbCurIndex: " + Convert.ToString(cbCurIndex))

        If cbCurIndex > 0 Then
            lbMyMovies.SelectedIndex -= 1
        Else
            lbMyMovies.SelectedIndex -= 0
            Exit Sub
        End If

        processdropdownitems()
    End Sub
    Private Sub Timer1_Tick(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbTick.Tick
        pbar1.Value = pbar1.Maximum
        lblPbar.Text = lblPbar.Text + " ___ "
        'If messageprompts Then Me.gbDisplay.Refresh()
    End Sub
    Private Sub tsbMoviesPrecache_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsbMoviesPreCache.Click
        'cacheicons()
        bwprecachenow()
    End Sub
    Private Sub grabimdbfromimpawards(ByRef curmovie As movie, ByVal tyearp As Integer)
        Dim baseurlsiid As String = "http://www.impawards.com/" + tyearp.ToString + "/" + curmovie.ppostername + ".html" 'Strings.Replace(curmovie.getmoviename.ToLower, " ", "_") + ".html"
        'Dim foundimdbid, retid, retyr As String
        Dim s As String
        'openpagedata
        Dim request As HttpWebRequest = CType(WebRequest.Create(baseurlsiid), HttpWebRequest)
        Dim response As HttpWebResponse = CType(request.GetResponse(), System.Net.HttpWebResponse)
        Using reader As StreamReader = New StreamReader(response.GetResponseStream())
            s = reader.ReadToEnd()
        End Using
        Dim tvarstolower = Convert.ToString(s).ToLower

        'Me.tp3rtbimdbdata.Text = Convert.ToString(s).ToLower
        Dim retid3 As String
        Try
            Dim RegexObj3 As New Regex("<a href = http://www.imdb.com/title/(?<imdbid>.{8,10}) target = _blank>IMDb</a>", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline)
            retid3 = RegexObj3.Match(tvarstolower).Groups("imdbid").Value
            'Debug.Print(curmovie.getmoviename + "  :IMDBID: " + retid3)
            If retid3 = "" Then
                Debug.Print("NO IMDB INFO: " + curmovie.getmoviename)
            End If
            curmovie.pimdbnumber = retid3
            'getimdbdata(curmovie)
        Catch ex As ArgumentException
            'Syntax error in the regular expression
        End Try
    End Sub
    Private Sub cacheicons()

        If lbMyMovies.Items.Count = 0 Then
            MsgBox("There are no items in the list to process")
            Exit Sub

        End If
        If MsgBox("Note: This is going to take awhile to process. Are you sure you want to continue?", MsgBoxStyle.OkCancel, "Confirm Preload of Icons") = MsgBoxResult.Cancel Then
            Exit Sub
        End If
        If lbMyMovies.SelectedIndex = -1 Then
            '  MsgBox("You should select an item from the drop down first. Since no item was selected, the first item in the list will be used")
            lbMyMovies.SelectedIndex = 0
        End If

        lbMyMovies.Enabled = False 'disable manual item selection
        While lbMyMovies.SelectedIndex <= (lbMyMovies.Items.Count - 1)
            Me.pbar1.Visible = True
            'If messageprompts Then Me.gbDisplay.Refresh()
            'pbTick.Start()
            Dim maxDisplayedIcons As Integer = rconf.pcbMaxIconsToDisplay
            Dim tmovie As movie = CType(movies(CInt(lbMyMovies.SelectedValue)), movie)
            'see if a folder icon exsists 
            ' Dim Path As String = tmovie.getmoviepath
            'pbCurIconUsed.ImageLocation = Path + "\folder.jpg"
            Dim selectedName As String = tmovie.getmoviename
            tbnewname.Text = selectedName
            pbar1.Value = pbar1.Maximum
            lblPbar.Visible = True
            lblPbar.Text = "WORKING ON: " + selectedName
            'If messageprompts Then Me.Refresh()()
            lblCurMovieFolder.Text = tmovie.getmoviepath

            Dim selectedNameXMLfile As String
            selectedNameXMLfile = Strings.Replace(selectedName, " ", ".")
            tmovie.setthumbxml(rconf.xmlfolder + selectedNameXMLfile + ".xml")
            '---------------------------- XML FILE CHECK ---------------------------
            'check to see if there is already an xml file in there
            Dim xmltemppathname As String = rconf.xmlfolder + selectedNameXMLfile
            Dim xmltemp As String = rconf.xmlfolder + selectedNameXMLfile + ".xml"
            'display movie name
            Me.tbMovieNameE.Text = tmovie.getmoviename
            If rconf.pcbf1s0 Then
                xmlDownload(tmovie, xmltemppathname, "1", "2", "0") 'square no style
                precacheicons(selectedNameXMLfile, "1", "2", "0")
            End If
            If rconf.pcbf1s3 Then
                xmlDownload(tmovie, xmltemppathname, "1", "2", "3") 'square box shot
                precacheicons(selectedNameXMLfile, "1", "2", "3")
            End If
            If rconf.pcbf1s9 Then
                xmlDownload(tmovie, xmltemppathname, "1", "2", "9") 'square classification, but it's a round token
                precacheicons(selectedNameXMLfile, "1", "2", "9")
            End If
            If rconf.pcbf2s0 Then
                xmlDownload(tmovie, xmltemppathname, "2", "2", "0") 'wide no style
                precacheicons(selectedNameXMLfile, "2", "2", "0")
            End If
            If rconf.pcbf2s2 Then
                xmlDownload(tmovie, xmltemppathname, "2", "2", "2") 'wide rounded shadow with scanlines
                precacheicons(selectedNameXMLfile, "2", "2", "2")
            End If
            If rconf.pcbf2s8 Then
                xmlDownload(tmovie, xmltemppathname, "2", "2", "8") 'wide rounded shadow
                precacheicons(selectedNameXMLfile, "2", "2", "8")
            End If
            If rconf.pcbf2s10 Then
                xmlDownload(tmovie, xmltemppathname, "2", "2", "10") 'wide rounded shadow with glass overlay
                precacheicons(selectedNameXMLfile, "2", "2", "10")
            End If
            'If rconf.pcbf3s0 Then
            '    xmlDownload(tmovie, xmltemppathname, "3", "2", "0") 'tall no style
            '    precacheicons(selectedNameXMLfile, "3", "2", "0")
            'End If

            'continue processing

            'IMDB data
            'see if nfo file exsists for movie, if it does, read it up to speed it up
            Dim nfoexsists As Boolean = checkforIMDBIDinnfofile(tmovie)
            If Not nfoexsists Then
                'if there is no nfo file, check for a poster file (they have the imdbid in them)
                nfoexsists = checkforposterfiletogetimdbid(tmovie)
            End If
            If tmovie.pimdbnumber = "" Then
                Dim tstringofimdbpage As String = getimdbidsearch(tmovie.getmoviename)
                tmovie.pimdbnumber = snagimdbid(tmovie.getmoviename, tmovie, tstringofimdbpage)
            End If
            'getimdbidsearchwithwget(tmovie)
            'not getting year for this movie, was used for posters, call for posters if needed
            ' snagyear(tmovie.getmoviename, tmovie)
            ' COMMENTED Dim impaname As String = Strings.Replace(tmovie.getmoviename, " ", "_").ToLower

            If rconf.pcbGetIMDBInfo Then 'get imdb info
                lblPbar.Text = " __-- Getting IMDB Information for " + tmovie.getmoviename.ToString + "--__ "
                'If messageprompts Then Me.Refresh()()
                If rbem.Checked = True Then
                    If File.Exists(rconf.imdbcachefolder + "/" + tmovie.getimdbid + ".xml") Then 'And Not cbOverwriteNFO.Checked Then
                        lblPbar.Text = " __-- XML already in Cache: IMDB Information for " + tmovie.getmoviename.ToString + "--__ "
                        'do nothing yet, nfo exsists -- add load nfo code here as well as the option to overwrite nfos in gui
                        Debug.Print(".xml already exsists") ' + cbOverwriteNFO.Checked.ToString)
                    Else
                        'getimdbidsearch(tmovie.getmoviename)
                        'snagimdbid(tmovie.getmoviename, tmovie)
                        'snagyear(tmovie.getmoviename, tmovie)
                        ' getimdbdata(tmovie)
                        Dim imdbinfo As New IMDB
                        Dim imdbidtemp As String = tmovie.getimdbid
                        If imdbidtemp = "" Then
                            'MsgBox("NO IMDB DATA FOUND, UNABLE TO SAVE NFO FILE")
                            Debug.Print("NO IMDB DATA FOUND, UNABLE TO SAVE NFO FILE")
                        Else
                            imdbinfo = imdbparse(imdbidtemp)
                            'save xml to imdbcache reguardless of gui setting to write nfo
                            imdbinfo.writeIMDBXML(imdbinfo, tmovie, rconf.imdbcachefolder, True)
                            'If cbSaveNFO.Checked Then
                            '    'imdbinfo.writeIMDBXML(imdbinfo, tmovie)
                            '    tmovie.saveimdbinfo(tmovie)
                            'End If
                        End If
                    End If
                End If
            End If


            'get Movie Poster 'update after new imdb
            '------------------------------------------------
            'If rconf.pcbGetIMDBInfo Then 'get imdb info
            '    getimdbidsearch(tmovie.getmoviename)
            '    snagimdbid(tmovie.getmoviename, tmovie)
            '    snagyear(tmovie.getmoviename, tmovie)
            '    getimdbdata(tmovie)

            'End If

            'get Movie Poster
            Dim impaname As String = cleanname(tmovie.getmoviename)
            If rconf.pcbDownloadPoster Then
                'get year from older imdb info
                Dim tstringofimdbpage As String = getimdbidsearch(tmovie.pmoviename)
                snagyear(tmovie.getmoviename, tmovie, tstringofimdbpage)
                'save a new xml file for the posters

                'see if the posterxml file exsists in the posters folder
                If File.Exists(rconf.xmlfolderposters + tmovie.pimdbnumber + ".xml") Then
                    Dim curposter As New posters
                    curposter.pmoviename = impaname
                    curposter.readxml(curposter, rconf.xmlfolderposters, True, tmovie.pimdbnumber)
                    precacheposter(curposter, rconf.postercachefolder)
                    'Dim tyear As Integer = curposter.pyear
                    'grabimdbfromimpawards(tmovie, tyear)
                Else
                    Debug.Print(impaname.ToString)
                    'no poster xml, revert to older method of finding poster
                    If rconf.pcbGetIMDBInfo Then
                        'do nothing, we already polled that data for the movie
                    Else
                        'get imdb info since we need the movie year
                        'Dim tstringofimdbpage As String = getimdbidsearch(tmovie.getmoviename)
                        tmovie.pimdbnumber = snagimdbid(tmovie.getmoviename, tmovie, tstringofimdbpage)
                        snagyear(tmovie.getmoviename, tmovie, tstringofimdbpage)
                        'getimdbdata(tmovie)
                    End If

                    ''old method of posters, limited to 4 to save time, removed now, it's pointless
                    'Dim postericons As New icontoxml
                    'postericons.seticon1("http://www.impawards.com/" + Convert.ToString(tmovie.getyear) + "/posters/" + impaname + ".jpg")
                    'postericons.seticon2("http://www.impawards.com/" + Convert.ToString(tmovie.getyear) + "/posters/" + impaname + "_ver1.jpg")
                    'postericons.seticon3("http://www.impawards.com/" + Convert.ToString(tmovie.getyear) + "/posters/" + impaname + "_ver2.jpg")
                    'postericons.seticon4("http://www.impawards.com/" + Convert.ToString(tmovie.getyear) + "/posters/" + impaname + "_ver3.jpg")
                    ''postericons.seticon5("http://www.impawards.com/" + Convert.ToString(tmovie.getyear) + "/posters/" + impaname + "_ver4.jpg")
                    ''postericons.seticon6("http://www.impawards.com/" + Convert.ToString(tmovie.getyear) + "/posters/" + impaname + "_ver5.jpg")
                    ''postericons.seticon7("http://www.impawards.com/" + Convert.ToString(tmovie.getyear) + "/posters/" + impaname + "_ver6.jpg")
                    ''postericons.seticon8("http://www.impawards.com/" + Convert.ToString(tmovie.getyear) + "/posters/" + impaname + "_ver7.jpg")
                    'postericons.savexmliconwriter(postericons, selectedNameXMLfile, "070", "0", "0")

                    'Try
                    '    precacheicons(selectedNameXMLfile, "070", "0", "0")
                    'Catch ex As Exception

                    'End Try
                    '-----------------------------

                    'Try
                    'grab the xml data and save the icons

                    '    Me.posterpb1.ImageLocation = "http://www.impawards.com/" + Convert.ToString(tmovie.getyear) + "/posters/" + impaname + ".jpg"
                    '    Me.posterpb2.ImageLocation = "http://www.impawards.com/" + Convert.ToString(tmovie.getyear) + "/posters/" + impaname + "_ver2.jpg"
                    '    Me.posterpb3.ImageLocation = "http://www.impawards.com/" + Convert.ToString(tmovie.getyear) + "/posters/" + impaname + "_ver3.jpg"
                    '    Me.posterpb4.ImageLocation = "http://www.impawards.com/" + Convert.ToString(tmovie.getyear) + "/posters/" + impaname + "_ver4.jpg"
                    '    Me.posterpb5.ImageLocation = "http://www.impawards.com/" + Convert.ToString(tmovie.getyear) + "/posters/" + impaname + "_ver5.jpg"
                    '    Me.posterpb6.ImageLocation = "http://www.impawards.com/" + Convert.ToString(tmovie.getyear) + "/posters/" + impaname + "_ver6.jpg"
                    '    Me.posterpb7.ImageLocation = "http://www.impawards.com/" + Convert.ToString(tmovie.getyear) + "/posters/" + impaname + "_ver7.jpg"
                    '    Me.posterpb8.ImageLocation = "http://www.impawards.com/" + Convert.ToString(tmovie.getyear) + "/posters/" + impaname + "_ver8.jpg"
                    'Catch ex As Exception
                    '    '   MsgBox("Unable to locate a Movie Poster for this movie" + ex.ToString, MsgBoxStyle.Information, "Unable to find a poster, no big deal.")
                    '    Debug.Print("oops.. no poster info available")
                    'End Try
                End If


            End If
            '------------------------------------------------
            'If rconf.pcbDownloadPoster Then
            '    Try
            '        Me.tp2pb1.ImageLocation = "http://www.impawards.com/" + Convert.ToString(tmovie.getyear) + "/posters/" + impaname + ".jpg"
            '    Catch ex As Exception
            '        '   MsgBox("Unable to locate a Movie Poster for this movie" + ex.ToString, MsgBoxStyle.Information, "Unable to find a poster, no big deal.")

            '    End Try
            'End If


            'display movie name

            'Me.tbIMDBID.Text = tmovie.getimdbid

            ' '' ''get wide icons (need to recode this later with add info for each type )
            ' '' ''take name, read xml, generate up to 12 images in cache
            '' ''ReadXMLforSelection(Me.xmlfolder + selectedNameXMLfile + ".xml")

            ' '' ''Me.Refresh()
            '' ''Dim counter As Integer = 0

            '' ''For Each sname In urllists
            '' ''    'get only the id (regex)
            '' ''    Dim fromcache As Boolean
            '' ''    Dim keyid As String
            '' ''    Try
            '' ''        keyid = Regex.Match(sname.ToString, ".*key=(?<gkeyid>\d{1,10})&").Groups("gkeyid").Value
            '' ''        sname = "http://www.mediaicons.org/Services/GetIcon.ashx?key=" + Convert.ToString(keyid) + "&format=2&style=10&type=download" + lconcat + lclient
            '' ''    Catch ex As ArgumentException
            '' ''        Debug.Print("Syntax error in the regular expression")
            '' ''        keyid = "0000"
            '' ''    End Try

            '' ''    '-------------------------------- CACHE CHECK --------------------------------
            '' ''    'see if we have a cached copy first
            '' ''    'regex'key+f(number)+s(number)+t(number)
            '' ''    Dim checklocal As String = iconcachefolder + Convert.ToString(keyid) + "f2s10t3.jpg"
            '' ''    If File.Exists(checklocal) Then
            '' ''        sname = checklocal
            '' ''        fromcache = True
            '' ''    Else
            '' ''        fromcache = False
            '' ''    End If

            '' ''    If Not fromcache Then
            '' ''        SavePhotoFromUrl(checklocal, sname.ToString)
            '' ''        Debug.Print("saving " + checklocal.ToString + " for url: " + sname.ToString)
            '' ''    End If


            '' ''    counter = counter + 1
            '' ''Next

            '==========================================================
            'get tall icons (format 3, cat varies for now 2, style NONE)
            'get square format 1, cat varies for now 2, style 0 and 3 and ?

            'get fanart
            If tmovie.pimdbnumber = "" Then
                'MsgBox("NO IMDB DATA FOUND, UNABLE TO SAVE NFO FILE")
                Debug.Print("No id: No Fanart: NO IMDB DATA FOUND, UNABLE TO PROCESS FANART")
            Else
                Dim cbackdrops As New tmdbapiv2.Backdrops 'mip.themoviedb.backdrop.backdrops
                tmdbapiv2.Results.getbackdrops(tmovie, cbackdrops, tmovie.pimdbnumber, rconf.wgetfolder, rconf.xmlfoldertmdbbackdrops, True, True, False, False)
                tmovie.pbackdrops = cbackdrops
                If tmovie.pbackdrops.backdrops.Count = 0 Then
                    Debug.Print("no items in the pbackdrop")
                Else
                    Debug.Print(tmovie.pbackdrops.backdrops.Count.ToString + ": is the count of backdrops")
                End If
                'if allow icon selection then set the picture boxes for the fanart items
                Dim tbdcount As Integer = tmovie.pbackdrops.backdrops.Count
                If Not tbdcount = 0 Then
                    'count is not 0, process items
                    Dim tbdcou As Integer = 0
                    While tbdcou < tbdcount
                        'if the file is not local download it
                        Dim currentitem As New tmdbapiv2.backdrop 'mip.themoviedb.backdrop.Item
                        currentitem = cbackdrops.backdrops.Item(tbdcou)
                        Dim fanarturl As String = currentitem.Text
                        Dim fanartpostcard As String = Strings.Left(currentitem.Text, currentitem.Text.Length - 4) + "_poster.jpg"
                        Dim fanartfilename As String = Regex.Match(fanarturl, "backdrops/.{1,8}/(.*?.).jpg", RegexOptions.IgnoreCase).Groups(1).Value
                        If Not File.Exists(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg") Then
                            'download it
                            wgetfanart(fanarturl, rconf.tmdbfanartcachefolder, False, fanartfilename + ".jpg")
                        End If

                        If Not File.Exists(rconf.tmdbfanartcachefolder + fanartfilename + "_poster.jpg") Then
                            'download it
                            wgetfanart(fanartpostcard, rconf.tmdbfanartcachefolder, False, fanartfilename + "_poster.jpg")
                        End If

                        ''after downloading display the local file (better gui look)
                        'Select Case tbdcou
                        '    Case 0
                        '        Me.pbfatmdb1.ImageLocation = rconf.tmdbfanartcachefolder + fanartfilename + ".jpg"
                        '    Case 1
                        '        Me.pbfatmdb2.ImageLocation = rconf.tmdbfanartcachefolder + fanartfilename + ".jpg"
                        '    Case 2
                        '        Me.pbfatmdb3.ImageLocation = rconf.tmdbfanartcachefolder + fanartfilename + ".jpg"
                        '    Case 3
                        '        Me.pbfatmdb4.ImageLocation = rconf.tmdbfanartcachefolder + fanartfilename + ".jpg"
                        '    Case 4
                        '        Me.pbfatmdb5.ImageLocation = rconf.tmdbfanartcachefolder + fanartfilename + ".jpg"
                        '    Case 5
                        '        Me.pbfatmdb6.ImageLocation = rconf.tmdbfanartcachefolder + fanartfilename + ".jpg"
                        '    Case Else
                        '        Debug.Print("fanart image display greater then 6, nowhere to put the darn thing")
                        'End Select
                        tbdcou += 1
                    End While
                End If

            End If

            ' ''Get Fanart automatically from meligrove
            ''If rconf.pcbGetFanart Then
            ''    Dim fanarturl As String = "http://www.meligrove.com/images/posters/movies/jpg/" + tmovie.getimdbid + ".jpg"
            ''    Debug.Print(fanarturl)
            ''    Try
            ''        'fanartpb1.ImageLocation = fanarturl
            ''        If FileExists(lblCurMovieFolder.Text + "\" + tbMovieNameE.Text + "-fanart.jpg") Then
            ''            'file already exists, do nothing yet
            ''            Debug.Print("file already exists")
            ''        Else
            ''            SavePhotoFromUrl(lblCurMovieFolder.Text + "\" + tbMovieNameE.Text + "-fanart.jpg", fanarturl)
            ''        End If
            ''        'savefanart(fanartpb1)
            ''        'fanartpb1.ImageLocation = lblCurMovieFolder.Text + "\" + tbMovieName.Text + "-fanart.jpg"
            ''        'fanartpb1.Enabled = True
            ''        'pbTick.Stop()
            ''        'pbar1.Visible = False
            ''        'lblPbar.Visible = False
            ''    Catch ex As Exception
            ''        Debug.Print("unable to find - " + fanarturl)
            ''        pbTick.Stop()
            ''        pbar1.Visible = False
            ''        lblPbar.Visible = False
            ''    End Try
            ''End If

            'MsgBox(tmovie.getmoviename + " ------- " + tmovie.getthumbxml)
            btnRetryName.Enabled = True
            tbnewname.Enabled = True
            pbTick.Stop()
            pbar1.Visible = False
            lblPbar.Visible = False
            If (lbMyMovies.Items.Count - 1) = lbMyMovies.SelectedIndex Then
                Exit While
            End If
            lbMyMovies.SelectedIndex += 1
        End While
        lbMyMovies.SelectedIndex = 0
        MsgBox("Precache completed", MsgBoxStyle.OkOnly, "Completed")
        lbMyMovies.Enabled = True 're-enable manual item selection
    End Sub

    'xmldownload for mediaicons.org movies
    Private Sub xmlDownload(ByRef tmovie As movie, ByVal xmltemppathname As String, ByVal format As String, ByVal catagory As String, ByVal style As String)
        Try
            If File.Exists(xmltemppathname + "f" + format + "c" + catagory + "s" + style + ".xml") Then
                Debug.Print(File.GetCreationTime(xmltemppathname + "f" + format + "c" + catagory + "s" + style + ".xml").ToString)
                Debug.Print(File.GetCreationTime(xmltemppathname + "f" + format + "c" + catagory + "s" + style + ".xml").AddDays(360).ToString)
                Debug.Print(Date.Now.ToString)
                If File.GetCreationTime(xmltemppathname + "f" + format + "c" + catagory + "s" + style + ".xml").AddDays(360) < Date.Now Then
                    lblPbar.Text = "Checking for new mediaicons"
                    ''If messageprompts Then Me.Refresh()()
                    File.SetAttributes(xmltemppathname + "f" + format + "c" + catagory + "s" + style + ".xml", FileAttributes.Normal) 'change attributes
                    File.Delete(xmltemppathname + "f" + format + "c" + catagory + "s" + style + ".xml") 'remove it
                    searchForThumbFromUrl(tmovie.getmoviename, format, catagory, style)
                    lblPbar.Text = "Checking complete"
                    ''If messageprompts Then Me.Refresh()()
                End If
                If pclogging Then pclog.WriteLine("File in cache: " + xmltemppathname + "f" + format + "c" + catagory + "s" + style + ".xml")
                ''If messageprompts Then Me.Refresh()()
            Else
                ''If messageprompts Then Me.Refresh()()
                If pclogging Then pclog.WriteLine("No XML File in cache, will download xml for: " + xmltemppathname + "f" + format + "c" + catagory + "s" + style + ".xml")
                searchForThumbFromUrl(tmovie.getmoviename, format, catagory, style)
            End If
        Catch ex As Exception
            Debug.Print(ex.ToString)

        End Try

    End Sub

    'xmldownload for freecovers dot net
    Private Sub xmlDownload_fcdn(ByRef url As String, ByVal xmlnameandpath As String)
        Try
            Dim binfilelocal As String = rconf.wgetfolder + "wget.exe"
            Dim pro1fa As System.Diagnostics.Process = New System.Diagnostics.Process()
            pro1fa.StartInfo.FileName = binfilelocal
            pro1fa.StartInfo.Arguments = """" + url + """" + " -O " + """" + xmlnameandpath + """"
            pro1fa.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden
            pro1fa.Start()
            pro1fa.WaitForExit()
            'If File.Exists(xmltemppathname + "f" + Format() + "c" + catagory + "s" + style + ".xml") Then
            '    Debug.Print(File.GetCreationTime(xmltemppathname + "f" + Format() + "c" + catagory + "s" + style + ".xml").AddDays(30).ToString)
            '    Debug.Print(Date.Now.ToString)
            '    If File.GetCreationTime(xmltemppathname + "f" + Format() + "c" + catagory + "s" + style + ".xml").AddDays(60) < Date.Now Then
            '        lblPbar.Text = "Checking for new mediaicons"
            '        ''If messageprompts Then Me.Refresh()()
            '        File.SetAttributes(xmltemppathname + "f" + Format() + "c" + catagory + "s" + style + ".xml", FileAttributes.Normal) 'change attributes
            '        File.Delete(xmltemppathname + "f" + Format() + "c" + catagory + "s" + style + ".xml") 'remove it
            '        searchForThumbFromUrl(tvshowname, Format, catagory, style)
            '        lblPbar.Text = "Checking complete"
            '        ''If messageprompts Then Me.Refresh()()
            '    End If
            '    'If File.GetCreationTime(xmltemppathname + "f" + format + "c" + catagory + "s" + style + ".xml") < Date.Now Then
            'Else
            '    ''If messageprompts Then Me.Refresh()()
            '    'If pclogging Then pclog.WriteLine("No XML File in cache, will download xml for: " + xmltemppathname + "f" + format + "c" + catagory + "s" + style + ".xml")
            '    searchForThumbFromUrl(tvshowname, Format, catagory, style)
            'End If
        Catch ex As Exception
            Debug.Print(ex.ToString)

        End Try

    End Sub

    'xmldownload for mediaicons.org music
    Private Sub xmlDownloadMusic_MIO(ByRef tvshowname As String, ByVal xmltemppathname As String, ByVal format As String, ByVal catagory As String, ByVal style As String)
        Try
            If File.Exists(xmltemppathname + "f" + format + "c" + catagory + "s" + style + ".xml") Then
                Debug.Print(File.GetCreationTime(xmltemppathname + "f" + format + "c" + catagory + "s" + style + ".xml").AddDays(30).ToString)
                Debug.Print(Date.Now.ToString)
                If File.GetCreationTime(xmltemppathname + "f" + format + "c" + catagory + "s" + style + ".xml").AddDays(60) < Date.Now Then
                    lblPbar.Text = "Checking for new mediaicons"
                    ''If messageprompts Then Me.Refresh()()
                    File.SetAttributes(xmltemppathname + "f" + format + "c" + catagory + "s" + style + ".xml", FileAttributes.Normal) 'change attributes
                    File.Delete(xmltemppathname + "f" + format + "c" + catagory + "s" + style + ".xml") 'remove it
                    searchForThumbFromUrl(tvshowname, format, catagory, style)
                    lblPbar.Text = "Checking complete"
                    ''If messageprompts Then Me.Refresh()()
                End If
                'If File.GetCreationTime(xmltemppathname + "f" + format + "c" + catagory + "s" + style + ".xml") < Date.Now Then
            Else
                ''If messageprompts Then Me.Refresh()()
                'If pclogging Then pclog.WriteLine("No XML File in cache, will download xml for: " + xmltemppathname + "f" + format + "c" + catagory + "s" + style + ".xml")
                searchForThumbFromUrl(tvshowname, format, catagory, style)
            End If
        Catch ex As Exception
            Debug.Print(ex.ToString)

        End Try

    End Sub

    'xmldownload for mediaicons.org tv shows
    Private Sub xmlDownloadTV(ByRef tvshowname As String, ByVal xmltemppathname As String, ByVal format As String, ByVal catagory As String, ByVal style As String)
        Try
            If File.Exists(xmltemppathname + "f" + format + "c" + catagory + "s" + style + ".xml") Then
                Debug.Print(File.GetCreationTime(xmltemppathname + "f" + format + "c" + catagory + "s" + style + ".xml").AddDays(30).ToString)
                Debug.Print(Date.Now.ToString)
                If File.GetCreationTime(xmltemppathname + "f" + format + "c" + catagory + "s" + style + ".xml").AddDays(60) < Date.Now Then
                    lblPbar.Text = "Checking for new mediaicons"
                    ''If messageprompts Then Me.Refresh()()
                    File.SetAttributes(xmltemppathname + "f" + format + "c" + catagory + "s" + style + ".xml", FileAttributes.Normal) 'change attributes
                    File.Delete(xmltemppathname + "f" + format + "c" + catagory + "s" + style + ".xml") 'remove it
                    searchForThumbFromUrl(tvshowname, format, catagory, style)
                    lblPbar.Text = "Checking complete"
                    ''If messageprompts Then Me.Refresh()()
                End If
                'If File.GetCreationTime(xmltemppathname + "f" + format + "c" + catagory + "s" + style + ".xml") < Date.Now Then
            Else
                ''If messageprompts Then Me.Refresh()()
                'If pclogging Then pclog.WriteLine("No XML File in cache, will download xml for: " + xmltemppathname + "f" + format + "c" + catagory + "s" + style + ".xml")
                searchForThumbFromUrl(tvshowname, format, catagory, style)
            End If
        Catch ex As Exception
            Debug.Print(ex.ToString)

        End Try

    End Sub
    Private Sub precacheicons(ByVal selectedNameXMLfile As String, ByVal format As String, ByVal catagory As String, ByVal style As String)
        'take name, read xml (which resets urllists), generate cache
        ReadXMLforSelection(rconf.xmlfolder + selectedNameXMLfile + "f" + format + "c" + catagory + "s" + style + ".xml")
        Dim counter As Integer = 0
        'While counter < cbMaxIconPerStyle.SelectedIndex
        For Each sname As String In urllists
            If counter > pcMaxIconPerStyle Then 'cbMaxIconPerStyle.SelectedIndex Then
                Exit Sub
            End If
            'get only the id (regex)
            Dim fromcache As Boolean
            Dim keyid As String
            If format = "070" Then
                'no matching needed url is complete and is a poster
                keyid = selectedNameXMLfile.ToLower + counter.ToString 'generic
                'sname is already set from the url in the xml file
            Else
                Try
                    keyid = Regex.Match(sname.ToString, ".*key=(?<gkeyid>\d{1,10})&").Groups("gkeyid").Value
                    sname = "http://www.mediaicons.org/Services/GetIcon.ashx?key=" + Convert.ToString(keyid) + "&format=" + format + "&style=" + style + "&type=" + dltype + lconcat + lclient
                Catch ex As ArgumentException
                    Debug.Print("Syntax error in the regular expression")
                    keyid = "0000"
                End Try
            End If

            If keyid = Nothing Then
                'do nothing there is no key to look at 
            Else
                'do the icon processing
                '-------------------------------- CACHE CHECK --------------------------------
                'see if we have a cached copy first
                'regex'key+f(number)+s(number)+t(number)

                Dim checklocal As String = rconf.iconcachefolder + Convert.ToString(keyid) + "f" + format + "c" + catagory + "s" + style + ".jpg"
                If pclogging Then pclog.WriteLine("Looking for icon in cache for: " + checklocal)
                If File.Exists(checklocal) Then
                    If pclogging Then pclog.WriteLine("Found local icon at: " + checklocal)
                    sname = checklocal
                    fromcache = True
                Else
                    If rbem.Checked = True Then
                        If pclogging Then pclog.WriteLine("No local icon attempting to download from: " + sname)
                        fromcache = False
                        'add to download list
                        Debug.Print("No local icon attempting to download from: " + sname)
                        addtodownloadlist(currentmoviedownloadlist, sname, checklocal, "MediaIcons.org Image - " + "f" + format + "c" + catagory + "s" + style + ".jpg")
                        'download (with wait) the image
                        'wget(sname, checklocal, "mediaicon", False, 350)
                        'set it to the local path
                        sname = checklocal
                    Else
                        'offline mode, set sname = nothing
                        sname = ""
                        fromcache = False
                    End If
                End If

            End If

            '    '-------------------------------- CACHE CHECK --------------------------------
            '    'see if we have a cached copy first
            '    'regex'key+f(number)+c(number)+s(number)
            '    Dim checklocal As String = rconf.iconcachefolder + Convert.ToString(keyid) + "f" + format + "c" + catagory + "s" + style + ".jpg"
            '    If File.Exists(checklocal) Then
            '        sname = checklocal
            '        fromcache = True
            '    Else
            '        fromcache = False
            '    End If

            '    If Not fromcache Then
            '        If format = "070" Then
            '            '  Debug.Print(sname.ToString)
            '            Dim newurl As String = Strings.Replace(sname.ToString, " ", "_").ToLower
            '            ' Debug.Print(newurl)
            '            SavePhotoFromUrl2(newurl, checklocal)
            '        Else
            '            SavePhotoFromUrl(checklocal, sname.ToString)
            '            Debug.Print("saving " + checklocal.ToString + " for url: " + sname.ToString)
            '        End If

            '    End If
            'End If

            counter = counter + 1
            'End While

        Next
    End Sub
   
   
    'Private Sub btnSavelist_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
    '    saveconfig()
    'End Sub
 
#Region "   ---> onlick events for icons  <---   "
    Private Sub pbtvwide1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbtvwide1.Click
        savetvci(pbtvwide1)
    End Sub
    Private Sub pbtvwide2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbtvwide2.Click
        savetvci(pbtvwide2)
    End Sub
    Private Sub pbtvwide3_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbtvwide3.Click
        savetvci(pbtvwide3)
    End Sub
    Private Sub pbtvwide4_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbtvwide4.Click
        savetvci(pbtvwide4)
    End Sub
    Private Sub pbtvwide5_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbtvwide5.Click
        savetvci(pbtvwide5)
    End Sub
    Private Sub pbtvwide6_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbtvwide6.Click
        savetvci(pbtvwide6)
    End Sub
    Private Sub pbtvwide7_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbtvwide7.Click
        savetvci(pbtvwide7)
    End Sub
    Private Sub pbtvwide8_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbtvwide8.Click
        savetvci(pbtvwide8)
    End Sub
    Private Sub pbtvwide9_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbtvwide9.Click
        savetvci(pbtvwide9)
    End Sub
    Private Sub pbtvwide10_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbtvwide10.Click
        savetvci(pbtvwide10)
    End Sub
    Private Sub pbtvwide11_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbtvwide11.Click
        savetvci(pbtvwide11)
    End Sub
    Private Sub pbtvwide12_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbtvwide12.Click
        savetvci(pbtvwide12)
    End Sub
    Private Sub pbtvwide13_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbtvwide13.Click
        savetvci(pbtvwide13)
    End Sub
    Private Sub pbtvwide14_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbtvwide14.Click
        savetvci(pbtvwide14)
    End Sub
    Private Sub pbtvwide15_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbtvwide15.Click
        savetvci(pbtvwide15)
    End Sub
    Private Sub pbtvwide16_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbtvwide16.Click
        savetvci(pbtvwide16)
    End Sub
    Private Sub pbtvwide17_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbtvwide17.Click
        savetvci(pbtvwide17)
    End Sub
    Private Sub pbtvwide18_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbtvwide18.Click
        savetvci(pbtvwide18)
    End Sub
    Private Sub pbtvwide19_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbtvwide19.Click
        savetvci(pbtvwide19)
    End Sub
    Private Sub pbtvwide20_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbtvwide20.Click
        savetvci(pbtvwide20)
    End Sub
    Private Sub pbtvwide21_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbtvwide21.Click
        savetvci(pbtvwide21)
    End Sub
    Private Sub pbtvwide22_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbtvwide22.Click
        savetvci(pbtvwide22)
    End Sub
    Private Sub pbtvwide23_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbtvwide23.Click
        savetvci(pbtvwide23)
    End Sub
    Private Sub pbtvwide24_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbtvwide24.Click
        savetvci(pbtvwide24)
    End Sub
    Private Sub pb1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pb1.Click
        saveci(pb1)
    End Sub
    Private Sub pb2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pb2.Click
        saveci(pb2)
    End Sub
    Private Sub pb3_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pb3.Click
        saveci(pb3)
    End Sub
    Private Sub pb4_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pb4.Click
        saveci(pb4)
    End Sub
    Private Sub pb5_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pb5.Click
        saveci(pb5)
    End Sub
    Private Sub pb6_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pb6.Click
        saveci(pb6)
    End Sub
    Private Sub pb7_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pb7.Click
        saveci(pb7)
    End Sub
    Private Sub pb8_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pb8.Click
        saveci(pb8)
    End Sub
    Private Sub pb9_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pb9.Click
        saveci(pb9)
    End Sub
    Private Sub pb10_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pb10.Click
        saveci(pb10)
    End Sub
    Private Sub pb11_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pb11.Click
        saveci(pb11)
    End Sub
    Private Sub pb12_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pb12.Click
        saveci(pb12)
    End Sub
    Private Sub pb13_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pb13.Click
        saveci(pb13)
    End Sub
    Private Sub pb14_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pb14.Click
        saveci(pb14)
    End Sub
    Private Sub pb15_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pb15.Click
        saveci(pb15)
    End Sub
    Private Sub pb16_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pb16.Click
        saveci(pb16)
    End Sub
    Private Sub pb17_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pb17.Click
        saveci(pb17)
    End Sub
    Private Sub pb18_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pb18.Click
        saveci(pb18)
    End Sub
    Private Sub pb19_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pb19.Click
        saveci(pb19)
    End Sub
    Private Sub pb20_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pb20.Click
        saveci(pb20)
    End Sub
    Private Sub pb21_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pb21.Click
        saveci(pb21)
    End Sub
    Private Sub pb22_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pb22.Click
        saveci(pb22)
    End Sub
    Private Sub pb23_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pb23.Click
        saveci(pb23)
    End Sub
    Private Sub pb24_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pb24.Click
        saveci(pb24)
    End Sub
    Private Sub pb25_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pb25.Click
        saveci(pb25)
    End Sub
    Private Sub pb26_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pb26.Click
        saveci(pb26)
    End Sub
    Private Sub pb27_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pb27.Click
        saveci(pb27)
    End Sub
    Private Sub pb28_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pb28.Click
        saveci(pb28)
    End Sub
    Private Sub pb29_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pb29.Click
        saveci(pb29)
    End Sub
    Private Sub pb30_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pb30.Click
        saveci(pb30)
    End Sub
    Private Sub pb31_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pb31.Click
        saveci(pb31)
    End Sub
    Private Sub pb32_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pb32.Click
        saveci(pb32)
    End Sub
    Private Sub pb33_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pb33.Click
        saveci(pb33)
    End Sub
    Private Sub pb34_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pb34.Click
        saveci(pb34)
    End Sub
    Private Sub pb35_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pb35.Click
        saveci(pb35)
    End Sub
    Private Sub pb36_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pb36.Click
        saveci(pb36)
    End Sub
    Private Sub pbwns1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwns1.Click
        saveci(pbwns1)
    End Sub

    Private Sub pbwns2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwns2.Click
        saveci(pbwns2)
    End Sub

    Private Sub pbwns3_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwns3.Click
        saveci(pbwns3)
    End Sub

    Private Sub pbwns4_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwns4.Click
        saveci(pbwns4)
    End Sub

    Private Sub pbwns5_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwns5.Click
        saveci(pbwns5)
    End Sub

    Private Sub pbwns6_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwns6.Click
        saveci(pbwns6)
    End Sub

    Private Sub pbwns7_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwns7.Click
        saveci(pbwns7)
    End Sub

    Private Sub pbwns8_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwns8.Click
        saveci(pbwns8)
    End Sub

    Private Sub pbwns9_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwns9.Click
        saveci(pbwns9)
    End Sub

    Private Sub pbwns10_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwns10.Click
        saveci(pbwns10)
    End Sub

    Private Sub pbwns11_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwns11.Click
        saveci(pbwns11)
    End Sub

    Private Sub pbwns12_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwns12.Click
        saveci(pbwns12)
    End Sub

    Private Sub pbwns13_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwns13.Click
        saveci(pbwns13)
    End Sub

    Private Sub pbwns14_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwns14.Click
        saveci(pbwns14)
    End Sub

    Private Sub pbwns15_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwns15.Click
        saveci(pbwns15)
    End Sub

    Private Sub pbwns16_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwns16.Click
        saveci(pbwns16)
    End Sub

    Private Sub pbwns17_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwns17.Click
        saveci(pbwns17)
    End Sub

    Private Sub pbwns18_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwns18.Click
        saveci(pbwns18)
    End Sub

    Private Sub pbwns19_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwns19.Click
        saveci(pbwns19)
    End Sub

    Private Sub pbwns20_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwns20.Click
        saveci(pbwns20)
    End Sub

    Private Sub pbwns21_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwns21.Click
        saveci(pbwns21)
    End Sub

    Private Sub pbwns22_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwns22.Click
        saveci(pbwns22)
    End Sub

    Private Sub pbwns23_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwns23.Click
        saveci(pbwns23)
    End Sub

    Private Sub pbwns24_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwns24.Click
        saveci(pbwns24)
    End Sub

    Private Sub pbwns25_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwns25.Click
        saveci(pbwns25)
    End Sub

    Private Sub pbwns26_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwns26.Click
        saveci(pbwns26)
    End Sub

    Private Sub pbwns27_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwns27.Click
        saveci(pbwns27)
    End Sub

    Private Sub pbwns28_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwns28.Click
        saveci(pbwns28)
    End Sub

    Private Sub pbwns29_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwns29.Click
        saveci(pbwns29)
    End Sub

    Private Sub pbwns30_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwns30.Click
        saveci(pbwns30)
    End Sub

    Private Sub pbwns31_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwns31.Click
        saveci(pbwns31)
    End Sub

    Private Sub pbwns32_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwns32.Click
        saveci(pbwns32)
    End Sub

    Private Sub pbwns33_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwns33.Click
        saveci(pbwns33)
    End Sub

    Private Sub pbwns34_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwns34.Click
        saveci(pbwns34)
    End Sub

    Private Sub pbwns35_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwns35.Click
        saveci(pbwns35)
    End Sub

    Private Sub pbwns36_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwns36.Click
        saveci(pbwns36)
    End Sub
    Private Sub pbwrs1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrs1.Click
        saveci(pbwrs1)
    End Sub

    Private Sub pbwrs2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrs2.Click
        saveci(pbwrs2)
    End Sub

    Private Sub pbwrs3_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrs3.Click
        saveci(pbwrs3)
    End Sub

    Private Sub pbwrs4_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrs4.Click
        saveci(pbwrs4)
    End Sub

    Private Sub pbwrs5_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrs5.Click
        saveci(pbwrs5)
    End Sub

    Private Sub pbwrs6_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrs6.Click
        saveci(pbwrs6)
    End Sub

    Private Sub pbwrs7_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrs7.Click
        saveci(pbwrs7)
    End Sub

    Private Sub pbwrs8_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrs8.Click
        saveci(pbwrs8)
    End Sub

    Private Sub pbwrs9_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrs9.Click
        saveci(pbwrs9)
    End Sub

    Private Sub pbwrs10_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrs10.Click
        saveci(pbwrs10)
    End Sub

    Private Sub pbwrs11_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrs11.Click
        saveci(pbwrs11)
    End Sub

    Private Sub pbwrs12_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrs12.Click
        saveci(pbwrs12)
    End Sub

    Private Sub pbwrs13_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrs13.Click
        saveci(pbwrs13)
    End Sub

    Private Sub pbwrs14_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrs14.Click
        saveci(pbwrs14)
    End Sub

    Private Sub pbwrs15_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrs15.Click
        saveci(pbwrs15)
    End Sub

    Private Sub pbwrs16_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrs16.Click
        saveci(pbwrs16)
    End Sub

    Private Sub pbwrs17_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrs17.Click
        saveci(pbwrs17)
    End Sub

    Private Sub pbwrs18_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrs18.Click
        saveci(pbwrs18)
    End Sub

    Private Sub pbwrs19_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrs19.Click
        saveci(pbwrs19)
    End Sub

    Private Sub pbwrs20_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrs20.Click
        saveci(pbwrs20)
    End Sub

    Private Sub pbwrs21_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrs21.Click
        saveci(pbwrs21)
    End Sub

    Private Sub pbwrs22_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrs22.Click
        saveci(pbwrs22)
    End Sub

    Private Sub pbwrs23_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrs23.Click
        saveci(pbwrs23)
    End Sub

    Private Sub pbwrs24_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrs24.Click
        saveci(pbwrs24)
    End Sub

    Private Sub pbwrs25_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrs25.Click
        saveci(pbwrs25)
    End Sub

    Private Sub pbwrs26_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrs26.Click
        saveci(pbwrs26)
    End Sub

    Private Sub pbwrs27_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrs27.Click
        saveci(pbwrs27)
    End Sub

    Private Sub pbwrs28_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrs28.Click
        saveci(pbwrs28)
    End Sub

    Private Sub pbwrs29_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrs29.Click
        saveci(pbwrs29)
    End Sub

    Private Sub pbwrs30_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrs30.Click
        saveci(pbwrs30)
    End Sub

    Private Sub pbwrs31_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrs31.Click
        saveci(pbwrs31)
    End Sub

    Private Sub pbwrs32_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrs32.Click
        saveci(pbwrs32)
    End Sub

    Private Sub pbwrs33_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrs33.Click
        saveci(pbwrs33)
    End Sub

    Private Sub pbwrs34_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrs34.Click
        saveci(pbwrs34)
    End Sub

    Private Sub pbwrs35_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrs35.Click
        saveci(pbwrs35)
    End Sub

    Private Sub pbwrs36_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrs36.Click
        saveci(pbwrs36)
    End Sub
    Private Sub pbwrsscan1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrsscan1.Click
        saveci(pbwrsscan1)
    End Sub

    Private Sub pbwrsscan2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrsscan2.Click
        saveci(pbwrsscan2)
    End Sub

    Private Sub pbwrsscan3_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrsscan3.Click
        saveci(pbwrsscan3)
    End Sub

    Private Sub pbwrsscan4_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrsscan4.Click
        saveci(pbwrsscan4)
    End Sub

    Private Sub pbwrsscan5_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrsscan5.Click
        saveci(pbwrsscan5)
    End Sub

    Private Sub pbwrsscan6_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrsscan6.Click
        saveci(pbwrsscan6)
    End Sub

    Private Sub pbwrsscan7_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrsscan7.Click
        saveci(pbwrsscan7)
    End Sub

    Private Sub pbwrsscan8_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrsscan8.Click
        saveci(pbwrsscan8)
    End Sub

    Private Sub pbwrsscan9_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrsscan9.Click
        saveci(pbwrsscan9)
    End Sub

    Private Sub pbwrsscan10_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrsscan10.Click
        saveci(pbwrsscan10)
    End Sub

    Private Sub pbwrsscan11_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrsscan11.Click
        saveci(pbwrsscan11)
    End Sub

    Private Sub pbwrsscan12_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrsscan12.Click
        saveci(pbwrsscan12)
    End Sub

    Private Sub pbwrsscan13_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrsscan13.Click
        saveci(pbwrsscan13)
    End Sub

    Private Sub pbwrsscan14_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrsscan14.Click
        saveci(pbwrsscan14)
    End Sub

    Private Sub pbwrsscan15_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrsscan15.Click
        saveci(pbwrsscan15)
    End Sub

    Private Sub pbwrsscan16_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrsscan16.Click
        saveci(pbwrsscan16)
    End Sub

    Private Sub pbwrsscan17_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrsscan17.Click
        saveci(pbwrsscan17)
    End Sub

    Private Sub pbwrsscan18_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrsscan18.Click
        saveci(pbwrsscan18)
    End Sub

    Private Sub pbwrsscan19_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrsscan19.Click
        saveci(pbwrsscan19)
    End Sub

    Private Sub pbwrsscan20_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrsscan20.Click
        saveci(pbwrsscan20)
    End Sub

    Private Sub pbwrsscan21_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrsscan21.Click
        saveci(pbwrsscan21)
    End Sub

    Private Sub pbwrsscan22_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrsscan22.Click
        saveci(pbwrsscan22)
    End Sub

    Private Sub pbwrsscan23_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrsscan23.Click
        saveci(pbwrsscan23)
    End Sub

    Private Sub pbwrsscan24_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrsscan24.Click
        saveci(pbwrsscan24)
    End Sub

    Private Sub pbwrsscan25_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrsscan25.Click
        saveci(pbwrsscan25)
    End Sub

    Private Sub pbwrsscan26_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrsscan26.Click
        saveci(pbwrsscan26)
    End Sub

    Private Sub pbwrsscan27_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrsscan27.Click
        saveci(pbwrsscan27)
    End Sub

    Private Sub pbwrsscan28_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrsscan28.Click
        saveci(pbwrsscan28)
    End Sub

    Private Sub pbwrsscan29_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrsscan29.Click
        saveci(pbwrsscan29)
    End Sub

    Private Sub pbwrsscan30_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrsscan30.Click
        saveci(pbwrsscan30)
    End Sub

    Private Sub pbwrsscan31_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrsscan31.Click
        saveci(pbwrsscan31)
    End Sub

    Private Sub pbwrsscan32_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrsscan32.Click
        saveci(pbwrsscan32)
    End Sub

    Private Sub pbwrsscan33_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrsscan33.Click
        saveci(pbwrsscan33)
    End Sub

    Private Sub pbwrsscan34_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrsscan34.Click
        saveci(pbwrsscan34)
    End Sub

    Private Sub pbwrsscan35_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrsscan35.Click
        saveci(pbwrsscan35)
    End Sub

    Private Sub pbwrsscan36_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbwrsscan36.Click
        saveci(pbwrsscan36)
    End Sub

    Private Sub bspb1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb1.Click
        saveci(bspb1)
    End Sub

    Private Sub bspb2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb2.Click
        saveci(bspb2)
    End Sub
    Private Sub bspb3_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb3.Click
        saveci(bspb3)
    End Sub
    Private Sub bspb4_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb4.Click
        saveci(bspb4)
    End Sub
    Private Sub bspb5_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb5.Click
        saveci(bspb5)
    End Sub
    Private Sub bspb6_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb6.Click
        saveci(bspb6)
    End Sub
    Private Sub bspb7_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb7.Click
        saveci(bspb7)
    End Sub
    Private Sub bspb8_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb8.Click
        saveci(bspb8)
    End Sub
    Private Sub bspb9_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb9.Click
        saveci(bspb9)
    End Sub
    Private Sub bspb10_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb10.Click
        saveci(bspb10)
    End Sub
    Private Sub bspb11_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb11.Click
        saveci(bspb11)
    End Sub
    Private Sub bspb12_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb12.Click
        saveci(bspb12)
    End Sub
    Private Sub bspb13_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb13.Click
        saveci(bspb13)
    End Sub
    Private Sub bspb14_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb14.Click
        saveci(bspb14)
    End Sub
    Private Sub bspb15_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb15.Click
        saveci(bspb15)
    End Sub
    Private Sub bspb16_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb16.Click
        saveci(bspb16)
    End Sub
    Private Sub bspb17_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb17.Click
        saveci(bspb17)
    End Sub
    Private Sub bspb18_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb18.Click
        saveci(bspb18)
    End Sub
    Private Sub bspb19_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb19.Click
        saveci(bspb19)
    End Sub
    Private Sub bspb20_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb20.Click
        saveci(bspb20)
    End Sub
    Private Sub bspb21_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb21.Click
        saveci(bspb21)
    End Sub
    Private Sub bspb22_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb22.Click
        saveci(bspb22)
    End Sub
    Private Sub bspb23_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb23.Click
        saveci(bspb23)
    End Sub
    Private Sub bspb24_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb24.Click
        saveci(bspb24)
    End Sub
    Private Sub bspb25_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb25.Click
        saveci(bspb25)
    End Sub
    Private Sub bspb26_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb26.Click
        saveci(bspb26)
    End Sub
    Private Sub bspb27_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb27.Click
        saveci(bspb27)
    End Sub
    Private Sub bspb28_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb28.Click
        saveci(bspb28)
    End Sub
    Private Sub bspb29_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb29.Click
        saveci(bspb29)
    End Sub
    Private Sub bspb30_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb30.Click
        saveci(bspb30)
    End Sub
    Private Sub bspb31_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb31.Click
        saveci(bspb31)
    End Sub
    Private Sub bspb32_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb32.Click
        saveci(bspb32)
    End Sub
    Private Sub bspb33_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb33.Click
        saveci(bspb33)
    End Sub
    Private Sub bspb34_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb34.Click
        saveci(bspb34)
    End Sub
    Private Sub bspb35_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb35.Click
        saveci(bspb35)
    End Sub
    Private Sub bspb36_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb36.Click
        saveci(bspb36)
    End Sub
    Private Sub bspb37_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb37.Click
        saveci(bspb37)
    End Sub
    Private Sub bspb38_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb38.Click
        saveci(bspb38)
    End Sub
    Private Sub bspb39_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb39.Click
        saveci(bspb39)
    End Sub
    Private Sub bspb40_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb40.Click
        saveci(bspb40)
    End Sub
    Private Sub bspb41_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb41.Click
        saveci(bspb41)
    End Sub
    Private Sub bspb42_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb42.Click
        saveci(bspb42)
    End Sub
    Private Sub bspb43_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb43.Click
        saveci(bspb43)
    End Sub
    Private Sub bspb44_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb44.Click
        saveci(bspb44)
    End Sub
    Private Sub bspb45_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb45.Click
        saveci(bspb45)
    End Sub
    Private Sub bspb46_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb46.Click
        saveci(bspb46)
    End Sub
    Private Sub bspb47_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb47.Click
        saveci(bspb47)
    End Sub
    Private Sub bspb48_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb48.Click
        saveci(bspb48)
    End Sub
    Private Sub bspb49_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb49.Click
        saveci(bspb49)
    End Sub
    Private Sub bspb50_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb50.Click
        saveci(bspb50)
    End Sub
    Private Sub bspb51_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb51.Click
        saveci(bspb51)
    End Sub
    Private Sub bspb52_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb52.Click
        saveci(bspb52)
    End Sub
    Private Sub bspb53_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb53.Click
        saveci(bspb53)
    End Sub
    Private Sub bspb54_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb54.Click
        saveci(bspb54)
    End Sub
    Private Sub bspb55_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb55.Click
        saveci(bspb55)
    End Sub
    Private Sub bspb56_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb56.Click
        saveci(bspb56)
    End Sub
    Private Sub bspb57_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb57.Click
        saveci(bspb57)
    End Sub
    Private Sub bspb58_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb58.Click
        saveci(bspb58)
    End Sub
    Private Sub bspb59_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb59.Click
        saveci(bspb59)
    End Sub
    Private Sub bspb60_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb60.Click
        saveci(bspb60)
    End Sub
    Private Sub bspb61_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb61.Click
        saveci(bspb61)
    End Sub
    Private Sub bspb62_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb62.Click
        saveci(bspb62)
    End Sub
    Private Sub bspb63_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb63.Click
        saveci(bspb63)
    End Sub
    Private Sub bspb64_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb64.Click
        saveci(bspb64)
    End Sub
    Private Sub bspb65_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb65.Click
        saveci(bspb65)
    End Sub
    Private Sub bspb66_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb66.Click
        saveci(bspb66)
    End Sub
    Private Sub bspb67_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb67.Click
        saveci(bspb67)
    End Sub
    Private Sub bspb68_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb68.Click
        saveci(bspb68)
    End Sub
    Private Sub bspb69_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb69.Click
        saveci(bspb69)
    End Sub
    Private Sub bspb70_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb70.Click
        saveci(bspb70)
    End Sub
    Private Sub bspb71_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb71.Click
        saveci(bspb71)
    End Sub
    Private Sub bspb72_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb72.Click
        saveci(bspb72)
    End Sub
    Private Sub bspb73_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb73.Click
        saveci(bspb73)
    End Sub
    Private Sub bspb74_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb74.Click
        saveci(bspb74)
    End Sub
    Private Sub bspb75_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb75.Click
        saveci(bspb75)
    End Sub
    Private Sub bspb76_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb76.Click
        saveci(bspb76)
    End Sub
    Private Sub bspb77_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb77.Click
        saveci(bspb77)
    End Sub
    Private Sub bspb78_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb78.Click
        saveci(bspb78)
    End Sub
    Private Sub bspb79_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb79.Click
        saveci(bspb79)
    End Sub
    Private Sub bspb80_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb80.Click
        saveci(bspb80)
    End Sub
    Private Sub bspb81_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb81.Click
        saveci(bspb81)
    End Sub
    Private Sub bspb82_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb82.Click
        saveci(bspb82)
    End Sub
    Private Sub bspb83_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb83.Click
        saveci(bspb83)
    End Sub
    Private Sub bspb84_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb84.Click
        saveci(bspb84)
    End Sub
    Private Sub bspb85_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb85.Click
        saveci(bspb85)
    End Sub
    Private Sub bspb86_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb86.Click
        saveci(bspb86)
    End Sub
    Private Sub bspb87_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb87.Click
        saveci(bspb87)
    End Sub
    Private Sub bspb88_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb88.Click
        saveci(bspb88)
    End Sub
    Private Sub bspb89_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb89.Click
        saveci(bspb89)
    End Sub
    Private Sub bspb90_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb90.Click
        saveci(bspb90)
    End Sub
    Private Sub bspb91_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb91.Click
        saveci(bspb91)
    End Sub
    Private Sub bspb92_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb92.Click
        saveci(bspb92)
    End Sub
    Private Sub bspb93_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb93.Click
        saveci(bspb93)
    End Sub
    'Private Sub bspb94_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb94.Click
    '    saveci(bspb94)
    'End Sub
    'Private Sub bspb95_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb95.Click
    '    saveci(bspb95)
    'End Sub
    'Private Sub bspb96_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb96.Click
    '    saveci(bspb96)
    'End Sub
    'Private Sub bspb97_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb97.Click
    '    saveci(bspb97)
    'End Sub
    'Private Sub bspb98_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb98.Click
    '    saveci(bspb98)
    'End Sub
    'Private Sub bspb99_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bspb99.Click
    '    saveci(bspb99)
    'End Sub
    Private Sub spb1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles spb1.Click
        saveci(spb1)
    End Sub
    Private Sub spb2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles spb2.Click
        saveci(spb2)
    End Sub
    Private Sub spb3_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles spb3.Click
        saveci(spb3)
    End Sub
    Private Sub spb4_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles spb4.Click
        saveci(spb4)
    End Sub
    Private Sub spb5_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles spb5.Click
        saveci(spb5)
    End Sub
    Private Sub spb6_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles spb6.Click
        saveci(spb6)
    End Sub
    Private Sub spb7_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles spb7.Click
        saveci(spb7)
    End Sub
    Private Sub spb8_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles spb8.Click
        saveci(spb8)
    End Sub
    Private Sub spb9_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles spb9.Click
        saveci(spb9)
    End Sub
    Private Sub spb10_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles spb10.Click
        saveci(spb10)
    End Sub
    Private Sub spb11_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles spb11.Click
        saveci(spb11)
    End Sub
    Private Sub spb12_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles spb12.Click
        saveci(spb12)
    End Sub
    Private Sub spb13_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles spb13.Click
        saveci(spb13)
    End Sub
    Private Sub spb14_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles spb14.Click
        saveci(spb14)
    End Sub
    Private Sub spb15_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles spb15.Click
        saveci(spb15)
    End Sub
    Private Sub spb16_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles spb16.Click
        saveci(spb16)
    End Sub
    Private Sub spb17_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles spb17.Click
        saveci(spb17)
    End Sub
    Private Sub spb18_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles spb18.Click
        saveci(spb18)
    End Sub
    Private Sub spb19_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles spb19.Click
        saveci(spb19)
    End Sub
    Private Sub spb20_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles spb20.Click
        saveci(spb20)
    End Sub
    Private Sub spb21_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles spb21.Click
        saveci(spb21)
    End Sub
    Private Sub spb22_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles spb22.Click
        saveci(spb22)
    End Sub
    Private Sub spb23_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles spb23.Click
        saveci(spb23)
    End Sub
    Private Sub spb24_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles spb24.Click
        saveci(spb24)
    End Sub
    Private Sub tpb1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tpb1.Click
        saveci(tpb1)
    End Sub
    Private Sub tpb2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tpb2.Click
        saveci(tpb2)
    End Sub
    Private Sub tpb3_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tpb3.Click
        saveci(tpb3)
    End Sub
    Private Sub tpb4_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tpb4.Click
        saveci(tpb4)
    End Sub
    Private Sub tpb5_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tpb5.Click
        saveci(tpb5)
    End Sub
    Private Sub tpb6_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tpb6.Click
        saveci(tpb6)
    End Sub
    Private Sub tpb7_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tpb7.Click
        saveci(tpb7)
    End Sub
    Private Sub tpb8_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tpb8.Click
        saveci(tpb8)
    End Sub
    Private Sub tpb9_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tpb9.Click
        saveci(tpb9)
    End Sub
    Private Sub tpb10_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tpb10.Click
        saveci(tpb10)
    End Sub
    Private Sub tpb11_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tpb11.Click
        saveci(tpb11)
    End Sub
    Private Sub tpb12_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tpb12.Click
        saveci(tpb12)
    End Sub

    Private Sub pbposterTMDB1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbposterTMDB1.Click
        saveciphd(pbposterTMDB1)
    End Sub
    Private Sub pbposterTMDB2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbposterTMDB2.Click
        saveciphd(pbposterTMDB2)
    End Sub
    Private Sub pbposterTMDB3_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbposterTMDB3.Click
        saveciphd(pbposterTMDB3)
    End Sub
    Private Sub pbposterTMDB4_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbposterTMDB4.Click
        saveciphd(pbposterTMDB4)
    End Sub
    Private Sub pbposterTMDB5_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbposterTMDB5.Click
        saveciphd(pbposterTMDB5)
    End Sub
    Private Sub pbposterTMDB6_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbposterTMDB6.Click
        saveciphd(pbposterTMDB6)
    End Sub
    Private Sub pbposterTMDB7_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbposterTMDB7.Click
        saveciphd(pbposterTMDB7)
    End Sub
    Private Sub pbposterTMDB8_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbposterTMDB8.Click
        saveciphd(pbposterTMDB8)
    End Sub
    Private Sub pbposterTMDB9_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbposterTMDB9.Click
        saveciphd(pbposterTMDB9)
    End Sub
    Private Sub pbposterTMDB10_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbposterTMDB10.Click
        saveciphd(pbposterTMDB10)
    End Sub
    Private Sub pbposterTMDB11_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbposterTMDB11.Click
        saveciphd(pbposterTMDB11)
    End Sub
    Private Sub pbposterTMDB12_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbposterTMDB12.Click
        saveciphd(pbposterTMDB12)
    End Sub
    Private Sub pbposterTMDB13_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbposterTMDB13.Click
        saveciphd(pbposterTMDB13)
    End Sub
    Private Sub pbposterTMDB14_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbposterTMDB14.Click
        saveciphd(pbposterTMDB14)
    End Sub
    Private Sub pbposterTMDB15_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbposterTMDB15.Click
        saveciphd(pbposterTMDB15)
    End Sub
    Private Sub pbposterTMDB16_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbposterTMDB16.Click
        saveciphd(pbposterTMDB16)
    End Sub
    Private Sub pbposterTMDB17_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbposterTMDB17.Click
        saveciphd(pbposterTMDB17)
    End Sub
    Private Sub pbposterTMDB18_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbposterTMDB18.Click
        saveciphd(pbposterTMDB18)
    End Sub
    Private Sub pbposterTMDB19_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbposterTMDB19.Click
        saveciphd(pbposterTMDB19)
    End Sub
    Private Sub pbposterTMDB20_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbposterTMDB20.Click
        saveciphd(pbposterTMDB20)
    End Sub
    Private Sub pbposterTMDB21_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbposterTMDB21.Click
        saveciphd(pbposterTMDB21)
    End Sub
    Private Sub pbposterTMDB22_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbposterTMDB22.Click
        saveciphd(pbposterTMDB22)
    End Sub
    Private Sub pbposterTMDB23_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbposterTMDB23.Click
        saveciphd(pbposterTMDB23)
    End Sub
    Private Sub pbposterTMDB24_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbposterTMDB24.Click
        saveciphd(pbposterTMDB24)
    End Sub

    Private Sub posterpb1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbposterIMP1.Click
        savecip(pbposterIMP1)
    End Sub
    Private Sub posterpb2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbposterIMP2.Click
        savecip(pbposterIMP2)
    End Sub
    Private Sub posterpb3_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbposterIMP3.Click
        savecip(pbposterIMP3)
    End Sub
    Private Sub posterpb4_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbposterIMP4.Click
        savecip(pbposterIMP4)
    End Sub
    Private Sub posterpb5_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbposterIMP5.Click
        savecip(pbposterIMP5)
    End Sub
    Private Sub posterpb6_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbposterIMP6.Click
        savecip(pbposterIMP6)
    End Sub
    Private Sub posterpb7_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbposterIMP7.Click
        savecip(pbposterIMP7)
    End Sub
    Private Sub posterpb8_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbposterIMP8.Click
        savecip(pbposterIMP8)
    End Sub
    Private Sub posterpb9_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbposterIMP9.Click
        savecip(pbposterIMP9)
    End Sub
    Private Sub posterpb10_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbposterIMP10.Click
        savecip(pbposterIMP10)
    End Sub
    Private Sub posterpb11_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbposterIMP11.Click
        savecip(pbposterIMP11)
    End Sub
    Private Sub posterpb12_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbposterIMP12.Click
        savecip(pbposterIMP12)
    End Sub
    Private Sub posterpb13_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbposterIMP13.Click
        savecip(pbposterIMP13)
    End Sub
    Private Sub posterpb14_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbposterIMP14.Click
        savecip(pbposterIMP14)
    End Sub
    Private Sub posterpb15_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbposterIMP15.Click
        savecip(pbposterIMP15)
    End Sub
    Private Sub posterpb16_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbposterIMP16.Click
        savecip(pbposterIMP16)
    End Sub
    Private Sub posterpb17_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbposterIMP17.Click
        savecip(pbposterIMP17)
    End Sub
    Private Sub posterpb18_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbposterIMP18.Click
        savecip(pbposterIMP18)
    End Sub
    Private Sub posterpb19_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbposterIMP19.Click
        savecip(pbposterIMP19)
    End Sub
    Private Sub posterpb20_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbposterIMP20.Click
        savecip(pbposterIMP20)
    End Sub
    Private Sub posterpb21_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbposterIMP21.Click
        savecip(pbposterIMP21)
    End Sub
    Private Sub posterpb22_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbposterIMP22.Click
        savecip(pbposterIMP22)
    End Sub
    Private Sub posterpb23_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbposterIMP23.Click
        savecip(pbposterIMP23)
    End Sub
    Private Sub posterpb24_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbposterIMP24.Click
        savecip(pbposterIMP24)
    End Sub
    Private Sub pbfatmdb1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb1.Click
        savecfa(pbfatmdb1)
    End Sub
    Private Sub pbfatmdb2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb2.Click
        savecfa(pbfatmdb2)
    End Sub
    Private Sub pbfatmdb3_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb3.Click
        savecfa(pbfatmdb3)
    End Sub
    Private Sub pbfatmdb4_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb4.Click
        savecfa(pbfatmdb4)
    End Sub
    Private Sub pbfatmdb5_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb5.Click
        savecfa(pbfatmdb5)
    End Sub
    Private Sub pbfatmdb6_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb6.Click
        savecfa(pbfatmdb6)
    End Sub
    Private Sub pbfatmdb7_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb7.Click
        savecfa(pbfatmdb7)
    End Sub
    Private Sub pbfatmdb8_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb8.Click
        savecfa(pbfatmdb8)
    End Sub
    Private Sub pbfatmdb9_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb9.Click
        savecfa(pbfatmdb9)
    End Sub
    Private Sub pbfatmdb10_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb10.Click
        savecfa(pbfatmdb10)
    End Sub
    Private Sub pbfatmdb11_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb11.Click
        savecfa(pbfatmdb11)
    End Sub
    Private Sub pbfatmdb12_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb12.Click
        savecfa(pbfatmdb12)
    End Sub
    Private Sub pbfatmdb13_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb13.Click
        savecfa(pbfatmdb13)
    End Sub
    Private Sub pbfatmdb14_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb14.Click
        savecfa(pbfatmdb14)
    End Sub
    Private Sub pbfatmdb15_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb15.Click
        savecfa(pbfatmdb15)
    End Sub
    Private Sub pbfatmdb16_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb16.Click
        savecfa(pbfatmdb16)
    End Sub
    Private Sub pbfatmdb17_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb17.Click
        savecfa(pbfatmdb17)
    End Sub
    Private Sub pbfatmdb18_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb18.Click
        savecfa(pbfatmdb18)
    End Sub
    Private Sub pbfatmdb19_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb19.Click
        savecfa(pbfatmdb19)
    End Sub
    Private Sub pbfatmdb20_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb20.Click
        savecfa(pbfatmdb20)
    End Sub
    Private Sub pbfatmdb21_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb21.Click
        savecfa(pbfatmdb21)
    End Sub
    Private Sub pbfatmdb22_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb22.Click
        savecfa(pbfatmdb22)
    End Sub
    Private Sub pbfatmdb23_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb23.Click
        savecfa(pbfatmdb23)
    End Sub
    Private Sub pbfatmdb24_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb24.Click
        savecfa(pbfatmdb24)
    End Sub
    Private Sub pbfatmdb25_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb25.Click
        savecfa(pbfatmdb25)
    End Sub
    Private Sub pbfatmdb26_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb26.Click
        savecfa(pbfatmdb26)
    End Sub
    Private Sub pbfatmdb27_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb27.Click
        savecfa(pbfatmdb27)
    End Sub
    Private Sub pbfatmdb28_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb28.Click
        savecfa(pbfatmdb28)
    End Sub
    Private Sub pbfatmdb29_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb29.Click
        savecfa(pbfatmdb29)
    End Sub
    Private Sub pbfatmdb30_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb30.Click
        savecfa(pbfatmdb30)
    End Sub
    Private Sub pbfatmdb31_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb31.Click
        savecfa(pbfatmdb31)
    End Sub
    Private Sub pbfatmdb32_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb32.Click
        savecfa(pbfatmdb32)
    End Sub
    Private Sub pbfatmdb33_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb33.Click
        savecfa(pbfatmdb33)
    End Sub
    Private Sub pbfatmdb34_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb34.Click
        savecfa(pbfatmdb34)
    End Sub
    Private Sub pbfatmdb35_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb35.Click
        savecfa(pbfatmdb35)
    End Sub
    Private Sub pbfatmdb36_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb36.Click
        savecfa(pbfatmdb36)
    End Sub
    'Private Sub pbfatmdb37_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb37.Click
    '    savecfa(pbfatmdb37)
    'End Sub
    'Private Sub pbfatmdb38_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb38.Click
    '    savecfa(pbfatmdb38)
    'End Sub
    'Private Sub pbfatmdb39_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb39.Click
    '    savecfa(pbfatmdb39)
    'End Sub
    'Private Sub pbfatmdb40_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb40.Click
    '    savecfa(pbfatmdb40)
    'End Sub
    'Private Sub pbfatmdb41_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb41.Click
    '    savecfa(pbfatmdb41)
    'End Sub
    'Private Sub pbfatmdb42_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb42.Click
    '    savecfa(pbfatmdb42)
    'End Sub
    'Private Sub pbfatmdb43_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb43.Click
    '    savecfa(pbfatmdb43)
    'End Sub
    'Private Sub pbfatmdb44_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb44.Click
    '    savecfa(pbfatmdb44)
    'End Sub
    'Private Sub pbfatmdb45_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb45.Click
    '    savecfa(pbfatmdb45)
    'End Sub
    'Private Sub pbfatmdb46_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb46.Click
    '    savecfa(pbfatmdb46)
    'End Sub
    'Private Sub pbfatmdb47_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb47.Click
    '    savecfa(pbfatmdb47)
    'End Sub
    'Private Sub pbfatmdb48_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb48.Click
    '    savecfa(pbfatmdb48)
    'End Sub
    'Private Sub pbfatmdb49_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb49.Click
    '    savecfa(pbfatmdb49)
    'End Sub
    'Private Sub pbfatmdb50_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb50.Click
    '    savecfa(pbfatmdb50)
    'End Sub

    '---- Tall Images -----

    Private Sub pbti1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti1.Click
        savecip(pbti1)
    End Sub
    Private Sub pbti2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti2.Click
        savecip(pbti2)
    End Sub
    Private Sub pbti3_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti3.Click
        savecip(pbti3)
    End Sub
    Private Sub pbti4_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti4.Click
        savecip(pbti4)
    End Sub
    Private Sub pbti5_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti5.Click
        savecip(pbti5)
    End Sub
    Private Sub pbti6_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti6.Click
        savecip(pbti6)
    End Sub
    Private Sub pbti7_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti7.Click
        savecip(pbti7)
    End Sub
    Private Sub pbti8_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti8.Click
        savecip(pbti8)
    End Sub
    Private Sub pbti9_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti9.Click
        savecip(pbti9)
    End Sub
    Private Sub pbti10_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti10.Click
        savecip(pbti10)
    End Sub
    Private Sub pbti11_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti11.Click
        savecip(pbti11)
    End Sub
    Private Sub pbti12_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti12.Click
        savecip(pbti12)
    End Sub
    Private Sub pbti13_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti13.Click
        savecip(pbti13)
    End Sub
    Private Sub pbti14_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti14.Click
        savecip(pbti14)
    End Sub
    Private Sub pbti15_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti15.Click
        savecip(pbti15)
    End Sub
    Private Sub pbti16_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti16.Click
        savecip(pbti16)
    End Sub
    Private Sub pbti17_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti17.Click
        savecip(pbti17)
    End Sub
    Private Sub pbti18_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti18.Click
        savecip(pbti18)
    End Sub
    Private Sub pbti19_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti19.Click
        savecip(pbti19)
    End Sub
    Private Sub pbti20_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti20.Click
        savecip(pbti20)
    End Sub
    Private Sub pbti21_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti21.Click
        savecip(pbti21)
    End Sub
    Private Sub pbti22_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti22.Click
        savecip(pbti22)
    End Sub
    Private Sub pbti23_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti23.Click
        savecip(pbti23)
    End Sub
    Private Sub pbti24_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti24.Click
        savecip(pbti24)
    End Sub
    Private Sub pbti25_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti25.Click
        savecip(pbti25)
    End Sub
    Private Sub pbti26_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti26.Click
        savecip(pbti26)
    End Sub
    Private Sub pbti27_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti27.Click
        savecip(pbti27)
    End Sub
    Private Sub pbti28_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti28.Click
        savecip(pbti28)
    End Sub
    Private Sub pbti29_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti29.Click
        savecip(pbti29)
    End Sub
    Private Sub pbti30_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti30.Click
        savecip(pbti30)
    End Sub
    Private Sub pbti31_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti31.Click
        savecip(pbti31)
    End Sub
    Private Sub pbti32_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti32.Click
        savecip(pbti32)
    End Sub
    Private Sub pbti33_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti33.Click
        savecip(pbti33)
    End Sub
    Private Sub pbti34_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti34.Click
        savecip(pbti34)
    End Sub
    Private Sub pbti35_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti35.Click
        savecip(pbti35)
    End Sub
    Private Sub pbti36_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti36.Click
        savecip(pbti36)
    End Sub
    Private Sub pbti37_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti37.Click
        savecip(pbti37)
    End Sub
    Private Sub pbti38_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti38.Click
        savecip(pbti38)
    End Sub
    Private Sub pbti39_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti39.Click
        savecip(pbti39)
    End Sub
    Private Sub pbti40_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti40.Click
        savecip(pbti40)
    End Sub

    Private Sub pbti41_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti41.Click
        savecip(pbti41)
    End Sub
    Private Sub pbti42_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti42.Click
        savecip(pbti42)
    End Sub
    Private Sub pbti43_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti43.Click
        savecip(pbti43)
    End Sub
    Private Sub pbti44_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti44.Click
        savecip(pbti44)
    End Sub
    Private Sub pbti45_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti45.Click
        savecip(pbti45)
    End Sub
    Private Sub pbti46_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti46.Click
        savecip(pbti46)
    End Sub
    Private Sub pbti47_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti47.Click
        savecip(pbti47)
    End Sub
    Private Sub pbti48_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti48.Click
        savecip(pbti48)
    End Sub
    Private Sub pbti49_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti49.Click
        savecip(pbti49)
    End Sub
    Private Sub pbti50_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti50.Click
        savecip(pbti50)
    End Sub

    Private Sub pbti51_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti51.Click
        savecip(pbti51)
    End Sub
    Private Sub pbti52_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti52.Click
        savecip(pbti52)
    End Sub
    Private Sub pbti53_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti53.Click
        savecip(pbti53)
    End Sub
    Private Sub pbti54_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti54.Click
        savecip(pbti54)
    End Sub
    Private Sub pbti55_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti55.Click
        savecip(pbti55)
    End Sub
    Private Sub pbti56_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti56.Click
        savecip(pbti56)
    End Sub
    Private Sub pbti57_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti57.Click
        savecip(pbti57)
    End Sub
    Private Sub pbti58_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti58.Click
        savecip(pbti58)
    End Sub
    Private Sub pbti59_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti59.Click
        savecip(pbti59)
    End Sub
    Private Sub pbti60_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti60.Click
        savecip(pbti60)
    End Sub

    Private Sub pbti61_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti61.Click
        savecip(pbti61)
    End Sub
    Private Sub pbti62_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti62.Click
        savecip(pbti62)
    End Sub
    Private Sub pbti63_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti63.Click
        savecip(pbti63)
    End Sub
    Private Sub pbti64_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti64.Click
        savecip(pbti64)
    End Sub
    Private Sub pbti65_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti65.Click
        savecip(pbti65)
    End Sub
    Private Sub pbti66_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti66.Click
        savecip(pbti66)
    End Sub
    Private Sub pbti67_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti67.Click
        savecip(pbti67)
    End Sub
    Private Sub pbti68_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti68.Click
        savecip(pbti68)
    End Sub
    Private Sub pbti69_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti69.Click
        savecip(pbti69)
    End Sub
    Private Sub pbti70_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti70.Click
        savecip(pbti70)
    End Sub

    Private Sub pbti71_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti71.Click
        savecip(pbti71)
    End Sub
    Private Sub pbti72_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti72.Click
        savecip(pbti72)
    End Sub
    'Private Sub pbti73_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti73.Click
    '    savecip(pbti73)
    'End Sub
    'Private Sub pbti74_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti74.Click
    '    savecip(pbti74)
    'End Sub
    'Private Sub pbti75_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti75.Click
    '    savecip(pbti75)
    'End Sub
    'Private Sub pbti76_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti76.Click
    '    savecip(pbti76)
    'End Sub
    'Private Sub pbti77_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti77.Click
    '    savecip(pbti77)
    'End Sub
    'Private Sub pbti78_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbti78.Click
    '    savecip(pbti78)
    'End Sub
#End Region

#Region " ---> Event Handler for Icons posters and fanart <---"
    Private Sub savecfa(ByRef currentfanart As PictureBox)
        If cmmode = "music" Then
            savecfamusic(currentfanart)
            Exit Sub
        End If
        If cmmode = "tv" Then
            savecfatvshow(currentfanart)
            Exit Sub
        End If
        fanartpb1.Image = Nothing
        fanartpb1.ImageLocation = Nothing
        GC.Collect()
        System.Threading.Thread.Sleep(500)
        'MsgBox(currentfanart.ImageLocation)
        Dim curfaused As String = ""
        Dim curloc As String = ""
        If currentfanart.AccessibleName Is Nothing Then
            If Not currentfanart.ImageLocation Is Nothing Then
                curloc = currentfanart.ImageLocation
            Else
                Exit Sub
            End If
        Else
            'use imagelocation
            curloc = currentfanart.AccessibleName
        End If

        If moviemode = "file" Then
            File.Copy(curloc, currentmovie.getmoviepath + "\" + stripstackforfilemode(removeextension(currentmovie.preservedmoviename)) + "-fanart.jpg", True)
            curfaused = currentmovie.getmoviepath + "\" + stripstackforfilemode(removeextension(currentmovie.preservedmoviename)) + "-fanart.jpg"
        End If

        If rconf.pcbcreatemovienamedashfanartjpg And Not moviemode = "file" Then
            File.Copy(curloc, currentmovie.getmoviepath + "\" + currentmovie.pmoviename + "-fanart.jpg", True)
            curfaused = currentmovie.getmoviepath + "\" + currentmovie.pmoviename + "-fanart.jpg"
        End If

        If rconf.pcbcreatefanartjpg And Not moviemode = "file" Then
            File.Copy(curloc, currentmovie.getmoviepath + "\" + "fanart.jpg", True)
            curfaused = currentmovie.getmoviepath + "\" + "fanart.jpg"
        End If

        lblPbar.Visible = True
        lblPbar.Text = Date.Now.ToString + " - Fanart saved --" '+ selectedicon.ImageLocation
        'fanartpb1.Image = currentfanart.Image
        fanartpb1.ImageLocation = curfaused
        Try
            fanartpb1.Load()
        Catch ex As Exception

        End Try

        'tcMain.Refresh()
        tcMain.SelectTab(0)
        'check for video_ts, if found, check md5 on images, recopy if needed
        Try
            If Not currentmovie.pfilemode Then checkVideoTSforcurrentmovie()
        Catch ex As Exception

        End Try
        If Not fanartpb1.ImageLocation Is Nothing Then
            If Not fanartpb1.ImageLocation = "" Then
                Dim objImage2 As System.Drawing.Image = System.Drawing.Image.FromFile(fanartpb1.ImageLocation)
                CurrentBackgroundSizeToolStripMenuItem.Text = "Current Background Size: " & objImage2.Width.ToString & "x" & objImage2.Height.ToString & " Size: " & getFileSize(fanartpb1.ImageLocation)
                tsl_movies_fanartsize.Text = CurrentBackgroundSizeToolStripMenuItem.Text
                objImage2.Dispose()
            End If
        End If


        validatefoldercontents()
    End Sub
    Private Sub savecfatvshow(ByRef selectedicon As PictureBox) 'save current fanart for the tv show
        Dim curtvshowpath As String = lbTvShowPicker.SelectedValue.ToString
        'strip out the id from the path'
        Dim theid As String = Regex.Match(curtvshowpath, "(:\d*?:)").Groups(1).Value
        curtvshowpath = Strings.Replace(curtvshowpath, theid, "")
        Dim currentshowid As String = Strings.Replace(theid, ":", "")
        Dim cmpath As String = "" 'intentionally not single line entry
        cmpath = curtvshowpath
        Dim imagelocationandname As String = ""
        imagelocationandname = addfiletofolder(cmpath, "fanart.jpg")
        Dim savefanartjpg As Boolean = True

        Try
            'release the tv show fanart
            ' tvMainRightMiddle.Panel1.StateCommon.Image.Dispose() ' = Nothing
            'System.Threading.Thread.Sleep(200)
            pbTVFanart.ImageLocation = Nothing
            pbTVFanart.Image = Nothing
        Catch ex As Exception
            Debug.Print("unable to release tv show fanart image")
        End Try
        
        'old file attribute checks and file removal
        If savefanartjpg Then
            If File.Exists(imagelocationandname) Then
                Try
                    File.SetAttributes(imagelocationandname, FileAttributes.Normal)
                Catch exsa As Exception
                    Debug.Print("unable to set attribute - fanart.jpg" + exsa.ToString)
                End Try
                Try
                    File.Delete(imagelocationandname)
                Catch exfd As Exception

                End Try
            End If
        End If

      
        'saving the new files
        Try
            Dim curloc As String = ""
            curloc = selectedicon.ImageLocation
            If curloc = "" Then
                curloc = selectedicon.AccessibleName
            End If
            If Not curloc = "" Then
                If savefanartjpg Then File.Copy(curloc, imagelocationandname, True)
                If savefanartjpg Then Debug.Print("saved: " + imagelocationandname)
            End If
        Catch ex As Exception
            MessageBox.Show("Unable to save the tv show fanart, check permissions on the files in the tv show folder", "Saving fanart for tvshow failed", MessageBoxButtons.OK, MessageBoxIcon.Error)
            Exit Sub
        End Try

        'Dim fabackground As System.Drawing.Image
        'fabackground = System.Drawing.Image.FromFile(curtvshowpath + "\fanart.jpg")
        'tvMainRightMiddle.Panel1.StateCommon.Image = fabackground
        'tvMainRightMiddle.Panel1.StateCommon.ImageStyle = CType(5, PaletteImageStyle)
        'If savefanartjpg Then 'refresh all as start point may have shifted
        pbTVFanart.ImageLocation = imagelocationandname
        pbTVFanart.Visible = True
        Try
            pbTVFanart.Load()
        Catch ex As Exception

        End Try


        '    'showfolderjpginmainwindow(cmpath, False)
        '    'showtbninmainwindow(cmpath, False)
        tcMain.SelectTab(1)
        '    'validatefoldercontents()
        '    Exit Sub
        'End If

       
    End Sub

    Private Sub savecfamusic(ByRef selectedicon As PictureBox) 'save current fanart for the music artist
        Dim imagelocationandname As String = ""
        imagelocationandname = addfiletofolder(currentartist.path, "fanart.jpg")

        pbMusicCurFanart.Image = Nothing
        pbMusicCurFanart.ImageLocation = Nothing
        Dim savefanartjpg As Boolean = True 'debug way to turn off actual copy of file
        Try
            'release the current music artist fanart
            pbMusicCurFanart.Image = Nothing
            pbMusicCurFanart.ImageLocation = Nothing
            System.Threading.Thread.Sleep(200)
        Catch ex As Exception
            Debug.Print("unable to release music artist fanart image")
        End Try

        'old file attribute checks and file removal
        If savefanartjpg Then
            If File.Exists(imagelocationandname) Then
                Try
                    File.SetAttributes(imagelocationandname, FileAttributes.Normal)
                Catch exsa As Exception
                    Debug.Print("unable to set attribute - fanart.jpg" + exsa.ToString)
                End Try
                Try
                    File.Delete(imagelocationandname)
                Catch exfd As Exception

                End Try
            End If
        End If

        'saving the new files
        Dim curloc As String = ""
        Try
            curloc = selectedicon.AccessibleName
            If curloc Is Nothing Then
                curloc = selectedicon.ImageLocation
            End If
            If Not curloc = "" Then
                If rconf.pcbmusicfanartresize Then
                    Dim binfilelocal As String = "MagickCMD"
                    Dim exstring As String = "convert " & """" & curloc & """" & " -resize 960x540^ " & """" & imagelocationandname & """"
                    Dim pro1 As System.Diagnostics.Process = New System.Diagnostics.Process()
                    pro1.StartInfo.FileName = binfilelocal
                    pro1.StartInfo.Arguments = exstring
                    pro1.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden
                    pro1.Start()
                    pro1.WaitForExit()

                    'convert curloc -resize 960x540^ imagelocationandname
                Else
                    ' asdf()
                    If savefanartjpg Then File.Copy(curloc, imagelocationandname, True)
                    If savefanartjpg Then Debug.Print("saved: " + imagelocationandname)
                End If
            End If

        Catch ex As Exception
            MessageBox.Show("music artist fanart image, check permissions on the files in the folder" & "resize: " & rconf.pcbmusicfanartresize.ToString & "curloc: " & curloc & vbNewLine & "dest: " & imagelocationandname & vbNewLine & vbNewLine & ex.ToString, "Saving fanart for tvshow failed", MessageBoxButtons.OK, MessageBoxIcon.Error)
            Exit Sub
        End Try
        'If rconf.pcbmusicfanartresize Then
        '    Dim newwidth As Double = rconf.pnudmusicfanartwidth
        '    Dim newheight As Double
        '    Dim timage As System.Drawing.Image
        '    timage = System.Drawing.Image.FromFile(curloc)
        '    Dim ar As Double = aspectratio(timage)
        '    newheight = newwidth / ar

        '    'find current image h / w and calc ar
        '    'apply ar to new width for new height
        '    'set new size and scale image

        'End If
       
        pbMusicCurFanart.ImageLocation = imagelocationandname
        pbMusicCurFanart.Visible = True
        pbMusicCurFanart.Load()
        tcMain.SelectTab("tpMusic")

    End Sub
    Private Sub saveci(ByRef selectedicon As PictureBox)
        If cmmode = "tv" Then
            savetvci(selectedicon)
            Exit Sub
        End If
        'autopilot is not to use this subroutine
        Dim cmpath As String = "" 'intentionally not single line entry
        cmpath = currentmovie.getmoviepath()
        Dim cmname As String = "" 'intentionally not single line entry
        cmname = currentmovie.pmoviename

        Dim savefolderjpg As Boolean = False
        Dim savemovienametbn As Boolean = False
        Dim savemovietbn As Boolean = False

        If rconf.pcbUseFolderJpgforTBN Or moviemode = "file" Then 'save everything as the same unless it's in file mode for movies
            If Not moviemode = "file" Then savefolderjpg = rconf.pcbCreateFolderjpg
            savemovienametbn = rconf.pcbcreatemovienamedottbn
            If Not moviemode = "file" Then savemovietbn = rconf.pcbcreatemovietbn ' determined by config setting
        Else
            'display dialog to choose which item we are saving, tbn or folder.jpg
            saveaswhaticontype.ShowDialog()

            If saveaswhaticontype.rbsaveasboth.Checked Then
                Debug.Print("both")
                savefolderjpg = rconf.pcbCreateFolderjpg
                savemovienametbn = rconf.pcbcreatemovienamedottbn
                savemovietbn = rconf.pcbcreatemovietbn
            ElseIf saveaswhaticontype.rbsaveasfolderjpg.Checked Then
                Debug.Print("folder.jpg")
                savefolderjpg = True
                savemovienametbn = False
                savemovietbn = False
            ElseIf saveaswhaticontype.rbsaveastbn.Checked Then
                Debug.Print("tbn")
                savefolderjpg = False
                savemovienametbn = rconf.pcbcreatemovienamedottbn
                savemovietbn = rconf.pcbcreatemovietbn
            Else
                MsgBox("No type was selected, I can't save without knowing what type")
                Exit Sub
            End If

            saveaswhaticontype.Dispose()

        End If

        If savefolderjpg And Not moviemode = "file" Then
            If File.Exists(cmpath + "\folder.jpg") Then
                Try
                    File.SetAttributes(cmpath + "\folder.jpg", FileAttributes.Normal)
                Catch ex As Exception
                    Debug.Print("unable to set attribute - folder.jpg" + ex.ToString)
                End Try
                File.Delete(cmpath + "\folder.jpg")
            End If
        End If

        If savemovienametbn Then
            If File.Exists(cmpath + "\" + cmname + ".tbn") Then
                Try
                    File.SetAttributes(cmpath + "\" + cmname + ".tbn", FileAttributes.Normal)
                Catch ex As Exception
                    Debug.Print("unable to set attribute - <moviename>.tbn" + ex.ToString)
                End Try
                File.Delete(cmpath + "\" + cmname + ".tbn")
            End If
            If File.Exists(cmpath + "\" + stripstackforfilemode(removeextension(currentmovie.preservedmoviename)) + ".tbn") Then
                Try
                    File.SetAttributes(cmpath + "\" + stripstackforfilemode(removeextension(currentmovie.preservedmoviename)) + ".tbn", FileAttributes.Normal)
                Catch ex As Exception
                    Debug.Print("unable to set attribute - <moviename>.tbn" + ex.ToString)
                End Try
                File.Delete(cmpath + "\" + stripstackforfilemode(removeextension(currentmovie.preservedmoviename)) + ".tbn")
            End If
        End If
        'stripstackforfilemode(removeextension(currentmovie.preservedmoviename))
        If savemovietbn And Not moviemode = "file" Then
            If File.Exists(cmpath + "\movie.tbn") Then
                Try
                    File.SetAttributes(cmpath + "\movie.tbn", FileAttributes.Normal)
                Catch ex As Exception
                    Debug.Print("unable to set attribute - movie.tbn" + ex.ToString)
                End Try
                File.Delete(cmpath + "\movie.tbn")
            End If
        End If

        Try
            If savefolderjpg And Not moviemode = "file" Then selectedicon.Image.Save(addfiletofolder(cmpath, "folder.jpg"))
            If savefolderjpg And Not moviemode = "file" Then Debug.Print("saved: " + addfiletofolder(cmpath, "folder.jpg"))
            If savemovienametbn Then
                If moviemode = "file" Then
                    selectedicon.Image.Save(addfiletofolder(cmpath, stripstackforfilemode(removeextension(currentmovie.preservedmoviename)) + ".tbn"))
                Else
                    selectedicon.Image.Save(addfiletofolder(cmpath, currentmovie.pmoviename) + ".tbn")
                End If

            End If

            If savemovienametbn Then
                Debug.Print("saved: " + addfiletofolder(cmpath, cmname) + ".tbn")
            End If

            If savemovietbn And Not moviemode = "file" Then selectedicon.Image.Save(addfiletofolder(cmpath, "movie.tbn"))
            If savemovietbn And Not moviemode = "file" Then Debug.Print("saved: " + addfiletofolder(cmpath, "movie.tbn"))
        Catch ex As Exception
            MessageBox.Show("Unable to save the icons, check permissions on the files in the movie folder", "Saving media icons failed", MessageBoxButtons.OK, MessageBoxIcon.Error)
            Debug.Print(ex.ToString)
            Exit Sub
        End Try

        'check for video_ts, if found, check md5 on images, recopy if needed
        Try
            If Not currentmovie.pfilemode Then checkVideoTSforcurrentmovie()
        Catch ex As Exception

        End Try



        If savefolderjpg And Not moviemode = "file" Then 'refresh all as start point may have shifted
            showfolderjpginmainwindow(cmpath, False)
            showtbninmainwindow(cmpath, False)
            tcMain.SelectTab(0)
            validatefoldercontents()
            Exit Sub
        End If

        If savemovienametbn Or savemovietbn Then 'just refresh the tbn portion
            showtbninmainwindow(cmpath, False)
            tcMain.SelectTab(0)
            validatefoldercontents()
            Exit Sub
        End If
    End Sub
    Private Sub savetvci(ByRef selectedicon As PictureBox)
        '' ''Dim curtvshowpath As String = lbTvShowPicker.SelectedValue.ToString
        ' '' ''strip out the id from the path'
        '' ''Dim theid As String = Regex.Match(curtvshowpath, "(:\d*?:)").Groups(1).Value
        '' ''curtvshowpath = Strings.Replace(curtvshowpath, theid, "")
        '' ''Dim currentshowid As String = Strings.Replace(theid, ":", "")
        '' ''Dim cmpath As String = "" 'intentionally not single line entry
        '' ''cmpath = curtvshowpath


        'Dim cmname As String = "" 'intentionally not single line entry
        'cmname = currentmovie.pmoviename

        Dim savefolderjpg As Boolean = True
        Dim savemovienametbn As Boolean = False
        Dim savemovietbn As Boolean = False

        'If rconf.pcbUseFolderJpgforTBN Then 'save everything as the same
        '    savefolderjpg = True
        '    savemovienametbn = True
        '    savemovietbn = rconf.pcbcreatemovietbn ' determined by config setting
        'Else
        '    'display dialog to choose which item we are saving, tbn or folder.jpg
        '    saveaswhaticontype.ShowDialog()

        '    If saveaswhaticontype.rbsaveasboth.Checked Then
        '        Debug.Print("both")
        '        savefolderjpg = True
        '        savemovienametbn = True
        '        savemovietbn = rconf.pcbcreatemovietbn
        '    ElseIf saveaswhaticontype.rbsaveasfolderjpg.Checked Then
        '        Debug.Print("folder.jpg")
        '        savefolderjpg = True
        '        savemovienametbn = False
        '        savemovietbn = False
        '    ElseIf saveaswhaticontype.rbsaveastbn.Checked Then
        '        Debug.Print("tbn")
        '        savefolderjpg = False
        '        savemovienametbn = True
        '        savemovietbn = rconf.pcbcreatemovietbn
        '    Else
        '        MsgBox("No type was selected, I can't save without knowing what type")
        '        Exit Sub
        '    End If

        '    saveaswhaticontype.Dispose()

        'End If


        'old file attribute checks and file removal
        If savefolderjpg Then
            If File.Exists(curtvshowiconsetting) Then
                Try
                    File.SetAttributes(curtvshowiconsetting, FileAttributes.Normal)
                Catch ex As Exception
                    Debug.Print("unable to set attribute - " + curtvshowiconsetting + ex.ToString)
                End Try
                File.Delete(curtvshowiconsetting)
            End If
        End If

        'If savemovienametbn Then
        '    If File.Exists(cmpath + "\" + cmname + ".tbn") Then
        '        Try
        '            File.SetAttributes(cmpath + "\" + cmname + ".tbn", FileAttributes.Normal)
        '        Catch ex As Exception
        '            Debug.Print("unable to set attribute - <moviename>.tbn" + ex.ToString)
        '        End Try
        '        File.Delete(cmpath + "\" + cmname + ".tbn")
        '    End If
        'End If
        'If savemovietbn Then
        '    If File.Exists(cmpath + "\movie.tbn") Then
        '        Try
        '            File.SetAttributes(cmpath + "\movie.tbn", FileAttributes.Normal)
        '        Catch ex As Exception
        '            Debug.Print("unable to set attribute - movie.tbn" + ex.ToString)
        '        End Try
        '        File.Delete(cmpath + "\movie.tbn")
        '    End If
        'End If

        'saving the new files
        Try
            If savefolderjpg Then File.Copy(selectedicon.ImageLocation, curtvshowiconsetting, True)
            If savefolderjpg Then Debug.Print("saved: " + curtvshowiconsetting)
            'If savemovienametbn Then File.Copy(selectedicon.ImageLocation, addfiletofolder(cmpath, cmname) + ".tbn", True)
            'If savemovienametbn Then Debug.Print("saved: " + addfiletofolder(cmpath, cmname) + ".tbn")
            'If savemovietbn Then File.Copy(selectedicon.ImageLocation, addfiletofolder(cmpath, "movie.tbn"), True)
            'If savemovietbn Then Debug.Print("saved: " + addfiletofolder(cmpath, "movie.tbn"))
        Catch ex As Exception
            MessageBox.Show(curtvshowiconsetting + "Unable to save the icons, check permissions on the files in the movie folder", "Saving poster icons failed", MessageBoxButtons.OK, MessageBoxIcon.Error)
            Exit Sub
        End Try

        'reload curtvshowpicturboxtoupdate, a reference to the picture box to update
        If savefolderjpg Then 'refresh all as start point may have shifted
            Dim bmpImage As System.Drawing.Image
            bmpImage = System.Drawing.Image.FromFile(curtvshowiconsetting)
            'aspect ratio items
            Dim imagetype As String
            Dim taspect As Double = aspectratio(bmpImage)
            If taspect < 0.25 Then
                'wide(Icon)
                If bmpImage.Width >= 500 Then
                    imagetype = "widenoformat"
                Else
                    imagetype = "wideicon"
                End If
            ElseIf taspect >= 0.98 And taspect <= 1.02 Then
                imagetype = "square"
            ElseIf (taspect > 0.8 Or taspect < 0.95) And bmpImage.Height < 500 And bmpImage.Width < 450 Then
                'boxed icon or maybe squared poster
                imagetype = "boxed"
            Else
                imagetype = "poster" 'consider it a poster
            End If
            bmpImage.Dispose()

            If imagetype = "wideicon" Or imagetype = "widenoformat" Then
                Try
                    pbTVPoster.Image = Nothing
                    pbTVPoster.ImageLocation = Nothing
                    pbTVPoster.Visible = False
                    pbTVWide.Image = Nothing
                    pbTVWide.ImageLocation = Nothing
                    pbTVWide.ImageLocation = curtvshowiconsetting
                    pbTVWide.Load()
                    pbTVWide.Visible = True
                    Me.Refresh()
                Catch ex As Exception
                    Debug.Print(ex.ToString)
                End Try
            Else
                Try
                    pbTVWide.Image = Nothing
                    pbTVWide.ImageLocation = Nothing
                    pbTVWide.Visible = False
                    pbTVPoster.Image = Nothing
                    pbTVPoster.ImageLocation = Nothing
                    pbTVPoster.ImageLocation = curtvshowiconsetting
                    pbTVPoster.Load()
                    pbTVPoster.Visible = True
                    Me.Refresh()
                Catch ex As Exception
                    Debug.Print(ex.ToString)
                End Try

            End If
            'showfolderjpginmainwindow(cmpath, False)
            'showtbninmainwindow(cmpath, False)
            tcMain.SelectTab(1)
            Me.Refresh()
            'validatefoldercontents()
            Exit Sub
        End If

        'If savemovienametbn Or savemovietbn Then 'just refresh the tbn portion
        '    showtbninmainwindow(cmpath, False)
        '    tcMain.SelectTab(0)
        '    validatefoldercontents()
        '    Exit Sub
        'End If
    End Sub
    'saveciptvseasonposter
    Private Sub saveciptvseasonposter(ByRef selectedicon As PictureBox)
        Dim curtvshowpath As String = lbTvShowPicker.SelectedValue.ToString
        'strip out the id from the path'
        Dim theid As String = Regex.Match(curtvshowpath, "(:\d*?:)").Groups(1).Value
        curtvshowpath = Strings.Replace(curtvshowpath, theid, "")
        Dim currentshowid As String = Strings.Replace(theid, ":", "")
        Dim cmpath As String = "" 'intentionally not single line entry
        cmpath = curtvshowpath

        Dim curtvseason As movieinfoplus.seasons = CType(seasonshashtable.Item(lbSeasonPicker.SelectedValue), seasons)
        Debug.Print(curtvseason.episodes.Count.ToString)

        Dim curseasonas2digitid As String
        If curtvseason.seasonnumber.Length = 1 Then
            curseasonas2digitid = CStr("0" & curtvseason.seasonnumber)
        Else
            curseasonas2digitid = CStr(curtvseason.seasonnumber)
        End If

        'Dim cmname As String = "" 'intentionally not single line entry
        'cmname = currentmovie.pmoviename

        Dim savefolderjpg As Boolean = True
        Dim savemovienametbn As Boolean = False
        Dim savemovietbn As Boolean = False
        Dim tbnpath As String = ""
        tbnpath = addfiletofolder(cmpath, "season" + curseasonas2digitid + ".tbn")

        pbTVSeasonPoster.ImageLocation = Nothing
        pbTVSeasonPoster.Image = Nothing

        'old file attribute checks and file removal
        If savefolderjpg Then
            If File.Exists(tbnpath) Then
                Try
                    File.SetAttributes(tbnpath, FileAttributes.Normal)
                Catch ex As Exception
                    Debug.Print("unable to set attribute - folder.jpg" + ex.ToString)
                End Try
                File.Delete(tbnpath)
            End If
        End If


        'saving the new files
        Try
            If savefolderjpg Then File.Copy(selectedicon.ImageLocation, tbnpath, True)
            If savefolderjpg Then Debug.Print("saved: " + tbnpath)
        Catch ex As Exception
            MessageBox.Show("Unable to save the icons, check permissions on the files in the movie folder", "Saving poster icons failed", MessageBoxButtons.OK, MessageBoxIcon.Error)
            Exit Sub
        End Try

        If savefolderjpg Then 'refresh all as start point may have shifted
            pbTVSeasonPoster.ImageLocation = tbnpath
            pbTVSeasonPoster.Visible = True
            pbTVSeasonPoster.Load()
            'showfolderjpginmainwindow(cmpath, False)
            'showtbninmainwindow(cmpath, False)
            tcMain.SelectTab(1)
            Me.Refresh()
            'validatefoldercontents()
            Exit Sub
        End If
    End Sub
    Private Sub saveciptvshow(ByRef selectedicon As PictureBox)
        Dim curtvshowpath As String = lbTvShowPicker.SelectedValue.ToString
        'strip out the id from the path'
        Dim theid As String = Regex.Match(curtvshowpath, "(:\d*?:)").Groups(1).Value
        curtvshowpath = Strings.Replace(curtvshowpath, theid, "")
        Dim currentshowid As String = Strings.Replace(theid, ":", "")
        Dim cmpath As String = "" 'intentionally not single line entry
        cmpath = curtvshowpath


        'Dim cmname As String = "" 'intentionally not single line entry
        'cmname = currentmovie.pmoviename

        Dim savefolderjpg As Boolean = True
        Dim savemovienametbn As Boolean = False
        Dim savemovietbn As Boolean = False

        'If rconf.pcbUseFolderJpgforTBN Then 'save everything as the same
        '    savefolderjpg = True
        '    savemovienametbn = True
        '    savemovietbn = rconf.pcbcreatemovietbn ' determined by config setting
        'Else
        '    'display dialog to choose which item we are saving, tbn or folder.jpg
        '    saveaswhaticontype.ShowDialog()

        '    If saveaswhaticontype.rbsaveasboth.Checked Then
        '        Debug.Print("both")
        '        savefolderjpg = True
        '        savemovienametbn = True
        '        savemovietbn = rconf.pcbcreatemovietbn
        '    ElseIf saveaswhaticontype.rbsaveasfolderjpg.Checked Then
        '        Debug.Print("folder.jpg")
        '        savefolderjpg = True
        '        savemovienametbn = False
        '        savemovietbn = False
        '    ElseIf saveaswhaticontype.rbsaveastbn.Checked Then
        '        Debug.Print("tbn")
        '        savefolderjpg = False
        '        savemovienametbn = True
        '        savemovietbn = rconf.pcbcreatemovietbn
        '    Else
        '        MsgBox("No type was selected, I can't save without knowing what type")
        '        Exit Sub
        '    End If

        '    saveaswhaticontype.Dispose()

        'End If


        'old file attribute checks and file removal
        If savefolderjpg Then
            If File.Exists(cmpath + "\folder.jpg") Then
                Try
                    File.SetAttributes(cmpath + "\folder.jpg", FileAttributes.Normal)
                Catch ex As Exception
                    Debug.Print("unable to set attribute - folder.jpg" + ex.ToString)
                End Try
                File.Delete(cmpath + "\folder.jpg")
            End If
        End If

        'If savemovienametbn Then
        '    If File.Exists(cmpath + "\" + cmname + ".tbn") Then
        '        Try
        '            File.SetAttributes(cmpath + "\" + cmname + ".tbn", FileAttributes.Normal)
        '        Catch ex As Exception
        '            Debug.Print("unable to set attribute - <moviename>.tbn" + ex.ToString)
        '        End Try
        '        File.Delete(cmpath + "\" + cmname + ".tbn")
        '    End If
        'End If
        'If savemovietbn Then
        '    If File.Exists(cmpath + "\movie.tbn") Then
        '        Try
        '            File.SetAttributes(cmpath + "\movie.tbn", FileAttributes.Normal)
        '        Catch ex As Exception
        '            Debug.Print("unable to set attribute - movie.tbn" + ex.ToString)
        '        End Try
        '        File.Delete(cmpath + "\movie.tbn")
        '    End If
        'End If

        'saving the new files
        Try
            If savefolderjpg Then File.Copy(selectedicon.ImageLocation, addfiletofolder(cmpath, "folder.jpg"), True)
            If savefolderjpg Then Debug.Print("saved: " + addfiletofolder(cmpath, "folder.jpg"))
            'If savemovienametbn Then File.Copy(selectedicon.ImageLocation, addfiletofolder(cmpath, cmname) + ".tbn", True)
            'If savemovienametbn Then Debug.Print("saved: " + addfiletofolder(cmpath, cmname) + ".tbn")
            'If savemovietbn Then File.Copy(selectedicon.ImageLocation, addfiletofolder(cmpath, "movie.tbn"), True)
            'If savemovietbn Then Debug.Print("saved: " + addfiletofolder(cmpath, "movie.tbn"))
        Catch ex As Exception
            MessageBox.Show("Unable to save the icons, check permissions on the files in the movie folder", "Saving poster icons failed", MessageBoxButtons.OK, MessageBoxIcon.Error)
            Exit Sub
        End Try

        If savefolderjpg Then 'refresh all as start point may have shifted
            pbTVPoster.ImageLocation = addfiletofolder(cmpath, "folder.jpg")
            pbTVPoster.Visible = True
            pbTVPoster.Load()
            'showfolderjpginmainwindow(cmpath, False)
            'showtbninmainwindow(cmpath, False)
            tcMain.SelectTab(1)
            Me.Refresh()
            'validatefoldercontents()
            Exit Sub
        End If

        'If savemovienametbn Or savemovietbn Then 'just refresh the tbn portion
        '    showtbninmainwindow(cmpath, False)
        '    tcMain.SelectTab(0)
        '    validatefoldercontents()
        '    Exit Sub
        'End If
    End Sub
    Private Sub savemusicci(ByRef selectedicon As PictureBox)
        pbCurAlbumArt.Image = Nothing
        pbCurAlbumArt.ImageLocation = Nothing
        pbCurAlbumArt.Visible = False
        Dim curpath As String = currentalbum.path
        Dim curfile As String = addfiletofolder(curpath, "folder.jpg")
        If File.Exists(curfile) Then
            Try
                File.SetAttributes(curfile, FileAttributes.Normal)
            Catch ex As Exception
                Debug.Print("unable to set attribute - " + curfile + vbNewLine + ex.ToString)
            End Try
            File.Delete(curfile)
        End If
        File.Copy(selectedicon.ImageLocation, curfile, True)
        System.Threading.Thread.Sleep(100)
        Try
            pbCurAlbumArt.ImageLocation = curfile
            pbCurAlbumArt.Load()
            pbCurAlbumArt.Visible = True
            kgArtistArtImage.Visible = True
            Me.Refresh()
        Catch ex As Exception
            Debug.Print(ex.ToString)
        End Try
        'if automatic add to album is enabled, run that
        tcMain.SelectTab("tpMusic")
        If rconf.ptso_auto_addtoablumonnewart Then injectIntoCurAlbum()

    End Sub
    Private Sub savecip(ByRef selectedicon As PictureBox)
        If cmmode = "tv" Then
            savetvci(selectedicon)
            'saveciptvshow(selectedicon)
            Exit Sub
        End If
        If cmmode = "music" Then
            savemusicci(selectedicon)
            Exit Sub
        End If
        Dim cmpath As String = "" 'intentionally not single line entry
        cmpath = currentmovie.getmoviepath()
        Dim cmname As String = "" 'intentionally not single line entry
        If moviemode = "file" Then
            cmname = stripstackforfilemode(removeextension(currentmovie.preservedmoviename))
        Else
            cmname = currentmovie.pmoviename
        End If


        Dim savefolderjpg As Boolean = False
        Dim savemovienametbn As Boolean = False
        Dim savemovietbn As Boolean = False

        If rconf.pcbUseFolderJpgforTBN Or moviemode = "file" Then 'save everything as the same unless it's in file mode for movies
            If Not moviemode = "file" Then savefolderjpg = rconf.pcbCreateFolderjpg
            savemovienametbn = rconf.pcbcreatemovienamedottbn
            If Not moviemode = "file" Then savemovietbn = rconf.pcbcreatemovietbn ' determined by config setting
        Else
            'display dialog to choose which item we are saving, tbn or folder.jpg
            saveaswhaticontype.ShowDialog()

            If saveaswhaticontype.rbsaveasboth.Checked Then
                Debug.Print("both")
                savefolderjpg = rconf.pcbCreateFolderjpg
                savemovienametbn = rconf.pcbcreatemovienamedottbn
                savemovietbn = rconf.pcbcreatemovietbn
            ElseIf saveaswhaticontype.rbsaveasfolderjpg.Checked Then
                Debug.Print("folder.jpg")
                savefolderjpg = True
                savemovienametbn = False
                savemovietbn = False
            ElseIf saveaswhaticontype.rbsaveastbn.Checked Then
                Debug.Print("tbn")
                savefolderjpg = False
                savemovienametbn = rconf.pcbcreatemovienamedottbn
                savemovietbn = rconf.pcbcreatemovietbn
            Else
                MsgBox("No type was selected, I can't save without knowing what type")
                Exit Sub
            End If

            saveaswhaticontype.Dispose()

        End If

        'old file attribute checks and file removal
        If savefolderjpg Then
            If File.Exists(cmpath + "\folder.jpg") Then
                Try
                    File.SetAttributes(cmpath + "\folder.jpg", FileAttributes.Normal)
                Catch ex As Exception
                    Debug.Print("unable to set attribute - folder.jpg" + ex.ToString)
                End Try
                File.Delete(cmpath + "\folder.jpg")
            End If
        End If

        If savemovienametbn Then
            If File.Exists(cmpath + "\" + cmname + ".tbn") Then
                Try
                    File.SetAttributes(cmpath + "\" + cmname + ".tbn", FileAttributes.Normal)
                Catch ex As Exception
                    Debug.Print("unable to set attribute - <moviename>.tbn" + ex.ToString)
                End Try
                File.Delete(cmpath + "\" + cmname + ".tbn")
            End If
        End If
        If savemovietbn Then
            If File.Exists(cmpath + "\movie.tbn") Then
                Try
                    File.SetAttributes(cmpath + "\movie.tbn", FileAttributes.Normal)
                Catch ex As Exception
                    Debug.Print("unable to set attribute - movie.tbn" + ex.ToString)
                End Try
                File.Delete(cmpath + "\movie.tbn")
            End If
        End If

        'saving the new files
        Try
            If savefolderjpg And Not moviemode = "file" Then File.Copy(selectedicon.ImageLocation, addfiletofolder(cmpath, "folder.jpg"), True)
            If savefolderjpg And Not moviemode = "file" Then Debug.Print("saved: " + addfiletofolder(cmpath, "folder.jpg"))
            If savemovienametbn Then
                If moviemode = "file" Then
                    File.Copy(selectedicon.AccessibleName, addfiletofolder(cmpath, stripstackforfilemode(removeextension(currentmovie.preservedmoviename)) + ".tbn"), True)
                Else
                    File.Copy(selectedicon.ImageLocation, addfiletofolder(cmpath, cmname) + ".tbn", True)
                End If
                stripstackforfilemode(removeextension(currentmovie.preservedmoviename))
            End If

            If savemovienametbn Then Debug.Print("saved: " + addfiletofolder(cmpath, cmname) + ".tbn")
            If savemovietbn And Not moviemode = "file" Then File.Copy(selectedicon.AccessibleName, addfiletofolder(cmpath, "movie.tbn"), True)
            If savemovietbn And Not moviemode = "file" Then Debug.Print("saved: " + addfiletofolder(cmpath, "movie.tbn"))
        Catch ex As Exception
            MessageBox.Show("Unable to save the icons, check permissions on the files in the movie folder", "Saving poster icons failed", MessageBoxButtons.OK, MessageBoxIcon.Error)
            Exit Sub
        End Try

        'check for video_ts, if found, check md5 on images, recopy if needed
        Try
            If Not currentmovie.pfilemode Then checkVideoTSforcurrentmovie()
        Catch ex As Exception

        End Try

        If savefolderjpg And Not moviemode = "file" Then 'refresh all as start point may have shifted
            showfolderjpginmainwindow(cmpath, False)
            showtbninmainwindow(cmpath, False)
            tcMain.SelectTab(0)
            validatefoldercontents()
            Exit Sub
        End If

        If savemovienametbn Or savemovietbn Then 'just refresh the tbn portion
            showtbninmainwindow(cmpath, False)
            tcMain.SelectTab(0)
            validatefoldercontents()
            Exit Sub
        End If
    End Sub
    Private Sub saveciphd(ByRef selectedicon As PictureBox)
        If cmmode = "tv" Then
            saveciptvseasonposter(selectedicon)
            Exit Sub
        End If
        Dim cmpath As String = "" 'intentionally not single line entry
        cmpath = currentmovie.getmoviepath()
        Dim cmname As String = "" 'intentionally not single line entry
        cmname = currentmovie.pmoviename

        Dim savefolderjpg As Boolean = False
        Dim savemovienametbn As Boolean = False
        Dim savemovietbn As Boolean = False

        If rconf.pcbUseFolderJpgforTBN Or moviemode = "file" Then 'save everything as the same unless it's in file mode for movies
            If Not moviemode = "file" Then savefolderjpg = rconf.pcbCreateFolderjpg
            savemovienametbn = rconf.pcbcreatemovienamedottbn
            If Not moviemode = "file" Then savemovietbn = rconf.pcbcreatemovietbn ' determined by config setting
        Else
            'display dialog to choose which item we are saving, tbn or folder.jpg
            saveaswhaticontype.ShowDialog()

            If saveaswhaticontype.rbsaveasboth.Checked Then
                Debug.Print("both")
                savefolderjpg = rconf.pcbCreateFolderjpg
                savemovienametbn = rconf.pcbcreatemovienamedottbn
                savemovietbn = rconf.pcbcreatemovietbn
            ElseIf saveaswhaticontype.rbsaveasfolderjpg.Checked Then
                Debug.Print("folder.jpg")
                savefolderjpg = True
                savemovienametbn = False
                savemovietbn = False
            ElseIf saveaswhaticontype.rbsaveastbn.Checked Then
                Debug.Print("tbn")
                savefolderjpg = False
                savemovienametbn = rconf.pcbcreatemovienamedottbn
                savemovietbn = rconf.pcbcreatemovietbn
            Else
                MsgBox("No type was selected, I can't save without knowing what type")
                Exit Sub
            End If

            saveaswhaticontype.Dispose()

        End If

        'old file attribute checks and file removal
        If savefolderjpg Then
            If File.Exists(cmpath + "\folder.jpg") Then
                Try
                    File.SetAttributes(cmpath + "\folder.jpg", FileAttributes.Normal)
                Catch ex As Exception
                    Debug.Print("unable to set attribute - folder.jpg" + ex.ToString)
                End Try
                File.Delete(cmpath + "\folder.jpg")
            End If
        End If

        If savemovienametbn Then
            If File.Exists(cmpath + "\" + cmname + ".tbn") Then
                Try
                    File.SetAttributes(cmpath + "\" + cmname + ".tbn", FileAttributes.Normal)
                Catch ex As Exception
                    Debug.Print("unable to set attribute - <moviename>.tbn" + ex.ToString)
                End Try
                File.Delete(cmpath + "\" + cmname + ".tbn")
            End If
        End If
        If savemovietbn Then
            If File.Exists(cmpath + "\movie.tbn") Then
                Try
                    File.SetAttributes(cmpath + "\movie.tbn", FileAttributes.Normal)
                Catch ex As Exception
                    Debug.Print("unable to set attribute - movie.tbn" + ex.ToString)
                End Try
                File.Delete(cmpath + "\movie.tbn")
            End If
        End If

        'saving the new files
        Try
            If savefolderjpg And Not moviemode = "file" Then File.Copy(selectedicon.AccessibleName, addfiletofolder(cmpath, "folder.jpg"), True)
            If savefolderjpg And Not moviemode = "file" Then Debug.Print("saved: " + addfiletofolder(cmpath, "folder.jpg"))
            If savemovienametbn Then
                If moviemode = "file" Then
                    File.Copy(selectedicon.AccessibleName, addfiletofolder(cmpath, stripstackforfilemode(removeextension(currentmovie.preservedmoviename)) + ".tbn"), True)
                Else
                    File.Copy(selectedicon.AccessibleName, addfiletofolder(cmpath, cmname) + ".tbn", True)
                End If

            End If

            If savemovienametbn Then Debug.Print("saved: " + addfiletofolder(cmpath, cmname) + ".tbn")
            If savemovietbn And Not moviemode = "file" Then File.Copy(selectedicon.AccessibleName, addfiletofolder(cmpath, "movie.tbn"), True)
            If savemovietbn And Not moviemode = "file" Then Debug.Print("saved: " + addfiletofolder(cmpath, "movie.tbn"))
        Catch ex As Exception
            MessageBox.Show("Unable to save the icons, check permissions on the files in the movie folder", "Saving poster icons failed", MessageBoxButtons.OK, MessageBoxIcon.Error)
            Exit Sub
        End Try

        'check for video_ts, if found, check md5 on images, recopy if needed
        Try
            If Not currentmovie.pfilemode Then checkVideoTSforcurrentmovie()
        Catch ex As Exception

        End Try

        If savefolderjpg And Not moviemode = "file" Then 'refresh all as start point may have shifted
            showfolderjpginmainwindow(cmpath, False)
            showtbninmainwindow(cmpath, False)
            tcMain.SelectTab(0)
            validatefoldercontents()
            Exit Sub
        End If

        If savemovienametbn Or savemovietbn Then 'just refresh the tbn portion
            showtbninmainwindow(cmpath, False)
            tcMain.SelectTab(0)
            validatefoldercontents()
            Exit Sub
        End If
    End Sub
    Private Sub saveciphd_old(ByRef selectedicon As PictureBox)
        'not used rev 2401

        'If cmmode = "tv" Then
        '    saveciptvseasonposter(selectedicon)
        '    Exit Sub
        'End If
        'Dim cmpath As String = "" 'intentionally not single line entry
        'cmpath = currentmovie.getmoviepath()
        'Dim cmname As String = "" 'intentionally not single line entry
        'cmname = currentmovie.pmoviename
        ''will fail if file is ready only or archived flag is set, use savecip2 instead
        'Try
        '    If File.Exists(cmpath + "\folder.jpg") Then File.SetAttributes(cmpath + "\folder.jpg", FileAttributes.Normal)
        '    If File.Exists(cmpath + "\" + cmname + ".tbn") Then File.SetAttributes(cmpath + "\" + cmname + ".tbn", FileAttributes.Normal)
        'Catch exsa As Exception
        '    Debug.Print("unable to set permissions on file" + exsa.ToString)
        'End Try
        'Try
        '    If File.Exists(cmpath + "\folder.jpg") Then File.Delete(cmpath + "\folder.jpg")
        '    If File.Exists(cmpath + "\" + cmname + ".tbn") Then File.Delete(cmpath + "\" + cmname + ".tbn")
        'Catch exd As Exception
        '    Debug.Print(exd.ToString)
        'End Try

        'Try
        '    'selectedicon.Image.Save(currentmovie.getmoviepath + "\folder.jpg")
        '    File.Copy(selectedicon.AccessibleName, currentmovie.getmoviepath + "\" + "folder.jpg")
        '    File.Copy(currentmovie.getmoviepath + "\folder.jpg", currentmovie.getmoviepath + "\" + currentmovie.pmoviename + ".tbn", True)
        '    File.Copy(currentmovie.getmoviepath + "\folder.jpg", currentmovie.getmoviepath + "\movie.tbn", True)

        '    Debug.Print("saved: " + selectedicon.ImageLocation + selectedicon.ToString)
        '    lblPbar.Visible = True
        '    lblPbar.Text = Date.Now.ToString + " - Icon saved --" '+ selectedicon.ImageLocation
        '    'select the current tab to the tab that shows the current icon and movie info/fanart
        '    tcMain.SelectTab(0)
        '    'hide the transparent compatable image box pbCurIconUsed and show the picture version
        '    pbCurIconUsed.Hide()
        '    pbCurrentIconUsedNT.Hide()

        '    'pbFrame.Show()
        '    'set the fixed height and get the new width (based on aspect) then set the picture box sizes
        '    Dim taspect As Double = aspectratio(selectedicon.Image)
        '    Dim framefixedheight As Double = 393
        '    Dim framenewWidth As Double = framefixedheight / taspect

        '    'pbCurIconUsed.Image = bmpImage
        '    pbFrame.Height = Convert.ToInt32(framefixedheight)
        '    pbFrame.Width = Convert.ToInt32(framenewWidth)
        '    pbFrame.Show()
        '    '
        '    Dim fixedHeight As Double = 350
        '    Dim newWidth As Double = fixedHeight / taspect
        '    pbCurIconUsed2.Width = Convert.ToInt32(newWidth)
        '    pbCurIconUsed2.Height = Convert.ToInt32(fixedHeight)
        '    'set the image in the picturebox
        '    pbCurIconUsed2.Image = selectedicon.Image
        '    pbCurIconUsed2.Show()
        '    pbCurIconUsed2.BringToFront()
        '    validatefoldercontents()
        'Catch ex As Exception
        '    MsgBox("ACCESS DENIED WHEN ATTEMPTING TO SAVE ICON!" + ex.ToString)
        '    Debug.Print(ex.ToString)
        'End Try
    End Sub
    Private Sub savecip2(ByRef selectedicon As PictureBox)
        'not used after rev 2401

        'Dim cmpath As String = "" 'intentionally not single line entry
        'cmpath = currentmovie.getmoviepath()
        'Dim cmname As String = "" 'intentionally not single line entry
        'cmname = currentmovie.pmoviename
        'Try
        '    selectedicon.Image.Save(cmpath + "\folder.jpg")
        '    File.Copy(cmpath + "\folder.jpg", cmpath + "\" + cmname + ".tbn", True)
        '    'add gui check later for this hard coded option
        '    File.Copy(currentmovie.getmoviepath + "\folder.jpg", currentmovie.getmoviepath + "\movie.tbn", True)

        '    Debug.Print("saved: " + selectedicon.ImageLocation + selectedicon.ToString)
        '    lblPbar.Visible = True
        '    lblPbar.Text = Date.Now.ToString + " - Icon saved --" '+ selectedicon.ImageLocation
        '    tcMain.SelectTab(0)
        '    pbCurIconUsed.Image = Nothing
        '    pbCurIconUsed.ImageLocation = Nothing
        '    pbCurrentIconUsedNT.Hide()
        '    'create new region
        '    Dim gp As New System.Drawing.Drawing2D.GraphicsPath
        '    gp.AddRectangle(New Rectangle(1, 1, selectedicon.Image.Width, selectedicon.Image.Height)) 'rect)
        '    'Dim instance As New Region(rect)
        '    pbCurIconUsed.Region = Nothing
        '    pbCurIconUsed.Region = New System.Drawing.Region(gp)
        '    'set image
        '    pbCurIconUsed.Image = selectedicon.Image
        '    validatefoldercontents()
        'Catch ex1 As Exception
        '    Debug.Print(ex1.ToString)
        '    Try
        '        If File.Exists(cmpath + "\folder.jpg") Then File.SetAttributes(cmpath + "\folder.jpg", FileAttributes.Normal)
        '        If File.Exists(cmpath + "\" + cmname + ".tbn") Then File.SetAttributes(cmpath + "\" + cmname + ".tbn", FileAttributes.Normal)
        '        If File.Exists(cmpath + "\movie.tbn") Then File.SetAttributes(cmpath + "\movie.tbn", FileAttributes.Normal)
        '    Catch ex As Exception
        '        Debug.Print("unable to set permissions on file" + ex.ToString)
        '    End Try
        '    Try
        '        If File.Exists(cmpath + "\folder.jpg") Then File.Delete(cmpath + "\folder.jpg")
        '        If File.Exists(cmpath + "\" + cmname + ".tbn") Then File.Delete(cmpath + "\" + cmname + ".tbn")
        '        If File.Exists(cmpath + "\movie.tbn") Then File.Delete(cmpath + "\movie.tbn")
        '        selectedicon.Image.Save(lblCurMovieFolder.Text + "\folder.jpg")
        '        File.Copy(lblCurMovieFolder.Text + "\folder.jpg", cmpath + "\" + cmname + ".tbn", True)
        '        File.Copy(lblCurMovieFolder.Text + "\folder.jpg", cmpath + "\movie.tbn", True)
        '        Debug.Print("saved: " + selectedicon.ImageLocation + selectedicon.ToString)
        '        lblPbar.Visible = True
        '        lblPbar.Text = Date.Now.ToString + " - Icon saved --" '+ selectedicon.ImageLocation
        '        tcMain.SelectTab(0)
        '        pbCurIconUsed.Image = Nothing
        '        pbCurIconUsed.ImageLocation = Nothing
        '        pbCurrentIconUsedNT.Hide()
        '        'create new region
        '        Dim gp As New System.Drawing.Drawing2D.GraphicsPath
        '        gp.AddRectangle(New Rectangle(1, 1, selectedicon.Image.Width, selectedicon.Image.Height)) 'rect)
        '        'Dim instance As New Region(rect)
        '        pbCurIconUsed.Region = Nothing
        '        pbCurIconUsed.Region = New System.Drawing.Region(gp)
        '        'set image
        '        pbCurIconUsed.Image = selectedicon.Image
        '        validatefoldercontents()
        '    Catch ex As Exception
        '        Debug.Print(ex.ToString)
        '    End Try
        'End Try
    End Sub

    Private Sub savefanart(ByRef selectedicon As PictureBox)
        'not used rev 2401
        'Try
        '    If File.Exists(currentmovie.getmoviepath + "\" + currentmovie.pmoviename + "-fanart.jpg") Then
        '        File.SetAttributes(currentmovie.getmoviepath + "\" + currentmovie.pmoviename + "-fanart.jpg", FileAttributes.Normal)
        '        File.Delete(currentmovie.getmoviepath + "\" + currentmovie.pmoviename + "-fanart.jpg")
        '    End If
        'Catch ex As Exception
        'End Try
        'selectedicon.Image.Save(currentmovie.getmoviepath + "\" + currentmovie.pmoviename + "-fanart.jpg")
        'Debug.Print("saved: " + selectedicon.ImageLocation + selectedicon.ToString)
        'lblPbar.Visible = True
        'lblPbar.Text = Date.Now.ToString + " - Fanart saved --" '+ selectedicon.ImageLocation
        'validatefoldercontents()
    End Sub
    Private Sub fatooltip(ByRef selectedicon As PictureBox)
        If selectedicon.Enabled Then
            Dim toolTip1 As ToolTip = New ToolTip(Me.components)
            Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(selectedicon.AccessibleName)
            toolTip1.SetToolTip(selectedicon, "Width: " & objImage.Width.ToString & " - Height: " & objImage.Height.ToString)
            toolTip1.Active = True
            objImage = Nothing
        End If
    End Sub
#End Region

    '#Region "Mouseover events for fanart"
    '    Private Sub pbfatmdb1_Hover(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb1.MouseHover
    '        fatooltip(pbfatmdb1)
    '    End Sub
    '    Private Sub pbfatmdb2_Hover(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb2.MouseHover
    '        fatooltip(pbfatmdb2)
    '    End Sub
    '    Private Sub pbfatmdb3_Hover(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb3.MouseHover
    '        fatooltip(pbfatmdb3)
    '    End Sub
    '    Private Sub pbfatmdb4_Hover(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb4.MouseHover
    '        fatooltip(pbfatmdb4)
    '    End Sub
    '    Private Sub pbfatmdb5_Hover(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb5.MouseHover
    '        fatooltip(pbfatmdb5)
    '    End Sub
    '    Private Sub pbfatmdb6_Hover(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb6.MouseHover
    '        fatooltip(pbfatmdb6)
    '    End Sub
    '    Private Sub pbfatmdb7_Hover(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb7.MouseHover
    '        fatooltip(pbfatmdb7)
    '    End Sub
    '    Private Sub pbfatmdb8_Hover(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb8.MouseHover
    '        fatooltip(pbfatmdb8)
    '    End Sub
    '    Private Sub pbfatmdb9_Hover(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb9.MouseHover
    '        fatooltip(pbfatmdb9)
    '    End Sub
    '    Private Sub pbfatmdb10_Hover(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb10.MouseHover
    '        fatooltip(pbfatmdb10)
    '    End Sub
    '    Private Sub pbfatmdb11_Hover(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb11.MouseHover
    '        fatooltip(pbfatmdb11)
    '    End Sub
    '    Private Sub pbfatmdb12_Hover(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb12.MouseHover
    '        fatooltip(pbfatmdb12)
    '    End Sub
    '    Private Sub pbfatmdb13_Hover(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb13.MouseHover
    '        fatooltip(pbfatmdb13)
    '    End Sub
    '    Private Sub pbfatmdb14_Hover(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb14.MouseHover
    '        fatooltip(pbfatmdb14)
    '    End Sub
    '    Private Sub pbfatmdb15_Hover(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb15.MouseHover
    '        fatooltip(pbfatmdb15)
    '    End Sub
    '    Private Sub pbfatmdb16_Hover(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb16.MouseHover
    '        fatooltip(pbfatmdb16)
    '    End Sub
    '    Private Sub pbfatmdb17_Hover(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb17.MouseHover
    '        fatooltip(pbfatmdb17)
    '    End Sub
    '    Private Sub pbfatmdb18_Hover(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb18.MouseHover
    '        fatooltip(pbfatmdb18)
    '    End Sub
    '    Private Sub pbfatmdb19_Hover(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb19.MouseHover
    '        fatooltip(pbfatmdb19)
    '    End Sub
    '    Private Sub pbfatmdb20_Hover(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb20.MouseHover
    '        fatooltip(pbfatmdb20)
    '    End Sub
    '    Private Sub pbfatmdb21_Hover(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb21.MouseHover
    '        fatooltip(pbfatmdb21)
    '    End Sub
    '    Private Sub pbfatmdb22_Hover(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb22.MouseHover
    '        fatooltip(pbfatmdb22)
    '    End Sub
    '    Private Sub pbfatmdb23_Hover(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb23.MouseHover
    '        fatooltip(pbfatmdb23)
    '    End Sub
    '    Private Sub pbfatmdb24_Hover(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbfatmdb24.MouseHover
    '        fatooltip(pbfatmdb24)
    '    End Sub
    '#End Region
    Private Sub tryanothername()
        Dim currentarraypointer As Integer = CInt(lbMyMovies.SelectedValue)
        'get curent index id from drop down
        Dim curindex As Integer = CInt(lbMyMovies.SelectedValue)
        Dim curmovie As movie = CType(movies(curindex), movie)
        curmovie.preservedmoviename = curmovie.pmoviename
        Dim originalmoviename As String

        'modify folder name option (is/is not selected)
        If Not cbChangeFolderName.Checked Then
            curmovie.setmoviename(tbnewname.Text)
            processdropdownitems()
        Else 'changing folder and all associated data
            originalmoviename = curmovie.preservedmoviename
            If originalmoviename = tbnewname.Text Then
                'no change to the name was detected.. exit
                Exit Sub
                'Else
                '   curmovie.setmoviename(originalmoviename)
            End If

            Dim curpath As String = curmovie.getmoviepath
            Dim curname As String = curmovie.pmoviename

            Dim newname As String = tbnewname.Text
            Dim shiftpoint As Integer = curname.Length
            Dim pathlength As Integer = curpath.Length
            Dim newlength As Integer = pathlength - shiftpoint
            Dim rootfolder As String = Microsoft.VisualBasic.Left(curpath, newlength)

            Dim newpath As String = rootfolder + tbnewname.Text

            'move the directory
            Try
                If Not Directory.Exists(newpath) Then
                    Directory.Move(curpath, newpath)
                Else
                    MsgBox("unable to rename movie folder, the folder already exsists")
                    Exit Sub
                End If
            Catch ex As Exception
                Debug.Print("unable to move directory, check to make sure its not already there")
            End Try

            'change the text in cbox1 
            lbMyMovies.Text = newname
            'change the path and name in mainform.movies arraylist 
            currentmovie.pmoviename = newname
            currentmovie.setmoviepath(newpath)
            'set the movie back into the array
            movies(currentarraypointer) = currentmovie
            readfolderdatafordropdown()

            'lbMyMovies.SelectAll()
            If lbMyMovies.SelectedItem.ToString = newname Then
                'it matched show the new images
                processdropdownitems()
                Debug.Print("new Text matches the changed value")
            Else
                tbnewname.Text = CInt(lbMyMovies.SelectedValue).ToString 'fixme
                MsgBox("File system change detected during processing, you will have to manually select the movie to see the changes", MsgBoxStyle.Exclamation)
                processdropdownitems()
            End If
        End If
    End Sub
    Private Sub tryanothernameformovie()
        If currentmovie Is Nothing Then Exit Sub
        'for each mode, old files need to be removed .. all tbn's, jpgs, and .nfo's 

        'if it's file mode, we need to use the preserved name, less extension
        'if it's folder level, we need to modify the foldername, which means the path needs to be updated as well
        'in addition, for folders only, we need to take the currentmovie name length and get the rest of the folder 
        'so that we maintain any folder level options (like year, codec, etc)

        '.nfo's will be blown away as well as all known files
        'tbnewname.Text is the new name box

        

        'set moviemode
        setmoviemode(currentmovie)

        'get path
        Dim cmpath As String = ""
        cmpath = currentmovie.getmoviepath
        Dim cmname As String = ""
        If moviemode = "file" Then
            MsgBox("warning, this is done at the file level, this change will break stacks of movies (ie. cd1 .. part1 ... dvd1.. etc), you'll need to modify the other file as well if stacking")
            tbnewname.Text = cleanname(tbnewname.Text)  'removes any chars not permitted by windows file strutures
            Dim extension As String = ""
            Dim extpart As String = ""
            extpart = Strings.Right(currentmovie.preservedmoviename, 5)
            extension = Regex.Match(extpart, "(\.\D{2,4})").Groups(1).Value
            'path is unchanged, .nfo is gone so unflag it
            currentmovie.pdatafromnfo = False
            Try
                File.SetAttributes(addfiletofolder(cmpath, currentmovie.preservedmoviename), FileAttributes.Normal)
                removeallknownmoviefiles() 'the cleanup
                File.Move(addfiletofolder(cmpath, currentmovie.preservedmoviename), addfiletofolder(cmpath, tbnewname.Text & extension))
                currentmovie.preservedmoviename = tbnewname.Text & extension 'addfiletofolder(cmpath, tbnewname.Text & extension)
                currentmovie.pdatafromnfo = False
                currentmovie.pmoviename = tbnewname.Text
                currentmovie.ptitle = tbnewname.Text
                movies.Item(CInt(lbMyMovies.SelectedValue)) = currentmovie

            Catch ex As Exception
                Debug.Print(ex.ToString)
            End Try
        End If

        If moviemode = "folder" Then
            Dim fullfoldernameandpath As String = currentmovie.getmoviepath
            Dim parentdir As String = getparentdirectory(fullfoldernameandpath)
            Dim parsedfoldernameandpath() As String = Strings.Split(fullfoldernameandpath, "\")
            Dim moviefoldername As String = parsedfoldernameandpath(parsedfoldernameandpath.Length - 1)
            Dim moviefoldernamelength As Integer = moviefoldername.Length
            Dim filteredname As String = currentmovie.pmoviename
            Dim filterednamelength As Integer = currentmovie.pmoviename.Length
            Dim additionalfolderstring As String = ""
            tbnewname.Text = cleanname(tbnewname.Text)  'removes any chars not permitted by windows folder structures
            If Not moviefoldernamelength - filterednamelength = 0 Then
                additionalfolderstring = Strings.Right(moviefoldername, moviefoldernamelength - filterednamelength)
            End If

            Try
                If Not Directory.Exists(parentdir & tbnewname.Text & additionalfolderstring) Then
                    removeallknownmoviefiles() 'the cleanup
                    Directory.Move(fullfoldernameandpath, parentdir & tbnewname.Text & additionalfolderstring)
                    currentmovie.setmoviepath(parentdir & tbnewname.Text & additionalfolderstring)
                    currentmovie.pdatafromnfo = False
                    currentmovie.peditedmoviename = tbnewname.Text + additionalfolderstring
                    currentmovie.pmoviename = tbnewname.Text
                    currentmovie.ptitle = tbnewname.Text
                    movies.Item(CInt(lbMyMovies.SelectedValue)) = currentmovie

                Else
                    MsgBox("Folder already exists, pick a different name")
                End If

            Catch ex2 As Exception
                Debug.Print(ex2.ToString)
            End Try


        End If
        processdropdownitems()

    End Sub
    Private Sub setmoviemode(ByRef themovie As movie)
        If themovie.pfilemode Then
            moviemode = "file"
        Else
            moviemode = "folder"
        End If
    End Sub
    Private Sub removeallknownmoviefiles()
        If currentmovie Is Nothing Then Exit Sub
        Dim cmpath As String = ""
        cmpath = currentmovie.getmoviepath
        setmoviemode(currentmovie)
        Dim curname As String = ""
        If moviemode = "file" Then
            curname = addfiletofolder(cmpath, stripstackforfilemode(removeextension(currentmovie.preservedmoviename)) + ".tbn")
            Try
                If File.Exists(curname) Then File.SetAttributes(curname, FileAttributes.Normal)
                File.Delete(curname)
            Catch ex As Exception
                Debug.Print(ex.ToString)
            End Try
            curname = addfiletofolder(cmpath, stripstackforfilemode(removeextension(currentmovie.preservedmoviename)) + "-fanart.jpg")
            Try
                If File.Exists(curname) Then File.SetAttributes(curname, FileAttributes.Normal)
                File.Delete(curname)
            Catch ex As Exception
                Debug.Print(ex.ToString)
            End Try
            curname = addfiletofolder(cmpath, stripstackforfilemode(removeextension(currentmovie.preservedmoviename)) + ".nfo")
            Try
                If File.Exists(curname) Then File.SetAttributes(curname, FileAttributes.Normal)
                File.Delete(curname)
            Catch ex As Exception
                Debug.Print(ex.ToString)
            End Try
        Else
            curname = addfiletofolder(cmpath, currentmovie.pmoviename) + ".tbn"
            Try
                If File.Exists(curname) Then File.SetAttributes(curname, FileAttributes.Normal)
                If File.Exists(curname) Then File.Delete(curname)
            Catch ex As Exception
                Debug.Print(ex.ToString)
            End Try
            curname = addfiletofolder(cmpath, currentmovie.pmoviename) + ".nfo"
            Try
                If File.Exists(curname) Then File.SetAttributes(curname, FileAttributes.Normal)
                If File.Exists(curname) Then File.Delete(curname)
            Catch ex As Exception
                Debug.Print(ex.ToString)
            End Try
            curname = addfiletofolder(cmpath, "movie.nfo")
            Try
                If File.Exists(curname) Then File.SetAttributes(curname, FileAttributes.Normal)
                If File.Exists(curname) Then File.Delete(curname)
            Catch ex As Exception
                Debug.Print(ex.ToString)
            End Try
            curname = addfiletofolder(cmpath, currentmovie.pmoviename) + "-fanart.jpg"
            Try
                If File.Exists(curname) Then File.SetAttributes(curname, FileAttributes.Normal)
                If File.Exists(curname) Then File.Delete(curname)
            Catch ex As Exception
                Debug.Print(ex.ToString)
            End Try
            curname = addfiletofolder(cmpath, currentmovie.pmoviename) + "-fanart.png"
            Try
                If File.Exists(curname) Then File.SetAttributes(curname, FileAttributes.Normal)
                If File.Exists(curname) Then File.Delete(curname)
            Catch ex As Exception
                Debug.Print(ex.ToString)
            End Try
            curname = addfiletofolder(cmpath, "folder.jpg")
            Try
                If File.Exists(curname) Then File.SetAttributes(curname, FileAttributes.Normal)
                If File.Exists(curname) Then File.Delete(curname)
            Catch ex As Exception
                Debug.Print(ex.ToString)
            End Try
            curname = addfiletofolder(cmpath, "fanart.jpg")
            Try
                If File.Exists(curname) Then File.SetAttributes(curname, FileAttributes.Normal)
                If File.Exists(curname) Then File.Delete(curname)
            Catch ex As Exception
                Debug.Print(ex.ToString)
            End Try
            curname = addfiletofolder(cmpath, "fanart.png")
            Try
                If File.Exists(curname) Then File.SetAttributes(curname, FileAttributes.Normal)
                If File.Exists(curname) Then File.Delete(curname)
            Catch ex As Exception
                Debug.Print(ex.ToString)
            End Try
            curname = addfiletofolder(cmpath, "movie.tbn")
            Try
                If File.Exists(curname) Then File.SetAttributes(curname, FileAttributes.Normal)
                If File.Exists(curname) Then File.Delete(curname)
            Catch ex As Exception
                Debug.Print(ex.ToString)
            End Try
        End If
    End Sub
    Private Sub btnRetryName_Click_1(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnRetryName.Click
        'with build 1.5.1.8 and up, this method will no longer work
        'cbox1 is now derived and is a pointer by selectedvalue to the mainform.movies arraylist by the selectedvalue, the name does not matter
        'will need to update the movie entry in the mainform.movies array with the new name, update cbox1's name, and rename the folder
        'temp bypass to new function
        'removed in 2419
        'tryanothername()

        'added in rev 2419 to account for file level processing
        tryanothernameformovie()

        Exit Sub
        'Dim currentarraypointer As Integer = CInt(cbox1.SelectedValue)
        ''get curent index id from drop down
        'Dim curindex As Integer = cbox1.SelectedIndex
        'Dim curmovie As movie = CType(movies(curindex), movie)
        'Dim originalmoviename As String

        ''modify folder name option (is/is not selected)
        'If cbChangeFolderName.Checked Then
        '    originalmoviename = curmovie.preservedmoviename
        '    If originalmoviename = curmovie.getmoviename Then
        '        'no change detected, process normally
        '    Else
        '        curmovie.setmoviename(originalmoviename)
        '    End If
        '    Dim curpath As String = curmovie.getmoviepath
        '    Dim curname As String = curmovie.pmoviename
        '    Dim newname As String = tbnewname.Text
        '    Dim shiftpoint As Integer = curname.Length
        '    Dim pathlength As Integer = curpath.Length
        '    Dim newlength As Integer = pathlength - shiftpoint
        '    Dim rootfolder As String = Microsoft.VisualBasic.Left(curpath, newlength)
        '    Dim newpath As String = rootfolder + tbnewname.Text
        '    Try
        '        If Not Directory.Exists(newpath) Then
        '            Directory.Move(curpath, newpath)
        '        Else
        '            MsgBox("unable to rename movie folder, the folder already exsists")
        '            Exit Sub
        '        End If
        '    Catch ex As Exception
        '        Debug.Print("unable to move directory, check to make sure its not already there")
        '    End Try

        '    curmovie.setmoviepath(newpath)
        '    Dim tempmovieinarray As New movie
        '    tempmovieinarray = CType(movies(currentarraypointer), movie)
        '    tempmovieinarray.pmoviename = newname
        '    tempmovieinarray.setmoviepath(newpath)
        '    movies(currentarraypointer) = tempmovieinarray
        '    'update dropdown since the cleaner method failed to work as intended
        '    readfolderdatafordropdown()
        '    'this will get hairy if the file system changes during this operation
        '    Try
        '        cbox1.SelectedIndex = curindex
        '    Catch ex As Exception
        '        MsgBox("File or folders that are used by the program changed during processing, you will need to manually select the movie from the drop down.", MsgBoxStyle.Exclamation)
        '        processdropdownitems()
        '    End Try

        '    cbox1.SelectAll()
        '    If cbox1.SelectedText = newname Then
        '        'it matched show the new images
        '        processdropdownitems()
        '        Debug.Print("new Text matches the changed value")
        '    Else
        '        tbnewname.Text = cbox1.SelectedText
        '        MsgBox("File system change detected during processing, you will have to manually select the movie to see the changes", MsgBoxStyle.Exclamation)
        '        processdropdownitems()
        '    End If
        'Else
        '    curmovie.setmoviename(tbnewname.Text)
        '    processdropdownitems()
        'End If


    End Sub

    Private Sub Button2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button2.Click
        createtestfoldersfromposterxmls()
    End Sub
   
    Public Sub getimdbids()
        Dim imdbbase As String = "http://www.imdb.com/title/tt"
        Dim counter As Integer = 127280
        While counter < 999999
            Dim link As String = ""
            Dim counterlen As Integer = counter.ToString.Length
            Select Case counterlen
                Case 1
                    link = "000000" + counter.ToString
                Case 2
                    link = "00000" + counter.ToString
                Case 3
                    link = "0000" + counter.ToString
                Case 4
                    link = "000" + counter.ToString
                Case 5
                    link = "00" + counter.ToString
                Case 6
                    link = "0" + counter.ToString
                Case 7
                    link = "" + counter.ToString
                Case Else
                    Debug.Print("error")
            End Select
            Dim url As String = imdbbase + link
            'get url
            Dim s As String = ""
            Try
                Dim request As HttpWebRequest = CType(WebRequest.Create(url), HttpWebRequest)
                Dim response As HttpWebResponse = CType(request.GetResponse(), System.Net.HttpWebResponse)
                Using reader As StreamReader = New StreamReader(response.GetResponseStream())
                    s = reader.ReadToEnd()
                End Using
            Catch ex As Exception

            End Try

            '            Me.tp3rtbimdbdata.Text
            Dim tvarstolower As String = Convert.ToString(s)

            'parse for name (retid3)
            Dim retid3 As String = "NOTHING FOUND"
            Dim retyear As String = ""
            Dim curmovie As New movie

            Try
                'Dim RegexObj3 As New Regex("<title>(?<moviename>.+?) \(?<year>\d{4}?\)</title>", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline)
                Dim RegexObj3 As New Regex("<title>(?<moviename>.+?) \((?<year>\d{4})\)</title>", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline)

                retid3 = RegexObj3.Match(tvarstolower).Groups("moviename").Value
                retyear = RegexObj3.Match(tvarstolower).Groups("year").Value
            Catch ex As ArgumentException
                'Syntax error in the regular expression
            End Try

            'get additional data
            Dim plotoutline, mpaa, runtime As String
            Try
                'Dim RegexObj2 As New Regex("<h5>Plot Outline:</h5>(?<plotoutline>.+?)(?:<a){1}?.*<div class=""info"">.{0,3}<h5><a href=""/mpaa"">MPAA</a>:</h5>(?<mpaa>.{0,3}.+?)</div>.{0,5}<div class=""info"">.{0,3}<h5>Parents.Guide:</h5>.{0,3}.+?</div>.{0,5}<div class=""info"">.{0,3}<h5>Runtime:</h5>(?<runtime>.+?)</div>", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline)
                Dim RegexObj2 As New Regex("<h5>Plot Outline:</h5>(?<plotoutline>.+?)</div>.*(?:<div class=""info"">.{0,3}<h5><a href=""/mpaa"">MPAA</a>:</h5>(?<mpaa>.{0,3}.+?)</div>)??.{0,5}<div class=""info"">.{0,3}<h5>Parents.Guide:</h5>.{0,3}.+?</div>.{0,5}<div class=""info"">.{0,3}<h5>Runtime:</h5>(?<runtime>.+?)</div>", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline)
                plotoutline = RegexObj2.Match(tvarstolower).Groups("plotoutline").Value
                mpaa = RegexObj2.Match(tvarstolower).Groups("mpaa").Value
                runtime = RegexObj2.Match(tvarstolower).Groups("runtime").Value
                curmovie.pmpaa = mpaa
                curmovie.pruntime = runtime
                curmovie.pplotoutline = plotoutline

                ' curmovie.set
            Catch ex As ArgumentException
                'Syntax error in the regular expression
            End Try
            '----- end additional data


            curmovie.pimdbnumber = "tt" + link
            curmovie.pimdbnumber = "tt" + link
            curmovie.setmoviename(retid3)
            curmovie.pmoviename = retid3
            Try
                curmovie.setyear(Convert.ToInt16(retyear))
                curmovie.pyear = Convert.ToInt16(retyear)
            Catch ex As Exception

            End Try
            Debug.Print(curmovie.pimdbnumber.ToString + ": " + curmovie.getyear.ToString + curmovie.getmoviename.ToString + " -- " + curmovie.pruntime.ToString + "..." + curmovie.pplotoutline.ToString)
            'drop 50k records per folder
            If counter < 49999 Then
                curmovie.writeMovieXML(curmovie, "c:\movieinfoplus\imdbdata0\")
            ElseIf counter > 49999 And counter < 99999 Then
                curmovie.writeMovieXML(curmovie, "c:\movieinfoplus\imdbdata1\")
            ElseIf counter > 99999 And counter < 149999 Then
                curmovie.writeMovieXML(curmovie, "c:\movieinfoplus\imdbdata2\")
            ElseIf counter > 149999 And counter < 199999 Then
                curmovie.writeMovieXML(curmovie, "c:\movieinfoplus\imdbdata3\")
            ElseIf counter > 199999 And counter < 249999 Then
                curmovie.writeMovieXML(curmovie, "c:\movieinfoplus\imdbdata4\")
            ElseIf counter > 249999 And counter < 299999 Then
                curmovie.writeMovieXML(curmovie, "c:\movieinfoplus\imdbdata5\")
            ElseIf counter > 299999 And counter < 349999 Then
                curmovie.writeMovieXML(curmovie, "c:\movieinfoplus\imdbdata6\")
            ElseIf counter > 349999 And counter < 399999 Then
                curmovie.writeMovieXML(curmovie, "c:\movieinfoplus\imdbdata7\")
            ElseIf counter > 399999 And counter < 449999 Then
                curmovie.writeMovieXML(curmovie, "c:\movieinfoplus\imdbdata8\")
            ElseIf counter > 449999 And counter < 499999 Then
                curmovie.writeMovieXML(curmovie, "c:\movieinfoplus\imdbdata9\")
            ElseIf counter > 499999 And counter < 549999 Then
                curmovie.writeMovieXML(curmovie, "c:\movieinfoplus\imdbdata10\")
            ElseIf counter > 549999 And counter < 599999 Then
                curmovie.writeMovieXML(curmovie, "c:\movieinfoplus\imdbdata11\")
            ElseIf counter > 599999 And counter < 649999 Then
                curmovie.writeMovieXML(curmovie, "c:\movieinfoplus\imdbdata12\")
            ElseIf counter > 649999 And counter < 699999 Then
                curmovie.writeMovieXML(curmovie, "c:\movieinfoplus\imdbdata13\")
            ElseIf counter > 699999 And counter < 749999 Then
                curmovie.writeMovieXML(curmovie, "c:\movieinfoplus\imdbdata14\")
            ElseIf counter > 749999 And counter < 799999 Then
                curmovie.writeMovieXML(curmovie, "c:\movieinfoplus\imdbdata15\")
            ElseIf counter > 799999 And counter < 849999 Then
                curmovie.writeMovieXML(curmovie, "c:\movieinfoplus\imdbdata16\")
            ElseIf counter > 849999 And counter < 899999 Then
                curmovie.writeMovieXML(curmovie, "c:\movieinfoplus\imdbdata17\")
            ElseIf counter > 899999 And counter < 949999 Then
                curmovie.writeMovieXML(curmovie, "c:\movieinfoplus\imdbdata18\")
            ElseIf counter > 949999 And counter < 999999 Then
                curmovie.writeMovieXML(curmovie, "c:\movieinfoplus\imdbdata19\")
            ElseIf counter > 999999 Then
                curmovie.writeMovieXML(curmovie, "c:\movieinfoplus\imdbdata20\")
            End If


            counter = counter + 1
        End While
    End Sub
    Private Sub downloadimpposter(ByRef passedposter As posters, Optional ByRef bwcounter As Integer = 0, Optional ByRef specificarraylist As ArrayList = Nothing)
        Dim baseposter As String = rconf.postercachefolder
        Dim counter As Integer = 0

        'clean up invalid posters
        If messageprompts Then postertotal += passedposter.pposters.Count
        Dim cleanupcount As Integer = 0
        While cleanupcount < passedposter.pposters.Count
            If singleMovieBeingDisplayed Then 'flag when using bw
                bwcounter += 1
                bwDisplayMovieData.ReportProgress(bwcounter, "Cleaning Up IMP Poster" + cleanupcount.ToString)
            End If
            checkAndRemoveSmallPictureFile(baseposter + passedposter.pposters(cleanupcount).ToString + ".jpg")
            cleanupcount += 1
        End While

        'parse through the list and add it to the downloader
        Debug.Print(passedposter.pposters(counter).ToString)
        Try
            While counter < passedposter.pposters.Count
                Dim fromcache As Boolean = False
                Dim checklocal As String = rconf.postercachefolder + passedposter.pposters(counter).ToString + ".jpg" 'iconcachefolder + Convert.ToString(keyid) + "f" + Format() + "c" + catagory + "s" + style + ".jpg"
                If File.Exists(checklocal) Then fromcache = True

                If Not fromcache Then
                    Dim url As String
                    url = "http://www.impawards.com/" + passedposter.pyear.ToString + "/posters/" + passedposter.pposters(counter).ToString + ".jpg"
                    If specificarraylist Is Nothing Then
                        addtodownloadlist(currentmovie, url, checklocal, currentmovie.pmoviename + ": Impawards Poster - " + passedposter.pposters(counter).ToString)
                    Else
                        addtodownloadlist(specificarraylist, url, checklocal, currentmovie.pmoviename + ": Impawards Poster - " + passedposter.pposters(counter).ToString)
                    End If

                End If
                counter = counter + 1
            End While
        Catch ex As Exception
            If pclogging Then pclog.WriteLine("NON FATAL EXCEPTION, If there is no data, this excpetion is expected" + ex.ToString)
        End Try

    End Sub
    Private Sub downloadcaldnposters(Optional ByRef bwcount As Integer = 0, Optional ByRef specificarraylist As ArrayList = Nothing)
        If currentmovie.pimdbnumber Is Nothing Then Exit Sub
        If currentmovie.pimdbnumber = "" Then Exit Sub
        Dim filename As String = currentmovie.pimdbnumber + ".jpg"
        Dim fullpath As String = addfiletofolder(rconf.calgorydotnetfolder, filename)
        'see if the file is already in cache
        '        If File.Exists(fullpath) Then Exit Sub

        Dim baseurl As String = "http://www.calagregory.net/dvdcovers/frontcovers/"
        Dim posterurl As String = baseurl + filename
        'get posters


        If Not File.Exists(addfiletofolder(rconf.calgorydotnetfolder, filename)) Then
            Dim pathtosaveto As String = addfiletofolder(rconf.cachefolder, "caldncache")
            Dim binfilelocal As String = rconf.wgetfolder + "wget.exe"
            Dim pro5 As Process = New Process()
            pro5.StartInfo.FileName = binfilelocal
            pro5.StartInfo.Arguments = posterurl + " -t 3 -T 60 -P " + """" + pathtosaveto + """"
            pro5.StartInfo.RedirectStandardError = True
            pro5.StartInfo.UseShellExecute = False
            pro5.StartInfo.CreateNoWindow = True
            pro5.Start()
            pro5.WaitForExit()
            If File.Exists(fullpath) Then File.SetAttributes(fullpath, FileAttributes.Normal)
        End If
        If Not File.Exists(addfiletofolder(rconf.calgorydotnetfolder, filename)) Then Exit Sub
        If messageprompts Then postertotal += 1

        If singleMovieBeingDisplayed Then
            bwcount += 1
        End If
    End Sub
    Private Sub downloadtmdbposters(Optional ByRef bwcount As Integer = 0, Optional ByRef specificarraylist As ArrayList = Nothing)
        'get posters
        'Dim tmovie As movie = c
        Dim cposters As New tmdbapiv2.Posters 'mip.themoviedb.backdrop.backdrops
        If rbem.Checked Then 'working online, get latest info
            tmdbapiv2.Results.getposters(currentmovie, cposters, currentmovie.pimdbnumber, rconf.wgetfolder, rconf.xmlfoldertmdbv2, True, True, True)
        Else 'not working online, do not overwrite, will still attempt to download if missing
            tmdbapiv2.Results.getposters(currentmovie, cposters, currentmovie.pimdbnumber, rconf.wgetfolder, rconf.xmlfoldertmdbv2, True, False, True)
        End If

        Dim tbdcount As Integer = cposters.posters.Count 'tmovie.pbackdrops.backdrops.Count
        If messageprompts Then postertotal += tbdcount
        If pclogging Then pclog.WriteLine(tbdcount.ToString + ": is the count of Posters from TMDB")
        If singleMovieBeingDisplayed Then
            bwcount += 1
            bwDisplayMovieData.ReportProgress(bwcount, "TMDB Poster Found - " + tbdcount.ToString) ' Check Starting")
        End If
        If Not tbdcount = 0 Then
            'count is not 0, process items
            Dim tbdcou As Integer = 0
            While tbdcou < tbdcount
                'if the file is not local download it
                Dim currentitem As New tmdbapiv2.Poster 'mip.themoviedb.backdrop.Item
                currentitem = cposters.posters.Item(tbdcou)
                'only process original size
                If Not currentitem.Size = "original" Then
                    tbdcou += 1
                    Continue While
                End If
                Dim posterurl As String = currentitem.Text
                'Dim posterpostcard As String = Strings.Left(currentitem.Text, currentitem.Text.Length - 4) + "_poster.jpg"
                Dim posterfilename As String = Regex.Match(posterurl, "posters/(.{1,8})/(.*?.).jpg", RegexOptions.IgnoreCase).Groups(2).Value
                Dim posterfilesubfoldername As String = Regex.Match(posterurl, "posters/(.{1,8})/(.*?.).jpg", RegexOptions.IgnoreCase).Groups(1).Value
                If posterfilename = "" Then
                    'fanartfilename = Regex.Match(fanarturl, "backdrops/.{1,8}/(.*?.).png", RegexOptions.IgnoreCase).Groups(1).Value
                    'skip it
                    If pclogging Then pclog.WriteLine("Skipping :" + posterurl + " -- The results from the API are not in the correct format, expecting .jpg with associated _poster")
                    tbdcou += 1
                    Continue While
                End If
                Dim posterurl_mid As String = Strings.Left(currentitem.Text, currentitem.Text.Length - 4) + "_mid.jpg"
                Dim posterurl_cover As String = Strings.Left(currentitem.Text, currentitem.Text.Length - 4) + "_cover.jpg"
                If Not Directory.Exists(rconf.tmdbpostercachefolder + currentmovie.pimdbnumber + "\" + posterfilesubfoldername + "\") Then Directory.CreateDirectory(rconf.tmdbpostercachefolder + currentmovie.pimdbnumber + "\" + posterfilesubfoldername + "\")
                If Not File.Exists(rconf.tmdbpostercachefolder + currentmovie.pimdbnumber + "\" + posterfilesubfoldername + "\" + posterfilename + "_cover.jpg") Then 'thumbnail
                    'add it to the download arraylist in the movie
                    If specificarraylist Is Nothing Then
                        addtodownloadlist(currentmovie, posterurl_cover, rconf.tmdbpostercachefolder + currentmovie.pimdbnumber + "\" + posterfilesubfoldername + "\" + posterfilename + "_cover.jpg", currentmovie.pmoviename + ": TMDB Poster Small Image - " + posterfilename)
                    Else
                        addtodownloadlist(specificarraylist, posterurl_cover, rconf.tmdbpostercachefolder + currentmovie.pimdbnumber + "\" + posterfilesubfoldername + "\" + posterfilename + "_cover.jpg", currentmovie.pmoviename + ": TMDB Poster Small Image - " + posterfilename)
                    End If
                End If


                If Not File.Exists(rconf.tmdbpostercachefolder + currentmovie.pimdbnumber + "\" + posterfilesubfoldername + "\" + posterfilename + ".jpg") Then 'high rez
                    'add it to the download arraylist in the movie
                    '                    addtodownloadlist(currentmovie, posterurl, rconf.tmdbpostercachefolder + currentmovie.pimdbnumber + "\" + posterfilesubfoldername + "\" + posterfilename + ".jpg")
                    'add it to the download arraylist in the movie
                    If specificarraylist Is Nothing Then
                        addtodownloadlist(currentmovie, posterurl, rconf.tmdbpostercachefolder + currentmovie.pimdbnumber + "\" + posterfilesubfoldername + "\" + posterfilename + ".jpg", currentmovie.pmoviename + ": TMDB Poster - " + posterfilename)
                    Else
                        addtodownloadlist(specificarraylist, posterurl, rconf.tmdbpostercachefolder + currentmovie.pimdbnumber + "\" + posterfilesubfoldername + "\" + posterfilename + ".jpg", currentmovie.pmoviename + ": TMDB Poster - " + posterfilename)
                    End If

                End If

                tbdcou += 1
                'If tbdcou = 25 Then Exit Sub 'more then gui has 
            End While
        End If
    End Sub
    Public Shared Sub downloadtmdbposter_single(ByRef whatmovie As movie, Optional ByRef bwcount As Integer = 0, Optional ByRef specificarraylist As ArrayList = Nothing, Optional ByVal dlgitem As Boolean = False, Optional ByVal downloadsmallonly As Boolean = False)
        'get posters
        'Dim tmovie As movie = c
        Dim cposters As New tmdbapiv2.Posters 'mip.themoviedb.backdrop.backdrops
        'working online, get latest info
        tmdbapiv2.Results.getposters(whatmovie, cposters, whatmovie.pimdbnumber, rconf.wgetfolder, rconf.xmlfoldertmdbv2, True, True, True)
       
        Dim tbdcount As Integer = cposters.posters.Count 'tmovie.pbackdrops.backdrops.Count
       
        If Not tbdcount = 0 Then
            'count is not 0, process items
            Dim tbdcou As Integer = 0
            While tbdcou < tbdcount
                'if the file is not local download it
                Dim currentitem As New tmdbapiv2.Poster 'mip.themoviedb.backdrop.Item
                currentitem = cposters.posters.Item(tbdcou)
                'only process original size
                If Not currentitem.Size = "original" Then
                    tbdcou += 1
                    Continue While
                End If
                Dim posterurl As String = currentitem.Text
                'Dim posterpostcard As String = Strings.Left(currentitem.Text, currentitem.Text.Length - 4) + "_poster.jpg"
                Dim posterfilename As String = Regex.Match(posterurl, "posters/(.{1,8})/(.*?.).jpg", RegexOptions.IgnoreCase).Groups(2).Value
                Dim posterfilesubfoldername As String = Regex.Match(posterurl, "posters/(.{1,8})/(.*?.).jpg", RegexOptions.IgnoreCase).Groups(1).Value
                If posterfilename = "" Then
                    'fanartfilename = Regex.Match(fanarturl, "backdrops/.{1,8}/(.*?.).png", RegexOptions.IgnoreCase).Groups(1).Value
                    'skip it

                    tbdcou += 1
                    Continue While
                End If
                Dim posterurl_mid As String = Strings.Left(currentitem.Text, currentitem.Text.Length - 4) + "_mid.jpg"
                Dim posterurl_cover As String = Strings.Left(currentitem.Text, currentitem.Text.Length - 4) + "_cover.jpg"
                If Not Directory.Exists(rconf.tmdbpostercachefolder + whatmovie.pimdbnumber + "\" + posterfilesubfoldername + "\") Then Directory.CreateDirectory(rconf.tmdbpostercachefolder + whatmovie.pimdbnumber + "\" + posterfilesubfoldername + "\")
                If (Not File.Exists(rconf.tmdbpostercachefolder + whatmovie.pimdbnumber + "\" + posterfilesubfoldername + "\" + posterfilename + "_cover.jpg")) Or dlgitem Then 'thumbnail
                    'add it to the download arraylist in the movie
                    Dim newdownloadobject As New miplibfc.mip.dlobject
                    newdownloadobject.URL = posterurl_cover
                    newdownloadobject.Destination = rconf.tmdbpostercachefolder + whatmovie.pimdbnumber + "\" + posterfilesubfoldername + "\" + posterfilename + "_cover.jpg"
                    newdownloadobject.misc = whatmovie.pmoviename + ": TMDB Poster Small Image - " + posterfilename
                    newdownloadobject.hideurl = True
                    whatmovie.pdownloadlist.Add(newdownloadobject)
                    'addtodownloadlist(whatmovie, posterurl_cover, rconf.tmdbpostercachefolder + whatmovie.pimdbnumber + "\" + posterfilesubfoldername + "\" + posterfilename + "_cover.jpg", whatmovie.pmoviename + ": TMDB Poster Small Image - " + posterfilename)
                End If
                tbdcou += 1
                If tbdcou = 1 Then Exit Sub 'more then gui has 
            End While
        End If
    End Sub
    Private Sub downloadtmdbfanart(Optional ByRef bwcount As Integer = 0, Optional ByRef specificarraylist As ArrayList = Nothing)
        'get fanart
        Dim cbackdrops As New tmdbapiv2.Backdrops
        If currentmovie.pbackdrops Is Nothing Then
            'mip.themoviedb.backdrop.backdrops
            If rbem.Checked Then 'working online, get latest info
                tmdbapiv2.Results.getbackdrops(currentmovie, cbackdrops, currentmovie.pimdbnumber, rconf.wgetfolder, rconf.xmlfoldertmdbv2, True, True, True, False)
            Else 'not working online, do not overwrite, will not attempt to download
                tmdbapiv2.Results.getbackdrops(currentmovie, cbackdrops, currentmovie.pimdbnumber, rconf.wgetfolder, rconf.xmlfoldertmdbv2, True, False, True, True)
            End If
            currentmovie.pbackdrops = cbackdrops
        Else
            tmdbapiv2.Results.getbackdrops(currentmovie, cbackdrops, currentmovie.pimdbnumber, rconf.wgetfolder, rconf.xmlfoldertmdbv2, True, False, True, True)
            currentmovie.pbackdrops = cbackdrops
        End If

        Dim tbdcount As Integer = currentmovie.pbackdrops.backdrops.Count
        If Not tbdcount = 0 Then
            'count is not 0, process items
            Dim tbdcou As Integer = 0
            While tbdcou < tbdcount
                Dim currentitem As New tmdbapiv2.backdrop 'mip.themoviedb.backdrop.Item
                currentitem = currentmovie.pbackdrops.backdrops.Item(tbdcou)
                'only process original size
                If Not currentitem.Size = "original" Then
                    tbdcou += 1
                    Continue While
                End If
                Dim fanarturl As String = currentitem.Text
                Dim fanartpostcard As String = Strings.Left(currentitem.Text, currentitem.Text.Length - 4) + "_poster.jpg"
                Dim fanartfilename As String = Regex.Match(fanarturl, "backdrops/(.{1,8})/(.*?.).jpg", RegexOptions.IgnoreCase).Groups(2).Value
                Dim fanartfilesubfoldername As String = Regex.Match(fanarturl, "backdrops/(.{1,8})/(.*?.).jpg", RegexOptions.IgnoreCase).Groups(1).Value
                If fanartfilename = "" Then
                    'fanartfilename = Regex.Match(fanarturl, "backdrops/.{1,8}/(.*?.).png", RegexOptions.IgnoreCase).Groups(1).Value
                    'skip it
                    Debug.Print("Skipping :" + fanarturl + " -- The results from the API are not in the correct format, expecting .jpg with associated _poster")
                    tbdcou += 1
                    Continue While
                End If
                If Not Directory.Exists(rconf.tmdbfanartcachefolder + currentmovie.pimdbnumber + "\" + fanartfilesubfoldername + "\") Then Directory.CreateDirectory(rconf.tmdbfanartcachefolder + currentmovie.pimdbnumber + "\" + fanartfilesubfoldername + "\")

                'check for invalid file size
                checkAndRemoveSmallPictureFile(rconf.tmdbfanartcachefolder + currentmovie.pimdbnumber + "\" + fanartfilesubfoldername + "\" + fanartfilename + ".jpg")
                checkAndRemoveSmallPictureFile(rconf.tmdbfanartcachefolder + currentmovie.pimdbnumber + "\" + fanartfilesubfoldername + "\" + fanartfilename + "_poster.jpg")

                'if working online (not display only) then try to get the full size fanart image
                If currentmoviedownloadlist Is Nothing Then 'single movie mode
                    If rbem.Checked Then
                        If Not File.Exists(rconf.tmdbfanartcachefolder + currentmovie.pimdbnumber + "\" + fanartfilesubfoldername + "\" + fanartfilename + ".jpg") Then
                            'download it with wget, must wait for download to finish
                            addtodownloadlist(currentmovie, fanarturl, rconf.tmdbfanartcachefolder + currentmovie.pimdbnumber + "\" + fanartfilesubfoldername + "\" + fanartfilename + ".jpg", currentmovie.pmoviename + ": TMDB Fanart - " + fanartfilename)
                        End If
                        'downloading _poster for fanart 'needed as gui gets bogged down in wine
                        If Not File.Exists(rconf.tmdbfanartcachefolder + currentmovie.pimdbnumber + "\" + fanartfilesubfoldername + "\" + fanartfilename + "_poster.jpg") Then
                            'download it with wget, must wait for download to finish
                            addtodownloadlist(currentmovie, fanartpostcard, rconf.tmdbfanartcachefolder + currentmovie.pimdbnumber + "\" + fanartfilesubfoldername + "\" + fanartfilename + "_poster.jpg", currentmovie.pmoviename + ": TMDB Fanart Small Image - " + fanartfilename)
                        End If
                    End If
                Else
                    'precaching items
                    If Not File.Exists(rconf.tmdbfanartcachefolder + currentmovie.pimdbnumber + "\" + fanartfilesubfoldername + "\" + fanartfilename + ".jpg") Then
                        'download it with wget, must wait for download to finish
                        addtodownloadlist(currentmoviedownloadlist, fanarturl, rconf.tmdbfanartcachefolder + currentmovie.pimdbnumber + "\" + fanartfilesubfoldername + "\" + fanartfilename + ".jpg", currentmovie.pmoviename + ": TMDB Fanart - " + fanartfilename)
                    End If
                    'downloading _poster for fanart 'needed as gui gets bogged down in wine
                    If Not File.Exists(rconf.tmdbfanartcachefolder + currentmovie.pimdbnumber + "\" + fanartfilesubfoldername + "\" + fanartfilename + "_poster.jpg") Then
                        'download it with wget, must wait for download to finish
                        addtodownloadlist(currentmoviedownloadlist, fanartpostcard, rconf.tmdbfanartcachefolder + currentmovie.pimdbnumber + "\" + fanartfilesubfoldername + "\" + fanartfilename + "_poster.jpg", currentmovie.pmoviename + ": TMDB Fanart Small Image - " + fanartfilename)
                    End If
                End If
                tbdcou += 1
                'break out of loop if there's more then 24 fanarts, there's no gui option for those
                'If tbdcou = 25 Then Exit Sub
            End While
        End If
        'End If
        Debug.Print("end of fanart function")
    End Sub
    Private Sub prepimppostersfordisplay(ByRef passedposter As posters)
        If passedposter.pposters Is Nothing Then Exit Sub
        Dim baseposter As String = rconf.postercachefolder
        Dim counter As Integer = 0

        While counter < passedposter.pposters.Count
            currentmovie.pimpawardsposters.Add(baseposter + passedposter.pposters(counter).ToString + ".jpg")
            counter = counter + 1
        End While
    End Sub

    Private Sub getdisplayposter(ByRef passedposter As posters, Optional ByRef bwcounter As Integer = 0)
        If passedposter.pposters Is Nothing Then Exit Sub
        'passedposter.readxml(poster)
        'MsgBox(poster.pposters.Count)
        Dim baseposter As String = rconf.postercachefolder
        Dim counter As Integer = 0

        'clean up invalid posters
        'If messageprompts Then postertotal += passedposter.pposters.Count
        Dim cleanupcount As Integer = 0
        While cleanupcount < passedposter.pposters.Count
            If singleMovieBeingDisplayed Then 'flag when using bw
                bwcounter += 1
                bwDisplayMovieData.ReportProgress(bwcounter, "Cleaning Up IMP Poster" + cleanupcount.ToString)
            End If

            checkAndRemoveSmallPictureFile(baseposter + passedposter.pposters(cleanupcount).ToString + ".jpg")
            cleanupcount += 1
        End While

        While counter < passedposter.pposters.Count
            currentmovie.pimpawardsposters.Add(baseposter + passedposter.pposters(counter).ToString + ".jpg")
            If singleMovieBeingDisplayed Then 'flag when using bw
                bwcounter += 1
                bwDisplayMovieData.ReportProgress(bwcounter, "Checking IMP Poster" + counter.ToString)
            End If
            Debug.Print(passedposter.pposters(counter).ToString)
            Try
                Select Case counter
                    Case 0
                        If File.Exists(baseposter + passedposter.pposters(0).ToString + ".jpg") Then
                            pbti1.ImageLocation = baseposter + passedposter.pposters(0).ToString + ".jpg"
                            pbti1.Load()
                            pbti1.Enabled = True
                            'klblposterIMP1.Text = pbposterIMP1.Image.Width.ToString & "x" & pbposterIMP1.Image.Height.ToString & " Size: " & getFileSize(pbposterIMP1.ImageLocation)
                            'klblposterIMP1.Visible = True
                        Else
                            precacheposter(passedposter, rconf.postercachefolder)
                            If File.Exists(baseposter + passedposter.pposters(0).ToString + ".jpg") Then
                                pbti1.ImageLocation = baseposter + passedposter.pposters(0).ToString + ".jpg"
                                pbti1.Enabled = True
                                pbti1.Load()
                                'klblposterIMP1.Text = pbposterIMP1.Image.Width.ToString & "x" & pbposterIMP1.Image.Height.ToString & " Size: " & getFileSize(pbposterIMP1.ImageLocation)
                                'klblposterIMP1.Visible = True
                            Else
                                'no poster
                                pbti1.ImageLocation = Nothing 'baseposter + "noposter.jpg"
                            End If
                        End If
                        If autopilotrunning Then Exit Sub
                    Case 1
                        pbposterIMP2.ImageLocation = baseposter + passedposter.pposters(1).ToString + ".jpg"
                        pbposterIMP2.Enabled = True
                        pbposterIMP2.Load()
                        pbposterIMP2.Visible = True
                        pbposterIMP2.BringToFront()
                        klblposterIMP2.Text = pbposterIMP2.Image.Width.ToString & "x" & pbposterIMP2.Image.Height.ToString & " Size: " & getFileSize(pbposterIMP2.ImageLocation)
                        klblposterIMP2.Visible = True
                    Case 2
                        pbposterIMP3.ImageLocation = baseposter + passedposter.pposters(2).ToString + ".jpg"
                        pbposterIMP3.Enabled = True
                        pbposterIMP3.Load()
                        klblposterIMP3.Text = pbposterIMP3.Image.Width.ToString & "x" & pbposterIMP3.Image.Height.ToString & " Size: " & getFileSize(pbposterIMP3.ImageLocation)
                        klblposterIMP3.Visible = True
                    Case 3
                        pbposterIMP4.ImageLocation = baseposter + passedposter.pposters(3).ToString + ".jpg"
                        pbposterIMP4.Enabled = True
                        pbposterIMP4.Load()
                        klblposterIMP4.Text = pbposterIMP4.Image.Width.ToString & "x" & pbposterIMP4.Image.Height.ToString & " Size: " & getFileSize(pbposterIMP4.ImageLocation)
                        klblposterIMP4.Visible = True
                    Case 4
                        pbposterIMP5.ImageLocation = baseposter + passedposter.pposters(4).ToString + ".jpg"
                        pbposterIMP5.Enabled = True
                        pbposterIMP5.Load()
                        klblposterIMP5.Text = pbposterIMP5.Image.Width.ToString & "x" & pbposterIMP5.Image.Height.ToString & " Size: " & getFileSize(pbposterIMP5.ImageLocation)
                        klblposterIMP5.Visible = True
                    Case 5
                        pbposterIMP6.ImageLocation = baseposter + passedposter.pposters(5).ToString + ".jpg"
                        pbposterIMP6.Enabled = True
                        pbposterIMP6.Load()
                        klblposterIMP6.Text = pbposterIMP6.Image.Width.ToString & "x" & pbposterIMP6.Image.Height.ToString & " Size: " & getFileSize(pbposterIMP6.ImageLocation)
                        klblposterIMP6.Visible = True
                    Case 6
                        pbposterIMP7.ImageLocation = baseposter + passedposter.pposters(6).ToString + ".jpg"
                        pbposterIMP7.Enabled = True
                        pbposterIMP7.Load()
                        klblposterIMP7.Text = pbposterIMP7.Image.Width.ToString & "x" & pbposterIMP7.Image.Height.ToString & " Size: " & getFileSize(pbposterIMP7.ImageLocation)
                        klblposterIMP7.Visible = True
                    Case 7
                        pbposterIMP8.ImageLocation = baseposter + passedposter.pposters(7).ToString + ".jpg"
                        pbposterIMP8.Enabled = True
                        pbposterIMP8.Load()
                        klblposterIMP8.Text = pbposterIMP8.Image.Width.ToString & "x" & pbposterIMP8.Image.Height.ToString & " Size: " & getFileSize(pbposterIMP8.ImageLocation)
                        klblposterIMP8.Visible = True
                    Case 8
                        pbposterIMP9.ImageLocation = baseposter + passedposter.pposters(8).ToString + ".jpg"
                        pbposterIMP9.Enabled = True
                        pbposterIMP9.Load()
                        klblposterIMP9.Text = pbposterIMP9.Image.Width.ToString & "x" & pbposterIMP9.Image.Height.ToString & " Size: " & getFileSize(pbposterIMP9.ImageLocation)
                        klblposterIMP9.Visible = True
                    Case 9
                        pbposterIMP10.ImageLocation = baseposter + passedposter.pposters(9).ToString + ".jpg"
                        pbposterIMP10.Enabled = True
                        pbposterIMP10.Load()
                        klblposterIMP10.Text = pbposterIMP10.Image.Width.ToString & "x" & pbposterIMP10.Image.Height.ToString & " Size: " & getFileSize(pbposterIMP10.ImageLocation)
                        klblposterIMP10.Visible = True
                    Case 10
                        pbposterIMP11.ImageLocation = baseposter + passedposter.pposters(10).ToString + ".jpg"
                        pbposterIMP11.Enabled = True
                        pbposterIMP11.Load()
                        klblposterIMP11.Text = pbposterIMP11.Image.Width.ToString & "x" & pbposterIMP11.Image.Height.ToString & " Size: " & getFileSize(pbposterIMP11.ImageLocation)
                        klblposterIMP11.Visible = True
                    Case 11
                        pbposterIMP12.ImageLocation = baseposter + passedposter.pposters(11).ToString + ".jpg"
                        pbposterIMP12.Enabled = True
                        pbposterIMP12.Load()
                        klblposterIMP12.Text = pbposterIMP12.Image.Width.ToString & "x" & pbposterIMP12.Image.Height.ToString & " Size: " & getFileSize(pbposterIMP12.ImageLocation)
                        klblposterIMP12.Visible = True
                    Case 12
                        pbposterIMP13.ImageLocation = baseposter + passedposter.pposters(12).ToString + ".jpg"
                        pbposterIMP13.Enabled = True
                        pbposterIMP13.Load()
                        klblposterIMP13.Text = pbposterIMP13.Image.Width.ToString & "x" & pbposterIMP13.Image.Height.ToString & " Size: " & getFileSize(pbposterIMP13.ImageLocation)
                        klblposterIMP13.Visible = True
                    Case 13
                        pbposterIMP14.ImageLocation = baseposter + passedposter.pposters(13).ToString + ".jpg"
                        pbposterIMP14.Enabled = True
                        pbposterIMP14.Load()
                        klblposterIMP14.Text = pbposterIMP14.Image.Width.ToString & "x" & pbposterIMP14.Image.Height.ToString & " Size: " & getFileSize(pbposterIMP14.ImageLocation)
                        klblposterIMP14.Visible = True
                    Case 14
                        pbposterIMP15.ImageLocation = baseposter + passedposter.pposters(14).ToString + ".jpg"
                        pbposterIMP15.Enabled = True
                        pbposterIMP15.Load()
                        klblposterIMP15.Text = pbposterIMP15.Image.Width.ToString & "x" & pbposterIMP15.Image.Height.ToString & " Size: " & getFileSize(pbposterIMP15.ImageLocation)
                        klblposterIMP15.Visible = True
                    Case 15
                        pbposterIMP16.ImageLocation = baseposter + passedposter.pposters(15).ToString + ".jpg"
                        pbposterIMP16.Enabled = True
                        pbposterIMP16.Load()
                        klblposterIMP16.Text = pbposterIMP1.Image.Width.ToString & "x" & pbposterIMP16.Image.Height.ToString & " Size: " & getFileSize(pbposterIMP16.ImageLocation)
                        klblposterIMP16.Visible = True
                    Case 16
                        pbposterIMP17.ImageLocation = baseposter + passedposter.pposters(16).ToString + ".jpg"
                        pbposterIMP17.Enabled = True
                        pbposterIMP17.Load()
                        klblposterIMP17.Text = pbposterIMP17.Image.Width.ToString & "x" & pbposterIMP17.Image.Height.ToString & " Size: " & getFileSize(pbposterIMP17.ImageLocation)
                        klblposterIMP17.Visible = True
                    Case 17
                        pbposterIMP18.ImageLocation = baseposter + passedposter.pposters(17).ToString + ".jpg"
                        pbposterIMP18.Enabled = True
                        pbposterIMP18.Load()
                        klblposterIMP18.Text = pbposterIMP18.Image.Width.ToString & "x" & pbposterIMP18.Image.Height.ToString & " Size: " & getFileSize(pbposterIMP18.ImageLocation)
                        klblposterIMP18.Visible = True
                    Case 18
                        pbposterIMP19.ImageLocation = baseposter + passedposter.pposters(18).ToString + ".jpg"
                        pbposterIMP19.Enabled = True
                        pbposterIMP19.Load()
                        klblposterIMP19.Text = pbposterIMP19.Image.Width.ToString & "x" & pbposterIMP19.Image.Height.ToString & " Size: " & getFileSize(pbposterIMP19.ImageLocation)
                        klblposterIMP19.Visible = True
                    Case 19
                        pbposterIMP20.ImageLocation = baseposter + passedposter.pposters(19).ToString + ".jpg"
                        pbposterIMP20.Enabled = True
                        pbposterIMP20.Load()
                        klblposterIMP20.Text = pbposterIMP20.Image.Width.ToString & "x" & pbposterIMP20.Image.Height.ToString & " Size: " & getFileSize(pbposterIMP20.ImageLocation)
                        klblposterIMP20.Visible = True
                    Case 20
                        pbposterIMP21.ImageLocation = baseposter + passedposter.pposters(20).ToString + ".jpg"
                        pbposterIMP21.Enabled = True
                        pbposterIMP21.Load()
                        klblposterIMP21.Text = pbposterIMP21.Image.Width.ToString & "x" & pbposterIMP21.Image.Height.ToString & " Size: " & getFileSize(pbposterIMP21.ImageLocation)
                        klblposterIMP21.Visible = True
                    Case 21
                        pbposterIMP22.ImageLocation = baseposter + passedposter.pposters(21).ToString + ".jpg"
                        pbposterIMP22.Enabled = True
                        pbposterIMP22.Load()
                        klblposterIMP22.Text = pbposterIMP22.Image.Width.ToString & "x" & pbposterIMP22.Image.Height.ToString & " Size: " & getFileSize(pbposterIMP22.ImageLocation)
                        klblposterIMP22.Visible = True
                    Case 22
                        pbposterIMP23.ImageLocation = baseposter + passedposter.pposters(22).ToString + ".jpg"
                        pbposterIMP23.Enabled = True
                        pbposterIMP23.Load()
                        klblposterIMP23.Text = pbposterIMP23.Image.Width.ToString & "x" & pbposterIMP23.Image.Height.ToString & " Size: " & getFileSize(pbposterIMP23.ImageLocation)
                        klblposterIMP23.Visible = True
                    Case 23
                        pbposterIMP24.ImageLocation = baseposter + passedposter.pposters(23).ToString + ".jpg"
                        pbposterIMP24.Enabled = True
                        pbposterIMP24.Load()
                        klblposterIMP24.Text = pbposterIMP24.Image.Width.ToString & "x" & pbposterIMP24.Image.Height.ToString & " Size: " & getFileSize(pbposterIMP24.ImageLocation)
                        klblposterIMP24.Visible = True
                    Case Else
                        'do nothing
                End Select
                counter = counter + 1
            Catch ex As Exception
                Debug.Print("failed during case selection for poster")
                If File.Exists(rconf.basefolder + "debugmodeon") And counter < 24 Then MsgBox(ex.ToString)
                counter = counter + 1
            End Try
        End While

    End Sub
    Private Function getposter(ByVal pname As String) As posters
        Dim poster As New posters
        poster.pmoviename = pname '"Horton Hears a Who!"
        poster.readxml(poster, rconf.xmlfolderposters)
        'MsgBox(poster.pposters.Count)
        Dim counter As Integer = 0
        If messageprompts Then postertotal += poster.pposters.Count
        While counter < poster.pposters.Count
            Debug.Print(poster.pposters(counter).ToString)
            counter = counter + 1
        End While
        Return poster
    End Function
    Private Sub testposter()
        Dim poster As New posters
        poster.pmoviename = "Horton Hears a Who!"
        'poster.readxml(poster)
        'precacheposter(poster)
    End Sub
    Private Sub precacheposter(ByRef curposter As posters, ByRef postercachefolderlocation As String, Optional ByRef bwcounter As Integer = 0)
        Dim counter As Integer = 0 ' curposter.pposters.Count

        Try
            If pclogging Then pclog.WriteLine("IMP Posters Found: " + curposter.pposters.Count.ToString)
            If singleMovieBeingDisplayed Then 'flag when using bw
                bwcounter += 1
                bwDisplayMovieData.ReportProgress(bwcounter, "IMP Precache Check" + counter.ToString)
            End If
            While counter < curposter.pposters.Count
                If singleMovieBeingDisplayed Then 'flag when using bw
                    bwcounter += 1
                    bwDisplayMovieData.ReportProgress(bwcounter, "IMP Precache Check" + counter.ToString)
                End If
                Dim fromcache As Boolean
                Dim checklocal As String = postercachefolderlocation + curposter.pposters(counter).ToString + ".jpg" 'iconcachefolder + Convert.ToString(keyid) + "f" + Format() + "c" + catagory + "s" + style + ".jpg"
                If File.Exists(checklocal) Then
                    'checkAndRemoveSmallPictureFile(checklocal)
                    fromcache = True
                    If pclogging Then pclog.WriteLine("File already in Cache: " + checklocal)
                    If singleMovieBeingDisplayed Then 'flag when using bw
                        bwcounter += 1
                        bwDisplayMovieData.ReportProgress(bwcounter, "IMP Poster Already in Cache: " + checklocal)
                    End If
                Else
                    fromcache = False
                    If messageprompts Then curtimppostercounter += 1
                    Debug.Print(" -- NOT Cached: " + curposter.pmoviename.ToString)
                    If singleMovieBeingDisplayed Then 'flag when using bw
                        bwcounter += 1
                        bwDisplayMovieData.ReportProgress(bwcounter, "IMP Poster NOT in Cache: " + curposter.pmoviename.ToString + ": " + checklocal)
                    End If
                End If

                If Not fromcache Then
                    'If Format() = "070" Then
                    Dim url As String
                    url = "http://www.impawards.com/" + curposter.pyear.ToString + "/posters/" + curposter.pposters(counter).ToString + ".jpg"
                    If pclogging Then pclog.WriteLine("Downloading image from: " + url)
                    If singleMovieBeingDisplayed Then 'flag when using bw
                        bwcounter += 1
                        bwDisplayMovieData.ReportProgress(bwcounter, "Downloading image from: " + url)
                    End If
                    SavePhotoFromUrl2(url, checklocal, True)
                    'Else
                    '   SavePhotoFromUrl(checklocal, sname.ToString)
                    '  Debug.Print("saving " + checklocal.ToString + " for url: " + sname.ToString)
                    'End If
                End If
                counter = counter + 1
                If autopilotrunning And counter = 1 Then Exit Sub
            End While
        Catch ex As Exception
            If pclogging Then pclog.WriteLine("NON FATAL EXCEPTION, If there is no data, this excpetion is expected" + ex.ToString)
        End Try
    End Sub
    Private Sub parseposters(ByVal year As Integer)
        Debug.Print("parse starting")
        Dim filename As String = rconf.tempfolder + Convert.ToString(year) + "posters.txt"
        Dim data0 As String = File.ReadAllText(filename)
        'create a new poster object
        Try
            Dim RegexObj3 As New Regex("<tr width = 200 bgcolor = #\d{6}>.{0,5}<td><font size=\+1>(?<fullname>.{2,86})</font></td>.{0,7}<td width = 600>(?:(?:<a href = ""(?<lastnameinlink>.{2,86}).html"">)??<img src = ""thumbs/.{2,86}.jpg"" border = \d{1}>(?:</a>)??){1,35}?</td>.{0,2}</tr>", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline)
            Dim MatchResults As Match = RegexObj3.Match(data0)
            While MatchResults.Success
                Dim poster As New posters
                Dim aposters As New ArrayList
                'show the matched item set (this will have all the links in it)
                'Debug.Print(MatchResults.ToString)
                Debug.Print(MatchResults.Groups("fullname").Value)
                poster.pmoviename = cleanname(MatchResults.Groups("fullname").Value.ToString)
                poster.pyear = year
                Dim curMatch As String = MatchResults.ToString
                Dim linknames As String = ""
                Try
                    Dim RegexObj As New Regex("<a href = ""(?<nameinlink>.{2,72}).html"">", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline)
                    Dim CurMatchResults As Match = RegexObj.Match(MatchResults.ToString)
                    Dim curcounter As Integer = 0
                    While CurMatchResults.Success
                        'this is the list of links that is generated
                        'Debug.Print(curcounter.ToString)
                        Debug.Print(CurMatchResults.Groups("nameinlink").Value.ToString)
                        Dim curlink As String = CurMatchResults.Groups("nameinlink").Value
                        aposters.Add(curlink)
                        curcounter = curcounter + 1
                        CurMatchResults = CurMatchResults.NextMatch()
                    End While
                    'inject imdb info
                    Dim curmovie As New movie
                    curmovie.setmoviename(poster.pmoviename)
                    curmovie.setyear(poster.pyear)
                    Dim namestr As String = aposters(0).ToString
                    curmovie.ppostername = namestr
                    grabimdbfromimpawards(curmovie, curmovie.getyear)
                    poster.pimdbid = curmovie.getimdbid
                    'set posters from the array and write the poster xml file
                    poster.pposters = aposters
                    poster.writeXML(poster, rconf.xmlfolderposters)
                    poster.writeXML(poster, rconf.xmlfolderposters, True)
                Catch ex As ArgumentException
                    'Syntax error in the regular expression
                End Try
                'Debug.Print(linknames)
                ' ''Dim i As Integer
                ' ''For i = 1 To MatchResults.Groups.Count
                ' ''    Debug.Print(i.ToString)
                ' ''    Dim GroupObj As Group = MatchResults.Groups("fullname")
                ' ''    If GroupObj.Success Then
                ' ''        'Debug.Print(GroupObj.Value)
                ' ''        Debug.Print(GroupObj.ToString)
                ' ''        Debug.Print(" ---- start ")
                ' ''        'Debug.Print(MatchResults.Groups("fullname").Value)
                ' ''        'Debug.Print(MatchResults.Groups("lastnameinlink").Value)
                ' ''        'Debug.Print(" end ------ ")
                ' ''        'retid3 = RegexObj3.Match(Me.tp3rtbimdbdata.Text).Groups("imdbid3").Value
                ' ''        'Debug.Print(GroupObj.
                ' ''    End If
                ' ''Next
                MatchResults = MatchResults.NextMatch()
            End While
        Catch ex As ArgumentException
            'Syntax error in the regular expression
        End Try


    End Sub
    Private Sub parseposters(ByRef year As Integer, ByRef automode As Boolean)
        Debug.Print("parse starting")
        Dim filename As String = rconf.tempfolder + Convert.ToString(year) + "\" + "standard.html"
        If Not File.Exists(filename) Then
            MsgBox("No file available for " + year.ToString + ".")
            Exit Sub
        End If

        'show something to user in gui
        'Me.lblPbar.Visible = True
        'Me.Refresh()
        'pbTick.Start()

        'pbar1.Value = pbar1.Maximum
        'lblPbar.Visible = True
        'lblPbar.Text = " ____---- WORKING ----____ "
        'Me.Refresh()

        Dim data0 As String = File.ReadAllText(filename)
        'create a new poster object
        Try
            Dim RegexObj3 As New Regex("<tr width = 200 bgcolor = #\d{6}>.{0,5}<td><font size=\+1>(?<fullname>.{2,86})</font></td>.{0,7}<td width = 600>(?:(?:<a href = ""(?<lastnameinlink>.{2,86}).html"">)??<img src = ""thumbs/.{2,86}.jpg"" border = \d{1}>(?:</a>)??){1,35}?</td>.{0,2}</tr>", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline)
            Dim MatchResults As Match = RegexObj3.Match(data0)
            While MatchResults.Success
                Dim poster As New posters
                Dim aposters As New ArrayList
                Debug.Print(MatchResults.Groups("fullname").Value)
                poster.pmoviename = cleanname(MatchResults.Groups("fullname").Value.ToString)
                poster.pyear = year
                Dim curMatch As String = MatchResults.ToString
                Dim linknames As String = ""
                Try
                    Dim RegexObj As New Regex("<a href = ""(?<nameinlink>.{2,72}).html"">", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline)
                    Dim CurMatchResults As Match = RegexObj.Match(MatchResults.ToString)
                    Dim curcounter As Integer = 0
                    While CurMatchResults.Success
                        Debug.Print(CurMatchResults.Groups("nameinlink").Value.ToString)
                        Dim curlink As String = CurMatchResults.Groups("nameinlink").Value
                        aposters.Add(curlink)
                        curcounter = curcounter + 1
                        CurMatchResults = CurMatchResults.NextMatch()
                    End While
                    'inject imdb info
                    Dim curmovie As New movie
                    curmovie.setmoviename(poster.pmoviename)
                    curmovie.setyear(poster.pyear)
                    Dim namestr As String = aposters(0).ToString
                    curmovie.ppostername = namestr
                    grabimdbfromimpawards(curmovie, curmovie.getyear)
                    poster.pimdbid = curmovie.getimdbid
                    'set posters from the array and write the poster xml file
                    poster.pposters = aposters
                    lblPbar.Text = "Updating: " + poster.pmoviename
                    Me.Refresh()
                    poster.writeXML(poster, rconf.xmlfolderposters)
                Catch ex As ArgumentException
                    'Syntax error in the regular expression
                End Try
                MatchResults = MatchResults.NextMatch()
            End While
        Catch ex As ArgumentException
            'Syntax error in the regular expression
            File.Delete(filename)
            'Me.pbar1.Visible = False
            'Me.Refresh()
            pbTick.Stop()
        End Try
        File.Delete(filename)
        Me.lblPbar.Visible = False
        Me.Refresh()
        'pbTick.Stop()
    End Sub
    Private Sub btntester_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btntester.Click
        Dim cou As Integer = 1970
        While cou < 2009
            parseposters(cou)
            cou = cou + 1
        End While
    End Sub

    Private Sub Button3_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button3.Click
        testposter()
    End Sub
    Private Sub btnaddyourown_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnaddyourownicon.Click
        If rconf.popgoogleimagesearch Then System.Diagnostics.Process.Start("http://images.google.com/images?&q=" + currentmovie.pmoviename)
        addyourownimageforicon()
    End Sub
    Private Sub addyourownimageformusicalbumart()
        If currentalbum Is Nothing Then Exit Sub
        If currentalbum.albumname = "" Then
            MsgBox("You must pick an Album first")
            Exit Sub
        End If
        With opfd2
            If Not Directory.Exists(rconf.customimagesicons + "music\albumart\") Then Directory.CreateDirectory(rconf.customimagesicons + "music\albumart\")
            Dim workingdir As String = rconf.customimagesicons + "music\albumart\"
            .InitialDirectory = workingdir
            '...
            If .ShowDialog = Windows.Forms.DialogResult.Cancel Then
                'MessageBox.Show("Canceling")
                Exit Sub

            Else
                Dim fileselectedforposter As String
                fileselectedforposter = opfd2.FileName
                If opfd2.FileName = "" Or opfd2.FileName = "Select your custom image or enter URL" Then Exit Sub
                If Not File.Exists(opfd2.FileName) Then Exit Sub

                'release all current image picture boxes and hide them all
                pbCurAlbumArt.Image = Nothing
                pbCurAlbumArt.ImageLocation = Nothing
                pbCurAlbumArt.Visible = False

                'copy the files to the custom images folder and the movie folder
                'if the custom image is coming from the custom images folder, do not try to copy it there
                'if the custom image already exsists in that folder, delete it first
                Try
                    If Not opfd2.FileName.ToLower = workingdir + cleanname(currentartist.artistname + "-" + currentalbum.albumname + ".jpg") Then
                        If File.Exists(workingdir + cleanname(currentartist.artistname + "-" + currentalbum.albumname + ".jpg")) Then
                            Try
                                File.SetAttributes(workingdir + cleanname(currentartist.artistname + "-" + currentalbum.albumname + ".jpg"), FileAttributes.Normal)
                            Catch exa As Exception
                                Debug.Print("unable to remove read only flag in prep for file deletion")
                            End Try
                            File.Delete(workingdir + cleanname(currentartist.artistname + "-" + currentalbum.albumname + ".jpg"))
                        End If
                        File.Copy(opfd2.FileName, workingdir + cleanname(currentartist.artistname + "-" + currentalbum.albumname + ".jpg"), overwrite:=True)
                        Try
                            File.SetAttributes(workingdir + cleanname(currentartist.artistname + "-" + currentalbum.albumname + ".jpg"), FileAttributes.Normal)
                        Catch exb As Exception
                            Debug.Print("unable to set new attributes")
                        End Try
                    End If
                Catch ex As Exception
                    MsgBox("Unable to copy the file from the custom folder, is it already open in another application or READ ONLY?" + vbNewLine + rconf.customimagesicons + currentmovie.pmoviename + ".jpg" + vbNewLine + vbNewLine + ex.ToString)
                    Exit Sub
                End Try

                'try to set it to folder.jpg 
                Try
                    If File.Exists(addfiletofolder(currentalbum.path, "folder.jpg")) Then
                        Try
                            File.SetAttributes(addfiletofolder(currentalbum.path, "folder.jpg"), FileAttributes.Normal)
                        Catch ex1a As Exception
                            Debug.Print("unable to set file attributes in prep for file deletion")
                        End Try
                        File.Delete(addfiletofolder(currentalbum.path, "folder.jpg"))
                    End If

                Catch ex1 As Exception
                    ' MsgBox("Unable to copy the file, is it READ ONLY? file was folder.jpg in " + currentmovie.getmoviepath + vbNewLine + ex1.ToString)
                    Exit Sub
                End Try
                'copy to folder.jpg
                If rconf.pcbCreateFolderjpg Then
                    File.Copy(opfd2.FileName, addfiletofolder(currentalbum.path, "folder.jpg"), overwrite:=True)
                    Try
                        File.SetAttributes(addfiletofolder(currentalbum.path, "folder.jpg"), FileAttributes.Normal)
                    Catch ex2b As Exception
                        Debug.Print("unable to set new file attributes")
                    End Try
                End If
            End If
        End With
        'load it into gui
        Try
            pbCurAlbumArt.ImageLocation = addfiletofolder(currentalbum.path, "folder.jpg")
            pbCurAlbumArt.Load()
            pbCurAlbumArt.Visible = True
            kgArtistArtImage.Visible = True
            Me.Refresh()
        Catch ex As Exception
            Debug.Print(ex.ToString)
        End Try
        'if automatic add to album is enabled, run that
        If rconf.ptso_auto_addtoablumonnewart Then injectIntoCurAlbum()

    End Sub

    Private Function stripnonchardigitfromstring(ByVal thestring As String) As String
        If thestring Is Nothing Then
            Return ""
        End If
        If thestring = "" Then
            Return ""
        End If

        

        Dim retstr As String = ""
        For Each curchar As Char In thestring
            If Char.IsLetterOrDigit(curchar) Then
                retstr += curchar
            End If
        Next
        retstr = retstr.ToLower
        Return retstr
    End Function
    Private Sub addyourownimageformusicfanart()
        If currentartist Is Nothing Then Exit Sub
        If currentartist.artistname = "" Then
            MsgBox("You must pick an Artist first")
            Exit Sub
        End If

        'If Not Directory.Exists(rconf.customimagesicons + "music\fanart\") Then Directory.CreateDirectory(rconf.customimagesicons + "music\fanart\")
        Dim workingdir As String = rconf.customimagesfolder + "music\fanart\"

        Dim fanartjpgstring As String = ""
        fanartjpgstring = addfiletofolder(currentartist.path, "fanart.jpg")

        Dim customfanartjpgstring As String = ""
        customfanartjpgstring = workingdir + cleanname(currentartist.artistname + ".jpg")

        With opfd2
           
            .InitialDirectory = workingdir
            '...
            If .ShowDialog = Windows.Forms.DialogResult.Cancel Then
                'MessageBox.Show("Canceling")
                Exit Sub

            Else
                Dim fileselectedforfanart As String
                fileselectedforfanart = opfd2.FileName
                If opfd2.FileName = "" Or opfd2.FileName = "Select your custom image or enter URL" Then Exit Sub
                If Not File.Exists(opfd2.FileName) Then Exit Sub

                'release all current image picture boxes and hide them all
                pbMusicCurFanart.Image = Nothing
                pbMusicCurFanart.ImageLocation = Nothing
                pbMusicCurFanart.Visible = False

                'copy the files to the custom images folder and the movie folder
                'if the custom image is coming from the custom images folder, do not try to copy it there
                'if the custom image already exsists in that folder, delete it first
                Try
                    If Not opfd2.FileName.ToLower = customfanartjpgstring.ToLower Then
                        If File.Exists(customfanartjpgstring) Then
                            Try
                                File.SetAttributes(customfanartjpgstring, FileAttributes.Normal)
                            Catch exa As Exception
                                Debug.Print("unable to remove read only flag in prep for file deletion")
                            End Try
                            File.Delete(customfanartjpgstring)
                        End If
                        File.Copy(opfd2.FileName, customfanartjpgstring, overwrite:=True)
                        Try
                            File.SetAttributes(customfanartjpgstring, FileAttributes.Normal)
                        Catch exb As Exception
                            Debug.Print("unable to set new attributes")
                        End Try
                    End If
                Catch ex As Exception
                    MsgBox("Unable to copy the file from the custom folder, is it already open in another application or READ ONLY?" + vbNewLine + rconf.customimagesicons + currentmovie.pmoviename + ".jpg" + vbNewLine + vbNewLine + ex.ToString)
                    Exit Sub
                End Try

                'try to set it to fanart.jpg

                Try
                    If File.Exists(fanartjpgstring) Then
                        Try
                            File.SetAttributes(fanartjpgstring, FileAttributes.Normal)
                        Catch ex1a As Exception
                            Debug.Print("unable to set file attributes in prep for file deletion")
                        End Try
                        File.Delete(fanartjpgstring)
                    End If

                Catch ex1 As Exception
                    ' MsgBox("Unable to copy the file, is it READ ONLY? file was folder.jpg in " + currentmovie.getmoviepath + vbNewLine + ex1.ToString)
                    Exit Sub
                End Try
                'copy to folder.jpg
                If rconf.pcbCreateFolderjpg Then
                    File.Copy(opfd2.FileName, fanartjpgstring, overwrite:=True)
                    Try
                        File.SetAttributes(fanartjpgstring, FileAttributes.Normal)
                    Catch ex2b As Exception
                        Debug.Print("unable to set new file attributes")
                    End Try
                End If
            End If
        End With
        'load it into gui
        Try
            pbMusicCurFanart.ImageLocation = addfiletofolder(currentartist.path, "fanart.jpg")
            pbMusicCurFanart.Load()
            pbMusicCurFanart.Visible = True
        Catch ex As Exception
            Debug.Print(ex.ToString)
        End Try

    End Sub
    Private Sub addyourownimageforicon()
        If currentmovie.pimdbnumber = "" Then
            MsgBox("You must pick a movie first")
            Exit Sub
        End If
        With opfd2
            .InitialDirectory = rconf.customimagesicons
            '...
            If .ShowDialog = Windows.Forms.DialogResult.Cancel Then
                'MessageBox.Show("Canceling")
            Else
                Dim fileselectedforposter As String
                fileselectedforposter = opfd2.FileName
                If opfd2.FileName = "" Or opfd2.FileName = "Select your custom image or enter URL" Then Exit Sub
                If Not File.Exists(opfd2.FileName) Then Exit Sub

                'release all current image picture boxes and hide them all
                pbCustomImageTemp.Image = Nothing
                pbCustomImageTemp.ImageLocation = Nothing
                pbCurIconUsed.Image = Nothing
                pbCurIconUsed2.Image = Nothing
                pbCurrentIconUsedNT.Image = Nothing
                pbCurIconUsed.ImageLocation = Nothing
                pbCurIconUsed2.ImageLocation = Nothing
                pbCurrentIconUsedNT.ImageLocation = Nothing
                pbCurIconUsed.Visible = False
                pbCurIconUsed2.Visible = False
                pbCurrentIconUsedNT.Visible = False

                'copy the files to the custom images folder and the movie folder
                'if the custom image is coming from the custom images folder, do not try to copy it there
                'if the custom image already exsists in that folder, delete it first
                Try
                    If Not opfd2.FileName.ToLower = (rconf.customimagesicons + currentmovie.pmoviename + ".jpg").ToLower Then
                        If File.Exists(rconf.customimagesicons + currentmovie.pmoviename + ".jpg") Then
                            Try
                                File.SetAttributes(rconf.customimagesicons + currentmovie.pmoviename + ".jpg", FileAttributes.Normal)
                            Catch exa As Exception
                                Debug.Print("unable to remove read only flag in prep for file deletion")
                            End Try
                            File.Delete(rconf.customimagesicons + currentmovie.pmoviename + ".jpg")
                        End If
                        File.Copy(opfd2.FileName, rconf.customimagesicons + currentmovie.pmoviename + ".jpg", overwrite:=True)
                        Try
                            File.SetAttributes(rconf.customimagesicons + currentmovie.pmoviename + ".jpg", FileAttributes.Normal)
                        Catch exb As Exception
                            Debug.Print("unable to set new attributes")
                        End Try
                    End If
                Catch ex As Exception
                    MsgBox("Unable to copy the file from the custom folder, is it already open in another application or READ ONLY?" + vbNewLine + rconf.customimagesicons + currentmovie.pmoviename + ".jpg" + vbNewLine + vbNewLine + ex.ToString)
                    Exit Sub
                End Try

                'try to set it to folder.jpg then moviename.tbn
                Try
                    If File.Exists(addfiletofolder(currentmovie.getmoviepath, "folder.jpg")) Then
                        Try
                            File.SetAttributes(addfiletofolder(currentmovie.getmoviepath, "folder.jpg"), FileAttributes.Normal)
                        Catch ex1a As Exception
                            Debug.Print("unable to set file attributes in prep for file deletion")
                        End Try
                        File.Delete(addfiletofolder(currentmovie.getmoviepath, "folder.jpg"))
                    End If
                    If File.Exists(addfiletofolder(currentmovie.getmoviepath, "movie.tbn")) Then
                        Try
                            File.SetAttributes(addfiletofolder(currentmovie.getmoviepath, "movie.tbn"), FileAttributes.Normal)
                        Catch ex1a As Exception
                            Debug.Print("unable to set file attributes in prep for file deletion")
                        End Try
                        File.Delete(addfiletofolder(currentmovie.getmoviepath, "movie.tbn"))
                    End If
                    If File.Exists(addfiletofolder(currentmovie.getmoviepath, currentmovie.pmoviename + ".tbn")) Then
                        Try
                            File.SetAttributes(addfiletofolder(currentmovie.getmoviepath, currentmovie.pmoviename + ".tbn"), FileAttributes.Normal)
                        Catch ex1a As Exception
                            Debug.Print("unable to set file attributes in prep for file deletion")
                        End Try
                        File.Delete(addfiletofolder(currentmovie.getmoviepath, currentmovie.pmoviename + ".tbn"))
                    End If
                    'File.Copy(opfd2.FileName, currentmovie.getmoviepath + "\folder.jpg", overwrite:=True)
                    'Try
                    '    File.SetAttributes(currentmovie.getmoviepath + "\folder.jpg", FileAttributes.Normal)
                    'Catch ex1b As Exception
                    '    Debug.Print("unable to set new file attributes")
                    'End Try
                Catch ex1 As Exception
                    MsgBox("Unable to copy the file, is it READ ONLY? file was folder.jpg in " + currentmovie.getmoviepath + vbNewLine + ex1.ToString)
                    Exit Sub
                End Try

                If rconf.pcbcreatemovienamedottbn Then
                    File.Copy(opfd2.FileName, addfiletofolder(currentmovie.getmoviepath, currentmovie.pmoviename + ".tbn"), overwrite:=True)
                    Try
                        File.SetAttributes(addfiletofolder(currentmovie.getmoviepath, currentmovie.pmoviename + ".tbn"), FileAttributes.Normal)
                    Catch ex2b As Exception
                        Debug.Print("unable to set new file attributes")
                    End Try
                End If

                If rconf.pcbcreatemovietbn Then
                    File.Copy(opfd2.FileName, addfiletofolder(currentmovie.getmoviepath, "movie.tbn"), overwrite:=True)
                    Try
                        File.SetAttributes(addfiletofolder(currentmovie.getmoviepath, "movie.tbn"), FileAttributes.Normal)
                    Catch ex2b As Exception
                        Debug.Print("unable to set new file attributes")
                    End Try
                End If

                If rconf.pcbCreateFolderjpg Then
                    File.Copy(opfd2.FileName, addfiletofolder(currentmovie.getmoviepath, "folder.jpg"), overwrite:=True)
                    Try
                        File.SetAttributes(addfiletofolder(currentmovie.getmoviepath, "folder.jpg"), FileAttributes.Normal)
                    Catch ex2b As Exception
                        Debug.Print("unable to set new file attributes")
                    End Try
                End If

                'this code will not work, exception due to the file being in use, can't dispose of it, so i'll reload the form
                'set the temp pb and then assign it
                'Dim tcusimage As Image = Image.FromFile(currentmovie.getmoviepath + "\folder.jpg")
                '    pbCustomImageTemp.Image = tcusimage
                '    pbCurrentIconUsedNT.Image = pbCustomImageTemp.Image
                '    TabControl2.SelectTab(2)
                'getfilelistingforgui()
                'pbCurrentIconUsedNT.Visible = True
                ' pbCurIconUsed.ImageLocation = currentmovie.getmoviepath + "\folder.jpg"
                Dim tappmode As Boolean = rbem.Checked 'get current app mode
                Dim tais As Boolean = cbAllowIconSelection.Checked 'get current icon selection mode
                rbem.Checked = False 'set to display only (it's faster)
                'cbAllowIconSelection.Checked = False 'turn off allow icon selection (it's faster)
                processdropdownitems() 'reload the movie
                rbem.Checked = tappmode 'reset app mode to previous value
                cbAllowIconSelection.Checked = tais 'reset allow icon selection to previous value
            End If
        End With
    End Sub
    Private Sub addyourownimageforfanart()
        If currentmovie.pimdbnumber = "" Then
            MsgBox("You must pick a movie first")
            Exit Sub
        End If
        With opfd2
            .InitialDirectory = rconf.customimagesfanart
            '...
            If .ShowDialog = Windows.Forms.DialogResult.Cancel Then
                'MessageBox.Show("Canceling")
            Else
                Dim fileselectedforposter As String
                fileselectedforposter = opfd2.FileName
                If opfd2.FileName = "" Or opfd2.FileName = "Select your custom image or enter URL" Then Exit Sub
                If Not File.Exists(opfd2.FileName) Then Exit Sub

                'release all current image picture boxes and hide them all
                pbCustomImageTemp.Image = Nothing
                pbCustomImageTemp.ImageLocation = Nothing
                fanartpb1.Image = Nothing
                fanartpb1.ImageLocation = Nothing

                'copy the files to the custom images folder and the movie folder
                'if the custom image is coming from the custom images folder, do not try to copy it there
                'if the custom image already exsists in that folder, delete it first
                Try
                    If Not opfd2.FileName.ToLower = (rconf.customimagesfanart + currentmovie.pmoviename + "-fanart.jpg").ToLower Then
                        If File.Exists(rconf.customimagesfanart + currentmovie.pmoviename + "-fanart.jpg") Then
                            Try
                                File.SetAttributes(rconf.customimagesfanart + currentmovie.pmoviename + "-fanart.jpg", FileAttributes.Normal)
                            Catch exa As Exception
                                Debug.Print("unable to remove old attribute")
                            End Try
                            File.Delete(rconf.customimagesfanart + currentmovie.pmoviename + "-fanart.jpg")
                        End If
                        File.Copy(opfd2.FileName, rconf.customimagesfanart + currentmovie.pmoviename + "-fanart.jpg", overwrite:=True)
                        File.SetAttributes(rconf.customimagesfanart + currentmovie.pmoviename + "-fanart.jpg", FileAttributes.Normal)
                    End If
                Catch ex As Exception
                    MsgBox("Unable to copy the file from the custom folder, is it already open in another application or READ ONLY?" + vbNewLine + rconf.customimagesicons + currentmovie.pmoviename + "-fanart.jpg" + vbNewLine + vbNewLine + ex.ToString)
                    Exit Sub
                End Try

                Dim newfile As String = opfd2.FileName
                Dim curfile As String = ""
                If cmmode = "movie" Then
                    'check settings to see what fanart image we should be saving, copy the new file 
                    If moviemode = "file" Then
                        File.Copy(newfile, currentmovie.getmoviepath + "\" + stripstackforfilemode(removeextension(currentmovie.preservedmoviename)) + "-fanart.jpg", True)
                        File.SetAttributes(currentmovie.getmoviepath + "\" + stripstackforfilemode(removeextension(currentmovie.preservedmoviename)) + "-fanart.jpg", FileAttributes.Normal)
                        curfile = currentmovie.getmoviepath + "\" + stripstackforfilemode(removeextension(currentmovie.preservedmoviename)) + "-fanart.jpg"
                    End If

                    If rconf.pcbcreatemovienamedashfanartjpg And Not moviemode = "file" Then
                        File.Copy(newfile, currentmovie.getmoviepath + "\" + currentmovie.pmoviename + "-fanart.jpg", True)
                        File.SetAttributes(currentmovie.getmoviepath + "\" + currentmovie.pmoviename + "-fanart.jpg", FileAttributes.Normal)
                        curfile = currentmovie.getmoviepath + "\" + currentmovie.pmoviename + "-fanart.jpg"
                    End If

                    If rconf.pcbcreatefanartjpg And Not moviemode = "file" Then
                        File.Copy(newfile, currentmovie.getmoviepath + "\" + "fanart.jpg", True)
                        File.SetAttributes(currentmovie.getmoviepath + "\" + "fanart.jpg", FileAttributes.Normal)
                        curfile = currentmovie.getmoviepath + "\" + "fanart.jpg"
                    End If
                End If
                fanartpb1.ImageLocation = curfile
                Try
                    fanartpb1.Load()
                Catch ex As Exception

                End Try


                'try to set it to -fanart.jpg
                'Try
                '    If File.Exists(currentmovie.getmoviepath + "\" + currentmovie.pmoviename + "-fanart.jpg") Then
                '        Try
                '            File.SetAttributes(currentmovie.getmoviepath + "\" + currentmovie.pmoviename + "-fanart.jpg", FileAttributes.Normal)
                '        Catch ex1a As Exception
                '            Debug.Print("unable to remove old attributes")
                '        End Try
                '        File.Delete(currentmovie.getmoviepath + "\" + currentmovie.pmoviename + "-fanart.jpg")
                '    End If
                '    File.Copy(opfd2.FileName, currentmovie.getmoviepath + "\" + currentmovie.pmoviename + "-fanart.jpg", overwrite:=True)
                '    File.SetAttributes(currentmovie.getmoviepath + "\" + currentmovie.pmoviename + "-fanart.jpg", FileAttributes.Normal)
                'Catch ex1 As Exception
                '    MsgBox("Unable to copy the file as " + currentmovie.pmoviename + "-fanart.jpg in " + currentmovie.getmoviepath + vbNewLine + ex1.ToString)
                'End Try
                'Dim tappmode As Boolean = rbem.Checked 'get current app mode
                'Dim tais As Boolean = cbAllowIconSelection.Checked 'get current icon selection mode
                'rbem.Checked = False 'set to display only (it's faster)
                ''cbAllowIconSelection.Checked = False 'turn off allow icon selection (it's faster)
                'processdropdownitems() 'reload the movie
                'rbem.Checked = tappmode 'reset app mode to previous value
                'cbAllowIconSelection.Checked = tais 'reset allow icon selection to previous value
                End If
        End With
    End Sub

    Private Sub tp1_Enter(ByVal sender As Object, ByVal e As System.EventArgs) Handles tp1.Enter
        'If cmmode = "movies" Then Me.tcMain.TabPages("tp1").Refresh()
    End Sub
    Private Sub tp2_Enter(ByVal sender As Object, ByVal e As System.EventArgs)
        'If cmmode = "movies" Then Me.tcMain.TabPages("tp2").Refresh()
    End Sub
    Private Sub tp3_Enter(ByVal sender As Object, ByVal e As System.EventArgs) Handles tp3.Enter
        'If cmmode = "movies" Then Me.tcMain.TabPages("tp3").Refresh()
    End Sub
    Private Sub tp4_Enter(ByVal sender As Object, ByVal e As System.EventArgs) Handles tp4.Enter
        'If cmmode = "movies" Then Me.tcMain.TabPages("tp4").Refresh()
    End Sub
    Private Sub tp5_Enter(ByVal sender As Object, ByVal e As System.EventArgs) Handles tp5.Enter
        'If cmmode = "movies" Then Me.tcMain.TabPages("tp5").Refresh()
    End Sub
    Private Sub tp6_Enter(ByVal sender As Object, ByVal e As System.EventArgs) Handles tp6.Enter
        'If cmmode = "movies" Then Me.tcMain.TabPages("tp6").Refresh()
    End Sub
    Private Sub rbem_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles rbem.CheckedChanged
        If rbem.Checked Then
            rbread.Checked = False
        Else
            rbread.Checked = True
            rconf.pworkoffline = True
        End If
        'rconf.pworkoffline = rbem.Checked
    End Sub
    Private Sub Button4_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button4.Click
        findsimilar()
    End Sub
    Private Sub lbsimnames_MouseDoubleClick(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles lbsimnames.MouseDoubleClick
        tbnewname.Text = lbsimnames.SelectedItem.ToString
    End Sub

    Private Sub Button5_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button5.Click
        getimdbids()
    End Sub
    Private Sub lblimdb_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles lblimdb.Click
        'open IMDB Filmography links and data courtesy of The Internet Movie Database.
    End Sub
    Private Sub Label4_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
    End Sub
    'Private Sub Button6_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
    '    saveconfig()
    'End Sub
    Private Sub btnOpenIMDBImporter_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnOpenIMDBImporter.Click
        '10.7.08 disabled keyword peepee 
        'parseimdb.Show()
        parseimdb.Show()

    End Sub
    Private Sub Button7_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button7.Click
        Dim cou As Integer = 1970
        While cou < 2010
            parseposters(cou)
            cou = cou + 1
        End While
    End Sub
    Private Sub fanartpb1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        savecfa(fanartpb1)
    End Sub
    Private Sub Button8_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Dim test1 As New IMDB
        Dim imdbid As String = "tt0076759"
        test1 = imdbparse(imdbid)
        test1.writeIMDBXML(test1)
    End Sub
    Function getimdbbyid(ByRef imdbid As String, ByRef usewget As Boolean, ByRef waitforeach As Boolean) As String
        Dim imdbstring As String = ""
        Dim baseurlsiid As String = "http://akas.imdb.com/title/" + imdbid + "/"
        'Dim foundimdbid, retid, retyr As String
        Dim s As String = ""

        'INCOMPLETE - set wget folderpath, set imdb xml path, launch it, wait if it's set to wait

        'openpagedata
        'Dim request As HttpWebRequest = CType(WebRequest.Create(baseurlsiid), HttpWebRequest)
        'Dim response As HttpWebResponse = CType(request.GetResponse(), System.Net.HttpWebResponse)
        'Using reader As StreamReader = New StreamReader(response.GetResponseStream())
        '    s = reader.ReadToEnd()
        'End Using
        imdbstring = Convert.ToString(s) '.ToLower
        Return imdbstring

    End Function
    Shared Function getimdbbyid(ByRef imdbid As String) As String
        Dim imdbstring As String = ""
        Dim baseurlsiid As String = "http://akas.imdb.com/title/" + imdbid '+ "/"
        'Dim foundimdbid, retid, retyr As String
        'Dim s As String
        'use wget to get data - it's faster
        Dim pathtofile As String = rconf.tempfolder + imdbid + "index.html"
        If Not File.Exists(pathtofile) Then
            wget(baseurlsiid, rconf.tempfolder, imdbid.ToString, True)
        End If
        'Dim reader As New StreamReader(tempfolder + imdbid.ToString + "index.html")
        'Dim pathtofile As String = rconf.tempfolder + imdbid + "index.html"
        Try
            imdbstring = File.ReadAllText(pathtofile)
        Catch ex As Exception
            Debug.Print(ex.ToString)
        End Try
        'reader.Close()
        'openpagedata using http get requests
        ''Dim request As HttpWebRequest = CType(WebRequest.Create(baseurlsiid), HttpWebRequest)
        ''Dim response As HttpWebResponse = CType(request.GetResponse(), System.Net.HttpWebResponse)
        ''Using reader As StreamReader = New StreamReader(response.GetResponseStream())
        ''    s = reader.ReadToEnd()
        ''End Using
        'imdbstring = Convert.ToString(s)
        Return imdbstring
    End Function
    Shared Function getimdbbyidfullcredits(ByRef imdbid As String) As String
        Dim imdbstring As String = ""
        Dim baseurlsiid As String = "http://akas.imdb.com/title/" + imdbid '+ "/"
        Dim pathtofile As String = rconf.tempfolder + imdbid + "\fullcredits"
        If Not File.Exists(pathtofile) Then
            wget(baseurlsiid, rconf.tempfolder, imdbid.ToString, True)
        End If
        Try
            imdbstring = File.ReadAllText(pathtofile)
        Catch ex As Exception
            Debug.Print(ex.ToString)
        End Try
        Return imdbstring
    End Function
    Shared Function getimdbbyidplot(ByRef imdbid As String) As String
        Dim imdbstring As String = ""
        Dim baseurlsiid As String = "http://akas.imdb.com/title/" + imdbid '+ "/"
        Dim pathtofile As String = rconf.tempfolder + imdbid + "\plotsummary"
        If Not File.Exists(pathtofile) Then
            wget(baseurlsiid, rconf.tempfolder, imdbid.ToString, True)
        End If
        Try
            imdbstring = File.ReadAllText(pathtofile)
        Catch ex As Exception
            Debug.Print(ex.ToString)
        End Try
        Return imdbstring
    End Function
    Private Shared Function clb(ByRef tString As String) As String
        'remove line break
        Dim tStringResult As String
        tStringResult = Strings.Replace(tString, Chr(13), "")
        tStringResult = Strings.Replace(tStringResult, Chr(10), "")
        'Dim tStringResult As String = Regex.Replace(tString, "(\r\n\s*?){2,}", Environment.NewLine)
        Return tStringResult
    End Function
   
    Public Shared Function imdbparse(ByRef imdbid As String) As IMDB
        'get imdbid data using imdbid
        Dim imdbtxt As String = getimdbbyid(imdbid + "/")

        'get full plot data useing imdbid
        Dim imdbplottxt As String = getimdbbyidplot(imdbid + "/plotsummary")

        Dim fullcredits As Boolean = False
        Dim imdbfctxt As String = ""
        If fullcredits Then
            'get full credits page data useing imdbid
            imdbfctxt = getimdbbyidfullcredits(imdbid + "/fullcredits")
        End If

        Dim nimdb As New IMDB
        nimdb.id = imdbid
        'Debug.Print("ID is: " + nimdb.id)

        'studio
        nimdb.studio = cleanimdbdata(clb(Regex.Match(imdbtxt, "<h.>Company:</h.>.{0,3}<a href=./company/.*?>(.*?)</a>", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline).Groups(1).Value))
        'Debug.Print("Studio is: " + nimdb.studio) '<h.>Company:</h.>.{0,3}<a href="/company/.*?>(.*?)</a>

        'title
        nimdb.title = cleanimdbdata(clb(Regex.Match(imdbtxt, "<title>([^<|^(]*)", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline).Groups(1).Value))
        'Debug.Print("Title is: " + nimdb.title)

        'original title
        nimdb.originaltitle = cleanimdbdata(clb(Regex.Match(imdbtxt, "<h5>Also Known As:</h5>([^<|^(]*)", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline).Groups(1).Value))
        'Debug.Print("Original Title (AKA) is: " + nimdb.originaltitle)

        'rating 
        nimdb.rating = clb(Regex.Match(imdbtxt, "<b>([0-9.]+)/10</b>[^<]*<a href=""ratings"" class=""tn15more"">([0-9,]+) votes</a>", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline).Groups(1).Value)
        'Debug.Print("Rating is: " + nimdb.rating)

        'year
        nimdb.year = clb(Regex.Match(imdbtxt, "<a href=""/Sections/Years/([0-9]*)", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline).Groups(1).Value)
        'Debug.Print("Year is: " + nimdb.year)

        'top 250
        nimdb.top250 = clb(Regex.Match(imdbtxt, "Top 250: #([0-9]*)</a>", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline).Groups(1).Value)
        'Debug.Print("Top 250 is: " + nimdb.top250)

        'votes
        nimdb.votes = clb(Regex.Match(imdbtxt, "<b>([0-9.]+)/10</b>[^<]*<a href=""ratings"" class=""tn15more"">([0-9,]+) votes</a>", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline).Groups(2).Value)
        'Debug.Print("Votes is: " + nimdb.votes)

        'outline
        nimdb.outline = cleanimdbdata(clb(Regex.Match(imdbtxt, "Plot:</h5>(.*?)<a class=""tn15more", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline).Groups(1).Value))
        'cleanup junk 
        Debug.Print("Outline is: " + nimdb.outline)

        'plot 
        nimdb.plot = cleanimdbdata(clb(Regex.Match(imdbplottxt, "<p class=.plotpar.>(.*?)<i>", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline).Groups(1).Value))
        'Debug.Print("Plot is: " + nimdb.plot)

        'tagline
        nimdb.tagline = cleanimdbdata(clb(Regex.Match(imdbtxt, "<h5>Tagline:</h5>([^<]*)", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline).Groups(1).Value))
        'Debug.Print("Tagline is: " + nimdb.tagline)

        'runtime
        nimdb.runtime = clb(Regex.Match(imdbtxt, "<h5>Runtime:</h5>[^0-9]*([^<]*)", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline).Groups(1).Value)
        'Debug.Print("Runtime is: " + nimdb.runtime)

        'thumb
        'nimdb.thumb = ""
        'Debug.Print("Thumb is: " + nimdb.thumb)

        'mpaa
        nimdb.mpaa = cleanimdbdata(clb(Regex.Match(imdbtxt, "MPAA</a>:</h5>(.[^<]*)", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline).Groups(1).Value))
        'Debug.Print("MPAA is: " + nimdb.mpaa)

        'Certification()
        Dim RegexObjR As New Regex("<a href=""/List\?certificates=[^""]*"">([^<]*):([^<]*)</a>[^<]*(<i>([^<]*)</i>)?", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline)
        Dim MatchResultsR As Match = RegexObjR.Match(imdbtxt)
        While MatchResultsR.Success
            'US only option, remove if statment to list all
            If MatchResultsR.Groups(1).Value.ToLower.Contains(rconf.pcbMoviesCertificationLang.ToLower) Then
                nimdb.certification += MatchResultsR.Groups(1).Value & ":" & MatchResultsR.Groups(2).Value & " / "
                MatchResultsR = MatchResultsR.NextMatch()
            Else
                MatchResultsR = MatchResultsR.NextMatch()
            End If

        End While
        If Not nimdb.certification Is Nothing Then
            If Strings.Right(nimdb.certification, 3) = " / " Then
                nimdb.certification = Strings.Left(nimdb.certification, nimdb.certification.Length - 3)
            End If
            nimdb.certification = cleanimdbdata(clb(nimdb.certification))
        Else
            nimdb.certification = ""
        End If


        'playcount
        nimdb.playcount = ""
        'Debug.Print("Playcount is: " + nimdb.playcount)

        'watched
        nimdb.watched = ""
        'Debug.Print("Watched is: " + nimdb.watched)

        'filenameandpath
        nimdb.filenameandpath = ""
        'Debug.Print("Filenameandpath is: " + nimdb.filenameandpath)

        'trailer
        nimdb.trailer = ""
        'Debug.Print("Trailer is: " + nimdb.trailer)

        'genre
        Try
            Dim RegexObjG As New Regex("/Sections/Genres/[^/]*/"">([^<]*)</a>", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline)
            Dim MatchResultsG As Match = RegexObjG.Match(imdbtxt)
            While MatchResultsG.Success
                'Debug.Print("DEBUG: " + MatchResultsG.Groups("gn").Value.ToString)
                nimdb.genre += cleanimdbdata(MatchResultsG.Groups(1).Value) + " / "
                MatchResultsG = MatchResultsG.NextMatch()
            End While
        Catch ex As ArgumentException
            'Syntax error in the regular expression
        End Try
        If nimdb.genre = Nothing Then
            nimdb.genre = "None / "
        End If
        If nimdb.genre.Length > 4 Then
            nimdb.genre = Strings.Left(nimdb.genre, nimdb.genre.Length - 3)
        End If
        nimdb.genre = nimdb.genre
        ' Debug.Print("Genre is: " + nimdb.genre)
        nimdb.genre = clb(nimdb.genre)

        Dim writersTxt As String = ""
        'short credits
        Try
            Dim robjWriters As New Regex("Writer.*?:</h5>(.*?)</div>", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline)
            writersTxt = robjWriters.Match(imdbtxt).Value
        Catch ex As ArgumentException
            'Syntax error in the regular expression
        End Try
        If Not writersTxt = "" Then
            Try
                Dim robjWritersDetails As New Regex("<a href=""/name/[^>]*>([^<]*)<")
                Dim MatchResultsName As Match = robjWritersDetails.Match(writersTxt)
                While MatchResultsName.Success
                    Dim curwriter As String = ""
                    curwriter += cleanimdbdata(MatchResultsName.Groups(1).Value.ToString)
                    If Not curwriter = "" Then nimdb.credits += (curwriter & " / ")
                    MatchResultsName = MatchResultsName.NextMatch()
                End While
            Catch ex As ArgumentException
                'Syntax error in the regular expression
            End Try
        End If
        If Not nimdb.credits Is Nothing Then
            Try
                If Not nimdb.credits = "" Then
                    If Strings.Right(nimdb.credits, 3) = " / " Then
                        nimdb.credits = Strings.Left(nimdb.credits, nimdb.credits.Length - 3)
                    End If
                End If
            Catch ex As Exception

            End Try

        End If
        'full credits

        If fullcredits Then
            writersTxt = ""
            Try
                Dim robjWriters As New Regex("Full cast and crew for.*<table class=""cast"">", RegexOptions.Singleline)
                writersTxt = robjWriters.Match(imdbfctxt).Value
            Catch ex As ArgumentException
                'Syntax error in the regular expression
            End Try
            If Not writersTxt = "" Then
                Try
                    Dim robjWritersDetails As New Regex("a href=""/name/nm\d{6,8}/"">(.*?)</a>.*?valign=""top"">(.*?)</td>.*?</tr>", RegexOptions.Singleline)
                    Dim MatchResultsName As Match = robjWritersDetails.Match(writersTxt)
                    While MatchResultsName.Success
                        Dim curwriter As String = ""
                        curwriter += cleanimdbdata(MatchResultsName.Groups(1).Value.ToString)
                        Dim curwriterDidWhat As String = ""
                        curwriterDidWhat = cleanimdbdata(MatchResultsName.Groups(2).Value.ToString)
                        curwriterDidWhat = curwriterDidWhat.Replace("&nbsp;", "")
                        curwriterDidWhat = curwriterDidWhat.Replace("<br>", "")
                        curwriterDidWhat = curwriterDidWhat.Replace("&amp;", "&")
                        If Not curwriterDidWhat = "" Then curwriter += " " & curwriterDidWhat
                        If Not curwriter = "" Then nimdb.credits += (curwriter & " / ")
                        'Dim i As Integer
                        'For i = 1 To MatchResultsName.Groups.Count
                        '    Dim GroupObjName As Group = MatchResultsName.Groups(i)
                        '    If GroupObjName.Success Then

                        '    End If
                        'Next
                        MatchResultsName = MatchResultsName.NextMatch()
                    End While
                Catch ex As ArgumentException
                    'Syntax error in the regular expression
                End Try
            End If
            If Not nimdb.credits Is Nothing Then
                Try
                    If Not nimdb.credits = "" Then
                        If Strings.Right(nimdb.credits, 3) = " / " Then
                            nimdb.credits = Strings.Left(nimdb.credits, nimdb.credits.Length - 3)
                        End If
                    End If
                Catch ex As Exception

                End Try

            End If
        End If
        'Debug.Print("Credits is: " + nimdb.credits)

        'director
        'get initial text for parse or it will grab other names that are not directors
        Dim tempdirector As String = Regex.Match(imdbtxt, "<h5>Direct.*?</h5>(.*?)</div>", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline).Groups(1).Value
        Try
            Dim RegexObjD As New Regex("<a href=""/name/nm.*?/"">(.*?)</a>", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline)
            Dim MatchResultsD As Match = RegexObjD.Match(tempdirector)
            While MatchResultsD.Success
                nimdb.director += cleanimdbdata(MatchResultsD.Groups(1).Value) + " / "
                MatchResultsD = MatchResultsD.NextMatch()
            End While
        Catch ex As ArgumentException
            'Syntax error in the regular expression
        End Try
        If nimdb.director = Nothing Then
            nimdb.director = "N/A / "
        End If
        If nimdb.director.Length > 4 Then
            nimdb.director = Strings.Left(nimdb.director, nimdb.director.Length - 3)
        End If

        ' Debug.Print("Director is: " + nimdb.director)
        nimdb.director = clb(nimdb.director)

        'actor
        Dim tempactor As String = Regex.Match(imdbtxt, "<table class=""cast"">(.*?)</table>", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline).Groups(1).Value
        'Dim secondsearch As String = "<actor><thumb>\1_SX"
        Try
            ' Debug.Print("actor parse starting")
            Dim RegexObjA As New Regex("<img src=""(http://.{2,30}imdb.com/images/.{10,100}.(?:jpg)??(?:gif)??)"" width=""\d{1,3}"" height=""\d{1,3}"" border="".{1,3}"">(?:</a><br>)??</td><td class=""nm""><a href=""/name/nm\d{6,7}/"">(.{2,75})</a></td><td class="".{1,5}"">.{0,7}</td><td class=""char""><a href=""/character/ch\d{6,7}/"">(.{2,75})</a>", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline)
            'Dim RegexObjA As New Regex("<img src=""(.*?)"" width.*?<a href=""/name/nm.*?/"">(.*?)</a>.*?<a href=""/character/.*?"">(.*?)</a>", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline)
            ' Debug.Print("actor regex object started")
            Dim MatchResultsA As Match = RegexObjA.Match(tempactor)
            'Debug.Print("match results defined")
            While MatchResultsA.Success
                ' Debug.Print("match results hit for actor, parse to field data")
                Dim tActor As New movieinfoplus.mip.mov.Actor
                tActor.Thumb = cleanimdbdata(MatchResultsA.Groups(1).Value)
                ' Debug.Print(tActor.thumb)
                tActor.Name = cleanimdbdata(MatchResultsA.Groups(2).Value)
                ' Debug.Print(tActor.name)
                tActor.Role = cleanimdbdata(MatchResultsA.Groups(3).Value)
                ' Debug.Print(tActor.role)
                For Each dudet In nimdb.Actors
                    ' Debug.Print(dudet.ToString)
                Next
                nimdb.Actors.Add(tActor)
                MatchResultsA = MatchResultsA.NextMatch()
            End While
        Catch ex As ArgumentException
            'Syntax error in the regular expression
        End Try
        tempactor = ""
        Return nimdb
    End Function
    Private Sub TabControl2_DrawItem(ByVal sender As Object, ByVal e As System.Windows.Forms.DrawItemEventArgs) Handles tcMain.DrawItem
        Dim g As Graphics = e.Graphics
        Dim rect As Rectangle = e.Bounds
        Dim rect2 As Rectangle
        rect2.X = 188
        rect2.Y = 35
        rect2.Width = 803
        rect2.Height = 630
        g.FillRectangle(Brushes.SlateGray, rect2)

        rect.Height += 10
        'e.DrawBackground = System.Drawing.Color.Black
        g.FillRectangle(Brushes.SlateGray, rect)
        g.DrawString("  Movie Information", Me.Font, Brushes.Gainsboro, Me.tcMain.GetTabRect(0).X, Me.tcMain.GetTabRect(0).Y + 3)
        g.DrawString("  Icon / Poster / Fanart Selection", Me.Font, Brushes.Gainsboro, Me.tcMain.GetTabRect(1).X, Me.tcMain.GetTabRect(1).Y + 3)
        g.DrawString("  Modify Moviename", Me.Font, Brushes.Gainsboro, Me.tcMain.GetTabRect(2).X, Me.tcMain.GetTabRect(2).Y + 3)
        g.DrawString("  Settings", Me.Font, Brushes.Gainsboro, Me.tcMain.GetTabRect(3).X, Me.tcMain.GetTabRect(3).Y + 3)
        g.DrawString("  Folders", Me.Font, Brushes.Gainsboro, Me.tcMain.GetTabRect(4).X, Me.tcMain.GetTabRect(4).Y + 3)
        'g.DrawBeziers(Pens.Black, Me.TabControl2.GetTabRect(0).X)
        'Me.TabControl2.BackColor = System.Drawing.Color.Gainsboro
        'Me.TabControl2.UseVisualStyleBackColor = True

    End Sub
    Private Sub btnUpdatePosters_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnUpdatePosters.Click
        'Dim cou As Integer = 2007
        'While cou < 2010
        '    getimpapagesource(cou)
        '    parseposters(cou, True)
        '    cou = cou + 1
        'End While
        'use background worker
        'turn off user controls
        lbMyMovies.Enabled = False
        tcMain.Enabled = False
        gbAppMode.Enabled = False
        gbDisplay.Enabled = False
        tsbMoviesLoadMovies.Enabled = False
        tsbMoviesAutoPilot.Enabled = False
        'btnAutoPilot.Visible = False
        kgMovieOrTVShow.Enabled = False
        kgMyMovieInfoPicker.Enabled = False
        btnPrev.Enabled = False
        btnNext.Enabled = False
        btnShowMovieInfo.Enabled = False
        
        prgThread.Value = 0
        prgThread.Maximum = 3000
        prgThread.Visible = True
        tsbMoviesPreCache.Enabled = False
        'btnPrecache.Visible = False
        lblPCWorking.Visible = True

        bwUpdatePosters = New System.ComponentModel.BackgroundWorker
        bwUpdatePosters.WorkerReportsProgress = True
        bwUpdatePosters.WorkerSupportsCancellation = True
        bwUpdatePosters.RunWorkerAsync()
    End Sub
    Private Sub getimpapagesource(ByRef cou As Integer)
        'wget base + cou + .html
        Dim prefix, post As String
        prefix = " http://www.impawards.com/"
        post = "/standard.html"
        Dim url As String = prefix + cou.ToString + post
        wget(url, rconf.tempfolder, cou)

    End Sub
    Private Sub wget(ByRef url As String, ByRef folder As String, ByRef cou As Integer)
        Dim binfilelocal As String = rconf.wgetfolder + "wget.exe"
        Debug.Print(binfilelocal + url + " -P " + """" + folder + """")
        Dim pro1 As System.Diagnostics.Process = New System.Diagnostics.Process()
        pro1.StartInfo.FileName = binfilelocal
        pro1.StartInfo.Arguments = url + " -P " + """" + folder + cou.ToString + """"
        pro1.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden
        pro1.Start()
        pro1.WaitForExit()
        'System.Diagnostics.Process.Start(binfilelocal, url + " -P " + """" + folder + cou.ToString + """")
        'myProcess.WaitForExit()
    End Sub
    Private Sub overlaylefttvep(ByVal whattotagLeft As String, ByVal whattotagRight As String)
        'old file attribute checks and file removal
        If curtvshowiconsetting = "" Then Exit Sub ' Then
        If Not File.Exists(curtvshowiconsetting) Then Exit Sub '
        'Try
        '    File.SetAttributes(curtvshowiconsetting, FileAttributes.Normal)
        'Catch ex As Exception
        '    Debug.Print("unable to set attribute - " + curtvshowiconsetting + ex.ToString)
        'End Try
        'File.Delete(curtvshowiconsetting)
        'End If


        'Dim selectedicon As PictureBox = pbCurIconUsed
        'figure out which icon we are modifing
        Dim cmpath As String = getparentdirectory(curtvshowiconsetting)
        'make a backup of the original file
        File.Copy(curtvshowiconsetting, curtvshowiconsetting + ".bku.jpg", True)
        File.Copy(curtvshowiconsetting, addfiletofolder(cmpath, "curImage.png"), True)


        'do the overlay
        Dim binfilelocal As String = "MagickCMD" 'addfiletofolder(rconf.ImageMagickFolder, "MagickCMD") '"composite.exe") ''rconf.wgetfolder + "wget.exe"
        Dim curfolderjpg As String = curtvshowiconsetting 'addfiletofolder(currentmovie.getmoviepath, "folder.jpg")
        'move the folder.jpg to a backupfile
        'File.Move(curfolderjpg, curfolderjpg & ".bak")

        Dim imgToOverlayLeft As String = """" + addfiletofolder(rconf.resourcefolder + "tagimages\selectedimages", whattotagLeft) + """"
        Dim imgToOverlayRight As String = """" + addfiletofolder(rconf.resourcefolder + "tagimages\selectedimages", whattotagRight) + """"
        Dim imgToPutItOn As String = """" + addfiletofolder(cmpath, "curImage.png") + """"
        Dim imgNewImageNameLocation As String = """" + addfiletofolder(cmpath, "overlayImage" + rconf.type) + """"

        'open the image and get it's size
        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(addfiletofolder(cmpath, "curImage.png"))
        Dim originalImageHeight As Integer = objImage.Height
        Dim originalImageWidth As Integer = objImage.Width
        'objImage = Nothing 'get rid of the image, we are done with it
        objImage.Dispose()

        ' Distance from the edges of the image. Default = 0.02, which is 2% of the thumbnail width
        Dim constOverlayMargin As Double = rconf.overlayMargin
        ' Height of the overlay. Default = 0.09, which is 9% of the thumbnail height
        Dim constOverlayHeight As Double = rconf.overlayHeight * 2
        If originalImageHeight > originalImageWidth Then
            constOverlayHeight = constOverlayHeight * (originalImageWidth / originalImageHeight)
        End If


        Dim geoY As Double = originalImageHeight * constOverlayHeight
        Dim margin As Double = originalImageWidth * constOverlayMargin
        Dim geoX As Double = (originalImageHeight * (1 - constOverlayHeight)) - margin
        Dim exstring As String = "composite -compose atop -geometry 1000x" & CStr(geoY) & "+" & CStr(margin) & "+" & CStr(geoX) & " " & imgToOverlayLeft & " " & imgToPutItOn & " " & imgNewImageNameLocation

        Dim pro1 As System.Diagnostics.Process = New System.Diagnostics.Process()
        pro1.StartInfo.FileName = binfilelocal
        pro1.StartInfo.Arguments = exstring
        pro1.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden
        pro1.Start()
        pro1.WaitForExit()
        Dim overlayratio As Double = originalImageWidth / originalImageHeight '.67453625632377745 '1 '1.4655172413793103
        '1.4655172413793103 448275862068966

        'Overlay the right image (move our finished first image (overlayImage.jpg) to the working image (curImage.jpg)
        File.Delete(addfiletofolder(cmpath, "curImage.png"))
        File.Move(addfiletofolder(cmpath, "overlayImage" + rconf.type), addfiletofolder(cmpath, "curImage.png"))
        Dim arrep As Double = 1.4655172413793103 'default ar of tag images
        Dim geoYr As Double = originalImageHeight * constOverlayHeight
        Dim marginr2 As Double = (originalImageWidth - (originalImageHeight * (constOverlayHeight / overlayratio))) - (originalImageWidth * constOverlayMargin) '- (originalImageWidth * constOverlayMargin)
        Dim marginr As Double = originalImageWidth - (constOverlayMargin * originalImageWidth) - (originalImageHeight * constOverlayHeight * arrep)
        'Dim asdf As Double = 
        Dim geoXr As Double = (originalImageHeight * (1 - constOverlayHeight)) - (originalImageWidth * constOverlayMargin)
        '(originalImageHeight * (1 - constOverlayHeight)) - margin
        Dim exstringr As String = "composite -compose atop -geometry " + "1000" + "x" & CStr(geoYr) & "+" & CStr(marginr) & "+" & CStr(geoXr) & " " & imgToOverlayRight & " " & imgToPutItOn & " " & imgNewImageNameLocation

        Dim pro1r As System.Diagnostics.Process = New System.Diagnostics.Process()
        pro1r.StartInfo.FileName = binfilelocal
        pro1r.StartInfo.Arguments = exstringr
        pro1r.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden
        pro1r.Start()
        pro1r.WaitForExit()

        'copy the files
        Try
            File.Copy(addfiletofolder(cmpath, "overlayImage" + rconf.type), curtvshowiconsetting, True)
            ''If savefolderjpg And Not moviemode = "file" Then Debug.Print("saved: " + addfiletofolder(cmpath, "folder.jpg"))
            'If savemovienametbn Then File.Copy(addfiletofolder(cmpath, "overlayImage" + rconf.type), addfiletofolder(cmpath, currentmovie.pmoviename) + ".tbn", True)
            ''If savemovienametbn Then Debug.Print("saved: " + addfiletofolder(cmpath, cmname) + ".tbn")
            'If savemovietbn And Not moviemode = "file" Then File.Copy(addfiletofolder(cmpath, "overlayImage" + rconf.type), addfiletofolder(cmpath, "movie.tbn"), True)
            ''If savemovietbn And Not moviemode = "file" Then Debug.Print("saved: " + addfiletofolder(cmpath, "movie.tbn"))
        Catch ex As Exception
            MessageBox.Show("Unable to save the icons, check permissions on the files in the movie folder", "Saving media icons failed", MessageBoxButtons.OK, MessageBoxIcon.Error)
            Debug.Print(ex.ToString)
            Exit Sub
        End Try

        'update the display
        pbep_episodeimage.ImageLocation = Nothing
        pbep_episodeimage.Image = Nothing
        pbep_episodeimage.ImageLocation = curtvshowiconsetting
        pbep_episodeimage.Load()
        'pbep_episodeimage.Refresh()
        'asdf()
        'If savefolderjpg And Not moviemode = "file" Then 'refresh all as start point may have shifted
        '    showfolderjpginmainwindow(cmpath, False)
        '    showtbninmainwindow(cmpath, False)
        '    tcMain.SelectTab(0)
        '    validatefoldercontents()
        '    'Exit Sub
        'End If

        'If savemovienametbn Or savemovietbn Then 'just refresh the tbn portion
        '    showtbninmainwindow(cmpath, False)
        '    tcMain.SelectTab(0)
        '    validatefoldercontents()
        '    'Exit Sub
        'End If asdf()
        'update display

        'Dim bmpImage As System.Drawing.Image
        'bmpImage = System.Drawing.Image.FromFile(curtvshowiconsetting)
        ''aspect ratio items
        'Dim imagetype As String
        'Dim taspect As Double = aspectratio(bmpImage)
        'If taspect < 0.25 Then
        '    'wide(Icon)
        '    If bmpImage.Width >= 500 Then
        '        imagetype = "widenoformat"
        '    Else
        '        imagetype = "wideicon"
        '    End If
        'ElseIf taspect >= 0.98 And taspect <= 1.02 Then
        '    imagetype = "square"
        'ElseIf (taspect > 0.8 Or taspect < 0.95) And bmpImage.Height < 500 And bmpImage.Width < 450 Then
        '    'boxed icon or maybe squared poster
        '    imagetype = "boxed"
        'Else
        '    imagetype = "poster" 'consider it a poster
        'End If
        'bmpImage.Dispose()

        'If imagetype = "wideicon" Or imagetype = "widenoformat" Then
        '    Try
        '        pbTVPoster.Image = Nothing
        '        pbTVPoster.ImageLocation = Nothing
        '        pbTVPoster.Visible = False
        '        pbTVWide.Image = Nothing
        '        pbTVWide.ImageLocation = Nothing
        '        pbTVWide.ImageLocation = curtvshowiconsetting
        '        pbTVWide.Load()
        '        pbTVWide.Visible = True
        '        Me.Refresh()
        '    Catch ex As Exception
        '        Debug.Print(ex.ToString)
        '    End Try
        'Else
        '    Try
        '        pbTVWide.Image = Nothing
        '        pbTVWide.ImageLocation = Nothing
        '        pbTVWide.Visible = False
        '        pbTVPoster.Image = Nothing
        '        pbTVPoster.ImageLocation = Nothing
        '        pbTVPoster.ImageLocation = curtvshowiconsetting
        '        pbTVPoster.Load()
        '        pbTVPoster.Visible = True
        '        Me.Refresh()
        '    Catch ex As Exception
        '        Debug.Print(ex.ToString)
        '    End Try

        'End If
        ''showfolderjpginmainwindow(cmpath, False)
        ''showtbninmainwindow(cmpath, False)
        'tcMain.SelectTab(1)
        'Me.Refresh()
        ''validatefoldercontents()
        'Exit Sub
        'remove temp items
        File.Delete(addfiletofolder(cmpath, "curImage.png"))
        File.Delete(addfiletofolder(cmpath, "overlayImage" + rconf.type))


    End Sub


    Private Sub overlaylefttv(ByVal whattotagLeft As String, ByVal whattotagRight As String)
        'old file attribute checks and file removal
        If curtvshowiconsetting = "" Then Exit Sub ' Then
        If Not File.Exists(curtvshowiconsetting) Then Exit Sub '
        'Try
        '    File.SetAttributes(curtvshowiconsetting, FileAttributes.Normal)
        'Catch ex As Exception
        '    Debug.Print("unable to set attribute - " + curtvshowiconsetting + ex.ToString)
        'End Try
        'File.Delete(curtvshowiconsetting)
        'End If


        'Dim selectedicon As PictureBox = pbCurIconUsed
        'figure out which icon we are modifing
        Dim cmpath As String = getparentdirectory(curtvshowiconsetting)
        'make a backup of the original file
        File.Copy(curtvshowiconsetting, curtvshowiconsetting + ".bku.jpg", True)
        File.Copy(curtvshowiconsetting, addfiletofolder(cmpath, "curImage.png"), True)


        'do the overlay
        Dim binfilelocal As String = addfiletofolder(rconf.ImageMagickFolder, "composite.exe") 'Dim binfilelocal As String = "MagickCMD" 'addfiletofolder(rconf.ImageMagickFolder, "MagickCMD") '"composite.exe") ''rconf.wgetfolder + "wget.exe"
        Dim curfolderjpg As String = curtvshowiconsetting 'addfiletofolder(currentmovie.getmoviepath, "folder.jpg")
        'move the folder.jpg to a backupfile
        'File.Move(curfolderjpg, curfolderjpg & ".bak")

        Dim imgToOverlayLeft As String = """" + addfiletofolder(rconf.resourcefolder + "tagimages\selectedimages", whattotagLeft) + """"
        Dim imgToOverlayRight As String = """" + addfiletofolder(rconf.resourcefolder + "tagimages\selectedimages", whattotagRight) + """"
        Dim imgToPutItOn As String = """" + addfiletofolder(cmpath, "curImage.png") + """"
        Dim imgNewImageNameLocation As String = """" + addfiletofolder(cmpath, "overlayImage" + rconf.type) + """"

        'open the image and get it's size
        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(addfiletofolder(cmpath, "curImage.png"))
        Dim originalImageHeight As Integer = objImage.Height
        Dim originalImageWidth As Integer = objImage.Width
        'objImage = Nothing 'get rid of the image, we are done with it
        objImage.Dispose()

        ' Distance from the edges of the image. Default = 0.02, which is 2% of the thumbnail width
        Dim constOverlayMargin As Double = rconf.overlayMargin
        ' Height of the overlay. Default = 0.09, which is 9% of the thumbnail height
        Dim constOverlayHeight As Double = rconf.overlayHeight

        Dim geoY As Double = originalImageHeight * constOverlayHeight
        Dim margin As Double = originalImageWidth * constOverlayMargin
        Dim geoX As Double = (originalImageHeight * (1 - constOverlayHeight)) - margin
        Dim exstring As String = " -compose atop -geometry 1000x" & CStr(geoY) & "+" & CStr(margin) & "+" & CStr(geoX) & " " & imgToOverlayLeft & " " & imgToPutItOn & " " & imgNewImageNameLocation

        Dim pro1 As System.Diagnostics.Process = New System.Diagnostics.Process()
        pro1.StartInfo.FileName = binfilelocal
        pro1.StartInfo.Arguments = exstring
        pro1.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden
        pro1.Start()
        pro1.WaitForExit()
        Dim overlayratio As Double = originalImageWidth / originalImageHeight '.67453625632377745 '1 '1.4655172413793103
        '1.4655172413793103 448275862068966

        'Overlay the right image (move our finished first image (overlayImage.jpg) to the working image (curImage.jpg)
        File.Delete(addfiletofolder(cmpath, "curImage.png"))
        File.Move(addfiletofolder(cmpath, "overlayImage" + rconf.type), addfiletofolder(cmpath, "curImage.png"))
        Dim arrep As Double = 1.4655172413793103 'default ar of tag images
        Dim geoYr As Double = originalImageHeight * constOverlayHeight
        Dim marginr2 As Double = (originalImageWidth - (originalImageHeight * (constOverlayHeight / overlayratio))) - (originalImageWidth * constOverlayMargin) '- (originalImageWidth * constOverlayMargin)
        Dim marginr As Double = originalImageWidth - (constOverlayMargin * originalImageWidth) - (originalImageHeight * constOverlayHeight * arrep)
        'Dim asdf As Double = 
        Dim geoXr As Double = (originalImageHeight * (1 - constOverlayHeight)) - (originalImageWidth * constOverlayMargin)
        '(originalImageHeight * (1 - constOverlayHeight)) - margin
        Dim exstringr As String = " -compose atop -geometry " + "1000" + "x" & CStr(geoYr) & "+" & CStr(marginr) & "+" & CStr(geoXr) & " " & imgToOverlayRight & " " & imgToPutItOn & " " & imgNewImageNameLocation

        Dim pro1r As System.Diagnostics.Process = New System.Diagnostics.Process()
        pro1r.StartInfo.FileName = binfilelocal
        pro1r.StartInfo.Arguments = exstringr
        pro1r.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden
        pro1r.Start()
        pro1r.WaitForExit()

        'copy the files
        Try
            File.Copy(addfiletofolder(cmpath, "overlayImage" + rconf.type), curtvshowiconsetting, True)
            ''If savefolderjpg And Not moviemode = "file" Then Debug.Print("saved: " + addfiletofolder(cmpath, "folder.jpg"))
            'If savemovienametbn Then File.Copy(addfiletofolder(cmpath, "overlayImage" + rconf.type), addfiletofolder(cmpath, currentmovie.pmoviename) + ".tbn", True)
            ''If savemovienametbn Then Debug.Print("saved: " + addfiletofolder(cmpath, cmname) + ".tbn")
            'If savemovietbn And Not moviemode = "file" Then File.Copy(addfiletofolder(cmpath, "overlayImage" + rconf.type), addfiletofolder(cmpath, "movie.tbn"), True)
            ''If savemovietbn And Not moviemode = "file" Then Debug.Print("saved: " + addfiletofolder(cmpath, "movie.tbn"))
        Catch ex As Exception
            MessageBox.Show("Unable to save the icons, check permissions on the files in the movie folder", "Saving media icons failed", MessageBoxButtons.OK, MessageBoxIcon.Error)
            Debug.Print(ex.ToString)
            Exit Sub
        End Try

        'update the display
        'If savefolderjpg And Not moviemode = "file" Then 'refresh all as start point may have shifted
        '    showfolderjpginmainwindow(cmpath, False)
        '    showtbninmainwindow(cmpath, False)
        '    tcMain.SelectTab(0)
        '    validatefoldercontents()
        '    'Exit Sub
        'End If

        'If savemovienametbn Or savemovietbn Then 'just refresh the tbn portion
        '    showtbninmainwindow(cmpath, False)
        '    tcMain.SelectTab(0)
        '    validatefoldercontents()
        '    'Exit Sub
        'End If asdf()
        'update display
        Dim bmpImage As System.Drawing.Image
        bmpImage = System.Drawing.Image.FromFile(curtvshowiconsetting)
        'aspect ratio items
        Dim imagetype As String
        Dim taspect As Double = aspectratio(bmpImage)
        If taspect < 0.25 Then
            'wide(Icon)
            If bmpImage.Width >= 500 Then
                imagetype = "widenoformat"
            Else
                imagetype = "wideicon"
            End If
        ElseIf taspect >= 0.98 And taspect <= 1.02 Then
            imagetype = "square"
        ElseIf (taspect > 0.8 Or taspect < 0.95) And bmpImage.Height < 500 And bmpImage.Width < 450 Then
            'boxed icon or maybe squared poster
            imagetype = "boxed"
        Else
            imagetype = "poster" 'consider it a poster
        End If
        bmpImage.Dispose()

        If imagetype = "wideicon" Or imagetype = "widenoformat" Then
            Try
                pbTVPoster.Image = Nothing
                pbTVPoster.ImageLocation = Nothing
                pbTVPoster.Visible = False
                pbTVWide.Image = Nothing
                pbTVWide.ImageLocation = Nothing
                pbTVWide.ImageLocation = curtvshowiconsetting
                pbTVWide.Load()
                pbTVWide.Visible = True
                Me.Refresh()
            Catch ex As Exception
                Debug.Print(ex.ToString)
            End Try
        Else
            Try
                pbTVWide.Image = Nothing
                pbTVWide.ImageLocation = Nothing
                pbTVWide.Visible = False
                pbTVPoster.Image = Nothing
                pbTVPoster.ImageLocation = Nothing
                pbTVPoster.ImageLocation = curtvshowiconsetting
                pbTVPoster.Load()
                pbTVPoster.Visible = True
                Me.Refresh()
            Catch ex As Exception
                Debug.Print(ex.ToString)
            End Try

        End If
        'showfolderjpginmainwindow(cmpath, False)
        'showtbninmainwindow(cmpath, False)
        tcMain.SelectTab(1)
        Me.Refresh()
        'validatefoldercontents()
        Exit Sub
        'remove temp items
        File.Delete(addfiletofolder(cmpath, "curImage.png"))
        File.Delete(addfiletofolder(cmpath, "overlayImage" + rconf.type))


    End Sub

    Private Sub overlayleft(ByVal whattotagLeft As String, ByVal whattotagRight As String)
        If cmmode = "tv" Then
            overlaylefttvep(whattotagLeft, whattotagRight)
        End If
        If currentmovie Is Nothing Then Exit Sub
        Dim selectedicon As PictureBox = pbCurIconUsed
        'figure out which icon we are modifing
        Dim cmpath As String = "" 'intentionally not single line entry
        cmpath = currentmovie.getmoviepath()
        Dim cmname As String = "" 'intentionally not single line entry
        cmname = currentmovie.pmoviename

        Dim savefolderjpg As Boolean = False
        Dim savemovienametbn As Boolean = False
        Dim savemovietbn As Boolean = False

        If rconf.pcbUseFolderJpgforTBN Or moviemode = "file" Then 'save everything as the same unless it's in file mode for movies
            If Not moviemode = "file" Then
                'useing both, so use folder.jpg
                File.Copy(addfiletofolder(cmpath, "folder.jpg"), addfiletofolder(cmpath, "curImage.png"), True)
                savefolderjpg = True
                savemovienametbn = True
                savemovietbn = rconf.pcbcreatemovietbn ' determined by config setting
            Else
                'we are in file mode, use moviename.tbn
                File.Copy(addfiletofolder(cmpath, cmname + ".tbn"), addfiletofolder(cmpath, "curImage.png"), True)
                savemovienametbn = True
            End If

        Else
            'display dialog to choose which item we are saving, tbn or folder.jpg
            saveaswhaticontype.ShowDialog()

            If saveaswhaticontype.rbsaveasboth.Checked Then
                'since both are the same, use folder.jpg (if it's there, if it's not then try the tbn file)
                If File.Exists(addfiletofolder(cmpath, "folder.jpg")) Then
                    File.Copy(addfiletofolder(cmpath, "folder.jpg"), addfiletofolder(cmpath, "curImage.png"), True)
                Else
                    File.Copy(addfiletofolder(cmpath, cmname + ".tbn"), addfiletofolder(cmpath, "curImage.png"), True)
                End If
                Debug.Print("both")
                savefolderjpg = True
                savemovienametbn = True
                savemovietbn = rconf.pcbcreatemovietbn
            ElseIf saveaswhaticontype.rbsaveasfolderjpg.Checked Then
                'just folder jpg, use folder.jpg
                If Not File.Exists(addfiletofolder(cmpath, "folder.jpg")) Then
                    MsgBox("No icon was found to apply the tag to, exiting tag option.")
                    Exit Sub
                End If
                File.Copy(addfiletofolder(cmpath, "folder.jpg"), addfiletofolder(cmpath, "curImage.png"), True)
                Debug.Print("folder.jpg")
                savefolderjpg = True
                savemovienametbn = False
                savemovietbn = False
            ElseIf saveaswhaticontype.rbsaveastbn.Checked Then
                'just tbn file, so moviename.tbn
                If Not File.Exists(addfiletofolder(cmpath, cmname + ".tbn")) Then
                    MsgBox("No icon was found to apply the tag to, exiting tag option.")
                    Exit Sub
                End If
                File.Copy(addfiletofolder(cmpath, cmname + ".tbn"), addfiletofolder(cmpath, "curImage.png"), True)
                Debug.Print("tbn")
                savefolderjpg = False
                savemovienametbn = True
                savemovietbn = rconf.pcbcreatemovietbn
            Else
                MsgBox("No type was selected, I can't save without knowing what type")
                Exit Sub
            End If
            saveaswhaticontype.Dispose()
        End If


        'remove old icons
        If savefolderjpg And Not moviemode = "file" Then
            If File.Exists(cmpath + "\folder.jpg") Then
                Try
                    File.SetAttributes(cmpath + "\folder.jpg", FileAttributes.Normal)
                Catch ex As Exception
                    Debug.Print("unable to set attribute - folder.jpg" + ex.ToString)
                End Try
                File.Delete(cmpath + "\folder.jpg")
            End If
        End If

        If savemovienametbn Then
            If File.Exists(cmpath + "\" + cmname + ".tbn") Then
                Try
                    File.SetAttributes(cmpath + "\" + cmname + ".tbn", FileAttributes.Normal)
                Catch ex As Exception
                    Debug.Print("unable to set attribute - <moviename>.tbn" + ex.ToString)
                End Try
                File.Delete(cmpath + "\" + cmname + ".tbn")
            End If
        End If

        If savemovietbn And Not moviemode = "file" Then
            If File.Exists(cmpath + "\movie.tbn") Then
                Try
                    File.SetAttributes(cmpath + "\movie.tbn", FileAttributes.Normal)
                Catch ex As Exception
                    Debug.Print("unable to set attribute - movie.tbn" + ex.ToString)
                End Try
                File.Delete(cmpath + "\movie.tbn")
            End If
        End If

        'do the overlay
        Dim binfilelocal As String = addfiletofolder(rconf.ImageMagickFolder, "composite.exe") 'Dim binfilelocal As String = "MagickCMD" 'addfiletofolder(rconf.ImageMagickFolder, "MagickCMD") '"composite.exe") ''rconf.wgetfolder + "wget.exe"
        Dim curfolderjpg As String = addfiletofolder(currentmovie.getmoviepath, "folder.jpg")
        'move the folder.jpg to a backupfile
        'File.Move(curfolderjpg, curfolderjpg & ".bak")

        Dim imgToOverlayLeft As String = """" + addfiletofolder(rconf.resourcefolder + "tagimages\selectedimages", whattotagLeft) + """"
        Dim imgToOverlayRight As String = """" + addfiletofolder(rconf.resourcefolder + "tagimages\selectedimages", whattotagRight) + """"
        Dim imgToPutItOn As String = """" + addfiletofolder(cmpath, "curImage.png") + """"
        Dim imgNewImageNameLocation As String = """" + addfiletofolder(cmpath, "overlayImage" + rconf.type) + """"

        'open the image and get it's size
        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(addfiletofolder(cmpath, "curImage.png"))
        Dim originalImageHeight As Integer = objImage.Height
        Dim originalImageWidth As Integer = objImage.Width
        'objImage = Nothing 'get rid of the image, we are done with it
        objImage.Dispose()

        ' Distance from the edges of the image. Default = 0.02, which is 2% of the thumbnail width
        Dim constOverlayMargin As Double = rconf.overlayMargin
        ' Height of the overlay. Default = 0.09, which is 9% of the thumbnail height
        Dim constOverlayHeight As Double = rconf.overlayHeight

        Dim geoY As Double = originalImageHeight * constOverlayHeight
        Dim margin As Double = originalImageWidth * constOverlayMargin
        Dim geoX As Double = (originalImageHeight * (1 - constOverlayHeight)) - margin
        Dim exstring As String = " -compose atop -geometry 1000x" & CStr(geoY) & "+" & CStr(margin) & "+" & CStr(geoX) & " " & imgToOverlayLeft & " " & imgToPutItOn & " " & imgNewImageNameLocation

        Dim pro1 As System.Diagnostics.Process = New System.Diagnostics.Process()
        pro1.StartInfo.FileName = binfilelocal
        pro1.StartInfo.Arguments = exstring
        pro1.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden
        pro1.Start()
        pro1.WaitForExit()
        Dim overlayratio As Double = originalImageWidth / originalImageHeight '.67453625632377745 '1 '1.4655172413793103
        '1.4655172413793103 448275862068966

        'Overlay the right image (move our finished first image (overlayImage.jpg) to the working image (curImage.jpg)
        File.Delete(addfiletofolder(cmpath, "curImage.png"))
        File.Move(addfiletofolder(cmpath, "overlayImage" + rconf.type), addfiletofolder(cmpath, "curImage.png"))
        Dim arrep As Double = 1.4655172413793103 'default ar of tag images
        Dim geoYr As Double = originalImageHeight * constOverlayHeight
        Dim marginr2 As Double = (originalImageWidth - (originalImageHeight * (constOverlayHeight / overlayratio))) - (originalImageWidth * constOverlayMargin) '- (originalImageWidth * constOverlayMargin)
        Dim marginr As Double = originalImageWidth - (constOverlayMargin * originalImageWidth) - (originalImageHeight * constOverlayHeight * arrep)
        'Dim asdf As Double = 
        Dim geoXr As Double = (originalImageHeight * (1 - constOverlayHeight)) - (originalImageWidth * constOverlayMargin)
        '(originalImageHeight * (1 - constOverlayHeight)) - margin
        Dim exstringr As String = " -compose atop -geometry " + "1000" + "x" & CStr(geoYr) & "+" & CStr(marginr) & "+" & CStr(geoXr) & " " & imgToOverlayRight & " " & imgToPutItOn & " " & imgNewImageNameLocation

        Dim pro1r As System.Diagnostics.Process = New System.Diagnostics.Process()
        pro1r.StartInfo.FileName = binfilelocal
        pro1r.StartInfo.Arguments = exstringr
        pro1r.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden
        pro1r.Start()
        pro1r.WaitForExit()

        'copy the files
        Try
            If savefolderjpg And Not moviemode = "file" Then File.Copy(addfiletofolder(cmpath, "overlayImage" + rconf.type), addfiletofolder(cmpath, "folder.jpg"), True)
            'If savefolderjpg And Not moviemode = "file" Then Debug.Print("saved: " + addfiletofolder(cmpath, "folder.jpg"))
            If savemovienametbn Then File.Copy(addfiletofolder(cmpath, "overlayImage" + rconf.type), addfiletofolder(cmpath, currentmovie.pmoviename) + ".tbn", True)
            'If savemovienametbn Then Debug.Print("saved: " + addfiletofolder(cmpath, cmname) + ".tbn")
            If savemovietbn And Not moviemode = "file" Then File.Copy(addfiletofolder(cmpath, "overlayImage" + rconf.type), addfiletofolder(cmpath, "movie.tbn"), True)
            'If savemovietbn And Not moviemode = "file" Then Debug.Print("saved: " + addfiletofolder(cmpath, "movie.tbn"))
        Catch ex As Exception
            MessageBox.Show("Unable to save the icons, check permissions on the files in the movie folder", "Saving media icons failed", MessageBoxButtons.OK, MessageBoxIcon.Error)
            Debug.Print(ex.ToString)
            Exit Sub
        End Try

        'update the display
        If savefolderjpg And Not moviemode = "file" Then 'refresh all as start point may have shifted
            showfolderjpginmainwindow(cmpath, False)
            showtbninmainwindow(cmpath, False)
            tcMain.SelectTab(0)
            validatefoldercontents()
            'Exit Sub
        End If

        If savemovienametbn Or savemovietbn Then 'just refresh the tbn portion
            showtbninmainwindow(cmpath, False)
            tcMain.SelectTab(0)
            validatefoldercontents()
            'Exit Sub
        End If

        'remove temp items
        File.Delete(addfiletofolder(cmpath, "curImage.png"))
        File.Delete(addfiletofolder(cmpath, "overlayImage" + rconf.type))


    End Sub

    Private Sub btnRGF_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        If messageprompts Then
            messageprompts = False
        Else
            messageprompts = True
        End If
        MsgBox("Gui feedback reduction is set. Display of prompts is set to: " + messageprompts.ToString)

    End Sub
    Private Sub bshMovieSaveChanges_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bshMovieSaveChanges.Click
        If currentmovie Is Nothing Then Exit Sub
        saveNfoFromGuiText(True)
        MsgBox("Changes saved.")
        'cbNoNfoChangePrompt.Checked
    End Sub
    Private Sub bshgMovieFiletofolder_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bshgMovieFiletofolder.Click
        If currentmovie Is Nothing Then Exit Sub
        filetofolder(currentmovie, currentmovie.getmoviepath)
        'cbNoNfoChangePrompt.Checked
    End Sub
    Private Sub saveNfoFromGuiText(ByVal asdisplayed As Boolean, Optional ByVal lang_change As Boolean = False)
        'checkid function no longer needed as we don't write back to the imdb information
        'Dim checkid As String = Me.tbIMDBID.Text
        'If checkid = Nothing Then
        'MsgBox("can't save a movie without an imdb id number")
        'Exit Sub
        'End If
        'If currentmovie.pimdbnumber = checkid Then
        'no updates to imdb number, no problems
        'Else
        'Dim dlgRes As DialogResult
        'dlgRes = MessageBox.Show("Warning!: You have changed the imdbid for this file." + vbNewLine + vbNewLine + "Are you sure you want to change the imdb id? Doing so will change any known information about that id with what is entered here in the display.", "WARNING!", MessageBoxButtons.YesNo, MessageBoxIcon.Warning)
        'If dlgRes = DialogResult.Yes Then
        '    'continue
        'Else
        '    Exit Sub
        'End If


        'End If
        If Not lang_change Then
            'set tmovie information to data in gui
            currentmovie.peditedmoviename = Me.tbEditableTitle.Text 'Me.tbMovieName.Text
            'currentmovie.getmoviename = Me.tbMovieNameE.Text
            currentmovie.pcredits = Me.tbCredits.Text
            currentmovie.pdirector = Me.tbDirector.Text
            currentmovie.pgenre = Me.tbGenre.Text
            currentmovie.pimdbnumber = Me.tbIMDBID.Text
            currentmovie.pmpaa = Me.tbMpaa.Text
            currentmovie.pplotoutline = Me.rtbPlotOutline.Text
            currentmovie.pplot = Me.rtbPlot.Text
            currentmovie.prating = Me.tbRating.Text
            currentmovie.poriginaltitle = Me.tbOriginalTitle.Text
            currentmovie.pruntime = Me.tbRuntime.Text
            currentmovie.ptagline = Me.rtbTagline.Text
            currentmovie.pvotes = Me.tbVotes.Text
            currentmovie.pstudio = Me.tbStudio.Text  'tmovie.ptitle
            currentmovie.pgenre = Me.tbGenre.Text
            Dim oldvalue As Integer = currentmovie.pyear
            Try
                currentmovie.pyear = CInt(Me.tbyear.Text) 'this will need to be blocked for integers only in gui
            Catch ex As Exception
                currentmovie.pyear = oldvalue
            End Try

            currentmovie.ptop250 = Me.tbTop250.Text
            currentmovie.ptrailer = Me.tbTrailer.Text
        End If
        'mark it as if we loaded the data from the .nfo file or it will repull that data unless the movie is re-loaded into the app
        currentmovie.pdatafromnfo = True

        'save to imdb stored cache format of .xml file
        'save xml to imdbcache reguardless of gui setting to write nfo
        'Dim imdbinfo As New IMDB '//removed after 2231, not writing back to xml anymore, so this is not necessary, keeping for future options 
        'imdbinfo.movietoimdb(currentmovie)

        'check tmdbid
        checktmdbid(currentmovie)

        'movietoimdb
        currentmovie.saveimdbinfomanual(currentmovie, rconf.pcbCreateMovieNFO, rconf.pcbcreatemovienamedotnfo, asdisplayed) 'saves movie to nfo file

        If rconf.pcbcreateImdbIDtxt And Not currentmovie.pfilemode Then
            If File.Exists(addfiletofolder(currentmovie.getmoviepath, "imdbid.txt")) Then
                Try
                    Dim curidinfile As String = ""
                    curidinfile = File.ReadAllText(addfiletofolder(currentmovie.getmoviepath, "imdbid.txt"))
                    If Not curidinfile = currentmovie.pimdbnumber Then
                        File.Delete(addfiletofolder(currentmovie.getmoviepath, "imdbid.txt"))
                    End If
                Catch ex As Exception

                End Try
            End If
            If Not File.Exists(addfiletofolder(currentmovie.getmoviepath, "imdbid.txt")) Then
                writeStringToFile(currentmovie.pimdbnumber, addfiletofolder(currentmovie.getmoviepath, "imdbid.txt"))
            End If
        End If

        ' imdbinfo.writeIMDBXML(imdbinfo, currentmovie, rconf.imdbcachefolder, True) 'saves data back to xml cache of imdb items
        'imdbinfo = Nothing 'resource cleanup
        'convert to .nfo file and overwrite (reguardless of overwrite setting)

        'update movie in array
        movies.Item(CInt(lbMyMovies.SelectedValue)) = currentmovie
        If rconf.pcbNoNfoChangePrompt Then
            'MessageBox.Show("Movie information updated in .nfo file for the movie.", "Save completed", MessageBoxButtons.OK, MessageBoxIcon.None)
        Else
            ' MessageBox.Show("Movie information updated in .nfo file for the movie.", "Save completed", MessageBoxButtons.OK, MessageBoxIcon.None)
        End If

    End Sub
    Private Sub EnumMovieFileModeDirectory(ByVal RootDirectory As String, ByRef thearray As ArrayList, ByRef thecounter As Integer)

        'For Each s As String In Directory.GetDirectories(RootDirectory)
        'Debug.WriteLine("File found: " & s)
        'Next s
        For Each s As String In Directory.GetDirectories(RootDirectory)
            Debug.Print("EnumTVDirecotry running on : " + s)

            If Not (File.GetAttributes(s) And FileAttributes.ReparsePoint) = FileAttributes.ReparsePoint Then
                '    Debug.WriteLine("Sub Enumerate Directory -- Directory found: " & s)
                'debug counter
                thecounter = thecounter + 1
                'Debug.Print(dlist_count)
                'Add all files to the global array
                If ((Strings.Right(s, 8)).ToLower = "video_ts" Or (Strings.Right(s, 8)).ToLower = "audio_ts" Or (Strings.Right(s, 7)).ToLower = "highdef" Or (Strings.Right(s, 15)).ToLower = "temporary files") Then
                    Debug.Print("Sub Enumerate Directory -- found video or audio ts at " + Convert.ToString(thecounter) + " - skipping")
                Else
                    thearray.Add(s)
                End If
                EnumMovieFileModeDirectory(s, thearray, thecounter) ' will parse sub dirs
            End If
        Next s
        'Return junk
    End Sub
    Private Sub loadmoviesinfilemode(ByRef dtIDA As DataTable, ByRef currentindex As Integer)
        'enumdir and see what we have
        Dim tarray As New ArrayList
        Dim tdtvlist_count As Integer = 0
        'EnumMovieFileModeDirectory(curtvshowpath, tarray, tdtvlist_count)
        For Each item In rconf.pclbPathsFileMode
            tarray.Add(item)
        Next

        'Dim dtIDA As New DataTable
        'dtIDA.Columns.Add("Path", GetType(System.String))
        'dtIDA.Columns.Add("Name")
        'dtIDA.Columns.Add("Index")

        'get all files for all directorys in that path and put into arraylist
        Dim filelisting As New ArrayList
        'Dim currentindex As Integer = 0
        Dim prename As String = ""
        Dim curcount As Integer = 0
        For Each tdirectory As String In tarray
            Try
                For Each item In Directory.GetFiles(tdirectory)

                    Try
                        Dim fnPeices1() As String = item.ToString.Split(CChar("\"))
                        Dim tfname As String = fnPeices1(fnPeices1.Length - 1)
                        Select Case Strings.Right(tfname, 3).ToLower
                            Case ".ts"
                                Debug.Print("parser for : " + item.ToString + " : Result was : " + tfname.ToString)
                                'have a movie file, parse it for season and episode
                                Dim tfnameoffile As String = fnPeices1(fnPeices1.Length - 1)
                                Debug.Print(tfnameoffile)
                                Dim mname As String = tfnameoffile
                                Dim cleanname As String = namefilterforfilemode(removeextension(mname))
                                'filter code injection here
                                If mname.ToLower = "con air" Or cleanname = "" Then
                                    'do nada
                                Else
                                    Dim newmovie As New movie
                                    newmovie.setmoviename(cleanname)
                                    newmovie.preservedmoviename = mname
                                    newmovie.setmoviepath(tdirectory)
                                    newmovie.pfilemode = True
                                    'read nfo if it's there
                                    'asdf()
                                    readnfo(newmovie) ' does not set the moviename, edited name is only used in the .nfo file
                                    'newmovie.peditedmoviename = newmovie.pmoviename
                                    dtIDA.LoadDataRow(New Object() {newmovie.getmoviepath, cleanname, currentindex}, True)
                                    'add movie to array - change this so that we can display them in a different sort order
                                    movies.Add(newmovie)
                                    newmovie = Nothing
                                    mname = Nothing
                                    currentindex += 1
                                End If
                                curcount += 1
                                Debug.Print("-------------- Done movie file level 2 extension processing, moving to next or end --------------")
                            Case Else
                                'Debug.Print("Non Movie File: " + item.ToString + " : " + tfname.ToString)
                        End Select

                        Select Case Strings.Right(tfname, 4).ToLower
                            Case ".iso", ".img", ".dat", ".bin", ".cue", ".vob", ".dvb", ".m2t", ".mts", ".evo", ".mp4", ".avi", ".asf", ".asx", ".wmv", ".wma", ".mov", ".flv", ".swf", ".nut", ".avs", ".nsv", ".mp4", ".ram", ".ogg", ".ogm", ".ogv", ".mkv", ".viv", ".pva", ".mpg", ".mp4", ".m4v"
                                Debug.Print("parser for : " + item.ToString + " : Result was : " + tfname.ToString)
                                'have a movie file, parse it for season and episode
                                Dim tfnameoffile As String = fnPeices1(fnPeices1.Length - 1)
                                Debug.Print(tfnameoffile)
                                Dim mname As String = tfnameoffile
                                Dim cleanname As String = namefilterforfilemode(removeextension(mname))
                                'filter code injection here
                                If mname.ToLower = "con air" Or cleanname = "" Or Strings.Right(cleanname, 8).ToLower = "-trailer" Then
                                    'do nada
                                Else
                                    Dim newmovie As New movie
                                    newmovie.setmoviename(cleanname)
                                    newmovie.preservedmoviename = mname
                                    newmovie.setmoviepath(tdirectory)
                                    newmovie.pfilemode = True
                                    Dim curstipedname As String = ""
                                    curstipedname = stripstackforfilemode(removeextension(mname)).ToLower
                                    If prename = curstipedname Then
                                        Continue For 'ingores stacked items by not loading the second part
                                    End If
                                    prename = curstipedname
                                    'read nfo if it's there
                                    readnfo(newmovie) ' does not set the moviename, edited name is only used in the .nfo file
                                    'newmovie.peditedmoviename = newmovie.pmoviename
                                    dtIDA.LoadDataRow(New Object() {newmovie.getmoviepath, cleanname, currentindex}, True)
                                    'add movie to array - change this so that we can display them in a different sort order
                                    movies.Add(newmovie)
                                    newmovie = Nothing
                                    mname = Nothing
                                    currentindex += 1
                                End If
                                curcount += 1

                                Debug.Print("-------------- Done movie file level processing, moving to next or end --------------")
                            Case Else
                                Debug.Print("Non Movie File: " + item.ToString + " : " + tfname.ToString)
                        End Select
                        filelisting.Add(item)
                    Catch ex As Exception 'catch bad filename or location exception
                        Debug.Print(ex.ToString)
                    End Try
                Next
            Catch ex As Exception 'catch bad parse of directory
                Debug.Print(ex.ToString)
            End Try
        Next


        'klNumMovies.Text = curcount.ToString
        'btnPrecache.Enabled = True
        'btnPrecache.Visible = True

        'dtIDA.DefaultView.Sort = "Name"
        'tblofmovies = dtIDA

        'lbMyMovies.DataSource = tblofmovies.DefaultView
        'lbMyMovies.ValueMember = "Index"
        'lbMyMovies.DisplayMember = "Name"
    End Sub

    Private Sub bwloadfolderdata_TDM()
        'If moviemode = "file" Then
        '    loadmoviesinfilemode()
        '    Exit Sub
        'End If
        'turn off user controls
        lbMyMovies.Enabled = False
        tcMain.Enabled = False
        gbAppMode.Enabled = False
        gbDisplay.Enabled = False
        tsbMoviesLoadMovies.Enabled = False
        tsbMoviesAutoPilot.Enabled = False
        'btnAutoPilot.Visible = False
        kgMovieOrTVShow.Enabled = False
        kgMyMovieInfoPicker.Enabled = False
        btnPrev.Enabled = False
        btnNext.Enabled = False
        btnShowMovieInfo.Enabled = False
        'enum folder data to set maxindex
        cleararray(dlist)
        'clear movies object
        cleararray(movies)
        For Each listedname In rconf.pclbPaths
            Try
                Me.pbar1.Visible = True
                EnumerateDirectory(listedname.ToString)
                Debug.Print(listedname.ToString)
                Debug.Print(dlist.Count.ToString)
            Catch dung As Exception
                Debug.Print(dung.ToString)
            End Try

        Next

        prgThread.Value = 0
        prgThread.Maximum = (dlist.Count + 1) '* 2

        'set totaltoprocess value
        'totaltoprocess = lbMyMovies.Items.Count - 1
        'set max number 
        prgThread.Visible = True
        tsbMoviesPreCache.Enabled = False
        ' btnPrecache.Visible = False
        'btnCancelPC.Enabled = True
        'btnCancelPC.Visible = True
        lblPCWorking.Visible = True
        bwFolderDataTDM = New System.ComponentModel.BackgroundWorker
        bwFolderDataTDM.WorkerReportsProgress = True
        bwFolderDataTDM.WorkerSupportsCancellation = True
        bwFolderDataTDM.RunWorkerAsync()
    End Sub
    Private Sub bwFolderDataTDM_RunWorkerCompleted(ByVal sender As Object, ByVal e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles bwFolderDataTDM.RunWorkerCompleted
        lbMyMovies.DataSource = tblofmovies.DefaultView
        lbMyMovies.ValueMember = "Index"
        lbMyMovies.DisplayMember = "Name"

        tsbMoviesPreCache.Enabled = True
        'btnPrecache.Visible = True
        btnCancelPC.Enabled = False
        btnCancelPC.Visible = False
        prgThread.Visible = False
        tcMain.Enabled = True
        gbAppMode.Enabled = True
        gbDisplay.Enabled = True
        tsbMoviesLoadMovies.Enabled = True
        tsbMoviesAutoPilot.Enabled = True
        ' btnAutoPilot.Visible = True
        lblPCWorking.Visible = False
        lbMyMovies.Enabled = True
        kgMovieOrTVShow.Enabled = True
        kgMyMovieInfoPicker.Enabled = True
        btnShowMovieInfo.Enabled = True
        fwdbackbuttons()
        klNumMovies.Text = movies.Count.ToString
        lblCurItem.Text = "Folder Read Completed"
        'get first item data (turn off messages, and set to offline)
        Dim trbem As Boolean = rbem.Checked 'get current online/offline state
        rbem.Checked = False 'go offline
        lbMyMovies.SelectedIndex = 0 'go back to first movie in list
        messageprompts = False 'turn off gui feedback (messageprompts)
        tcMain.SelectTab(0) 'select current icon tab
        processdropdownitems() 'get the data in offline (faster) mode
        messageprompts = True 'turn messageprompts back on
        fwdbackbuttons() 'enable buttons
        rbem.Checked = trbem 'setting back the previous state of online/offline mode
        autopilotdialog.Dispose()
        MsgBox("Autopilot Completed")
        lbMyMovies.Enabled = True
        lbMyMovies.Visible = True
        rbMDAll.Select()

    End Sub
    Private Sub bwFolderDataTDM_DoWork(ByVal sender As System.Object, ByVal e As System.ComponentModel.DoWorkEventArgs) Handles bwFolderDataTDM.DoWork
        'clear dlist
        Debug.Print("working")
        Dim curcount As Integer = 0
        Dim dtIDA As New DataTable
        dtIDA.Columns.Add("Path", GetType(System.String))
        dtIDA.Columns.Add("Name")
        dtIDA.Columns.Add("Index")



        Dim thelist As ArrayList
        thelist = dlist
        Debug.Print("list set")
        Dim mname As String ', mfxname As String
        Dim currentindex As Integer = 0
        For Each name As String In dlist
            'parse just the movie name
            mname = getmnamebyfoldername(name).ToString
            bwFolderDataTDM.ReportProgress(currentindex, mname)
            'Threading.Thread.Sleep(10)

            Dim cleanname As String = namefilter(mname)
            '   newmovie.setmoviename(mname)
            'filter code injection here

            If mname.ToLower = "con air" Or cleanname = "" Or File.Exists(name & "\specialfolder.nfo") Then
                'do nada
            Else
                Dim newmovie As New movie

                newmovie.setmoviename(cleanname)
                newmovie.preservedmoviename = mname
                newmovie.setmoviepath(name)
                'read nfo if it's there
                readnfo(newmovie) ' does not set the moviename, edited name is only used in the .nfo file
                'newmovie.peditedmoviename = newmovie.pmoviename
                dtIDA.LoadDataRow(New Object() {newmovie.getmoviepath, cleanname, currentindex}, True)
                'add movie to array - change this so that we can display them in a different sort order
                movies.Add(newmovie)
                newmovie = Nothing
                mname = Nothing
                currentindex += 1
            End If
            curcount += 1
        Next
        'get file level items
        bwFolderDataTDM.ReportProgress(currentindex, "Loading file level movies")
        loadmoviesinfilemode(dtIDA, currentindex)

        dtIDA.DefaultView.Sort = "Name"
        tblofmovies = dtIDA
    End Sub
    Private Sub bwFolderDataTDM_progresschanged(ByVal sender As Object, ByVal e As System.ComponentModel.ProgressChangedEventArgs) Handles bwFolderDataTDM.ProgressChanged
        prgThread.Value = e.ProgressPercentage
        lblPCWorking.Text = e.UserState.ToString
    End Sub

    Private Sub bwloadfolderdata()
        'If moviemode = "file" Then
        '    Exit Sub 'for now
        '    loadmoviesinfilemode()
        '    'asdf()

        '    Exit Sub
        'End If
        'turn off user controls
        lbMyMovies.Enabled = False
        tcMain.Enabled = False
        gbAppMode.Enabled = False
        gbDisplay.Enabled = False
        tsbMoviesLoadMovies.Enabled = False
        tsbMoviesAutoPilot.Enabled = False
        'btnAutoPilot.Visible = False
        kgMovieOrTVShow.Enabled = False
        kgMyMovieInfoPicker.Enabled = False
        btnPrev.Enabled = False
        btnNext.Enabled = False
        btnShowMovieInfo.Enabled = False
        'enum folder data to set maxindex
        cleararray(dlist)
        'clear movies object
        cleararray(movies)
        For Each listedname In rconf.pclbPaths
            Try
                Me.pbar1.Visible = True
                EnumerateDirectory(listedname.ToString)
                Debug.Print(listedname.ToString)
                Debug.Print(dlist.Count.ToString)
            Catch dung As Exception
                Debug.Print(dung.ToString)
            End Try

        Next

        prgThread.Value = 0
        Try
            prgThread.Maximum = (dlist.Count + 1) '* 2
        Catch ex As Exception
            prgThread.Maximum = 500
        End Try
        'prgThread.Maximum = (dlist.Count - 1) '* 2

        'set totaltoprocess value
        'totaltoprocess = lbMyMovies.Items.Count - 1
        'set max number 
        prgThread.Visible = True
        tsbMoviesPreCache.Enabled = False
        'btnPrecache.Visible = False
        'btnCancelPC.Enabled = True
        'btnCancelPC.Visible = True
        lblPCWorking.Visible = True
        bwFolderData = New System.ComponentModel.BackgroundWorker
        bwFolderData.WorkerReportsProgress = True
        bwFolderData.WorkerSupportsCancellation = True
        bwFolderData.RunWorkerAsync()
    End Sub
    Private Sub bwFolderData_RunWorkerCompleted(ByVal sender As Object, ByVal e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles bwFolderData.RunWorkerCompleted
        lbMyMovies.DataSource = tblofmovies.DefaultView
        lbMyMovies.ValueMember = "Index"
        lbMyMovies.DisplayMember = "Name"

        tsbMoviesPreCache.Enabled = True
        'btnPrecache.Visible = True
        btnCancelPC.Enabled = False
        btnCancelPC.Visible = False
        prgThread.Visible = False
        tcMain.Enabled = True
        gbAppMode.Enabled = True
        gbDisplay.Enabled = True
        tsbMoviesLoadMovies.Enabled = True
        tsbMoviesAutoPilot.Enabled = True
        'btnAutoPilot.Visible = True
        lblPCWorking.Visible = False
        lbMyMovies.Enabled = True
        kgMovieOrTVShow.Enabled = True
        kgMyMovieInfoPicker.Enabled = True
        btnShowMovieInfo.Enabled = True
        fwdbackbuttons()
        klNumMovies.Text = movies.Count.ToString
        prgThread.Visible = False
        pbar1.Visible = False
        lblCurItem.Text = "Folder Read Completed"
    End Sub
    Private Sub bwFolderData_DoWork(ByVal sender As System.Object, ByVal e As System.ComponentModel.DoWorkEventArgs) Handles bwFolderData.DoWork
        'clear dlist
        Debug.Print("working")


        Dim curcount As Integer = 0
        Dim dtIDA As New DataTable
        dtIDA.Columns.Add("Path", GetType(System.String))
        dtIDA.Columns.Add("Name")
        dtIDA.Columns.Add("Index")

        Dim currentindex As Integer = 0

        Dim thelist As ArrayList
        thelist = dlist
        Debug.Print("list set")
        Dim mname As String ', mfxname As String

        For Each name As String In dlist
            'parse just the movie name
            mname = getmnamebyfoldername(name).ToString
            bwFolderData.ReportProgress(currentindex, mname)
            'Threading.Thread.Sleep(10)

            Dim cleanname As String = namefilter(mname)
            '   newmovie.setmoviename(mname)
            'filter code injection here

            If mname.ToLower = "con air" Or cleanname = "" Or File.Exists(name & "\specialfolder.nfo") Then
                'do nada
            Else
                Dim newmovie As New movie

                newmovie.setmoviename(cleanname)
                newmovie.preservedmoviename = mname
                newmovie.setmoviepath(name)
                'read nfo if it's there
                readnfo(newmovie)
                'check for video_ts (backwards compat)
                currentmovie = newmovie
                Try
                    checkVideoTSforcurrentmovie()
                Catch ex As Exception
                    MsgBox("Failed for automatic fix for VIDEO_TS data" & ex.ToString)
                End Try

                dtIDA.LoadDataRow(New Object() {newmovie.getmoviepath, cleanname, currentindex}, True)
                'add movie to array - change this so that we can display them in a different sort order
                movies.Add(newmovie)
                newmovie = Nothing
                mname = Nothing
                currentindex += 1
            End If
            curcount += 1
        Next

        bwFolderData.ReportProgress(currentindex, "Loading file level movies")
        'get file level items
        loadmoviesinfilemode(dtIDA, currentindex)

        ' '' ''Dim dtIDA As New DataTable
        ' '' ''dtIDA.Columns.Add("Path", GetType(System.String))
        ' '' ''dtIDA.Columns.Add("Name")
        ' '' ''dtIDA.Columns.Add("Index")
        '' '' ''dtIDA.Columns.Add("objMovie")
        ' '' ''Dim cutcmIndex As Integer = 0
        ' '' ''For Each tcmMovie As movie In movies
        ' '' ''    dtIDA.LoadDataRow(New Object() {tcmMovie.getmoviepath, tcmMovie.pmoviename, cutcmIndex}, True)
        ' '' ''    'Debug.Print(tcmMovie.pmoviename + cutcmIndex.ToString)
        ' '' ''    bwFolderData.ReportProgress(currentindex, tcmMovie.pmoviename)
        ' '' ''    'Threading.Thread.Sleep(10)
        ' '' ''    currentindex += 1
        ' '' ''    cutcmIndex += 1
        ' '' ''Next
        'dtIDA.DefaultView.Sort = "Description"
        dtIDA.DefaultView.Sort = "Name"
        tblofmovies = dtIDA

        ' Me.pbar1.Visible = False
        'Me.btnGetImages.Enabled = True
        'Me.btnPrecache.Visible = True

    End Sub
    Private Sub bwFolderData_progresschanged(ByVal sender As Object, ByVal e As System.ComponentModel.ProgressChangedEventArgs) Handles bwFolderData.ProgressChanged
        prgThread.Value = e.ProgressPercentage
        lblPCWorking.Text = e.UserState.ToString
        'lstValues.Items.Add(e.UserState)
    End Sub

    Private Sub bwprecachenow()
        'CheckForIllegalCrossThreadCalls = False
        If lbMyMovies.Items.Count = 0 Then
            MsgBox("There are no items in the list to process")
            Exit Sub

        End If
        If MsgBox("Note: This is going to take a long time to process and doesn't tell you what all is going on, it slows things down when I update the gui for each action. I am going to grab everything I can find that you have enabled under the settings for every movie you have added into the program. Are you sure you want to continue?", MsgBoxStyle.OkCancel, "Confirm Preload of Icons") = MsgBoxResult.Cancel Then
            Exit Sub
        End If
        'turn off user controls
        lbMyMovies.Enabled = False
        tcMain.Enabled = False
        gbAppMode.Enabled = False
        gbDisplay.Enabled = False
        tsbMoviesLoadMovies.Enabled = False
        tsbMoviesAutoPilot.Enabled = False
        'btnAutoPilot.Visible = False
        btnPrev.Enabled = False
        btnNext.Enabled = False
        btnShowMovieInfo.Enabled = False
        If lbMyMovies.SelectedIndex = -1 Then
            '    '  MsgBox("You should select an item from the drop down first. Since no item was selected, the first item in the list will be used")
            Try
                lbMyMovies.SelectedIndex = 0
            Catch ex As Exception

            End Try

        End If
        'mainform.CheckForIllegalCrossThreadCalls = False
        prgThread.Value = 0
        prgThread.Maximum = lbMyMovies.Items.Count

        'set totaltoprocess value
        totaltoprocess = lbMyMovies.Items.Count
        'set max number 
        pcmaxDisplayedIcons = rconf.pcbMaxIconsToDisplay
        pcMaxIconPerStyle = rconf.pcbMaxIconPerStyle
        prgThread.Visible = True
        tsbMoviesPreCache.Enabled = False
        'btnPrecache.Visible = False
        btnCancelPC.Enabled = True
        btnCancelPC.Visible = True
        'lblPbar.Text = ""
        'lblPbar.Visible = False
        'Me.Refresh()
        lblPCWorking.Text = ""
        lblPCWorking.Visible = True

        'lstValues.Items.Clear()
        'prgThread.Value = 0
        'TestWorker = New System.ComponentModel.BackgroundWorker
        'TestWorker.WorkerReportsProgress = True
        'TestWorker.WorkerSupportsCancellation = True
        'TestWorker.RunWorkerAsync()
        '        sw.WriteLine(Me.t_HostName.Text)



        bwPreCache = New System.ComponentModel.BackgroundWorker
        bwPreCache.WorkerReportsProgress = True
        bwPreCache.WorkerSupportsCancellation = True
        bwPreCache.RunWorkerAsync()
    End Sub
    Private Sub bwPrecache_RunWorkerCompleted(ByVal sender As Object, ByVal e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles bwPreCache.RunWorkerCompleted
        If Not currentmoviedownloadlist.Count = 0 Then
            'dlgDownloadingFile.downloadertxtFileName.Text = url
            'dlgDownloadingFile.whereToSave = folder + tfanartfilename
            dlgDownloadingFile.precaching = True
            dlgDownloadingFile.downloadingmutliimages = True
            dlgDownloadingFile.downloadlist = currentmoviedownloadlist
            dlgDownloadingFile.ShowDialog()

        End If
        tsbMoviesPreCache.Enabled = True
        'btnPrecache.Visible = True
        btnCancelPC.Enabled = False
        btnCancelPC.Visible = False
        prgThread.Visible = False
        tcMain.Enabled = True
        gbAppMode.Enabled = True
        gbDisplay.Enabled = True
        tsbMoviesLoadMovies.Enabled = True
        tsbMoviesAutoPilot.Enabled = True
        'btnAutoPilot.Visible = True
        lblPCWorking.Visible = False
        lbMyMovies.Enabled = True


        '        File.OpenWrite(rconf.basefolder + "pre-cache.log")
    End Sub
    Private Sub bwPreCache_DoWork(ByVal sender As System.Object, ByVal e As System.ComponentModel.DoWorkEventArgs) Handles bwPreCache.DoWork
        Dim logfile As String = rconf.basefolder + "pre-cache.log"
        'If Not File.Exists(logfile) Then File.Create(logfile)
        currentmoviedownloadlist.Clear()
        'Dim pclog As StreamWriter
        pclog = New StreamWriter(logfile, True) 'True for appending
        pclogging = True
        messageprompts = False
        Dim currentindex As Integer = 0
        While currentindex < totaltoprocess '(cbox1.Items.Count - 1)
            If bwPreCache.CancellationPending Then
                Exit While
            End If

            'pbTick.Start()
            Dim vmaxDisplayedIcons As Integer = pcmaxDisplayedIcons
            currentmovie = CType(movies(currentindex), movie)

            If currentmovie.pfilemode = True Then
                moviemode = "file"
            Else
                moviemode = "folder"
            End If
            Dim selectedName As String = currentmovie.getmoviename
            pclog.WriteLine("Moviename is: " + selectedName)
            'lblCurMovieFolder.Text = currentmovie.getmoviepath

            Dim selectedNameXMLfile As String
            selectedNameXMLfile = Strings.Replace(selectedName, " ", ".")
            currentmovie.setthumbxml(rconf.xmlfolder + selectedNameXMLfile + ".xml")
            '---------------------------- XML FILE CHECK ---------------------------
            'check to see if there is already an xml file in there
            Dim xmltemppathname As String = rconf.xmlfolder + selectedNameXMLfile
            Dim xmltemp As String = rconf.xmlfolder + selectedNameXMLfile + ".xml"
            'display movie name
            'Me.tbMovieNameE.Text = currentmovie.getmoviename
            If rconf.pcbf1s0 Then
                pclog.WriteLine("Getting square no style icons for " + selectedName)
                xmlDownload(currentmovie, xmltemppathname, "1", "2", "0") 'square no style
                precacheicons(selectedNameXMLfile, "1", "2", "0")
            End If
            If rconf.pcbf1s3 Then
                pclog.WriteLine("Getting square box shot icons for " + selectedName)
                xmlDownload(currentmovie, xmltemppathname, "1", "2", "3") 'square box shot
                precacheicons(selectedNameXMLfile, "1", "2", "3")
            End If
            If rconf.pcbf1s9 Then
                pclog.WriteLine("Getting round token style icons for " + selectedName)
                xmlDownload(currentmovie, xmltemppathname, "1", "2", "9") 'square classification, but it's a round token
                precacheicons(selectedNameXMLfile, "1", "2", "9")
            End If
            If rconf.pcbf2s0 Then
                pclog.WriteLine("Getting wide no style icons for " + selectedName)
                xmlDownload(currentmovie, xmltemppathname, "2", "2", "0") 'wide no style
                precacheicons(selectedNameXMLfile, "2", "2", "0")
            End If
            If rconf.pcbf2s2 Then
                pclog.WriteLine("Getting wide rounded shadow with scanlines icons for " + selectedName)
                xmlDownload(currentmovie, xmltemppathname, "2", "2", "2") 'wide rounded shadow with scanlines
                precacheicons(selectedNameXMLfile, "2", "2", "2")
            End If
            If rconf.pcbf2s8 Then
                pclog.WriteLine("Getting wide rounded shadow icons for " + selectedName)
                xmlDownload(currentmovie, xmltemppathname, "2", "2", "8") 'wide rounded shadow
                precacheicons(selectedNameXMLfile, "2", "2", "8")
            End If
            If rconf.pcbf2s10 Then
                pclog.WriteLine("Getting wide rounded shadow with glass overlay icons for " + selectedName)
                xmlDownload(currentmovie, xmltemppathname, "2", "2", "10") 'wide rounded shadow with glass overlay
                precacheicons(selectedNameXMLfile, "2", "2", "10")
            End If
            'If rconf.pcbf3s0 Then
            '    pclog.WriteLine("Getting tall no style icons for " + selectedName)
            '    xmlDownload(currentmovie, xmltemppathname, "3", "2", "0") 'tall no style
            '    precacheicons(selectedNameXMLfile, "3", "2", "0")
            'End If

            'continue processing

            'IMDB data
            'see if nfo file exsists for movie, if it does, read it up to speed it up
            'Dim nfoexsists As Boolean = checkforIMDBIDinnfofile(tmovie)
            pclog.WriteLine("Checking NFO for IMDB id")
            checknfodata(currentmovie, currentmovie.pmoviename, True)
            '' ---- IMDB AND NFO -----
            'Dim hasnfoalready As Boolean = False
            'Dim haveidonly As Boolean = False
            ''see if movie data was loaded from nfo file during folder scan
            'If Not currentmovie.pdatafromnfo Then
            '    'we don't have data so try to get it
            '    'see if nfo file exsists for movie, if it does, read it up to speed it up
            '    haveidonly = checkforIMDBIDinnfofile(currentmovie)
            '    If Not haveidonly Then
            '        'see if there is an nfo file in the folder 
            '        'Dim parentfolder As String = getparentdirectory(currentmovie.getmoviepath)
            '        Dim curName As String = ""
            '        If currentmovie.pfilemode Then
            '            curName = addfiletofolder(currentmovie.getmoviepath, removeextension(currentmovie.preservedmoviename) & ".nfo")
            '        Else
            '            curName = addfiletofolder(currentmovie.getmoviepath, currentmovie.pmoviename + ".nfo")
            '        End If
            '        If File.Exists(curName) Then
            '            'read it up to see if we have a tt/d{6,7} in it if we do set haveidonly to true and set the id in the movie
            '            Dim strwork As String = File.ReadAllText(curName)
            '            Try
            '                If Regex.IsMatch(strwork, "(tt\d{6,7})") Then
            '                    currentmovie.pimdbnumber = Regex.Match(strwork, "(tt\d{6,7})").Groups(1).Value
            '                    haveidonly = True
            '                End If
            '            Catch ex As ArgumentException
            '                'Syntax error in the regular expression
            '            End Try
            '            strwork = ""
            '        End If
            '    End If

            '    If Not haveidonly Then
            '        Dim filelist() As String '  As New ArrayList
            '        filelist = Directory.GetFiles(currentmovie.getmoviepath)
            '        'Dim totfilecount As Integer = filelist.
            '        For Each pathedfile As String In filelist
            '            Dim strnfoextonfile As String = ""
            '            strnfoextonfile = Strings.Right(pathedfile, 4)
            '            If strnfoextonfile = ".nfo" Then
            '                'read it up to see if we have a tt/d{6,7} in it if we do set haveidonly to true set the id in the movie
            '                Dim strwork As String = File.ReadAllText(pathedfile)
            '                Try
            '                    If Regex.IsMatch(strwork, "(tt\d{6,7})") Then
            '                        currentmovie.pimdbnumber = Regex.Match(strwork, "(tt\d{6,7})").Groups(1).Value
            '                        haveidonly = True
            '                    End If
            '                Catch ex As ArgumentException
            '                    'Syntax error in the regular expression
            '                End Try
            '                strwork = ""
            '            End If
            '            If haveidonly Then
            '                Exit For
            '            End If
            '        Next
            '    End If

            '    If Not haveidonly Then
            '        'if there is no nfo file, check for a poster file (they have the imdbid in them)
            '        haveidonly = checkforposterfiletogetimdbid(currentmovie)
            '    End If
            'Else
            '    hasnfoalready = True
            'End If
            ''getimdbidsearchwithwget(tmovie)
            ''not getting year for this movie, was used for posters, call for posters if needed
            '' snagyear(tmovie.getmoviename, tmovie)
            '' COMMENTED Dim impaname As String = Strings.Replace(tmovie.getmoviename, " ", "_").ToLower

            'If rconf.pcbGetIMDBInfo Then 'get imdb info
            '    If rbem.Checked = True Then
            '        pclog.WriteLine("Getting IMDB Information")
            '        If File.Exists(rconf.imdbcachefolder + "/" + currentmovie.getimdbid + ".xml") Then 'And Not cbOverwriteNFO.Checked Then
            '            pclog.WriteLine("IMDB xml file for movie already exsists, using local file")
            '            'do nothing yet, nfo exsists -- add load nfo code here as well as the option to overwrite nfos in gui
            '            'Debug.Print(".xml already exsists") ' + cbOverwriteNFO.Checked.ToString)
            '        Else
            '            'getimdbidsearch(tmovie.getmoviename)
            '            'snagimdbid(tmovie.getmoviename, tmovie)
            '            'snagyear(tmovie.getmoviename, tmovie)
            '            ' getimdbdata(tmovie)
            '            Dim imdbinfo As New IMDB
            '            Dim imdbidtemp As String = currentmovie.getimdbid
            '            If imdbidtemp = "" Then
            '                'MsgBox("NO IMDB DATA FOUND, UNABLE TO SAVE NFO FILE")
            '                pclog.WriteLine("NO IMDB DATA FOUND, UNABLE TO SAVE NFO FILE")
            '            Else
            '                pclog.WriteLine("Found IMDB ID, staring to parse IMDB information")
            '                imdbinfo = imdbparse(imdbidtemp)
            '                'save xml to imdbcache reguardless of gui setting to write nfo
            '                imdbinfo.writeIMDBXML(imdbinfo, currentmovie, rconf.imdbcachefolder, True)
            '                'If cbSaveNFO.Checked Then
            '                '    'imdbinfo.writeIMDBXML(imdbinfo, tmovie)
            '                '    tmovie.saveimdbinfo(tmovie)
            '                'End If
            '            End If
            '        End If
            '    End If
            'End If

            'get Movie Poster
            Dim impaname As String = cleanname(currentmovie.getmoviename)
            If rconf.pcbDownloadPoster Then
                pclog.WriteLine("Getting IMP Posters")
                'get year from older imdb info
                '''''Dim tstringofimdbpage As String = getimdbidsearch(currentmovie.pmoviename)
                'snagyear(currentmovie.getmoviename, tmovie, tstringofimdbpage)
                'save a new xml file for the posters
                'see if the posterxml file exsists in the posters folder
                If File.Exists(rconf.xmlfolderposters + currentmovie.pimdbnumber + ".xml") Then
                    pclog.WriteLine("XML for poster was found at: " + rconf.xmlfolderposters + impaname + ".xml")
                    pclog.WriteLine("Precache of IMP posters started")
                    Dim curposter As New posters
                    curposter.pmoviename = impaname
                    curposter.readxml(curposter, rconf.xmlfolderposters, True, currentmovie.pimdbnumber)
                    'pclog.WriteLine("Number of items to process is: " + curposter.pposters.Count.ToString)
                    downloadimpposter(curposter, 0, currentmoviedownloadlist)
                    'asdf()
                    'precacheposter(curposter, rconf.postercachefolder)
                    pclog.WriteLine("Precache of IMP posters completed")
                Else
                    pclog.WriteLine("No IMP Poster information for" + impaname.ToString)
                    'no poster xml, revert to older method of finding poster
                    'If rconf.pcbGetIMDBInfo Then
                    '    'do nothing, we already polled that data for the movie
                    'Else
                    '    'get imdb info since we need the movie year
                    '    'Dim tstringofimdbpage As String = getimdbidsearch(currentmovie.getmoviename)
                    '    snagimdbid(currentmovie.getmoviename, tmovie, tstringofimdbpage)
                    '    snagyear(currentmovie.getmoviename, tmovie, tstringofimdbpage)
                    '    'getimdbdata(tmovie)
                    'End If

                    ''old method of posters, limited to 4 to save time
                    'Dim postericons As New icontoxml
                    'postericons.seticon1("http://www.impawards.com/" + Convert.ToString(tmovie.getyear) + "/posters/" + impaname + ".jpg")
                    'postericons.seticon2("http://www.impawards.com/" + Convert.ToString(tmovie.getyear) + "/posters/" + impaname + "_ver1.jpg")
                    'postericons.seticon3("http://www.impawards.com/" + Convert.ToString(tmovie.getyear) + "/posters/" + impaname + "_ver2.jpg")
                    'postericons.seticon4("http://www.impawards.com/" + Convert.ToString(tmovie.getyear) + "/posters/" + impaname + "_ver3.jpg")
                    ''postericons.seticon5("http://www.impawards.com/" + Convert.ToString(tmovie.getyear) + "/posters/" + impaname + "_ver4.jpg")
                    ''postericons.seticon6("http://www.impawards.com/" + Convert.ToString(tmovie.getyear) + "/posters/" + impaname + "_ver5.jpg")
                    ''postericons.seticon7("http://www.impawards.com/" + Convert.ToString(tmovie.getyear) + "/posters/" + impaname + "_ver6.jpg")
                    ''postericons.seticon8("http://www.impawards.com/" + Convert.ToString(tmovie.getyear) + "/posters/" + impaname + "_ver7.jpg")
                    'postericons.savexmliconwriter(postericons, selectedNameXMLfile, "070", "0", "0")

                    'Try
                    '    precacheicons(selectedNameXMLfile, "070", "0", "0")
                    'Catch ex As Exception

                    'End Try
                End If


            End If

            'get mi items
            getfcdn_movie_front(True, currentmoviedownloadlist)
            getfcdn_movie_back(True, currentmoviedownloadlist)
            getfcdn_movie_cd1(True, currentmoviedownloadlist)
            getfcdn_movie_cd2(True, currentmoviedownloadlist)
            getfcdn_movie_cd3(True, currentmoviedownloadlist)
            getfcdn_movie_cd4(True, currentmoviedownloadlist)
            getfcdn_movie_inlay(True, currentmoviedownloadlist)
            getfcdn_movie_insert(True, currentmoviedownloadlist)
            'get fanart - V2 api
            'get fanart - first check to see if it's enabled
            If rconf.pcbGetTMDBPosters Then
                pclog.WriteLine("-- Getting TMDB Posters: " + selectedName + "--")
                ''If messageprompts Then Me.Refresh()()
                downloadtmdbposters(0, currentmoviedownloadlist)
                'precachepostersfromtmdb(tmovie)
            End If

            'get fanart - first check to see if it's enabled
            If rconf.pcbGetFanart Then
                pclog.WriteLine("-- Getting Fanart: " + selectedName + "--")
                ''If messageprompts Then Me.Refresh()()
                downloadtmdbfanart(0, currentmoviedownloadlist)
            End If

            'If tmovie.pimdbnumber = "" Then
            '    'MsgBox("NO IMDB DATA FOUND, UNABLE TO SAVE NFO FILE")
            '    Debug.Print("No id: No Fanart: NO IMDB DATA FOUND, UNABLE TO PROCESS FANART")
            'Else
            '    Dim cbackdrops As New tmdbapiv2.Backdrops 'mip.themoviedb.backdrop.backdrops
            '    tmdbapiv2.Results.getbackdrops(cbackdrops, tmovie.pimdbnumber, rconf.wgetfolder, rconf.xmlfoldertmdbbackdrops, True, True, True)
            '    tmovie.pbackdrops = cbackdrops
            '    If tmovie.pbackdrops.backdrops.Count = 0 Then
            '        Debug.Print("no items in the pbackdrop")
            '    Else
            '        Debug.Print(tmovie.pbackdrops.backdrops.Count.ToString + ": is the count of backdrops")
            '    End If
            '    'if allow icon selection then set the picture boxes for the fanart items
            '    Dim tbdcount As Integer = tmovie.pbackdrops.backdrops.Count
            '    If Not tbdcount = 0 Then
            '        'count is not 0, process items
            '        Dim tbdcou As Integer = 0
            '        While tbdcou < tbdcount
            '            'if the file is not local download it
            '            Dim currentitem As New tmdbapiv2.backdrop 'mip.themoviedb.backdrop.Item
            '            currentitem = cbackdrops.backdrops.Item(tbdcou)
            '            Dim fanarturl As String = currentitem.Text
            '            Dim fanartpostcard As String = Strings.Left(currentitem.Text, currentitem.Text.Length - 4) + "_poster.jpg"
            '            Dim fanartfilename As String = Regex.Match(fanarturl, "backdrops/.{1,8}/(.*?.).jpg", RegexOptions.IgnoreCase).Groups(1).Value
            '            If Not File.Exists(rconf.tmdbfanartcachefolder + fanartfilename + ".jpg") Then
            '                'download it
            '                wgetfanart(fanarturl, rconf.tmdbfanartcachefolder, False, fanartfilename + ".jpg")
            '            End If

            '            If Not File.Exists(rconf.tmdbfanartcachefolder + fanartfilename + "_poster.jpg") Then
            '                'download it
            '                wgetfanart(fanartpostcard, rconf.tmdbfanartcachefolder, False, fanartfilename + "_poster.jpg")
            '            End If
            '            tbdcou += 1
            '        End While
            '    End If

            'End If

            ' ''Get Fanart automatically from meligrove
            ''If rconf.pcbGetFanart Then
            ''    Dim fanarturl As String = "http://www.meligrove.com/images/posters/movies/jpg/" + tmovie.getimdbid + ".jpg"
            ''    Debug.Print(fanarturl)
            ''    Try
            ''        'fanartpb1.ImageLocation = fanarturl
            ''        If FileExists(lblCurMovieFolder.Text + "\" + tbMovieNameE.Text + "-fanart.jpg") Then
            ''            'file already exists, do nothing yet
            ''            Debug.Print("file already exists")
            ''        Else
            ''            SavePhotoFromUrl(lblCurMovieFolder.Text + "\" + tbMovieNameE.Text + "-fanart.jpg", fanarturl)
            ''        End If
            ''        'savefanart(fanartpb1)
            ''        'fanartpb1.ImageLocation = lblCurMovieFolder.Text + "\" + tbMovieName.Text + "-fanart.jpg"
            ''        'fanartpb1.Enabled = True
            ''        'pbTick.Stop()
            ''        'pbar1.Visible = False
            ''        'lblPbar.Visible = False
            ''    Catch ex As Exception
            ''        Debug.Print("unable to find - " + fanarturl)
            ''        pbTick.Stop()
            ''        pbar1.Visible = False
            ''        lblPbar.Visible = False
            ''    End Try
            ''End If

            'MsgBox(tmovie.getmoviename + " ------- " + tmovie.getthumbxml)
            'btnRetryName.Enabled = True
            'tbnewname.Enabled = True
            'pbTick.Stop()
            If currentindex = totaltoprocess Then
                Exit While
            End If
            currentindex += 1
            bwPreCache.ReportProgress(currentindex, "Adding " + currentmovie.pmoviename + " to download list")
            Threading.Thread.Sleep(10)
        End While
        pclog.Flush()
        pclog.Close()
        pclogging = False
        'process download list 
        '        MsgBox("Precache completed (or manually canceled)" + vbNewLine + "Some items may be downloading in the background, if they are please wait until those windows have closed", MsgBoxStyle.OkOnly, "Completed")

    End Sub

    Private Sub bwPreCache_progresschanged(ByVal sender As Object, ByVal e As System.ComponentModel.ProgressChangedEventArgs) Handles bwPreCache.ProgressChanged
        prgThread.Value = e.ProgressPercentage
        lblPCWorking.Text = e.UserState.ToString
        'lstValues.Items.Add(e.UserState)
    End Sub

    Private Sub btnCancelPC_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnCancelPC.Click
        bwPreCache.CancelAsync()
        pclogging = False

    End Sub
    Private Sub Label12_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles lblFDMovieFile1.Click
        Shell("C:\windows\explorer  " + """" + currentmovie.getmoviepath + """", AppWinStyle.NormalFocus)
    End Sub
    Private Sub bshMovieReloadIMDBInformation_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bshMovieReloadIMDBInformation.Click 'kbtnReloadMovieFromIMDB.Click
        If MsgBox("Are you sure you want to re-download all information for this movie from the IMDB?", MsgBoxStyle.OkCancel, "Confirm reloading of movie information") = MsgBoxResult.Cancel Then
            Exit Sub
        End If

        Dim checkid As String = Me.tbIMDBID.Text
        If checkid = Nothing Then
            'MsgBox("can't save a movie without an imdb id number")
            Exit Sub
        End If
      
        'maincollection.rconf.imdbcachefolder + "/" + currentmovie.pimdbnumber + ".xml"
        If File.Exists(rconf.imdbcachefolder + currentmovie.pimdbnumber + ".xml") Then
            Try
                File.SetAttributes(rconf.imdbcachefolder + currentmovie.pimdbnumber + ".xml", FileAttributes.Normal)
            Catch ex As Exception

            End Try
            Try
                File.Delete(rconf.imdbcachefolder + currentmovie.pimdbnumber + ".xml")
            Catch ex As Exception

            End Try
        End If
        If Directory.Exists(rconf.tempfolder + currentmovie.pimdbnumber) Then
            Try
                '\fullcredits\fullcredits
                If Directory.Exists(rconf.tempfolder + currentmovie.pimdbnumber + "\fullcredits") Then
                    If File.Exists(rconf.tempfolder + currentmovie.pimdbnumber + "\fullcredits\fullcredits") Then
                        File.SetAttributes(rconf.tempfolder + currentmovie.pimdbnumber + "\fullcredits\fullcredits", FileAttributes.Normal)
                        File.Delete(rconf.tempfolder + currentmovie.pimdbnumber + "\fullcredits\fullcredits")
                    End If
                    Directory.Delete(rconf.tempfolder + currentmovie.pimdbnumber + "\fullcredits")
                End If
                If Directory.Exists(rconf.tempfolder + currentmovie.pimdbnumber + "\plotsummary") Then
                    If File.Exists(rconf.tempfolder + currentmovie.pimdbnumber + "\plotsummary\plotsummary") Then
                        File.SetAttributes(rconf.tempfolder + currentmovie.pimdbnumber + "\plotsummary\plotsummary", FileAttributes.Normal)
                        File.Delete(rconf.tempfolder + currentmovie.pimdbnumber + "\plotsummary\plotsummary")
                    End If
                    Directory.Delete(rconf.tempfolder + currentmovie.pimdbnumber + "\plotsummary")
                End If
                If File.Exists(rconf.tempfolder + currentmovie.pimdbnumber + "\index.html") Then
                    File.SetAttributes(rconf.tempfolder + currentmovie.pimdbnumber + "\index.html", FileAttributes.Normal)
                    File.Delete(rconf.tempfolder + currentmovie.pimdbnumber + "\index.html")
                End If
            Catch ex As Exception
                MsgBox(ex.ToString)
            End Try
            Try
                Directory.Delete(rconf.tempfolder + currentmovie.pimdbnumber)
            Catch ex As Exception
                MsgBox("Unable to remove imdb temporary data at: " & rconf.tempfolder & currentmovie.pimdbnumber & vbNewLine & vbNewLine & ex.ToString)
            End Try
        End If
        currentmovie.pdatafromnfo = False
        movies.Item(CInt(lbMyMovies.SelectedValue)) = currentmovie

        If rconf.pcbcreateImdbIDtxt And Not currentmovie.pfilemode Then
            If File.Exists(addfiletofolder(currentmovie.getmoviepath, "imdbid.txt")) Then
                Dim curidinfile As String = ""
                curidinfile = File.ReadAllText(addfiletofolder(currentmovie.getmoviepath, "imdbid.txt"))
                If Not curidinfile = currentmovie.pimdbnumber Then
                    File.Delete(addfiletofolder(currentmovie.getmoviepath, "imdbid.txt"))
                End If
            End If
            'If Not File.Exists(addfiletofolder(currentmovie.getmoviepath, "imdbid.txt")) Then
            '    writeStringToFile(currentmovie.pimdbnumber, addfiletofolder(currentmovie.getmoviepath, "imdbid.txt"))
            'End If
        End If
        processdropdownitems()
    End Sub
    Private Sub btnaddyourownfanart_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnaddyourownfanart.Click
        If rconf.popgoogleimagesearch Then System.Diagnostics.Process.Start("http://images.google.com/images?&q=" + currentmovie.pmoviename) '
        addyourownimageforfanart()
    End Sub
    Private Sub btnValidate_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnValidate.Click
        If currentmovie.pmoviename = "" Then
            'do nothing
            Exit Sub
        End If
        validatefoldercontents()

    End Sub
    'Private Sub llFDFileDetails_LinkClicked(ByVal sender As System.Object, ByVal e As System.Windows.Forms.LinkLabelLinkClickedEventArgs) Handles llFDFileDetails.LinkClicked
    '    If gbFDExtended.Visible Then
    '        gbFDExtended.Visible = False
    '        llFDFileDetails.Text = "Show File Details"
    '    Else
    '        gbFDExtended.Visible = True
    '        llFDFileDetails.Text = "Hide File Details"
    '    End If
    'End Sub
    Private Sub lblFDTrailer_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles lblFDTrailer.Click
        System.Diagnostics.Process.Start("http://searchcgi.apple.com/cgi-bin/sp/nph-searchpre11.pl?q=" + currentmovie.pmoviename + "&output=xml_no_dtd&client=default_frontend&site=us_trailers_only&lr=lang_en&sort=&start=&access=p&&oe=utf-8")
        '"http://www.google.com/search?q=apple+movie+trailer+download+" + currentmovie.pmoviename)
    End Sub
    Private Sub rbMDwithIssues_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles rbMDwithIssues.Click
        If tblofmovies.Rows.Count = 0 Then
            'get folder data
            Exit Sub
            'readfolderdatafordropdown()
        End If
        autopilotrunning = True
        lbMyMovies.Visible = False
        lbMyMovies.Enabled = False
        lbMyMovies.DataSource = Nothing
        lbMyMovies.DataSource = tblofmovies.DefaultView
        lbMyMovies.ValueMember = "Index"
        lbMyMovies.DisplayMember = "Name"

        Dim dtIDA As New DataTable
        dtIDA.Columns.Add("Path", GetType(System.String))
        dtIDA.Columns.Add("Name")
        dtIDA.Columns.Add("Index")

        Dim coulistedmovies As Integer = 0
        While coulistedmovies < lbMyMovies.Items.Count
            Dim movhasissues As Boolean = False
            Dim whatissue As String = ""
            Dim tempmovie As New movie
            lbMyMovies.SelectedIndex = coulistedmovies
            tempmovie = CType(Me.movies(CInt(lbMyMovies.SelectedValue)), movie)
            Dim tmpath As String = tempmovie.getmoviepath + "\" + tempmovie.pmoviename + ".nfo"
            Dim nmov As New movieinfoplus.mip.mov.Mov
            Try
                nmov = nmov.getmov(tmpath)
                'nmov.printToString() 'debug.output
            Catch ex As Exception
                Try
                    nmov = nmov.getmov(addfiletofolder(tempmovie.getmoviepath, "movie.nfo"))
                Catch ex2 As Exception
                    movhasissues = True
                    whatissue += "[NFO]"
                End Try
                'MsgBox("No nfo could be parsed for: " + tempmovie.pmoviename)
                'nfo could not be loaded or failed, mark movie as movhasissues

            End Try
            If Not File.Exists(tempmovie.getmoviepath + "\folder.jpg") Then
                If Not tempmovie.pfilemode Then movhasissues = True
                If Not tempmovie.pfilemode Then whatissue += "[IMAGE]"
            End If
            If Not File.Exists(tempmovie.getmoviepath + "\" + tempmovie.pmoviename + "-fanart.jpg") Then
                If tempmovie.pfilemode Then
                    movhasissues = True
                    whatissue += "[Fanart]"
                Else
                    If Not File.Exists(addfiletofolder(tempmovie.getmoviepath, "fanart.jpg")) Then
                        If Not File.Exists(addfiletofolder(tempmovie.getmoviepath, "fanart.png")) Then
                            movhasissues = True
                            whatissue += "[Fanart]"
                        End If
                    End If
                End If


            End If
            If Not File.Exists(tempmovie.getmoviepath + "\" + tempmovie.pmoviename + ".tbn") Then
                If tempmovie.pfilemode Then
                    movhasissues = True
                    whatissue += "[TBN]"
                Else
                    If Not File.Exists(addfiletofolder(tempmovie.getmoviepath, "movie.tbn")) Then
                        movhasissues = True
                        whatissue += "[TBN]"
                    End If
                End If
            End If
            If movhasissues Then
                dtIDA.LoadDataRow(New Object() {tempmovie.getmoviepath, tempmovie.pmoviename + ": " + whatissue, lbMyMovies.SelectedValue}, True)
            End If
            coulistedmovies += 1
        End While

        'dtIDA.DefaultView.Sort = "Description"
        dtIDA.DefaultView.Sort = "Name"
        lbMyMovies.DataSource = dtIDA.DefaultView
        lbMyMovies.DisplayMember = "Name"
        lbMyMovies.ValueMember = "Index"
        lbMyMovies.Visible = True
        lbMyMovies.Enabled = True
        autopilotrunning = False
    End Sub
    Private Sub rbMDALL_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles rbMDAll.Click
        If tblofmovies.Rows.Count = 0 Then
            'get folder data
            Exit Sub
            'readfolderdatafordropdown()
        End If
        autopilotrunning = True
        'bwloadfolderdata()
        lbMyMovies.Visible = False
        lbMyMovies.Enabled = False
        lbMyMovies.DataSource = Nothing
        lbMyMovies.DataSource = tblofmovies.DefaultView
        lbMyMovies.ValueMember = "Index"
        lbMyMovies.DisplayMember = "Name"
        Dim dtIDA As New DataTable
        dtIDA.Columns.Add("Path", GetType(System.String))
        dtIDA.Columns.Add("Name")
        dtIDA.Columns.Add("Index")
        'dtIDA.Columns.Add("objMovie")

        lbMyMovies.Visible = True
        lbMyMovies.Enabled = True
        lbMyMovies.SelectedIndex = 0
        autopilotrunning = False
    End Sub
    Private Sub rbMDNoIcon_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles rbMDNoIcon.Click
        If tblofmovies.Rows.Count = 0 Then
            'get folder data
            Exit Sub
            'readfolderdatafordropdown()
        End If
        autopilotrunning = True
        'readfolderdatafordropdown()
        lbMyMovies.Visible = False
        lbMyMovies.Enabled = False
        lbMyMovies.DataSource = Nothing
        lbMyMovies.DataSource = tblofmovies.DefaultView
        lbMyMovies.ValueMember = "Index"
        lbMyMovies.DisplayMember = "Name"

        Dim dtIDA As New DataTable
        dtIDA.Columns.Add("Path", GetType(System.String))
        dtIDA.Columns.Add("Name")
        dtIDA.Columns.Add("Index")
        'dtIDA.Columns.Add("objMovie")

        Dim coulistedmovies As Integer = 0
        While coulistedmovies < lbMyMovies.Items.Count
            Dim movhasissues As Boolean = False
            Dim whatissue As String = ""
            Dim tempmovie As New movie
            lbMyMovies.SelectedIndex = coulistedmovies
            tempmovie = CType(Me.movies(CInt(lbMyMovies.SelectedValue)), movie)
            Dim tmpath As String = tempmovie.getmoviepath + "\" + tempmovie.pmoviename + ".nfo"
            Dim nmov As New movieinfoplus.mip.mov.Mov
            'Try
            '    nmov = nmov.getmov(tmpath)
            '    'nmov.printToString() 'debug.output
            'Catch ex As Exception
            '    'MsgBox("No nfo could be parsed for: " + tempmovie.pmoviename)
            '    'nfo could not be loaded or failed, mark movie as movhasissues
            '    movhasissues = True
            '    whatissue += "NFO-"
            'End Try
            If Not File.Exists(tempmovie.getmoviepath + "\folder.jpg") Then
                If Not tempmovie.pfilemode Then movhasissues = True
                'whatissue += "FolderIcon-"
            End If
            'If Not File.Exists(tempmovie.getmoviepath + "\" + tempmovie.pmoviename + "-fanart.jpg") Then
            '    movhasissues = True
            '    whatissue += "Fanart-"
            'End If
            'If Not File.Exists(tempmovie.getmoviepath + "\" + tempmovie.pmoviename + ".tbn") Then
            '    movhasissues = True
            '    whatissue += "No TBN-"
            'End If
            If movhasissues Then
                dtIDA.LoadDataRow(New Object() {tempmovie.getmoviepath, tempmovie.pmoviename, lbMyMovies.SelectedValue}, True)
            End If
            coulistedmovies += 1
        End While

        'dtIDA.DefaultView.Sort = "Description"
        dtIDA.DefaultView.Sort = "Name"
        lbMyMovies.DataSource = dtIDA.DefaultView
        lbMyMovies.DisplayMember = "Name"
        lbMyMovies.ValueMember = "Index"
        lbMyMovies.Visible = True
        lbMyMovies.Enabled = True
        autopilotrunning = False
    End Sub
    Private Sub rbMDNoTBN_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles rbMDNoTBN.Click
        If tblofmovies.Rows.Count = 0 Then
            'get folder data
            readfolderdatafordropdown()
        End If
        autopilotrunning = True
        'bwloadfolderdata()
        lbMyMovies.Visible = False
        lbMyMovies.Enabled = False
        lbMyMovies.DataSource = Nothing
        lbMyMovies.DataSource = tblofmovies.DefaultView
        lbMyMovies.ValueMember = "Index"
        lbMyMovies.DisplayMember = "Name"
        Dim dtIDA As New DataTable
        dtIDA.Columns.Add("Path", GetType(System.String))
        dtIDA.Columns.Add("Name")
        dtIDA.Columns.Add("Index")
        'dtIDA.Columns.Add("objMovie")

        Dim coulistedmovies As Integer = 0
        While coulistedmovies < lbMyMovies.Items.Count
            Dim movhasissues As Boolean = False
            Dim whatissue As String = ""
            Dim tempmovie As New movie
            lbMyMovies.SelectedIndex = coulistedmovies
            tempmovie = CType(Me.movies(CInt(lbMyMovies.SelectedValue)), movie)
            Dim tmpath As String = tempmovie.getmoviepath + "\" + tempmovie.pmoviename + ".nfo"
            Dim nmov As New movieinfoplus.mip.mov.Mov

            If Not File.Exists(tempmovie.getmoviepath + "\" + tempmovie.pmoviename + ".tbn") Then
                movhasissues = True
                'whatissue += "No TBN-"
            End If
            If movhasissues Then
                dtIDA.LoadDataRow(New Object() {tempmovie.getmoviepath, tempmovie.pmoviename, lbMyMovies.SelectedValue}, True)
            End If
            coulistedmovies += 1
        End While
        dtIDA.DefaultView.Sort = "Name"
        lbMyMovies.DataSource = dtIDA.DefaultView
        lbMyMovies.DisplayMember = "Name"
        lbMyMovies.ValueMember = "Index"
        lbMyMovies.Visible = True
        lbMyMovies.Enabled = True
        autopilotrunning = False
    End Sub
    Private Sub rbMDNoFanart_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles rbMDNoFanart.Click
        If tblofmovies.Rows.Count = 0 Then
            'get folder data
            Exit Sub
            'readfolderdatafordropdown()
        End If
        autopilotrunning = True
        lbMyMovies.Visible = False
        lbMyMovies.Enabled = False
        lbMyMovies.DataSource = Nothing
        lbMyMovies.DataSource = tblofmovies.DefaultView
        lbMyMovies.ValueMember = "Index"
        lbMyMovies.DisplayMember = "Name"
        Dim dtIDA As New DataTable
        dtIDA.Columns.Add("Path", GetType(System.String))
        dtIDA.Columns.Add("Name")
        dtIDA.Columns.Add("Index")
        Dim coulistedmovies As Integer = 0
        While coulistedmovies < lbMyMovies.Items.Count
            Dim movhasissues As Boolean = False
            Dim whatissue As String = ""
            Dim tempmovie As New movie
            lbMyMovies.SelectedIndex = coulistedmovies
            tempmovie = CType(Me.movies(CInt(lbMyMovies.SelectedValue)), movie)
            Dim tmpath As String = tempmovie.getmoviepath + "\" + tempmovie.pmoviename + ".nfo"
            If Not File.Exists(tempmovie.getmoviepath + "\" + tempmovie.pmoviename + "-fanart.jpg") Then
                If tempmovie.pfilemode Then
                    movhasissues = True
                Else
                    'check for fanart.jpg
                    If Not File.Exists(addfiletofolder(tempmovie.getmoviepath, "fanart.jpg")) Then
                        'check for fanart.png
                        If Not File.Exists(addfiletofolder(tempmovie.getmoviepath, "fanart.png")) Then
                            movhasissues = True
                        End If
                    End If
                End If
            End If
            If movhasissues Then
                dtIDA.LoadDataRow(New Object() {tempmovie.getmoviepath, tempmovie.pmoviename, lbMyMovies.SelectedValue}, True)
            End If
            coulistedmovies += 1
        End While
        dtIDA.DefaultView.Sort = "Name"
        lbMyMovies.DataSource = dtIDA.DefaultView
        lbMyMovies.DisplayMember = "Name"
        lbMyMovies.ValueMember = "Index"
        lbMyMovies.Visible = True
        lbMyMovies.Enabled = True
        autopilotrunning = False
    End Sub
    Private Sub rbMDNFOProblems_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles rbMDNFOProblems.Click
        If tblofmovies.Rows.Count = 0 Then
            'get folder data
            Exit Sub
            'readfolderdatafordropdown()
        End If
        autopilotrunning = True
        lbMyMovies.Visible = False
        lbMyMovies.Enabled = False
        lbMyMovies.DataSource = Nothing
        lbMyMovies.DataSource = tblofmovies.DefaultView
        lbMyMovies.ValueMember = "Index"
        lbMyMovies.DisplayMember = "Name"
        Dim dtIDA As New DataTable
        dtIDA.Columns.Add("Path", GetType(System.String))
        dtIDA.Columns.Add("Name")
        dtIDA.Columns.Add("Index")
        'dtIDA.Columns.Add("objMovie")

        Dim coulistedmovies As Integer = 0
        While coulistedmovies < lbMyMovies.Items.Count
            lblPbar.Text = "Working..."
            Me.Refresh()
            Dim movhasissues As Boolean = False
            Dim whatissue As String = ""
            Dim tempmovie As New movie
            lbMyMovies.SelectedIndex = coulistedmovies
            tempmovie = CType(Me.movies(CInt(lbMyMovies.SelectedValue)), movie)
            Dim tmpath As String = tempmovie.getmoviepath + "\" + tempmovie.pmoviename + ".nfo"
            Dim nmov As New movieinfoplus.mip.mov.Mov
            Try
                nmov = nmov.getmov(tmpath)
                'nmov.printToString() 'debug.output
            Catch ex As Exception
                Try
                    nmov = nmov.getmov(addfiletofolder(tempmovie.getmoviepath, "movie.nfo"))
                Catch ex2 As Exception
                    movhasissues = True
                End Try
                'MsgBox("No nfo could be parsed for: " + tempmovie.pmoviename)
                'nfo could not be loaded or failed, mark movie as movhasissues

            End Try
            If movhasissues Then
                dtIDA.LoadDataRow(New Object() {tempmovie.getmoviepath, tempmovie.pmoviename, lbMyMovies.SelectedValue}, True)
            End If
            coulistedmovies += 1
        End While

        'dtIDA.DefaultView.Sort = "Description"
        dtIDA.DefaultView.Sort = "Name"
        lbMyMovies.DataSource = dtIDA.DefaultView
        lbMyMovies.DisplayMember = "Name"
        lbMyMovies.ValueMember = "Index"
        lbMyMovies.Visible = True
        lbMyMovies.Enabled = True
        autopilotrunning = False

    End Sub
    Private Sub lbMyMovies_MouseClicked(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles lbMyMovies.MouseClick 'or lbmyMovies.MouseClick
        Debug.Print("lbMyMovies mouse clicked")
        processdropdownitems()
    End Sub
    Private Sub lbMyMovies_EnterPressed(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles lbMyMovies.KeyPress 'or lbmyMovies.MouseClick
        Debug.Print("lbMyMovies key pressed")
        processdropdownitems()
    End Sub
    'Private Sub lbMyMovies_SelectedIndexChanged_1(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles lbMyMovies.SelectedIndexChanged
    '    If firstrun Then
    '        firstrun = False
    '        Try
    '            ' lbMyMovies.SelectedIndex = 0
    '            'processdropdownitems()
    '        Catch ex As Exception
    '            Debug.Print(ex.ToString)
    '        End Try
    '        Exit Sub
    '    End If
    '    'Debug.Print("index changed")
    '    If Not autopilotrunning Then processdropdownitems()
    'End Sub

    Private Sub pbCurIconUsed2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbCurIconUsed2.Click
        If moviemode = "file" Then Exit Sub
        'open up image in new borderless form, full sized
        dlgCurrentIconUsed2.pbCurrentIconUsed2.Image = Nothing
        dlgCurrentIconUsed2.pbCurrentIconUsed2.ImageLocation = Nothing
        Dim curloc As String = ""
        curloc = currentmovie.getmoviepath + "\folder.jpg" 'pbCurIconUsed2.ImageLocation
        If Not File.Exists(curloc) Then Exit Sub
        dlgCurrentIconUsed2.pbCurrentIconUsed2.ImageLocation = curloc
        dlgCurrentIconUsed2.pbCurrentIconUsed2.Load()
        dlgCurrentIconUsed2.Show()
    End Sub
    Private Sub pbCurTBNUsed2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbCurTBNUsed2.Click
        'open up image in new borderless form, full sized
        dlgCurrentIconUsed2.pbCurrentIconUsed2.Image = Nothing
        dlgCurrentIconUsed2.pbCurrentIconUsed2.ImageLocation = Nothing
        Dim curloc As String = ""
        If moviemode = "file" Then
            curloc = currentmovie.getmoviepath + "\" + stripstackforfilemode(removeextension(currentmovie.preservedmoviename)) + ".tbn"
        Else
            curloc = currentmovie.getmoviepath + "\" + currentmovie.pmoviename + ".tbn" 'pbCurIconUsed2.ImageLocation
            If Not File.Exists(curloc) Then curloc = addfiletofolder(currentmovie.getmoviepath, "movie.tbn")
        End If
        If Not File.Exists(curloc) Then Exit Sub
        dlgCurrentIconUsed2.pbCurrentIconUsed2.ImageLocation = curloc
        dlgCurrentIconUsed2.pbCurrentIconUsed2.Load()
        dlgCurrentIconUsed2.Show()
    End Sub
    Private Sub pbFDFanart_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbFDFanart.Click
        Debug.Print("clicked pbFDFanart")
    End Sub
    Private Sub tsbMoviesOpenImdbLink_LinkClicked(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsbMoviesOpenImdbLink.Click
        If currentmovie Is Nothing Then Exit Sub
        System.Diagnostics.Process.Start("http://www.imdb.com/title/" + currentmovie.pimdbnumber + "/")
    End Sub
    'Private Sub tsbMoviesOpenImdbLink_Hover(ByVal sender As Object, ByVal e As System.EventArgs) Handles tsbMoviesOpenImdbLink.MouseHover
    '    'display tooltip
    '    Dim toolTip1 As ToolTip = New ToolTip(Me.components)
    '    'Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(selectedicon.AccessibleName)
    '    toolTip1.SetToolTip(llIMDBID, "Open IMDB Page for this Movie")
    '    toolTip1.Active = True
    'End Sub
    Private Sub kbtnMoviesChangeIMDBid_Hover(ByVal sender As Object, ByVal e As System.EventArgs) Handles kbtnMoviesChangeIMDBid.MouseHover
        'display tooltip
        Dim toolTip1 As ToolTip = New ToolTip(Me.components)
        'Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(selectedicon.AccessibleName)
        toolTip1.SetToolTip(kbtnMoviesChangeIMDBid, "Change the IMDB ID for this Movie" + vbNewLine + "Enter the new IMDB ID and click this button to change the movie data.") 'Save New IMDB ID and Reload the IMDB datafor this Movie")
        toolTip1.Active = True

    End Sub
    Private Sub llOpenTVDBPage_LinkClicked(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsbShowsOpenTVDBPage.Click 'LinkClicked
        If gvcurrenttvshow.Id Is Nothing Then Exit Sub
        System.Diagnostics.Process.Start("http://thetvdb.com/?tab=series&id=" + gvcurrenttvshow.Id)

    End Sub
    Private Sub tsbMoviesOpenCurMovieFolder_LinkClicked(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsbMoviesOpenCurMovieFolder.Click
        Try
            Dim strtestcurrentmovie As String = currentmovie.getmoviepath
        Catch ex As Exception
            'Try
            '    Dim strtestcurrentepisode As String = gvcurrenttvepisode.episodefilepath
            '    If gvcurrenttvepisode.episodefilepath = Nothing Then
            '        Exit Sub
            '    Else
            '        Shell("C:\windows\explorer  " + """" + getparentdirectory(gvcurrenttvepisode.episodefilepath) + """", AppWinStyle.NormalFocus)
            '        Exit Sub
            '    End If
            'Catch ex2 As Exception
            '    Exit Sub
            'End Try
        End Try


        If currentmovie.getmoviepath = Nothing Then
            Exit Sub
        Else
            Shell("C:\windows\explorer  " + """" + currentmovie.getmoviepath + """", AppWinStyle.NormalFocus)
        End If
        Exit Sub
        'Shell("C:\windows\explorer  " + """" + currentmovie.getmoviepath + """", AppWinStyle.NormalFocus)
    End Sub
    Private Function getparentdirectory(ByRef filenameandpath As String) As String
        Dim fnPeices1() As String = filenameandpath.ToString.Split(CChar("\"))
        Dim parentdirname As String = "" '= fnPeices1(fnPeices1.Length - 1)
        Dim totnum As Integer = fnPeices1.Length - 1
        Dim curcount As Integer = 0
        While curcount < totnum
            parentdirname += fnPeices1(curcount)
            parentdirname += "\"
            curcount += 1
        End While
        Return parentdirname
    End Function
    Private Function getartistdirectory(ByRef filenameandpath As String) As String
        Dim fnPeices1() As String = filenameandpath.ToString.Split(CChar("\"))
        Dim parentdirname As String = "" '= fnPeices1(fnPeices1.Length - 1)
        Dim totnum As Integer = fnPeices1.Length - 2
        Dim curcount As Integer = 0
        While curcount < totnum
            parentdirname += fnPeices1(curcount)
            parentdirname += "\"
            curcount += 1
        End While
        Return parentdirname
    End Function

    'Private Sub clbPaths_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles clbPaths.SizeChanged
    '    'clear rconf and set it to the data
    '    rconf.pclbPaths.Clear()
    '    For Each item In clbPaths.Items
    '        rconf.pclbPaths.Add(item)
    '    Next
    'End Sub

    Private Sub pbTVPoster_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbTVPoster.Click
        dlgCurrentIconUsed2.pbCurrentIconUsed2.ImageLocation = pbTVPoster.ImageLocation 'currentmovie.getmoviepath + "\folder.jpg" 'pbCurIconUsed2.ImageLocation
        dlgCurrentIconUsed2.pbCurrentIconUsed2.Load()
        dlgCurrentIconUsed2.Show()
    End Sub
    Private Sub cbAllowIconSelection_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbAllowIconSelection.Click
        Dim tfanstring As String = fanartpb1.ImageLocation
        resetanddisableimages()
        fanartpb1.ImageLocation = tfanstring
        If Not tfanstring = "" Then
            Try
                fanartpb1.Load()
            Catch ex As Exception
                Debug.Print(ex.ToString)
            End Try
        End If

        'If cmmode = "movie" Then tpFanart.Text = "Backgrounds"
        'If cmmode = "movie" Then tpPosters.Text = "Posters"
        'If cmmode = "movie" Then tpmipf.Text = "Wide Images / 3D Boxes"

        'rconf.pallowiconselection = cbAllowIconSection.checked
    End Sub

    Private Sub krpCMMovie_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles krpCMMovie.Click
        If Not cmmode = "movie" Then
            cmmode = "movie"
            resetanddisableimages()
            setMode()
            kscLeftNavMain.Panel2Collapsed = True

            'kgMoviesNavLeft.Visible = True
            'kgTVNavLeft.Visible = False
            'setupRootTabs()
        End If

    End Sub
    Private Sub krbCMMusic_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles krbCMMusic.Click
        If Not cmmode = "music" Then
            cmmode = "music"
            'resetanddisableimages()
            setMode()
            'kscLeftNavMain.Panel2Collapsed = True
            kscLeftNavMain.Panel1Collapsed = True
            kscLeftNavBarSC2.Panel2Collapsed = True
            kscLeftNavBarSC2.Panel1Collapsed = False
            'kgMoviesNavLeft.Visible = True
            'kgTVNavLeft.Visible = False
            'setupRootTabs()
        End If

    End Sub
    Private Sub krbCMTV_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles krbCMTV.Click
        If Not cmmode = "tv" Then
            cmmode = "tv"
            resetanddisableimages()
            setMode()
            kscLeftNavMain.Panel1Collapsed = True
            kscLeftNavBarSC2.Panel1Collapsed = True
            kscLeftNavBarSC2.Panel2Collapsed = False
            'kgMoviesNavLeft.Visible = False
            'kgTVNavLeft.Visible = True
            'setupRootTabs()
        End If
    End Sub

    Private Sub setMode()

        Select Case cmmode
            Case "tv"
                curtvshowiconsettinglbl.Visible = True
                tpcm.Text = ""
                tpcm.Enabled = False
                tpMusic.Text = ""
                tpMusic.Enabled = False

                tpTallImages.Enabled = False
                tpTallImages.Text = ""

                tptv.Enabled = True
                tptv.Text = "Shows"

                'kgTvButtons.Visible = True
                'kgMovieButtons.Visible = False
                tpIMPPosters.Text = "TV Show Posters"
                tpTMDBPosters.Text = "Season Specific Posters"
                tpIMPPosters.Enabled = False
                tpFanart.Enabled = True
                tpFanart.Text = "Backgrounds"
                tpTMDBPosters.Enabled = False
                tpmmn.Enabled = False
                tpmmn.Text = ""

                tpmipf.Enabled = False
                tpmipf.Text = ""

                tpPosters.Enabled = False
                tpPosters.Text = "TV Posters and Wide Icons"
                tpTVWideIcons.Text = "TV Wide Icons"
                tpTVWideIcons.Enabled = False
                tpcm.Text = ""
                'kbtnTVReadFolder.Visible = True
                'kbtnTVUpdateShows.Visible = True
                'btnAutoPilot.Visible = False
                kgTVNavLeft.Visible = True
                kgMoviesNavLeft.Visible = False
                kscBottom2PartTVorMovie.Panel1Collapsed = False
                kscBottom2PartTVorMovie.Panel2Collapsed = True
                kscRightBottomPart.Panel2Collapsed = True
                kscLeftBottomPart.Panel2Collapsed = True
                tcMain.SelectTab("tptv")
                'TabControl2.TabPages. = False
                'TabControl2.Refresh()

            Case "movie"
                curtvshowiconsettinglbl.Visible = False
                tptv.Text = ""
                tptv.Enabled = False
                tpMusic.Text = ""
                tpMusic.Enabled = False
                tpPosters.Enabled = False
                tpPosters.Text = ""
                tpcm.Enabled = True
                tpcm.Text = "Movie"
                'kgTvButtons.Visible = False
                'kgMovieButtons.Visible = True
                kgMoviesNavLeft.Visible = True
                kgTVNavLeft.Visible = False

                tpIMPPosters.Enabled = False
                tpIMPPosters.Text = "" '"Normal Sized Posters - from IMPawards"

                tpTMDBPosters.Enabled = False
                tpTMDBPosters.Text = "" '"High Resolution Posters - from TMDB Posters"

                tpFanart.Enabled = True
                tpFanart.Text = "Backgrounds"

                tpmmn.Enabled = True
                tpmmn.Text = "Rename Movie"

                tpmipf.Enabled = True
                tpmipf.Text = "Wide Images / 3D Boxes"

                tpTallImages.Enabled = True
                tpTallImages.Text = "Posters"

                tpTVWideIcons.Enabled = False
                tpTVWideIcons.Text = ""
                ' btnReadFolder.Visible = True
                'btnPrecache.Visible = True
                'btnAutoPilot.Visible = True
                'kbtnTVReadFolder.Visible = False
                'kbtnTVUpdateShows.Visible = False

                ' kscRightBottomPart.Panel2Collapsed = True
                'TabControl2.TabPages.Insert(5, myRootTabs(6))
                ' TabControl2.TabPages.Remove(TabControl2.TabPages("tptv"))
                kscBottom2PartTVorMovie.Panel2Collapsed = False
                kscBottom2PartTVorMovie.Panel1Collapsed = True
                kscRightBottomPart.Panel2Collapsed = True
                kscLeftBottomPart.Panel2Collapsed = False
                tcMain.SelectTab("tpcm")
                'TabControl2.Refresh()
            Case "music"
                curtvshowiconsettinglbl.Visible = False
                tpmmn.Enabled = False
                tpmmn.Text = ""
                tpmipf.Enabled = False
                tpmipf.Text = ""
                tptv.Enabled = False
                tptv.Text = ""
                tpcm.Enabled = False
                tpcm.Text = ""
                tpFanart.Enabled = True
                tpFanart.Text = "Artist Backgrounds"
                tpTallImages.Enabled = True
                tpTallImages.Text = "Album Art"

                tpMusic.Text = "Tunes"
                tpMusic.Enabled = True
                tcMain.SelectTab("tpMusic")
                'do nothing yet
                cmmode = "music"
                kscRightBottomPart.Panel2Collapsed = True
                kscLeftBottomPart.Panel2Collapsed = True
                'kgTvButtons.Visible = False
                'kgMovieButtons.Visible = False
            Case "initial"
                tcRootBackup.TabPages.Insert(tcRootBackup.TabPages.Count, tcMain.TabPages("tptv"))
                'tcRootBackup.TabPages.Insert(tcRootBackup.TabPages.Count, tcMain.TabPages("tpmn"))
                'tcRootBackup.TabPages.Insert(tcRootBackup.TabPages.Count, tcMain.TabPages("tpmipf"))
                'tcRootBackup.TabPages.Insert(tcRootBackup.TabPages.Count, tcMain.TabPages("tpsettings"))
                'tcRootBackup.TabPages.Insert(tcRootBackup.TabPages.Count, tcMain.TabPages("tpfolders"))
                cmmode = "movie"
            Case Else
                'do nothing
        End Select

    End Sub

#Region "music"
    'Supported extensions
    '2 digit
    '.wv

    '3 digit 
    '.aif, .wav, .mp2, .mp3, .aac, .m4a, .m4b, .m4p, .m4v, .m4r, .3gp, .mp4, .m4a, .amr, .ape, .ram, .shn, .mpc, .mp+, .mpp, .spx, .ogg, .oga, .wma

    '4 digit
    '.aiff, .aifc, .flac
    Private Function fcdn_catagory_tostring(ByVal number As Integer) As String
        'returns the catagory for freecovers dot net (fcdn) type (t)
        Select Case number
            Case 0
                Return "/Blu-Ray%20Movie"
            Case 1
                Return "/DVD%20Movie"
            Case 2
                Return "/HD-DVD%20Movie"
            Case 3
                Return "/GameCube"
            Case 4
                Return "/Music%20CD"
            Case 5
                Return "/Music%20DVD"
            Case 6
                Return "/Other"
            Case 7
                Return "/Other%20Console"
            Case 8
                Return "/PC%20Apps"
            Case 9
                Return "/PC%20Games"
            Case 10
                Return "/Playstation"
            Case 11
                Return "/Playstation%202"
            Case 12
                Return "/Playstation%203"
            Case 13
                Return "/PSP"
            Case 14
                Return "/Soundtrack"
            Case 15
                Return "/TV%20Series"
            Case 16
                Return "/VCD"
            Case 17
                Return "/VHS"
            Case 18
                Return "/Wii"
            Case 19
                Return "/Xbox"
            Case 20
                Return "/Xbox%20360"
            Case Else
                Return ""
        End Select
    End Function
    Private Function getfcdn_xml(ByVal searchstring As String, ByVal catagory As Integer) As String
        'returns the xml file name and location for fcdt and the catagory
        Dim xmlname As String = cleanname(searchstring) + ".xml"
        Dim xmlpath As String = rconf.xmlfolder_fcdn + fcdn_catagory_tostring(catagory)
        Dim fullpathtoxml As String = addfiletofolder(xmlpath, xmlname)
        If Not Directory.Exists(xmlpath) Then Directory.CreateDirectory(xmlpath)
        If Not File.Exists(fullpathtoxml) Then
            'create the url
            Dim url As String = ""
            url = "http://www.freecovers.net/api/search/" + "'" + searchstring + "'" + fcdn_catagory_tostring(catagory)
            'download the xml
            xmlDownload_fcdn(url, fullpathtoxml)
        End If
        If File.Exists(fullpathtoxml) Then
            'return the xml file
            Return fullpathtoxml
        End If
        Return ""
    End Function
    Private Function getfcdn_albumart_xml(ByVal searchstring As String, ByVal catagory As Integer) As String
        'returns the xml file name and location for fcdt and the catagory
        Dim xmlname As String = cleanname(searchstring) + ".albart.xml"
        Dim xmlpath As String = rconf.xmlfolder_fcdn + fcdn_catagory_tostring(catagory)
        Dim fullpathtoxml As String = addfiletofolder(xmlpath, xmlname)
        If Not Directory.Exists(xmlpath) Then Directory.CreateDirectory(xmlpath)
        If Not File.Exists(fullpathtoxml) Then
            'create the url
            Dim url As String = ""
            url = "http://www.freecovers.net/api/search/" + "'" + searchstring + "'" + fcdn_catagory_tostring(catagory)
            'download the xml
            xmlDownload_fcdn(url, fullpathtoxml)
        End If
        If File.Exists(fullpathtoxml) Then
            'return the xml file
            Return fullpathtoxml
        End If
        Return ""
    End Function
    Private Function checkmusicextension(ByRef filename As String) As Boolean
        'check to see if the fileextension is valid
        If filename.Length <= 3 Then Return False 'this would be the shortest possible singlechar(x) where x.wv is valid
        Dim v2digit As String = ""
        v2digit = Strings.Right(filename, 3)
        Dim v3digit As String = ""
        If filename.Length >= 5 Then v3digit = Strings.Right(filename, 4)
        Dim v4digit As String = ""
        If filename.Length >= 6 Then v4digit = Strings.Right(filename, 5)

        If v2digit = ".wv" Then
            Return True
        End If
        If v3digit = ".aif" Or v3digit = ".wav" Or v3digit = ".mp2" Or v3digit = ".mp3" Or v3digit = ".aac" Or v3digit = ".m4a" Or v3digit = ".m4b" Or v3digit = ".m4p" Or v3digit = ".m4v" Or v3digit = ".m4r" Or v3digit = ".3gp" Or v3digit = ".mp4" Or v3digit = ".m4a" Or v3digit = ".amr" Or v3digit = ".ape" Or v3digit = ".ram" Or v3digit = ".shn" Or v3digit = ".wv" Or v3digit = ".mpc" Or v3digit = ".mp+" Or v3digit = ".mpp" Or v3digit = ".spx" Or v3digit = ".ogg" Or v3digit = ".oga" Or v3digit = ".wma" Then
            Return True
        End If
        If v4digit = ".aiff" Or v4digit = ".aifc" Or v4digit = ".flac" Then
            Return True
        End If

        Return False
    End Function
    Private Function getmusicextension(ByRef filename As String) As String
        'check to see if the fileextension is valid
        If filename.Length <= 3 Then Return "fail" 'this would be the shortest possible singlechar(x) where x.wv is valid
        Dim v2digit As String = ""
        v2digit = Strings.Right(filename, 3)
        Dim v3digit As String = ""
        If filename.Length >= 5 Then v3digit = Strings.Right(filename, 4)
        Dim v4digit As String = ""
        If filename.Length >= 6 Then v4digit = Strings.Right(filename, 5)

        If v2digit = ".wv" Then
            Return v2digit
        End If
        If v3digit = ".aif" Or v3digit = ".wav" Or v3digit = ".mp2" Or v3digit = ".mp3" Or v3digit = ".aac" Or v3digit = ".m4a" Or v3digit = ".m4b" Or v3digit = ".m4p" Or v3digit = ".m4v" Or v3digit = ".m4r" Or v3digit = ".3gp" Or v3digit = ".mp4" Or v3digit = ".m4a" Or v3digit = ".amr" Or v3digit = ".ape" Or v3digit = ".ram" Or v3digit = ".shn" Or v3digit = ".wv" Or v3digit = ".mpc" Or v3digit = ".mp+" Or v3digit = ".mpp" Or v3digit = ".spx" Or v3digit = ".ogg" Or v3digit = ".oga" Or v3digit = ".wma" Then
            Return v3digit
        End If
        If v4digit = ".aiff" Or v4digit = ".aifc" Or v4digit = ".flac" Then
            Return v4digit
        End If

        Return "fail"
    End Function

    Private Sub loadmusic_prepfor_gui()

        Exit Sub
        'this is not used any more

        'need a few arrays and a way to filter data
        'artistname should have no dups
        'albums should have no dups
        'tracks can have dups
        'put each artist into an arraylist and then, pass that through a hashtable to filter dups
        'put each album into an arraylist and then, pass that througha  hashtable to filter dups
        musiclist.Clear()

        Dim tempartistlist As New Hashtable
        Dim tempalbumlist As New Hashtable
        Dim tempmusiclist As New List(Of Music)
        Dim tempartistcleanlist As New ArrayList

        dmusic_count = 0
        For Each musicfolder As String In rconf.pclb_checked_music_folders
            EnumerateMusicDirectory(musicfolder)
        Next

        'for each sub folder, get all files it in, if they end in .mp3 .wav they are music, add those to the main music array
        Dim musicfilelist As New ArrayList

        'find each file
        For Each musicdir As String In musiclist
            Dim musicfiles() As String = Directory.GetFiles(musicdir)
            For Each fileitem In musicfiles
                If checkmusicextension(fileitem) Then
                    musicfilelist.Add(fileitem)
                End If
            Next
        Next

        Dim debugcou As Integer = 0
        klNumMusic.Text = musicfilelist.Count.ToString
        'read up each file and get it's id3 data and store those into the mainarray of music objects, add add the artist oject into the hashtable
        For Each musicfile As String In musicfilelist
            Dim curmusicitem As New Music
            curmusicitem.Filename = musicfile
            'use mediainfo to get data about the file
            Dim curmediainfo As New MediaInfo
            curmediainfo.getmusicdata(curmusicitem)
            tempmusiclist.Add(curmusicitem)
            Dim tempartistobj As New musicartist
            Dim tempablum As New musicalbums
            tempablum.albumname = curmusicitem.Album
            tempartistobj.artistname = curmusicitem.Artist
            tempartistobj.albums.Add(tempablum)
            tempartistobj.path = getartistdirectory(curmusicitem.Filename)
            Try
                tempartistlist.Add(curmusicitem.Artist, tempartistobj)
            Catch ex As Exception
                'used to filter out duplicate artists
            End Try
            Debug.Print(debugcou.ToString + " ---item---")
            debugcou += 1
        Next

        'we now have a hashtable that contains all of our artists
        'loop through each artist and mod the artist object
        Dim curtempartistcou As Integer = 0
        'loop through each music object, add in the albums to the artists
        For Each musicobj As Music In tempmusiclist
            'get artist from hastable
            Dim tempartist As musicartist = CType(tempartistlist.Item(musicobj.Artist), musicartist)
            'If musicobj.Artist = tempartist.artistname Then
            'this music object is for this artist

            'create the default album if there isn't any albums
            If tempartist.albums.Count = 0 Then
                'create a new album since we don't have one 
                Dim tempalbum As New musicalbums
                tempalbum.albumname = "Unknown"
                tempartist.albums.Add(tempalbum)
            End If

            'see if the ablum already exists
            Dim havealbuminartistalready As Boolean = False
            For Each artistalbum As musicalbums In tempartist.albums
                If artistalbum.albumname = musicobj.Album Then havealbuminartistalready = True
            Next
            If Not havealbuminartistalready Then
                'if it's not there, add it
                If Not musicobj.Album = "" Then
                    'create the album based on it's name
                    Dim tempalbum As New musicalbums
                    tempalbum.albumname = musicobj.Album
                    tempartist.albums.Add(tempalbum)

                End If
            End If

            'now add the music to the album
            For Each artistalbum As musicalbums In tempartist.albums
                If artistalbum.albumname = musicobj.Album Then
                    artistalbum.path = getparentdirectory(musicobj.Filename)
                    artistalbum.music.Add(musicobj)
                End If
            Next
        Next

        mymusiccollection = tempartistlist
        Dim curcountallart As Integer = 0





        ' adf()

        'While curcountallart < tempartistlist.Count
        '    mymusicbyartist.Add(tempartistlist.Values ') ', curcountallart)
        '    curcountallart += 1
        'End While

        Debug.Print("hi")

        'asdf()
    End Sub


    Private Sub lbmusicArtist_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles lbmusicArtist.Click
        If lbmusicArtist.SelectedValue Is Nothing Then Exit Sub
        pbMusic_CurSongImage.Image = Nothing
        pbMusic_CurSongImage.ImageLocation = Nothing
        kgMusicSongData.Visible = False
        kgMusic_SongImage.Visible = False
        lbmusicSongs.DataSource = Nothing
        kgMusicMI.Visible = False
        currentalbum = Nothing
        currentsong = Nothing
        pbCurAlbumArt.Image = Nothing
        pbCurAlbumArt.ImageLocation = Nothing
        'pbCurAlbumArt.Visible = False
        kgArtistArtImage.Visible = False

        Dim tempartist As musicartist = CType(mymusiccollection.Item(lbmusicArtist.SelectedValue), musicartist)
        currentartist = tempartist
        Dim dtcurrentalbum As New DataTable
        dtcurrentalbum.Columns.Add("Album", GetType(System.String))
        dtcurrentalbum.Columns.Add("Albumobj", GetType(musicalbums))
        'dtcurrentartist.Columns.Add("Index")
        dtcurrentalbum.Clear()
        For Each curalbum As musicalbums In tempartist.albums
            If Not curalbum.albumname = "" Then dtcurrentalbum.LoadDataRow(New Object() {curalbum.albumname, curalbum}, True)
        Next
        dtcurrentalbum.DefaultView.Sort = "Album"
        lbmusicAlbums.ValueMember = "Albumobj"
        lbmusicAlbums.DisplayMember = "Album"
        lbmusicAlbums.DataSource = dtcurrentalbum.DefaultView
        lbmusicAlbums.SelectedIndex = -1

        'release current fanart
        pbMusicCurFanart.Image = Nothing
        pbMusicCurFanart.ImageLocation = Nothing

        'display artist level fanart
        Dim curfanart As String = ""
        If File.Exists(addfiletofolder(tempartist.path, "fanart.jpg")) Then
            curfanart = addfiletofolder(tempartist.path, "fanart.jpg")
        End If
        If File.Exists(addfiletofolder(tempartist.path, "fanart.png")) Then
            curfanart = addfiletofolder(tempartist.path, "fanart.png")
        End If
        If curfanart = "" Then
            curfanart = findsimmusicfanart(tempartist.artistname)
            If File.Exists(curfanart) Then
                File.Copy(curfanart, addfiletofolder(tempartist.path, "fanart.jpg"))
                curfanart = addfiletofolder(tempartist.path, "fanart.jpg")
            End If
        End If
        If Not curfanart = "" Then
            Try
                pbMusicCurFanart.ImageLocation = curfanart
                pbMusicCurFanart.Load()
            Catch ex As Exception
                Debug.Print(ex.ToString)
            End Try

        End If
        resetanddisableimages()
        'get music fanart
        Dim htdb As New htbackdrops
        Dim dlitems As New ArrayList 'list of htbackdrops
        Dim curdlobjects As New ArrayList
        Dim displaylist As New ArrayList
        If rbem.Checked Then
            If rconf.pcbGetMusicFanartFromHTBackdrops Then
                htdb.getdownloadlist(dlitems, Strings.Replace(currentartist.artistname, "&", "%20"))
                'download 
                If Not dlitems.Count = 0 Then
                    For Each curdbitem As bditem In dlitems
                        Dim newdlo As New miplibfc.mip.dlobject
                        newdlo.URL = curdbitem.url
                        newdlo.misc = "HT Backdrops Item: " & currentartist.artistname
                        newdlo.Destination = curdbitem.destinationfolder
                        displaylist.Add(newdlo.Destination)
                        If Not File.Exists(newdlo.Destination) Then curdlobjects.Add(newdlo)
                    Next
                End If
                If Not curdlobjects.Count = 0 Then
                    'download the images
                    dlgDownloadingFile.downloadingmutliimages = True
                    dlgDownloadingFile.downloadlist = curdlobjects
                    dlgDownloadingFile.ShowDialog()

                End If
            End If
        End If
        If cbAllowIconSelection.Checked Then
            'put into gui
            If rconf.pcbGetMusicFanartFromHTBackdrops Then displaymusicfanart(dlitems, True)
        End If
    End Sub

    Private Sub lbmusicalbums_click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles lbmusicAlbums.Click

        If lbmusicArtist.SelectedValue Is Nothing Then Exit Sub
        If lbmusicAlbums.SelectedValue Is Nothing Then Exit Sub
        kgMusicMI.Visible = True
        pbMusic_CurSongImage.Image = Nothing
        pbMusic_CurSongImage.ImageLocation = Nothing
        currentsong = Nothing
        'pbMusic_CurSongImage.Visible = False
        kgMusicSongData.Visible = False
        kgMusic_SongImage.Visible = False
        currentsong = Nothing
        pbMusic_CurSongImage.Image = Nothing
        pbMusic_CurSongImage.ImageLocation = Nothing
        Dim tempartist As musicartist = CType(mymusiccollection.Item(lbmusicArtist.SelectedValue), musicartist)
        Dim dtcurrentalbums As New DataTable
        dtcurrentalbums.Columns.Add("Album", GetType(System.String))
        dtcurrentalbums.Columns.Add("Albumobj", GetType(Music))
        'dtcurrentartist.Columns.Add("Index")
        dtcurrentalbums.Clear()
        'For Each curalbum As musicalbums In tempartist.albums

        Dim curselectedalbum As musicalbums = CType(lbmusicAlbums.SelectedValue, musicalbums)
        currentalbum = curselectedalbum
        'If curalbum.albumname = curselectedalbum.albumname Then
        'Dim curmusicitem As Music
        For Each curmusicitem As Music In curselectedalbum.music
            'If Not curalbum.albumname = "" Then
            'End If
            Dim curtrack As String = curmusicitem.Tracknum
            If curtrack.Length = 1 Then curtrack = "0" & curtrack
            dtcurrentalbums.LoadDataRow(New Object() {"[" + curtrack + "] - " + curmusicitem.Title, curmusicitem}, True)
        Next
        'End If

        'Next
        dtcurrentalbums.DefaultView.Sort = "Album"
        lbmusicSongs.ValueMember = "Albumobj"
        lbmusicSongs.DisplayMember = "Album"
        lbmusicSongs.DataSource = dtcurrentalbums.DefaultView
        lbmusicSongs.SelectedIndex = -1

        pbCurAlbumArt.Image = Nothing
        pbCurAlbumArt.ImageLocation = Nothing
        Dim curalbumart As String = ""
        If File.Exists(addfiletofolder(curselectedalbum.path, "folder.jpg")) Then
            curalbumart = addfiletofolder(curselectedalbum.path, "folder.jpg")
        End If
        If Not curalbumart = "" Then
            pbCurAlbumArt.ImageLocation = curalbumart
            pbCurAlbumArt.Load()
            pbCurAlbumArt.Visible = True
            kgArtistArtImage.Visible = True
            Try
                Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(curalbumart)
                lblArtistArtImage.Text = "Album Image - " & objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(curalbumart)
                objImage.Dispose()
            Catch ex As Exception

            End Try
            
        End If
        displayAndLoadMIThumbs(addfiletofolder(currentalbum.path, "extras"), flpMusicMI)
        'get the media images
        If Not currentalbum.pdownloadlist Is Nothing Then currentalbum.pdownloadlist.Clear()
        'gvcurrenttvseasonpath = addfiletofolder(curtvshowpath, rconf.pseasonfoldername & curseasonas1or2digitid)
        'Dim vcurrenttvseasonsearchstr As String = lbTvShowPicker.Text & "+" & "Season%20" + curseasonas1or2digitid
        Dim searchnameArtist As String = cleanmusicnameforsearch(lbmusicArtist.Text)
        Dim searchnameAlbums As String = cleanmusicnameforsearch(lbmusicAlbums.Text)
        If cbAllowIconSelection.Checked And rbem.Checked Then
            getfcdn_music_front(searchnameArtist, False, , searchnameAlbums) 'vcurrenttvseasonsearchstr)
            getfcdn_music_back(searchnameArtist, False, , searchnameAlbums)
            getfcdn_music_cd1(searchnameArtist, False, , searchnameAlbums)
            getfcdn_music_cd2(searchnameArtist, False, , searchnameAlbums)
            getfcdn_music_cd3(searchnameArtist, False, , searchnameAlbums)
            getfcdn_music_cd4(searchnameArtist, False, , searchnameAlbums)
            getfcdn_music_insert(searchnameArtist, False, , searchnameAlbums)
            getfcdn_music_inlay(lbmusicArtist.Text, False, , searchnameAlbums)

            ''download items
            'If Not currentalbum.pdownloadlist.Count = Nothing And Not currentalbum.pdownloadlist.Count = 0 Then
            '    'dlgDownloadingFile.downloadertxtFileName.Text = url
            '    'dlgDownloadingFile.whereToSave = folder + tfanartfilename
            '    dlgDownloadingFile.downloadingmutliimages = True
            '    dlgDownloadingFile.downloadlist = currentalbum.pdownloadlist
            '    dlgDownloadingFile.ShowDialog()

            'End If
        End If


        'get the images
        If cbAllowIconSelection.Checked Then
            Dim xmlfilename As String = ""
            xmlfilename = getfcdn_albumart_xml(currentartist.artistname + " " + currentalbum.albumname, 4)
            If Not xmlfilename = "" Then
                'create the object and load the xml
                Dim curfcdn As New freecoversdotnet.Rsp
                curfcdn.parentdirname = rconf.basefolder
                curfcdn.readxml(xmlfilename, curfcdn)
                'parse the images and load them
                Dim imagelinks As New ArrayList ' = ""
                imagelinks = curfcdn.parseimages("front", 4)
                'download the images if we don't have them
                Dim curworkingdir As String = ""
                curworkingdir = rconf.cachefolder + "fcdn\4\" + cleanname(currentartist.artistname) + "\" + cleanname(currentalbum.albumname)
                If Not Directory.Exists(curworkingdir) Then Directory.CreateDirectory(curworkingdir)
                'dlgDownloadingFile.downloadlist = New ArrayList '.Clear()
                Dim curarray As New ArrayList
                Dim imagestoload As New ArrayList
                For Each imagename As String In imagelinks
                    Dim curimagefullpath As String = ""
                    curimagefullpath = addfiletofolder(curworkingdir, getfilefromurlpath_fcdn(imagename))
                    imagestoload.Add(curimagefullpath)
                    If Not File.Exists(curimagefullpath) Then
                        'add file to download list
                        Dim curdownload As New miplibfc.mip.dlobject
                        curdownload.URL = imagename
                        curdownload.Destination = curimagefullpath 'rconf.cachefolder + "fcdn\5\" + getfilefromurlpath_fcdn(imagename)
                        currentalbum.pdownloadlist.Add(curdownload)
                    End If
                Next
                'asdf()

                If Not currentalbum.pdownloadlist.Count = 0 Then
                    dlgDownloadingFile.downloadingmutliimages = True
                    dlgDownloadingFile.downloadlist = currentalbum.pdownloadlist
                    dlgDownloadingFile.ShowDialog()

                End If
                'show images
                resetanddisableimages()
                If Not imagestoload.Count = 0 Then
 
                    displaymovieposters(imagestoload)
                End If

            End If
            'display media images
            If cbAllowIconSelection.Checked Then
                showfcdn_music_front(searchnameArtist, False, , searchnameAlbums) 'vcurrenttvseasonsearchstr)
                showfcdn_music_Back(searchnameArtist, False, , searchnameAlbums)
                showfcdn_music_cd1(searchnameArtist, False, , searchnameAlbums)
                showfcdn_music_cd2(searchnameArtist, False, , searchnameAlbums)
                showfcdn_music_cd3(searchnameArtist, False, , searchnameAlbums)
                showfcdn_music_cd4(searchnameArtist, False, , searchnameAlbums)
                showfcdn_music_insert(searchnameArtist, False, , searchnameAlbums)
                showfcdn_music_inlay(searchnameArtist, False, , searchnameAlbums)
            End If
        End If
    End Sub

   
    Private Sub lbmusicSongs_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles lbmusicSongs.Click
        If lbmusicSongs.SelectedValue Is Nothing Then Exit Sub
        pbMusic_CurSongImage.Image = Nothing
        pbMusic_CurSongImage.ImageLocation = Nothing

        kgMusicSongData.Visible = True
        kgMusic_SongImage.Visible = True
        'load data from music object
        Dim curselectedsong As Music = CType(lbmusicSongs.SelectedValue, Music)

        'rescan the file
        Dim curmediainfo As New MediaInfo
        curmediainfo.getmusicdata(curselectedsong)

        'set current music va (currentsong) - public global var
        currentsong = curselectedsong
        Dim curext As String = getmusicextension(currentsong.Filename)

        'load music data into gui 
        lblMusic_SongTitle.Text = currentsong.Title

        'load image (mp3 only)

        If curext = ".mp3" Then getimagefromid3tag(currentsong.Filename, pbMusic_CurSongImage)

        'Dim imagefromext As String = Strings.Replace(getmusicextension(currentsong.Filename), ".", "") & ".png"
        'If imagefromext = "mp+.png" Then imagefromext = "mpplus.png"
        lblCurSongExtV.Text = Strings.Replace(curext, ".", "").ToUpper
        'lblMusicExtVD.Text = Strings.Replace(getmusicextension(currentsong.Filename), ".", "")
        'pbMusic_CurSongExtPic.Image = Nothing
        'pbMusic_CurSongExtPic.ImageLocation = Nothing
        'Try
        '    pbMusic_CurSongExtPic.ImageLocation = addfiletofolder(rconf.resourcefolder + "musiclabels", imagefromext)
        '    pbMusic_CurSongExtPic.Load()
        'Catch ex As Exception

        'End Try
        'pbMusic_CurSongExtPic

        'need to break this out in the next rev
        Dim songdatatemp As String = ""
        songdatatemp += "Filename: " & currentsong.Filename + vbNewLine
        songdatatemp += "Extension: " & getmusicextension(currentsong.Filename) + vbNewLine
        songdatatemp += "Artist: " & currentsong.Artist + vbNewLine
        'songdatatemp += "-------------------------------------------" + vbNewLine
        songdatatemp += "Album: " & currentsong.Album + vbNewLine
        'songdatatemp += "-------------------------------------------" + vbNewLine
        songdatatemp += "Bitrate: " & currentsong.Bitrate + vbNewLine
        'songdatatemp += "-------------------------------------------" + vbNewLine
        songdatatemp += "Comment: " & currentsong.Comment + vbNewLine
        'songdatatemp += "-------------------------------------------" + vbNewLine
        songdatatemp += "Duration: " & currentsong.Duration + vbNewLine
        'songdatatemp += "-------------------------------------------" + vbNewLine
        songdatatemp += "Encoder: " & currentsong.Encoder & vbNewLine
        'songdatatemp += "-------------------------------------------" + vbNewLine
        songdatatemp += "Genre: " & currentsong.genre & vbNewLine
        'songdatatemp += "-------------------------------------------" + vbNewLine
        songdatatemp += "Title: " & currentsong.Title & vbNewLine
        'songdatatemp += "-------------------------------------------" + vbNewLine
        songdatatemp += "Year: " & currentsong.Year & vbNewLine
        'songdatatemp += "-------------------------------------------" + vbNewLine
        rtbMusic_SongData.Text = songdatatemp

       
    End Sub

    Private Sub injectalbumdata(ByRef trackfilename As String, ByVal newartistname As String, ByVal newalbumname As String)
        Dim filext As String = getmusicextension(trackfilename)
        If Not filext = ".mp3" Then
            'MsgBox("Only able to modify .mp3 files")
            Exit Sub
        End If
        Dim curTagUltraID3 As New UltraID3
        Try
            curTagUltraID3.Read(trackfilename)
            Dim curaid3v1 As String = curTagUltraID3.ID3v1Tag.Album + " ---- " + curTagUltraID3.ID3v1Tag.Artist
            Dim curaid3v2 As String = curTagUltraID3.ID3v2Tag.Album + " ---- " + curTagUltraID3.ID3v2Tag.Artist
            'curTagUltraID3.ID3v1Tag.
            curTagUltraID3.ID3v2Tag.Album = newalbumname
            curTagUltraID3.ID3v1Tag.Album = newalbumname
            curTagUltraID3.ID3v1Tag.Artist = newartistname
            curTagUltraID3.ID3v2Tag.Artist = newartistname
            curTagUltraID3.Write()
        Catch ex As Exception
            Debug.Print(ex.ToString)
        End Try
    End Sub
    Private Sub injectartistname(ByRef trackfilename As String, ByVal newname As String)
        Dim filext As String = getmusicextension(trackfilename)
        If Not filext = ".mp3" Then
            MsgBox("Only able to modify .mp3 files")
            Exit Sub
        End If
        Dim curTagUltraID3 As New UltraID3
        Try
            curTagUltraID3.Read(trackfilename)
            Dim curaid3v1 As String = curTagUltraID3.ID3v1Tag.Artist
            Dim curaid3v2 As String = curTagUltraID3.ID3v2Tag.Artist

            curTagUltraID3.ID3v2Tag.Album = newname
            curTagUltraID3.ID3v1Tag.Album = newname
            curTagUltraID3.Write()
        Catch ex As Exception

        End Try
    End Sub
    Private Sub getimagefromid3tag(ByRef TrackFileName As String, ByRef image As Bitmap)
        Dim curTagUltraID3 As New UltraID3
        Try
            'Read the track file
            curTagUltraID3.Read(TrackFileName)
            If curTagUltraID3.ID3v2Tag.ExistsInFile Then

                Dim myArtworkCollection As ID3FrameCollection
                myArtworkCollection = curTagUltraID3.ID3v2Tag.Frames.GetFrames(MultipleInstanceID3v2FrameTypes.ID3v23Picture)
                If myArtworkCollection.Count > 0 Then
                    Dim ra As ID3v2PictureFrame = CType(myArtworkCollection(0), ID3v2PictureFrame)
                    Dim theimage As Bitmap = ra.Picture
                    image = theimage
                Else 'check for v22 image
                    myArtworkCollection = curTagUltraID3.ID3v2Tag.Frames.GetFrames(MultipleInstanceID3v2FrameTypes.ID3v22Picture)
                    If myArtworkCollection.Count > 0 Then
                        Dim ra As ID3v2PictureFrame = CType(myArtworkCollection(0), ID3v2PictureFrame)
                        Dim theimage As Bitmap = ra.Picture
                        image = theimage
                    End If
                End If
            End If

        Catch ex As Exception

        End Try
    End Sub

    Private Sub getimagefromid3tag(ByRef TrackFileName As String, ByRef whichpicturebox As PictureBox)
        'clear out pb first
        whichpicturebox.Image = Nothing
        whichpicturebox.ImageLocation = Nothing
        'get image from tag and put it into the pb
        Dim curTagUltraID3 As New UltraID3
        Try
            'Read the track file
            curTagUltraID3.Read(TrackFileName)
            If curTagUltraID3.ID3v2Tag.ExistsInFile Then

                Dim myArtworkCollection As ID3FrameCollection
                myArtworkCollection = curTagUltraID3.ID3v2Tag.Frames.GetFrames(MultipleInstanceID3v2FrameTypes.ID3v23Picture)
                If myArtworkCollection.Count > 0 Then
                    Dim ra As ID3v2PictureFrame = CType(myArtworkCollection(0), ID3v2PictureFrame)
                    Dim theimage As Bitmap = ra.Picture
                    whichpicturebox.Image = theimage
                Else 'check for v22 image
                    myArtworkCollection = curTagUltraID3.ID3v2Tag.Frames.GetFrames(MultipleInstanceID3v2FrameTypes.ID3v22Picture)
                    If myArtworkCollection.Count > 0 Then
                        Dim ra As ID3v2PictureFrame = CType(myArtworkCollection(0), ID3v2PictureFrame)
                        Dim theimage As Bitmap = ra.Picture
                        whichpicturebox.Image = theimage
                    End If
                End If
            End If

        Catch ex As Exception

        End Try
    End Sub

    Private Sub getimagefromid3tagSaveLocal(ByRef TrackFileName As String, ByRef destinationnameandloc As String)
        Dim curTagUltraID3 As New UltraID3
        Try
            'Read the track file
            curTagUltraID3.Read(TrackFileName)
            If curTagUltraID3.ID3v2Tag.ExistsInFile Then

                'Display the Title property of the ID3v23Tag directly
                'MsgBox(TestUltraID3.ID3v2Tag.Title)
                'MsgBox(TestUltraID3.PictureTypeInfos.Count.ToString)
                Dim myArtworkCollection As ID3FrameCollection
                myArtworkCollection = curTagUltraID3.ID3v2Tag.Frames.GetFrames(MultipleInstanceID3v2FrameTypes.ID3v23Picture)
                If myArtworkCollection.Count > 0 Then
                    Dim ra As ID3v2PictureFrame = CType(myArtworkCollection(0), ID3v2PictureFrame)
                    Dim theimage As Bitmap = ra.Picture
                    'pbMusicCurFanart.Image = theimage
                    theimage.Save(destinationnameandloc, System.Drawing.Imaging.ImageFormat.Jpeg)

                Else 'check for v22 image
                    myArtworkCollection = curTagUltraID3.ID3v2Tag.Frames.GetFrames(MultipleInstanceID3v2FrameTypes.ID3v22Picture)
                    If myArtworkCollection.Count > 0 Then
                        Dim ra As ID3v2PictureFrame = CType(myArtworkCollection(0), ID3v2PictureFrame)
                        Dim theimage As Bitmap = ra.Picture
                        'pbMusicCurFanart.Image = theimage
                        theimage.Save(destinationnameandloc, System.Drawing.Imaging.ImageFormat.Jpeg)
                    End If
                End If
            End If

        Catch ex As Exception

        End Try
    End Sub
    Private Sub injectimageintotag(ByRef filename As String, ByRef imagefilename As String, Optional ByVal clearfirst As Boolean = True)
        Dim filext As String = getmusicextension(filename)
        If Not filext = ".mp3" Then
            'MsgBox("Only able to modify .mp3 files")
            Exit Sub
        End If
        'clear out old images from tag
        If clearfirst Then clearoutimagesfromtag(filename)
        '      //Create a PictureFrame object, pointing it at the image on my PC
        Dim newpic As Bitmap
        newpic = CType(System.Drawing.Bitmap.FromFile(imagefilename), Bitmap)
        Dim albumart As New ID3v23PictureFrame(newpic, PictureTypes.CoverFront, "Attached Picture: MMP", TextEncodingTypes.ISO88591)
        'ID3PictureFrame AlbumArt =
        '  new ID3PictureFrame(
        '  (System.Drawing.Bitmap)System.Drawing.Bitmap.FromFile(AlbumArtFile),
        '  PictureTypes.CoverFront, "Attached picture", TextEncodingTypes.ISO88591);
        Dim curTagUltraID3 As New UltraID3
        curTagUltraID3.Read(filename)
        curTagUltraID3.ID3v2Tag.Frames.Add(albumart)
        'myMp3.ID3v23Tag.Frames.Add(AlbumArt);
        'myMp3.ID3v23Tag.WriteFlag = true;
        'myMp3.Write();
        curTagUltraID3.Write()
        System.Threading.Thread.Sleep(100)
        curTagUltraID3 = Nothing
        'myMp3 = null;

    End Sub
    Private Sub clearoutimagesfromtag(ByRef filename As String)
        '      //Find the jpeg file in the directory of the Mp3 File
        '//We will embed this image into the ID3v2 tag
        'FileInfo[] fiAlbumArt = MyFile.Directory.GetFiles("*.jpg");
        'if (fiAlbumArt.Length &lt; 1)
        '{
        '  Console.WriteLine("No Album Art Found in {0}", MyFile.Directory.Name);
        '  return;
        '}
        'string AlbumArtFile = fiAlbumArt[0].FullName;
        Dim filext As String = getmusicextension(filename)
        If Not filext = ".mp3" Then
            'MsgBox("Only able to modify .mp3 files")
            Exit Sub
        End If
        '//Create Mp3 Object
        Dim curTagUltraID3 As New UltraID3
        'UltraID3 myMp3 = new UltraID3();
        curTagUltraID3.Read(filename)
        'myMp3.Read(filename);
        'ID3FrameCollection myArtworkCollection =
        '  myMp3.ID3v23Tag.Frames.GetFrames(MultipleInstanceFrameTypes.Picture);
        Dim curImagesInTagV22 As ID3FrameCollection = curTagUltraID3.ID3v2Tag.Frames.GetFrames(MultipleInstanceID3v2FrameTypes.ID3v22Picture)
        Dim curImagesInTagV23 As ID3FrameCollection = curTagUltraID3.ID3v2Tag.Frames.GetFrames(MultipleInstanceID3v2FrameTypes.ID3v23Picture)

        If Not curImagesInTagV22.Count = 0 Then
            Dim curcount22 As Integer = 0
            While curcount22 < curImagesInTagV22.Count
                curTagUltraID3.ID3v2Tag.Frames.Remove(ID3v2FrameTypes.ID3v22Picture)
                curcount22 += 1
            End While
        End If
        If Not curImagesInTagV23.Count = 0 Then
            Dim curcount23 As Integer = 0
            While curcount23 < curImagesInTagV23.Count
                curTagUltraID3.ID3v2Tag.Frames.Remove(ID3v2FrameTypes.ID3v23Picture)
                curcount23 += 1
            End While
        End If
        'if (myArtworkCollection.Count &gt; 0)
        '{//Get Rid of the Bad Embedded Artwork
        '  #region Remove All Old Artwork
        '  for (int i = 0; i &lt; myArtworkCollection.Count; i++)
        '  {
        '    ID3PictureFrame ra = (ID3PictureFrame)myArtworkCollection[0];
        '                  Try
        '    {
        '      myMp3.ID3v23Tag.Frames.Remove(FrameTypes.Picture);
        '    }
        '    catch { }
        '  }
        '  myArtworkCollection.Clear();

        '   //Save out our changes so that we are working with the
        '  //most up to date file and tags
        '  myMp3.ID3v23Tag.WriteFlag = true;
        curTagUltraID3.Write()
        '  myMp3.Write();
        curTagUltraID3 = Nothing
        System.Threading.Thread.Sleep(100) 'slight delay for filesystem needed


    End Sub
    Private Sub getimagefromid3tagtest(Optional ByVal TrackFileName As String = "f:\musico\ACDC\Dirty Deeds Done Dirt Cheap\ACDC.Dirty Deeds Done Dirt Cheap.[01].Dirty Deeds Done Dirt Cheap.mp3")
        'Create a new instance of the main UltraID3 class
        Dim TestUltraID3 As New UltraID3

        Try

            'Read the track file
            TestUltraID3.Read(TrackFileName)

            'Display a single string representation of the common ID3 fields
            MsgBox(TestUltraID3.ToString)

            'Display the Title, letting UltraID3 determine the appropriate tag source
            MsgBox(TestUltraID3.Title)

            'Check to see if the ID3v1 tag was found
            If TestUltraID3.ID3v1Tag.ExistsInFile Then

                'Display the Title property of the ID3v1Tag directly
                MsgBox(TestUltraID3.ID3v1Tag.Title)

            End If

            'Check to see if the ID3v23 tag was found
            If TestUltraID3.ID3v2Tag.ExistsInFile Then

                'Display the Title property of the ID3v23Tag directly
                'MsgBox(TestUltraID3.ID3v2Tag.Title)
                'MsgBox(TestUltraID3.PictureTypeInfos.Count.ToString)
                Dim myArtworkCollection As ID3FrameCollection
                myArtworkCollection = TestUltraID3.ID3v2Tag.Frames.GetFrames(MultipleInstanceID3v2FrameTypes.ID3v23Picture)
                If myArtworkCollection.Count > 0 Then
                    Dim ra As ID3v2PictureFrame = CType(myArtworkCollection(0), ID3v2PictureFrame)
                    Dim theimage As Bitmap = ra.Picture
                    pbMusicCurFanart.Image = theimage
                Else 'check for v22 image
                    myArtworkCollection = TestUltraID3.ID3v2Tag.Frames.GetFrames(MultipleInstanceID3v2FrameTypes.ID3v22Picture)
                    If myArtworkCollection.Count > 0 Then
                        Dim ra As ID3v2PictureFrame = CType(myArtworkCollection(0), ID3v2PictureFrame)
                        Dim theimage As Bitmap = ra.Picture
                        pbMusicCurFanart.Image = theimage
                    End If
                End If

                'Dim fileimages() As Bitmap = TestUltraID3.ID3v2Tag.Frames.GetFrames(MultipleInstanceID3v2FrameTypes.ID3v23Picture)
                'ID3FrameCollection myArtworkCollection = myMp3.ID3v23Tag.Frames.GetFrames(MultipleInstanceFrameTypes.Picture);

                'Retrieve the ID3TitleFrame, if any
                Dim MyID3TitleFrame As ID3v23TitleFrame = CType(TestUltraID3.ID3v2Tag.Frames.GetFrame(SingleInstanceID3v2FrameTypes.ID3v23Title), ID3v23TitleFrame)

                'Check to see if the ID3TitleFrame exists
                If Not MyID3TitleFrame Is Nothing Then

                    'Display the Title property of the ID3TitleFrame
                    MsgBox(MyID3TitleFrame.Title)

                End If

            End If

            'Retrieve any non-fatal exceptions which might have occurred 
            'Dim UltraID3TagExceptions As ID3MetaDataException() = TestUltraID3.GetExceptions()

            'If UltraID3TagExceptions.Length > 0 Then

            '    Dim IndexUltraID3TagException As ID3MetaDataException

            '    For Each UltraID3ContextMetaDataException As ID3MetaDataException In UltraID3TagExceptions

            '        'Display the Message of the non-fatal exception
            '        MsgBox(UltraID3ContextMetaDataException.Message)

            '    Next

            'End If

            'Catch any fatal exceptions
        Catch exc As Exception

            MsgBox(exc.ToString)

        End Try
    End Sub
    'Private Sub loadmusicintogui()
    '    'need a few arrays and a way to filter data
    '    'artistname should have no dups
    '    'albums should have no dups
    '    'tracks can have dups
    '    'put each artist into an arraylist and then, pass that through a hashtable to filter dups
    '    'put each album into an arraylist and then, pass that througha  hashtable to filter dups
    '    musiclist.Clear()

    '    Dim tempartistlist As New Hashtable
    '    Dim tempalbumlist As New Hashtable
    '    Dim tempmusiclist As New List(Of Music)

    '    dmusic_count = 0
    '    EnumerateMusicDirectory("f:\music")
    '    'for each sub folder, get all files it in, if they end in .mp3 .wav they are music, add those to the main music array
    '    Dim musicfilelist As New ArrayList

    '    'find each file
    '    For Each musicdir As String In musiclist
    '        Dim musicfiles() As String = Directory.GetFiles(musicdir)
    '        For Each fileitem In musicfiles
    '            If checkmusicextension(fileitem) Then
    '                musicfilelist.Add(fileitem)
    '            End If
    '        Next
    '    Next

    '    'read up each file and get it's id3 data and store those into the mainarray of music objects, add add the artist oject into the hashtable
    '    For Each musicfile As String In musicfilelist
    '        Dim curmusicitem As New Music
    '        curmusicitem.Filename = musicfile
    '        'use mediainfo to get data about the file
    '        Dim curmediainfo As New MediaInfo
    '        curmediainfo.getmusicdata(curmusicitem)
    '        tempmusiclist.Add(curmusicitem)
    '        Dim tempartistobj As New musicartist
    '        Dim tempablum As New musicalbums
    '        tempablum.albumname = curmusicitem.Album

    '        tempartistobj.albums.Add(tempablum)
    '        Try
    '            tempartistlist.Add(curmusicitem.Artist, tempartistobj)
    '        Catch ex As Exception
    '            'used to filter out dups
    '        End Try
    '    Next

    '    'we now have a hashtable that contains all of our artists, and another with all our music objects
    '    'loop through each artist and mod the artist object
    '    For Each tempartist As musicartist In tempartistlist
    '        'loop through each music object, add in the albums in the correct places
    '        For Each musicobj As Music In tempmusiclist
    '            If musicobj.Artist = tempartist.artistname Then
    '                'this music object is for this artist

    '                'create the default album if there isn't any albums
    '                If tempartist.albums.Count = 0 Then
    '                    'create a new album since we don't have one 
    '                    Dim tempalbum As New musicalbums
    '                    tempalbum.albumname = "Unknown"
    '                    tempartist.albums.Add(tempalbum)
    '                End If

    '                'see if the ablum already exists
    '                Dim havealbuminartistalready As Boolean = False
    '                For Each artistalbum As musicalbums In tempartist.albums
    '                    If artistalbum.albumname = musicobj.Album Then
    '                        havealbuminartistalready = True
    '                        Continue For
    '                        'add musicobj to the album
    '                        artistalbum.music.Add(musicobj)
    '                    Else
    '                        'if it's not there, add it
    '                        If Not musicobj.Album = "" Then
    '                            'create the album based on it's name
    '                            Dim tempalbum As New musicalbums
    '                            tempalbum.albumname = musicobj.Album
    '                            tempartist.albums.Add(tempalbum)
    '                        End If
    '                    End If
    '                Next

    '            Else
    '                Continue For
    '            End If
    '        Next
    '    Next

    '    ''add musicobj to the album
    '    'artistalbum.music.Add(musicobj)
    '    '                Else
    '    ''if there is no album listed in the musicobj then add it to Unknown
    '    'If musicobj.Album = "" Then
    '    'Else
    '    '    'create the album based on it's name
    '    '    Dim tempalbum As New musicalbums
    '    '    tempalbum.albumname = musicobj.Album
    '    '    tempartist.albums.Add(tempalbum)
    '    'End If


    '    'for each file, read up the data and store the xmls, those are what we will be working with, not the files
    '    Dim curcount As Integer = 0
    '    For Each musicfile As String In musicfilelist
    '        Dim curmusicitem As New Music
    '        curmusicitem.Filename = musicfile
    '        'use mediainfo to get data about the file
    '        Dim curmediainfo As New MediaInfo
    '        curmediainfo.getmusicdata(curmusicitem)
    '        'have data, now see if we have it already defined by checking the key on it

    '        If tempartistlist.ContainsKey(curmusicitem.Artist) Then
    '            'artist already in list, get the artist object
    '            Dim curartist As musicartist = CType(tempartistlist.Item(curmusicitem.Artist), musicartist)
    '            'check for album set bool var have album = true
    '            Dim havealbum As Boolean = False

    '            For Each curalbums As musicalbums In curartist.albums
    '                If curalbums.albumname = curmusicitem.Album Then
    '                    'we have the album already
    '                    havealbum = True
    '                    Exit For 'exit loop
    '                End If
    '            Next

    '            If havealbum Then
    '                'get the album

    '            Else

    '                'we don't have the album and need to add it
    '                Dim newalbum As New musicalbums
    '                newalbum.albumname = curmusicitem.Album
    '                newalbum.music.Add(curmusicitem)
    '            End If

    '            'If curalbums.music.
    '            'see if we have the album, if not create one with the track
    '            'curalbums.albumname = ""
    '            'Dim curtrackname As String = ""
    '            'curtrackname = curmusicitem.Title & curmusicitem.Tracknum
    '            'If curalbums.trackname = curtrackname Then

    '            'End If
    '            'see if we already have ablum, if so check the track to see if it's already there

    '            'Next
    '        Else

    '            Try
    '                tempartistlist.Add(curmusicitem.Artist, curmusicitem.Artist)
    '            Catch ex As Exception
    '                'used to filter out dups
    '            End Try

    '        End If

    '        Debug.Print(curmusicitem.Artist + " - " + curmusicitem.Album + " - " + curmusicitem.Title + " - " + curmusicitem.Tracknum)
    '        'add each artist to the hashtable, then 
    '        Debug.Print(curcount.ToString)

    '        'write out the xml
    '        curcount += 1
    '    Next

    '    'read the hashtable and create the artist object
    '    'note on artist object, needs to have albums and tracks in addition to artist data
    '    'artist data will be written to the tvshow.nfo file in the root folder as this is how i'll be putting music into the library
    '    'music.nfo will be formated like tvshows, in that it contains multiple albums, considered a season and marked as such
    '    'each track needs an .nfo file (in episode format)

    '    'organize it for me, initially create artist and title folders, and move the file into that folder
    '    'If Not curmusicitem.Artist = "" Then
    '    '    If Not Directory.Exists("f:\music\" + cleanname(curmusicitem.Artist)) Then Directory.CreateDirectory("f:\music\" + cleanname(curmusicitem.Artist))
    '    '    If Not File.Exists("f:\music\" + cleanname(curmusicitem.Artist) + "\fanart.jpg") Then
    '    '        If File.Exists(rconf.customimagesfanart + "\musicfanart\" + cleanname(curmusicitem.Artist) + ".jpg") Then
    '    '            Debug.Print("I HAVE FANART FOR THIS ONE")
    '    '            File.Copy(rconf.customimagesfanart + "\musicfanart\" + cleanname(curmusicitem.Artist) + ".jpg", "f:\music\" + cleanname(curmusicitem.Artist) + "\fanart.jpg")
    '    '        End If
    '    '    End If
    '    '    If Not curmusicitem.Album = "" Then
    '    '        If Not Directory.Exists("f:\music\" + cleanname(curmusicitem.Artist) + "\" + cleanname(curmusicitem.Album)) Then
    '    '            Directory.CreateDirectory("f:\music\" + cleanname(curmusicitem.Artist) + "\" + cleanname(curmusicitem.Album))

    '    '        End If
    '    '        Dim theoldfilename As String = getfilefrompath(curmusicitem.Filename)
    '    '        Dim thenewfilename As String = cleanname(curmusicitem.Artist + "." + curmusicitem.Album + ".[" + curmusicitem.Tracknum + "]." + curmusicitem.Title + Strings.Right(theoldfilename, 4))
    '    '        Debug.Print("Copying From: " + theoldfilename + " TO: " + thenewfilename)
    '    '        'File.Copy(curmusicitem.Filename, "f:\music\" + cleanname(curmusicitem.Artist) + "\" + cleanname(curmusicitem.Album) + "\" + thenewfilename, True)
    '    '    End If


    '    'End If

    'End Sub
    Private Sub loadmusic()
        'getimagefromid3tag()


        musiclist.Clear()
        For Each musicfolder As String In rconf.pclb_checked_music_folders
            EnumerateMusicDirectory(musicfolder)
        Next
        Dim musicfilelist As New ArrayList
        'find each file
        For Each musicdir As String In musiclist
            Dim musicfiles() As String = Directory.GetFiles(musicdir)
            For Each fileitem In musicfiles
                If checkmusicextension(fileitem) Then
                    musicfilelist.Add(fileitem)
                End If
            Next
        Next
        prgThread.Value = 0
        prgThread.Maximum = musicfilelist.Count
        prgThread.Style = ProgressBarStyle.Blocks
        mymusicfilelist = musicfilelist
        prgThread.Visible = True
        lblPCWorking.Text = "Scanning in " + musicfilelist.Count.ToString + " music files."
        lblPCWorking.Visible = True

        bwLoadMusic = New System.ComponentModel.BackgroundWorker
        bwLoadMusic.WorkerReportsProgress = True
        bwLoadMusic.WorkerSupportsCancellation = False
        bwLoadMusic.RunWorkerAsync()
    End Sub
    Private Sub scanforandcopylocalfanart()
        For Each artname As String In mymusicbyartist
            Dim tempartist As musicartist = CType(mymusiccollection.Item(artname), musicartist)
            Dim destdir As String = tempartist.path
            If Not File.Exists(destdir + "\fanart.jpg") Then
                Dim newfafile As String = findsimmusicfanart(tempartist.artistname)
                If File.Exists(newfafile) Then
                    File.Copy(newfafile, destdir + "\fanart.jpg")
                End If
            End If
        Next
    End Sub
    Private Function findsimmusicfanart(ByVal vartist As String) As String
        Dim artist As String = cleanname(vartist)
        'exact match on jpg first 
        If File.Exists(rconf.customimagesfolder & "music\fanart\" & artist & ".jpg") Then
            Return (rconf.customimagesfolder & "music\fanart\" & artist & ".jpg")
        End If
        'exact match on png second
        If File.Exists(rconf.customimagesfolder & "music\fanart\" & artist & ".png") Then
            Return (rconf.customimagesfolder & "music\fanart\" & artist & ".png")
        End If

        'if those failed, try to find it with 3 other methods
        Dim retnamew1 As String = ""
        Dim retnamew2 As String = ""
        Dim retnamew3 As String = ""

        Dim clenaartname As String = stripnonchardigitfromstring(artist) '+ "jpg"

        For Each curfile In Directory.GetFiles(rconf.customimagesfolder & "music\fanart\")
            Dim curfileonlyname As String = getfilefrompath(curfile)
            Dim cleanedname As String = stripnonchardigitfromstring(removeextension(curfileonlyname))
            If cleanedname = clenaartname Then ' Or clenaartname.Contains(cleanedname) Or cleanedname.Contains(clenaartname) Then
                retnamew1 = curfile
            ElseIf clenaartname.Contains(cleanedname) Then
                retnamew2 = curfile
            ElseIf cleanedname.Contains(clenaartname) Then
                retnamew3 = curfile
            End If
        Next
        If Not retnamew1 = "" Then Return retnamew1 'matches with only lettersdigits in the artist and fanart name
        If Not retnamew2 = "" Then Return retnamew2 'artist name is contained in fanart file
        If Not retnamew3 = "" Then Return retnamew3 'fanart flie contains artname
        Return ""
    End Function
    Private Sub sortmusic(ByVal sourcedir As String, ByVal destdir As String, ByVal lowercaseit As Boolean)
        'prompt for current music location
        'prompt for destination location


        'enumerate the root folder and get all sub folders, add those to the temp array
        EnumerateMusicDirectory(sourcedir)
        'for each sub folder, get all files it in, if they end in .mp3 .wav they are music, add those to the main music array
        Dim musicfilelist As New ArrayList

        For Each musicdir As String In musiclist
            Dim musicfiles() As String = Directory.GetFiles(musicdir)
            For Each fileitem In musicfiles
                If checkmusicextension(fileitem) Then
                    musicfilelist.Add(fileitem)
                End If
            Next

        Next
        'for each file, read up the data and store the xmls, those are what we will be working with, not the files
        Dim curcount As Integer = 0
        For Each musicfile As String In musicfilelist
            Dim curmusicitem As New Music
            curmusicitem.Filename = musicfile
            'use mediainfo to get data about the file
            Dim curmediainfo As New MediaInfo
            curmediainfo.getmusicdata(curmusicitem)
            Debug.Print(curmusicitem.Artist + " - " + curmusicitem.Album + " - " + curmusicitem.Title + " - " + curmusicitem.Tracknum)
            'organize it for me, initially create artist and title folders, and move the file into that folder
            If curmusicitem.Artist = "" Then curmusicitem.Artist = "Unknown"
            If Not curmusicitem.Artist = "" Then
                If Not Directory.Exists("f:\music\" + cleanname(curmusicitem.Artist)) Then Directory.CreateDirectory("f:\music\" + cleanname(curmusicitem.Artist))
                If Not File.Exists("f:\music\" + cleanname(curmusicitem.Artist) + "\fanart.jpg") Then
                    If File.Exists(rconf.customimagesfolder + "\music\fanart" + cleanname(curmusicitem.Artist) + ".jpg") Then
                        Debug.Print("I HAVE FANART FOR THIS ONE")
                        File.Copy(rconf.customimagesfolder + "\music\fanart" + cleanname(curmusicitem.Artist) + ".jpg", "f:\music\" + cleanname(curmusicitem.Artist) + "\fanart.jpg")
                    End If
                End If
                If curmusicitem.Album = "" Then curmusicitem.Album = "Unknown"
                If Not curmusicitem.Album = "" Then
                    If Not Directory.Exists(addfiletofolder(destdir, cleanname(curmusicitem.Artist) + "\" + cleanname(curmusicitem.Album))) Then
                        Directory.CreateDirectory(addfiletofolder(destdir, cleanname(curmusicitem.Artist) + "\" + cleanname(curmusicitem.Album)))

                    End If
                    Dim theoldfilename As String = getfilefrompath(curmusicitem.Filename)
                    Dim thenewfilename As String = cleanname(curmusicitem.Artist + "." + curmusicitem.Album + ".[" + curmusicitem.Tracknum + "]." + curmusicitem.Title + Strings.Right(theoldfilename, 4))
                    If curmusicitem.Album = "Unknown" Or curmusicitem.Artist = "Unknown" Then
                        Dim unknownstr As String = ""
                        unknownstr = Strings.Replace(curmusicitem.Filename, "/", "_")
                        unknownstr = Strings.Replace(unknownstr, "\", "_")
                        unknownstr = Strings.Replace(unknownstr, ":", "_")
                        thenewfilename = unknownstr + "--" + thenewfilename
                    End If
                    If lowercaseit Then
                        thenewfilename = thenewfilename.ToLower
                    End If
                    'Debug.Print("Copying From: " + theoldfilename + " TO: " + thenewfilename)
                    'If curmusicitem.Album = "Unknown" Or curmusicitem.Artist = "Unknown" Then
                    File.Copy(curmusicitem.Filename, addfiletofolder(destdir, cleanname(curmusicitem.Artist) + "\" + cleanname(curmusicitem.Album) + "\" + thenewfilename), True)
                    If Not File.Exists(addfiletofolder(destdir, cleanname(curmusicitem.Artist) + "\" + cleanname(curmusicitem.Album) + "\" + "folder.jpg")) Then
                        getimagefromid3tagSaveLocal(addfiletofolder(destdir, cleanname(curmusicitem.Artist) + "\" + cleanname(curmusicitem.Album) + "\" + thenewfilename), addfiletofolder(destdir, cleanname(curmusicitem.Artist) + "\" + cleanname(curmusicitem.Album) + "\" + "folder.jpg"))
                    End If
                    'If File.Exists("f:\music\" + cleanname(curmusicitem.Artist) + "\" + cleanname(curmusicitem.Album) + "\" + "folder.jpg") Then
                    '    clearoutimagesfromtag("f:\music\" + cleanname(curmusicitem.Artist) + "\" + cleanname(curmusicitem.Album) + "\" + thenewfilename)
                    'End If
                    'End If

                End If


            End If
            Debug.Print(curcount.ToString)

            'write out the xml
            curcount += 1
        Next
    End Sub

#End Region
    'Private Sub tp7_Enter(ByVal sender As Object, ByVal e As System.EventArgs)
    '    Me.tpFanart.Refresh()
    'End Sub

    Private Sub tsbShowsLoadShows_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsbShowsLoadShows.Click
        'dlgPreCacheStarting.ShowDialog()
        'Exit Sub

        currenttvshowdownloadlist.Clear()
        Dim tshows As New tvshowcollection
        tshows.precacheTvShows()
        'now we have all the data

        'download the stuff
        If Not currenttvshowdownloadlist.Count = 0 Then
            dlgDownloadingFile.downloadlist = currenttvshowdownloadlist
            dlgDownloadingFile.downloadingmutliimages = True
            dlgDownloadingFile.ShowDialog()
        End If
        'clear the arraylist
        Me.currenttvshowdownloadlist.Clear()

        'MsgBox("Pre cache completed, now loading the tvshows")
        tsbtvPreCache.Enabled = False
        'load the tvshows into the dialog
        'Dim tshows As New tvshowcollection
        tshows.kbLoadTvShows(rconf.debugtvshows)
        tshows.updatetvshows()

        If lbTvShowPicker.Items.Count > 0 Then
            lbTvShowPicker.SelectedIndex = 0
        End If
        TVCurrentTVRightMain.Panel1Collapsed = True
        'tsbtvPreCache.Enabled = False


        '' '' ''dlgTVShowCurStatus.ShowDialog()
        '' '' ''getmirrors() - only one so far, add additional code later
        '' '' ''rconf.debugtvshows = True
        ' '' ''Dim tshows As New tvshowcollection
        ' '' ''tshows.kbLoadTvShows()
        ' '' ''tshows.updatetvshows()

        ' '' ''If lbTvShowPicker.Items.Count > 0 Then
        ' '' ''    lbTvShowPicker.SelectedIndex = 0
        ' '' ''End If
        ' '' ''TVCurrentTVRightMain.Panel1Collapsed = True
        ' '' ''tsbtvPreCache.Enabled = False


    End Sub

    Private Sub kllxbmc_LinkClicked(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles kllxbmc.LinkClicked
        System.Diagnostics.Process.Start("http://www.xbmc.org/")
    End Sub
    Private Sub kllMediaIcons_LinkClicked(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles kllMediaIcons.LinkClicked
        System.Diagnostics.Process.Start("http://www.mediaicons.org/")
    End Sub
    Private Sub kllTheMovieDB_LinkClicked(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles kllTheMovieDB.LinkClicked
        System.Diagnostics.Process.Start("http://www.themoviedb.org/")
    End Sub
    Private Sub kllTheTVDB_LinkClicked(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles kllTheTVDB.LinkClicked
        System.Diagnostics.Process.Start("http://www.thetvdb.com/")
    End Sub
    Private Sub kllFreecovers_LinkClicked(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles kllFreecovers.LinkClicked
        System.Diagnostics.Process.Start("http://www.freecovers.net/")
    End Sub
    Private Sub kllimpawards_LinkClicked(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles kllimpawards.LinkClicked
        System.Diagnostics.Process.Start("http://www.impawards.com/")
    End Sub

    Private Sub PictureBox1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        System.Diagnostics.Process.Start("http://www.impawards.com/")
    End Sub

    Private Sub kllimpawards_inposterarea_LinkClicked(ByVal sender As System.Object, ByVal e As System.EventArgs)
        System.Diagnostics.Process.Start("http://www.impawards.com/")
    End Sub



    Private Sub kcbShowPicker_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Debug.Print("kcbshowpicker changed index")
        'MsgBox("hello kcbshowpicker")

    End Sub


    Private Sub displayseasonposters(ByVal posterfilename As String, ByVal tbdcou As Integer, ByVal ais As Boolean)
        If posterfilename.Length <= 3 Then Exit Sub

        Dim extension As String = Strings.Right(posterfilename.ToLower, 3)
        Dim extensionpassed As Boolean = False
        If extension = "jpg" Then extensionpassed = True
        If extension = "png" Then extensionpassed = True
        If Not extensionpassed Then Exit Sub

        If messageprompts Then lblPbar.Text = "Setting Season Poster : " + tbdcou.ToString
        'If messageprompts Then Me.Refresh()()
        Select Case tbdcou
            Case 0
                Try
                    Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                    klblposterTMDB1.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                    objImage = Nothing
                    klblposterTMDB1.Visible = True
                    Me.pbposterTMDB1.ImageLocation = posterfilename
                    Me.pbposterTMDB1.Enabled = True
                    Me.pbposterTMDB1.Visible = True
                    Me.pbposterTMDB1.AccessibleName = posterfilename
                    Try
                        pbposterTMDB1.Load()
                    Catch ex As Exception
                        File.Delete(posterfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 1
                Try
                    Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                    klblposterTMDB2.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                    objImage = Nothing
                    klblposterTMDB2.Visible = True
                    Me.pbposterTMDB2.ImageLocation = posterfilename
                    Me.pbposterTMDB2.Enabled = True
                    Me.pbposterTMDB2.Visible = True
                    Me.pbposterTMDB2.AccessibleName = posterfilename
                    Try
                        pbposterTMDB2.Load()
                    Catch ex As Exception
                        File.Delete(posterfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 2
                Try
                    Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                    klblposterTMDB3.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                    objImage = Nothing
                    klblposterTMDB3.Visible = True
                    Me.pbposterTMDB3.ImageLocation = posterfilename
                    Me.pbposterTMDB3.Enabled = True
                    Me.pbposterTMDB3.Visible = True
                    Me.pbposterTMDB3.AccessibleName = posterfilename
                    Try
                        pbposterTMDB3.Load()
                    Catch ex As Exception
                        File.Delete(posterfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 3
                Try
                    Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                    klblposterTMDB4.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                    objImage = Nothing
                    klblposterTMDB4.Visible = True
                    Me.pbposterTMDB4.ImageLocation = posterfilename
                    Me.pbposterTMDB4.Enabled = True
                    Me.pbposterTMDB4.Visible = True
                    Me.pbposterTMDB4.AccessibleName = posterfilename
                    Try
                        pbposterTMDB4.Load()
                    Catch ex As Exception
                        File.Delete(posterfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 4
                Try
                    Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                    klblposterTMDB5.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                    objImage = Nothing
                    klblposterTMDB5.Visible = True
                    Me.pbposterTMDB5.ImageLocation = posterfilename
                    Me.pbposterTMDB5.Enabled = True
                    Me.pbposterTMDB5.Visible = True
                    Me.pbposterTMDB5.AccessibleName = posterfilename
                    Try
                        pbposterTMDB5.Load()
                    Catch ex As Exception
                        File.Delete(posterfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 5
                Try
                    Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                    klblposterTMDB6.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                    objImage = Nothing
                    klblposterTMDB6.Visible = True
                    Me.pbposterTMDB6.ImageLocation = posterfilename
                    Me.pbposterTMDB6.AccessibleName = posterfilename
                    Me.pbposterTMDB6.Enabled = True
                    Me.pbposterTMDB6.Visible = True
                    Try
                        pbposterTMDB6.Load()

                    Catch ex As Exception
                        File.Delete(posterfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 6
                Try
                    Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                    klblposterTMDB7.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                    objImage = Nothing
                    klblposterTMDB7.Visible = True
                    Me.pbposterTMDB7.ImageLocation = posterfilename
                    Me.pbposterTMDB7.Enabled = True
                    Me.pbposterTMDB7.Visible = True
                    Me.pbposterTMDB7.AccessibleName = posterfilename
                    Try
                        pbposterTMDB7.Load()

                    Catch ex As Exception
                        File.Delete(posterfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 7
                Try
                    Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                    klblposterTMDB8.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                    objImage = Nothing
                    klblposterTMDB8.Visible = True
                    Me.pbposterTMDB8.ImageLocation = posterfilename
                    Me.pbposterTMDB8.Enabled = True
                    Me.pbposterTMDB8.Visible = True
                    Me.pbposterTMDB8.AccessibleName = posterfilename
                    Try
                        pbposterTMDB8.Load()
                    Catch ex As Exception
                        File.Delete(posterfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 8
                Try
                    Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                    klblposterTMDB9.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                    objImage = Nothing
                    klblposterTMDB9.Visible = True
                    Me.pbposterTMDB9.ImageLocation = posterfilename
                    Me.pbposterTMDB9.Enabled = True
                    Me.pbposterTMDB9.Visible = True
                    Me.pbposterTMDB9.AccessibleName = posterfilename
                    Try
                        pbposterTMDB9.Load()
                    Catch ex As Exception
                        File.Delete(posterfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 9

                Try
                    Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                    klblposterTMDB10.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                    objImage = Nothing
                    klblposterTMDB10.Visible = True
                    Me.pbposterTMDB10.ImageLocation = posterfilename
                    Me.pbposterTMDB10.Enabled = True
                    Me.pbposterTMDB10.Visible = True
                    Me.pbposterTMDB10.AccessibleName = posterfilename
                    Try
                        pbposterTMDB10.Load()
                    Catch ex As Exception
                        File.Delete(posterfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 10
                Try
                    Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                    klblposterTMDB11.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                    objImage = Nothing
                    klblposterTMDB11.Visible = True
                    Me.pbposterTMDB11.ImageLocation = posterfilename
                    Me.pbposterTMDB11.Enabled = True
                    Me.pbposterTMDB11.Visible = True
                    Me.pbposterTMDB11.AccessibleName = posterfilename
                    Try
                        pbposterTMDB11.Load()
                    Catch ex As Exception
                        File.Delete(posterfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 11
                Try
                    Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                    klblposterTMDB12.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                    objImage = Nothing
                    klblposterTMDB12.Visible = True
                    Me.pbposterTMDB12.ImageLocation = posterfilename
                    Me.pbposterTMDB12.Enabled = True
                    Me.pbposterTMDB12.Visible = True
                    Me.pbposterTMDB12.AccessibleName = posterfilename
                    Try
                        pbposterTMDB12.Load()
                    Catch ex As Exception
                        File.Delete(posterfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 12
                Try
                    Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                    klblposterTMDB13.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                    objImage = Nothing
                    klblposterTMDB13.Visible = True
                    Me.pbposterTMDB13.ImageLocation = posterfilename
                    Me.pbposterTMDB13.Enabled = True
                    Me.pbposterTMDB13.Visible = True
                    Me.pbposterTMDB13.AccessibleName = posterfilename
                    Try
                        pbposterTMDB13.Load()
                    Catch ex As Exception
                        File.Delete(posterfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 13
                Try
                    Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                    klblposterTMDB14.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                    objImage = Nothing
                    klblposterTMDB14.Visible = True
                    Me.pbposterTMDB14.ImageLocation = posterfilename
                    Me.pbposterTMDB14.Enabled = True
                    Me.pbposterTMDB14.Visible = True
                    Me.pbposterTMDB14.AccessibleName = posterfilename
                    Try
                        pbposterTMDB14.Load()
                    Catch ex As Exception
                        File.Delete(posterfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 14
                Try
                    Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                    klblposterTMDB15.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                    objImage = Nothing
                    klblposterTMDB15.Visible = True
                    Me.pbposterTMDB15.ImageLocation = posterfilename
                    Me.pbposterTMDB15.Enabled = True
                    Me.pbposterTMDB15.Visible = True
                    Me.pbposterTMDB15.AccessibleName = posterfilename
                    Try
                        pbposterTMDB15.Load()
                    Catch ex As Exception
                        File.Delete(posterfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 15
                Try
                    Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                    klblposterTMDB16.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                    objImage = Nothing
                    klblposterTMDB16.Visible = True
                    Me.pbposterTMDB16.ImageLocation = posterfilename
                    Me.pbposterTMDB16.AccessibleName = posterfilename
                    Me.pbposterTMDB16.Enabled = True
                    Me.pbposterTMDB16.Visible = True
                    Try
                        pbposterTMDB16.Load()
                    Catch ex As Exception
                        File.Delete(posterfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 16
                Try
                    Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                    klblposterTMDB17.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                    objImage = Nothing
                    klblposterTMDB17.Visible = True
                    Me.pbposterTMDB17.ImageLocation = posterfilename
                    Me.pbposterTMDB17.Enabled = True
                    Me.pbposterTMDB17.Visible = True
                    Me.pbposterTMDB17.AccessibleName = posterfilename
                    Try
                        pbposterTMDB17.Load()
                    Catch ex As Exception
                        File.Delete(posterfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 17
                Try
                    Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                    klblposterTMDB18.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                    objImage = Nothing
                    klblposterTMDB18.Visible = True
                    Me.pbposterTMDB18.ImageLocation = posterfilename
                    Me.pbposterTMDB18.Enabled = True
                    Me.pbposterTMDB18.Visible = True
                    Me.pbposterTMDB18.AccessibleName = posterfilename
                    Try
                        pbposterTMDB18.Load()
                    Catch ex As Exception
                        File.Delete(posterfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 18
                Try
                    Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                    klblposterTMDB19.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                    objImage = Nothing
                    klblposterTMDB19.Visible = True
                    Me.pbposterTMDB19.ImageLocation = posterfilename
                    Me.pbposterTMDB19.Enabled = True
                    Me.pbposterTMDB19.Visible = True
                    Me.pbposterTMDB19.AccessibleName = posterfilename
                    Try
                        pbposterTMDB19.Load()
                    Catch ex As Exception
                        File.Delete(posterfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 19
                Try
                    Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                    klblposterTMDB20.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                    objImage = Nothing
                    klblposterTMDB20.Visible = True
                    Me.pbposterTMDB20.ImageLocation = posterfilename
                    Me.pbposterTMDB20.Enabled = True
                    Me.pbposterTMDB20.Visible = True
                    Me.pbposterTMDB20.AccessibleName = posterfilename
                    Try
                        pbposterTMDB20.Load()

                    Catch ex As Exception
                        File.Delete(posterfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 20
                Try
                    Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                    klblposterTMDB21.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                    objImage = Nothing
                    klblposterTMDB21.Visible = True
                    Me.pbposterTMDB21.ImageLocation = posterfilename
                    Me.pbposterTMDB21.Enabled = True
                    Me.pbposterTMDB21.Visible = True
                    Me.pbposterTMDB21.AccessibleName = posterfilename
                    Try
                        pbposterTMDB21.Load()
                    Catch ex As Exception
                        File.Delete(posterfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 21
                Try
                    Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                    klblposterTMDB22.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                    objImage = Nothing
                    klblposterTMDB22.Visible = True
                    Me.pbposterTMDB22.ImageLocation = posterfilename
                    Me.pbposterTMDB22.AccessibleName = posterfilename
                    Me.pbposterTMDB22.Enabled = True
                    Me.pbposterTMDB22.Visible = True
                    Try
                        pbposterTMDB22.Load()
                    Catch ex As Exception
                        File.Delete(posterfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 22
                Try
                    Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                    klblposterTMDB23.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                    objImage = Nothing
                    klblposterTMDB23.Visible = True
                    Me.pbposterTMDB23.ImageLocation = posterfilename
                    Me.pbposterTMDB23.Enabled = True
                    Me.pbposterTMDB23.Visible = True
                    Me.pbposterTMDB23.AccessibleName = posterfilename
                    Try
                        pbposterTMDB23.Load()
                    Catch ex As Exception
                        File.Delete(posterfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 23
                Try
                    Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                    klblposterTMDB24.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                    objImage = Nothing
                    klblposterTMDB24.Visible = True
                    Me.pbposterTMDB24.ImageLocation = posterfilename
                    Me.pbposterTMDB24.Enabled = True
                    Me.pbposterTMDB24.Visible = True
                    Me.pbposterTMDB24.AccessibleName = posterfilename
                    Try
                        pbposterTMDB24.Load()
                    Catch ex As Exception
                        File.Delete(posterfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case Else
                Debug.Print("Fanart image that was set for display greater then the 24 allowed in the GUI, I have nowhere to put the darn thing so I'll act like it was never there!")
        End Select
    End Sub
    Private Sub displaymovieposters(Optional ByVal arrayofposters As ArrayList = Nothing)
        Dim temparrayofposters As New ArrayList
        If arrayofposters Is Nothing Then
            For Each impposter In currentmovie.pimpawardsposters
                temparrayofposters.Add(impposter)
            Next
            For Each tmdbposter In currentmovie.ptmdbposters
                temparrayofposters.Add(tmdbposter)
            Next
        End If
        If Not arrayofposters Is Nothing Then temparrayofposters = arrayofposters
        Dim tbdcou As Integer = 0 'tbdcou is the counter for the pictureboxes and is incremented after a sucessfull image load
        If messageprompts Then lblPbar.Text = "Loading Poster into GUI"
        If messageprompts Then Me.Refresh()
        For Each curposter As String In temparrayofposters
            Dim posterfilename As String = curposter
            If posterfilename.Length <= 3 Then
                Continue For
            End If

            Dim extension As String = Strings.Right(posterfilename.ToLower, 3)
            Dim extensionpassed As Boolean = False
            If extension = "jpg" Then extensionpassed = True
            If extension = "png" Then extensionpassed = True
            If Not extensionpassed Then Exit Sub


            Select Case tbdcou
                Case 0
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti1.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti1.Visible = True
                        Me.pbti1.ImageLocation = posterfilename
                        Me.pbti1.Enabled = True
                        Me.pbti1.Visible = True
                        Me.pbti1.AccessibleName = posterfilename
                        Try
                            pbti1.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 1
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti2.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti2.Visible = True
                        Me.pbti2.ImageLocation = posterfilename
                        Me.pbti2.Enabled = True
                        Me.pbti2.Visible = True
                        Me.pbti2.AccessibleName = posterfilename
                        Try
                            pbti2.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 2
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti3.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti3.Visible = True
                        Me.pbti3.ImageLocation = posterfilename
                        Me.pbti3.Enabled = True
                        Me.pbti3.Visible = True
                        Me.pbti3.AccessibleName = posterfilename
                        Try
                            pbti3.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 3
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti4.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti4.Visible = True
                        Me.pbti4.ImageLocation = posterfilename
                        Me.pbti4.Enabled = True
                        Me.pbti4.Visible = True
                        Me.pbti4.AccessibleName = posterfilename
                        Try
                            pbti4.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 4
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti5.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti5.Visible = True
                        Me.pbti5.ImageLocation = posterfilename
                        Me.pbti5.Enabled = True
                        Me.pbti5.Visible = True
                        Me.pbti5.AccessibleName = posterfilename
                        Try
                            pbti5.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 5
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti6.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti6.Visible = True
                        Me.pbti6.ImageLocation = posterfilename
                        Me.pbti6.AccessibleName = posterfilename
                        Me.pbti6.Enabled = True
                        Me.pbti6.Visible = True
                        Try
                            pbti6.Load()

                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 6
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti7.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti7.Visible = True
                        Me.pbti7.ImageLocation = posterfilename
                        Me.pbti7.Enabled = True
                        Me.pbti7.Visible = True
                        Me.pbti7.AccessibleName = posterfilename
                        Try
                            pbti7.Load()

                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 7
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti8.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti8.Visible = True
                        Me.pbti8.ImageLocation = posterfilename
                        Me.pbti8.Enabled = True
                        Me.pbti8.Visible = True
                        Me.pbti8.AccessibleName = posterfilename
                        Try
                            pbti8.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 8
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti9.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti9.Visible = True
                        Me.pbti9.ImageLocation = posterfilename
                        Me.pbti9.Enabled = True
                        Me.pbti9.Visible = True
                        Me.pbti9.AccessibleName = posterfilename
                        Try
                            pbti9.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 9

                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti10.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti10.Visible = True
                        Me.pbti10.ImageLocation = posterfilename
                        Me.pbti10.Enabled = True
                        Me.pbti10.Visible = True
                        Me.pbti10.AccessibleName = posterfilename
                        Try
                            pbti10.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 10
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti11.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti11.Visible = True
                        Me.pbti11.ImageLocation = posterfilename
                        Me.pbti11.Enabled = True
                        Me.pbti11.Visible = True
                        Me.pbti11.AccessibleName = posterfilename
                        Try
                            pbti11.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 11
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti12.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti12.Visible = True
                        Me.pbti12.ImageLocation = posterfilename
                        Me.pbti12.Enabled = True
                        Me.pbti12.Visible = True
                        Me.pbti12.AccessibleName = posterfilename
                        Try
                            pbti12.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 12
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti13.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti13.Visible = True
                        Me.pbti13.ImageLocation = posterfilename
                        Me.pbti13.Enabled = True
                        Me.pbti13.Visible = True
                        Me.pbti13.AccessibleName = posterfilename
                        Try
                            pbti13.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 13
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti14.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti14.Visible = True
                        Me.pbti14.ImageLocation = posterfilename
                        Me.pbti14.Enabled = True
                        Me.pbti14.Visible = True
                        Me.pbti14.AccessibleName = posterfilename
                        Try
                            pbti14.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 14
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti15.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti15.Visible = True
                        Me.pbti15.ImageLocation = posterfilename
                        Me.pbti15.Enabled = True
                        Me.pbti15.Visible = True
                        Me.pbti15.AccessibleName = posterfilename
                        Try
                            pbti15.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 15
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti16.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti16.Visible = True
                        Me.pbti16.ImageLocation = posterfilename
                        Me.pbti16.AccessibleName = posterfilename
                        Me.pbti16.Enabled = True
                        Me.pbti16.Visible = True
                        Try
                            pbti16.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 16
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti17.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti17.Visible = True
                        Me.pbti17.ImageLocation = posterfilename
                        Me.pbti17.Enabled = True
                        Me.pbti17.Visible = True
                        Me.pbti17.AccessibleName = posterfilename
                        Try
                            pbti17.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 17
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti18.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti18.Visible = True
                        Me.pbti18.ImageLocation = posterfilename
                        Me.pbti18.Enabled = True
                        Me.pbti18.Visible = True
                        Me.pbti18.AccessibleName = posterfilename
                        Try
                            pbti18.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 18
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti19.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti19.Visible = True
                        Me.pbti19.ImageLocation = posterfilename
                        Me.pbti19.Enabled = True
                        Me.pbti19.Visible = True
                        Me.pbti19.AccessibleName = posterfilename
                        Try
                            pbti19.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 19
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti20.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti20.Visible = True
                        Me.pbti20.ImageLocation = posterfilename
                        Me.pbti20.Enabled = True
                        Me.pbti20.Visible = True
                        Me.pbti20.AccessibleName = posterfilename
                        Try
                            pbti20.Load()

                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 20
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti21.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti21.Visible = True
                        Me.pbti21.ImageLocation = posterfilename
                        Me.pbti21.Enabled = True
                        Me.pbti21.Visible = True
                        Me.pbti21.AccessibleName = posterfilename
                        Try
                            pbti21.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 21
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti22.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti22.Visible = True
                        Me.pbti22.ImageLocation = posterfilename
                        Me.pbti22.AccessibleName = posterfilename
                        Me.pbti22.Enabled = True
                        Me.pbti22.Visible = True
                        Try
                            pbti22.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 22
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti23.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti23.Visible = True
                        Me.pbti23.ImageLocation = posterfilename
                        Me.pbti23.Enabled = True
                        Me.pbti23.Visible = True
                        Me.pbti23.AccessibleName = posterfilename
                        Try
                            pbti23.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 23
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti24.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti24.Visible = True
                        Me.pbti24.ImageLocation = posterfilename
                        Me.pbti24.Enabled = True
                        Me.pbti24.Visible = True
                        Me.pbti24.AccessibleName = posterfilename
                        Try
                            pbti24.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 24
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti25.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti25.Visible = True
                        Me.pbti25.ImageLocation = posterfilename
                        Me.pbti25.Enabled = True
                        Me.pbti25.Visible = True
                        Me.pbti25.AccessibleName = posterfilename
                        Try
                            pbti25.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 25
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti26.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti26.Visible = True
                        Me.pbti26.ImageLocation = posterfilename
                        Me.pbti26.AccessibleName = posterfilename
                        Me.pbti26.Enabled = True
                        Me.pbti26.Visible = True
                        Try
                            pbti26.Load()

                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 26
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti27.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti27.Visible = True
                        Me.pbti27.ImageLocation = posterfilename
                        Me.pbti27.Enabled = True
                        Me.pbti27.Visible = True
                        Me.pbti27.AccessibleName = posterfilename
                        Try
                            pbti27.Load()

                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 27
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti28.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti28.Visible = True
                        Me.pbti28.ImageLocation = posterfilename
                        Me.pbti28.Enabled = True
                        Me.pbti28.Visible = True
                        Me.pbti28.AccessibleName = posterfilename
                        Try
                            pbti28.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 28
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti29.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti29.Visible = True
                        Me.pbti29.ImageLocation = posterfilename
                        Me.pbti29.Enabled = True
                        Me.pbti29.Visible = True
                        Me.pbti29.AccessibleName = posterfilename
                        Try
                            pbti29.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 29
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti30.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti30.Visible = True
                        Me.pbti30.ImageLocation = posterfilename
                        Me.pbti30.Enabled = True
                        Me.pbti30.Visible = True
                        Me.pbti30.AccessibleName = posterfilename
                        Try
                            pbti30.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 30
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti31.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti31.Visible = True
                        Me.pbti31.ImageLocation = posterfilename
                        Me.pbti31.Enabled = True
                        Me.pbti31.Visible = True
                        Me.pbti31.AccessibleName = posterfilename
                        Try
                            pbti31.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 31
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti32.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti32.Visible = True
                        Me.pbti32.ImageLocation = posterfilename
                        Me.pbti32.Enabled = True
                        Me.pbti32.Visible = True
                        Me.pbti32.AccessibleName = posterfilename
                        Try
                            pbti32.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 32
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti33.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti33.Visible = True
                        Me.pbti33.ImageLocation = posterfilename
                        Me.pbti33.Enabled = True
                        Me.pbti33.Visible = True
                        Me.pbti33.AccessibleName = posterfilename
                        Try
                            pbti33.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 33
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti34.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti34.Visible = True
                        Me.pbti34.ImageLocation = posterfilename
                        Me.pbti34.Enabled = True
                        Me.pbti34.Visible = True
                        Me.pbti34.AccessibleName = posterfilename
                        Try
                            pbti34.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 34
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti35.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti35.Visible = True
                        Me.pbti35.ImageLocation = posterfilename
                        Me.pbti35.Enabled = True
                        Me.pbti35.Visible = True
                        Me.pbti35.AccessibleName = posterfilename
                        Try
                            pbti35.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 35
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti36.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti36.Visible = True
                        Me.pbti36.ImageLocation = posterfilename
                        Me.pbti36.AccessibleName = posterfilename
                        Me.pbti36.Enabled = True
                        Me.pbti36.Visible = True
                        Try
                            pbti36.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 36
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti37.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti37.Visible = True
                        Me.pbti37.ImageLocation = posterfilename
                        Me.pbti37.Enabled = True
                        Me.pbti37.Visible = True
                        Me.pbti37.AccessibleName = posterfilename
                        Try
                            pbti37.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 37
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti38.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti38.Visible = True
                        Me.pbti38.ImageLocation = posterfilename
                        Me.pbti38.Enabled = True
                        Me.pbti38.Visible = True
                        Me.pbti38.AccessibleName = posterfilename
                        Try
                            pbti38.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 38
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti39.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti39.Visible = True
                        Me.pbti39.ImageLocation = posterfilename
                        Me.pbti39.Enabled = True
                        Me.pbti39.Visible = True
                        Me.pbti39.AccessibleName = posterfilename
                        Try
                            pbti39.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 39
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti40.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti40.Visible = True
                        Me.pbti40.ImageLocation = posterfilename
                        Me.pbti40.Enabled = True
                        Me.pbti40.Visible = True
                        Me.pbti40.AccessibleName = posterfilename
                        Try
                            pbti40.Load()

                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try

                Case 40
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti41.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti41.Visible = True
                        Me.pbti41.ImageLocation = posterfilename
                        Me.pbti41.Enabled = True
                        Me.pbti41.Visible = True
                        Me.pbti41.AccessibleName = posterfilename
                        Try
                            pbti41.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 41
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti42.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti42.Visible = True
                        Me.pbti42.ImageLocation = posterfilename
                        Me.pbti42.Enabled = True
                        Me.pbti42.Visible = True
                        Me.pbti42.AccessibleName = posterfilename
                        Try
                            pbti42.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 42
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti43.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti43.Visible = True
                        Me.pbti43.ImageLocation = posterfilename
                        Me.pbti43.Enabled = True
                        Me.pbti43.Visible = True
                        Me.pbti43.AccessibleName = posterfilename
                        Try
                            pbti43.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 43
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti44.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti44.Visible = True
                        Me.pbti44.ImageLocation = posterfilename
                        Me.pbti44.Enabled = True
                        Me.pbti44.Visible = True
                        Me.pbti44.AccessibleName = posterfilename
                        Try
                            pbti44.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 44
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti45.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti45.Visible = True
                        Me.pbti45.ImageLocation = posterfilename
                        Me.pbti45.Enabled = True
                        Me.pbti45.Visible = True
                        Me.pbti45.AccessibleName = posterfilename
                        Try
                            pbti45.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 45
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti46.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti46.Visible = True
                        Me.pbti46.ImageLocation = posterfilename
                        Me.pbti46.AccessibleName = posterfilename
                        Me.pbti46.Enabled = True
                        Me.pbti46.Visible = True
                        Try
                            pbti46.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 46
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti47.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti47.Visible = True
                        Me.pbti47.ImageLocation = posterfilename
                        Me.pbti47.Enabled = True
                        Me.pbti47.Visible = True
                        Me.pbti47.AccessibleName = posterfilename
                        Try
                            pbti47.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 47
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti48.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti48.Visible = True
                        Me.pbti48.ImageLocation = posterfilename
                        Me.pbti48.Enabled = True
                        Me.pbti48.Visible = True
                        Me.pbti48.AccessibleName = posterfilename
                        Try
                            pbti48.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 48
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti49.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti49.Visible = True
                        Me.pbti49.ImageLocation = posterfilename
                        Me.pbti49.Enabled = True
                        Me.pbti49.Visible = True
                        Me.pbti49.AccessibleName = posterfilename
                        Try
                            pbti49.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 49
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti50.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti50.Visible = True
                        Me.pbti50.ImageLocation = posterfilename
                        Me.pbti50.Enabled = True
                        Me.pbti50.Visible = True
                        Me.pbti50.AccessibleName = posterfilename
                        Try
                            pbti50.Load()

                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try

                Case 50
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti51.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti51.Visible = True
                        Me.pbti51.ImageLocation = posterfilename
                        Me.pbti51.Enabled = True
                        Me.pbti51.Visible = True
                        Me.pbti51.AccessibleName = posterfilename
                        Try
                            pbti51.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 51
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti52.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti52.Visible = True
                        Me.pbti52.ImageLocation = posterfilename
                        Me.pbti52.Enabled = True
                        Me.pbti52.Visible = True
                        Me.pbti52.AccessibleName = posterfilename
                        Try
                            pbti52.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 52
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti53.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti53.Visible = True
                        Me.pbti53.ImageLocation = posterfilename
                        Me.pbti53.Enabled = True
                        Me.pbti53.Visible = True
                        Me.pbti53.AccessibleName = posterfilename
                        Try
                            pbti53.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 53
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti54.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti54.Visible = True
                        Me.pbti54.ImageLocation = posterfilename
                        Me.pbti54.Enabled = True
                        Me.pbti54.Visible = True
                        Me.pbti54.AccessibleName = posterfilename
                        Try
                            pbti54.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 54
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti55.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti55.Visible = True
                        Me.pbti55.ImageLocation = posterfilename
                        Me.pbti55.Enabled = True
                        Me.pbti55.Visible = True
                        Me.pbti55.AccessibleName = posterfilename
                        Try
                            pbti55.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 55
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti56.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti56.Visible = True
                        Me.pbti56.ImageLocation = posterfilename
                        Me.pbti56.AccessibleName = posterfilename
                        Me.pbti56.Enabled = True
                        Me.pbti56.Visible = True
                        Try
                            pbti56.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 56
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti57.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti57.Visible = True
                        Me.pbti57.ImageLocation = posterfilename
                        Me.pbti57.Enabled = True
                        Me.pbti57.Visible = True
                        Me.pbti57.AccessibleName = posterfilename
                        Try
                            pbti57.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 57
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti58.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti58.Visible = True
                        Me.pbti58.ImageLocation = posterfilename
                        Me.pbti58.Enabled = True
                        Me.pbti58.Visible = True
                        Me.pbti58.AccessibleName = posterfilename
                        Try
                            pbti58.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 58
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti59.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti59.Visible = True
                        Me.pbti59.ImageLocation = posterfilename
                        Me.pbti59.Enabled = True
                        Me.pbti59.Visible = True
                        Me.pbti59.AccessibleName = posterfilename
                        Try
                            pbti59.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 59
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti60.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti60.Visible = True
                        Me.pbti60.ImageLocation = posterfilename
                        Me.pbti60.Enabled = True
                        Me.pbti60.Visible = True
                        Me.pbti60.AccessibleName = posterfilename
                        Try
                            pbti60.Load()

                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try

                Case 60
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti61.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti61.Visible = True
                        Me.pbti61.ImageLocation = posterfilename
                        Me.pbti61.Enabled = True
                        Me.pbti61.Visible = True
                        Me.pbti61.AccessibleName = posterfilename
                        Try
                            pbti61.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 61
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti62.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti62.Visible = True
                        Me.pbti62.ImageLocation = posterfilename
                        Me.pbti62.Enabled = True
                        Me.pbti62.Visible = True
                        Me.pbti62.AccessibleName = posterfilename
                        Try
                            pbti62.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 62
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti63.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti63.Visible = True
                        Me.pbti63.ImageLocation = posterfilename
                        Me.pbti63.Enabled = True
                        Me.pbti63.Visible = True
                        Me.pbti63.AccessibleName = posterfilename
                        Try
                            pbti63.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 63
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti64.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti64.Visible = True
                        Me.pbti64.ImageLocation = posterfilename
                        Me.pbti64.Enabled = True
                        Me.pbti64.Visible = True
                        Me.pbti64.AccessibleName = posterfilename
                        Try
                            pbti64.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 64
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti65.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti65.Visible = True
                        Me.pbti65.ImageLocation = posterfilename
                        Me.pbti65.Enabled = True
                        Me.pbti65.Visible = True
                        Me.pbti65.AccessibleName = posterfilename
                        Try
                            pbti65.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 65
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti66.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti66.Visible = True
                        Me.pbti66.ImageLocation = posterfilename
                        Me.pbti66.AccessibleName = posterfilename
                        Me.pbti66.Enabled = True
                        Me.pbti66.Visible = True
                        Try
                            pbti66.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 66
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti67.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti67.Visible = True
                        Me.pbti67.ImageLocation = posterfilename
                        Me.pbti67.Enabled = True
                        Me.pbti67.Visible = True
                        Me.pbti67.AccessibleName = posterfilename
                        Try
                            pbti67.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 67
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti68.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti68.Visible = True
                        Me.pbti68.ImageLocation = posterfilename
                        Me.pbti68.Enabled = True
                        Me.pbti68.Visible = True
                        Me.pbti68.AccessibleName = posterfilename
                        Try
                            pbti68.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 68
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti69.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti69.Visible = True
                        Me.pbti69.ImageLocation = posterfilename
                        Me.pbti69.Enabled = True
                        Me.pbti69.Visible = True
                        Me.pbti69.AccessibleName = posterfilename
                        Try
                            pbti69.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 69
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti70.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti70.Visible = True
                        Me.pbti70.ImageLocation = posterfilename
                        Me.pbti70.Enabled = True
                        Me.pbti70.Visible = True
                        Me.pbti70.AccessibleName = posterfilename
                        Try
                            pbti70.Load()

                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 70
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti71.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti71.Visible = True
                        Me.pbti71.ImageLocation = posterfilename
                        Me.pbti71.Enabled = True
                        Me.pbti71.Visible = True
                        Me.pbti71.AccessibleName = posterfilename
                        Try
                            pbti71.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case 71
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                        lpbti72.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                        objImage.Dispose()
                        lpbti72.Visible = True
                        Me.pbti72.ImageLocation = posterfilename
                        Me.pbti72.Enabled = True
                        Me.pbti72.Visible = True
                        Me.pbti72.AccessibleName = posterfilename
                        Try
                            pbti72.Load()
                        Catch ex As Exception
                            File.Delete(posterfilename)
                        End Try
                    Catch exerror As Exception
                        Debug.Print(exerror.ToString)
                    End Try
                Case Else
                    Debug.Print("Poster image that was set for display but is greater then the 64 allowed in the GUI, I have nowhere to put the darn thing so I'll act like it was never there!")
            End Select
            tbdcou += 1
        Next

    End Sub

    Private Sub displaytvposters(ByVal posterfilename As String, ByVal tbdcou As Integer, ByVal ais As Boolean)
        If posterfilename.Length <= 3 Then Exit Sub

        Dim extension As String = Strings.Right(posterfilename.ToLower, 3)
        Dim extensionpassed As Boolean = False
        If extension = "jpg" Then extensionpassed = True
        If extension = "png" Then extensionpassed = True
        If Not extensionpassed Then Exit Sub

        If messageprompts Then lblPbar.Text = "Setting TVShow Poster : " + tbdcou.ToString
        'If messageprompts Then Me.Refresh()()
        Select Case tbdcou
            Case 0
                Try
                    Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                    klblposterIMP1.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                    objImage.Dispose()
                    klblposterIMP1.Visible = True
                    Me.pbposterIMP1.ImageLocation = posterfilename
                    Me.pbposterIMP1.Enabled = True
                    Me.pbposterIMP1.Visible = True
                    Me.pbposterIMP1.AccessibleName = posterfilename
                    Try
                        pbposterIMP1.Load()
                    Catch ex As Exception
                        File.Delete(posterfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 1
                Try
                    Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                    klblposterIMP2.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                    objImage.Dispose()
                    klblposterIMP2.Visible = True
                    Me.pbposterIMP2.ImageLocation = posterfilename
                    Me.pbposterIMP2.Enabled = True
                    Me.pbposterIMP2.Visible = True
                    Me.pbposterIMP2.AccessibleName = posterfilename
                    Try
                        pbposterIMP2.Load()
                    Catch ex As Exception
                        File.Delete(posterfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 2
                Try
                    Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                    klblposterIMP3.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                    objImage.Dispose()
                    klblposterIMP3.Visible = True
                    Me.pbposterIMP3.ImageLocation = posterfilename
                    Me.pbposterIMP3.Enabled = True
                    Me.pbposterIMP3.Visible = True
                    Me.pbposterIMP3.AccessibleName = posterfilename
                    Try
                        pbposterIMP3.Load()
                    Catch ex As Exception
                        File.Delete(posterfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 3
                Try
                    Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                    klblposterIMP4.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                    objImage.Dispose()
                    klblposterIMP4.Visible = True
                    Me.pbposterIMP4.ImageLocation = posterfilename
                    Me.pbposterIMP4.Enabled = True
                    Me.pbposterIMP4.Visible = True
                    Me.pbposterIMP4.AccessibleName = posterfilename
                    Try
                        pbposterIMP4.Load()
                    Catch ex As Exception
                        File.Delete(posterfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 4
                Try
                    Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                    klblposterIMP5.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                    objImage.Dispose()
                    klblposterIMP5.Visible = True
                    Me.pbposterIMP5.ImageLocation = posterfilename
                    Me.pbposterIMP5.Enabled = True
                    Me.pbposterIMP5.Visible = True
                    Me.pbposterIMP5.AccessibleName = posterfilename
                    Try
                        pbposterIMP5.Load()
                    Catch ex As Exception
                        File.Delete(posterfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 5
                Try
                    Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                    klblposterIMP6.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                    objImage.Dispose()
                    klblposterIMP6.Visible = True
                    Me.pbposterIMP6.ImageLocation = posterfilename
                    Me.pbposterIMP6.AccessibleName = posterfilename
                    Me.pbposterIMP6.Enabled = True
                    Me.pbposterIMP6.Visible = True
                    Try
                        pbposterIMP6.Load()

                    Catch ex As Exception
                        File.Delete(posterfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 6
                Try
                    Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                    klblposterIMP7.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                    objImage.Dispose()
                    klblposterIMP7.Visible = True
                    Me.pbposterIMP7.ImageLocation = posterfilename
                    Me.pbposterIMP7.Enabled = True
                    Me.pbposterIMP7.Visible = True
                    Me.pbposterIMP7.AccessibleName = posterfilename
                    Try
                        pbposterIMP7.Load()

                    Catch ex As Exception
                        File.Delete(posterfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 7
                Try
                    Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                    klblposterIMP8.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                    objImage.Dispose()
                    klblposterIMP8.Visible = True
                    Me.pbposterIMP8.ImageLocation = posterfilename
                    Me.pbposterIMP8.Enabled = True
                    Me.pbposterIMP8.Visible = True
                    Me.pbposterIMP8.AccessibleName = posterfilename
                    Try
                        pbposterIMP8.Load()
                    Catch ex As Exception
                        File.Delete(posterfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 8
                Try
                    Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                    klblposterIMP9.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                    objImage.Dispose()
                    klblposterIMP9.Visible = True
                    Me.pbposterIMP9.ImageLocation = posterfilename
                    Me.pbposterIMP9.Enabled = True
                    Me.pbposterIMP9.Visible = True
                    Me.pbposterIMP9.AccessibleName = posterfilename
                    Try
                        pbposterIMP9.Load()
                    Catch ex As Exception
                        File.Delete(posterfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 9

                Try
                    Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                    klblposterIMP10.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                    objImage.Dispose()
                    klblposterIMP10.Visible = True
                    Me.pbposterIMP10.ImageLocation = posterfilename
                    Me.pbposterIMP10.Enabled = True
                    Me.pbposterIMP10.Visible = True
                    Me.pbposterIMP10.AccessibleName = posterfilename
                    Try
                        pbposterIMP10.Load()
                    Catch ex As Exception
                        File.Delete(posterfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 10
                Try
                    Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                    klblposterIMP11.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                    objImage.Dispose()
                    klblposterIMP11.Visible = True
                    Me.pbposterIMP11.ImageLocation = posterfilename
                    Me.pbposterIMP11.Enabled = True
                    Me.pbposterIMP11.Visible = True
                    Me.pbposterIMP11.AccessibleName = posterfilename
                    Try
                        pbposterIMP11.Load()
                    Catch ex As Exception
                        File.Delete(posterfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 11
                Try
                    Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                    klblposterIMP12.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                    objImage.Dispose()
                    klblposterIMP12.Visible = True
                    Me.pbposterIMP12.ImageLocation = posterfilename
                    Me.pbposterIMP12.Enabled = True
                    Me.pbposterIMP12.Visible = True
                    Me.pbposterIMP12.AccessibleName = posterfilename
                    Try
                        pbposterIMP12.Load()
                    Catch ex As Exception
                        File.Delete(posterfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 12
                Try
                    Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                    klblposterIMP13.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                    objImage.Dispose()
                    klblposterIMP13.Visible = True
                    Me.pbposterIMP13.ImageLocation = posterfilename
                    Me.pbposterIMP13.Enabled = True
                    Me.pbposterIMP13.Visible = True
                    Me.pbposterIMP13.AccessibleName = posterfilename
                    Try
                        pbposterIMP13.Load()
                    Catch ex As Exception
                        File.Delete(posterfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 13
                Try
                    Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                    klblposterIMP14.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                    objImage.Dispose()
                    klblposterIMP14.Visible = True
                    Me.pbposterIMP14.ImageLocation = posterfilename
                    Me.pbposterIMP14.Enabled = True
                    Me.pbposterIMP14.Visible = True
                    Me.pbposterIMP14.AccessibleName = posterfilename
                    Try
                        pbposterIMP14.Load()
                    Catch ex As Exception
                        File.Delete(posterfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 14
                Try
                    Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                    klblposterIMP15.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                    objImage.Dispose()
                    klblposterIMP15.Visible = True
                    Me.pbposterIMP15.ImageLocation = posterfilename
                    Me.pbposterIMP15.Enabled = True
                    Me.pbposterIMP15.Visible = True
                    Me.pbposterIMP15.AccessibleName = posterfilename
                    Try
                        pbposterIMP15.Load()
                    Catch ex As Exception
                        File.Delete(posterfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 15
                Try
                    Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                    klblposterIMP16.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                    objImage.Dispose()
                    klblposterIMP16.Visible = True
                    Me.pbposterIMP16.ImageLocation = posterfilename
                    Me.pbposterIMP16.AccessibleName = posterfilename
                    Me.pbposterIMP16.Enabled = True
                    Me.pbposterIMP16.Visible = True
                    Try
                        pbposterIMP16.Load()
                    Catch ex As Exception
                        File.Delete(posterfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 16
                Try
                    Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                    klblposterIMP17.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                    objImage.Dispose()
                    klblposterIMP17.Visible = True
                    Me.pbposterIMP17.ImageLocation = posterfilename
                    Me.pbposterIMP17.Enabled = True
                    Me.pbposterIMP17.Visible = True
                    Me.pbposterIMP17.AccessibleName = posterfilename
                    Try
                        pbposterIMP17.Load()
                    Catch ex As Exception
                        File.Delete(posterfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 17
                Try
                    Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                    klblposterIMP18.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                    objImage.Dispose()
                    klblposterIMP18.Visible = True
                    Me.pbposterIMP18.ImageLocation = posterfilename
                    Me.pbposterIMP18.Enabled = True
                    Me.pbposterIMP18.Visible = True
                    Me.pbposterIMP18.AccessibleName = posterfilename
                    Try
                        pbposterIMP18.Load()
                    Catch ex As Exception
                        File.Delete(posterfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 18
                Try
                    Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                    klblposterIMP19.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                    objImage.Dispose()
                    klblposterIMP19.Visible = True
                    Me.pbposterIMP19.ImageLocation = posterfilename
                    Me.pbposterIMP19.Enabled = True
                    Me.pbposterIMP19.Visible = True
                    Me.pbposterIMP19.AccessibleName = posterfilename
                    Try
                        pbposterIMP19.Load()
                    Catch ex As Exception
                        File.Delete(posterfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 19
                Try
                    Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                    klblposterIMP20.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                    objImage.Dispose()
                    klblposterIMP20.Visible = True
                    Me.pbposterIMP20.ImageLocation = posterfilename
                    Me.pbposterIMP20.Enabled = True
                    Me.pbposterIMP20.Visible = True
                    Me.pbposterIMP20.AccessibleName = posterfilename
                    Try
                        pbposterIMP20.Load()

                    Catch ex As Exception
                        File.Delete(posterfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 20
                Try
                    Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                    klblposterIMP21.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                    objImage.Dispose()
                    klblposterIMP21.Visible = True
                    Me.pbposterIMP21.ImageLocation = posterfilename
                    Me.pbposterIMP21.Enabled = True
                    Me.pbposterIMP21.Visible = True
                    Me.pbposterIMP21.AccessibleName = posterfilename
                    Try
                        pbposterIMP21.Load()
                    Catch ex As Exception
                        File.Delete(posterfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 21
                Try
                    Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                    klblposterIMP22.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                    objImage.Dispose()
                    klblposterIMP22.Visible = True
                    Me.pbposterIMP22.ImageLocation = posterfilename
                    Me.pbposterIMP22.AccessibleName = posterfilename
                    Me.pbposterIMP22.Enabled = True
                    Me.pbposterIMP22.Visible = True
                    Try
                        pbposterIMP22.Load()
                    Catch ex As Exception
                        File.Delete(posterfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 22
                Try
                    Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                    klblposterIMP23.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                    objImage.Dispose()
                    klblposterIMP23.Visible = True
                    Me.pbposterIMP23.ImageLocation = posterfilename
                    Me.pbposterIMP23.Enabled = True
                    Me.pbposterIMP23.Visible = True
                    Me.pbposterIMP23.AccessibleName = posterfilename
                    Try
                        pbposterIMP23.Load()
                    Catch ex As Exception
                        File.Delete(posterfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 23
                Try
                    Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(posterfilename)
                    klblposterIMP24.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(posterfilename)
                    objImage.Dispose()
                    klblposterIMP24.Visible = True
                    Me.pbposterIMP24.ImageLocation = posterfilename
                    Me.pbposterIMP24.Enabled = True
                    Me.pbposterIMP24.Visible = True
                    Me.pbposterIMP24.AccessibleName = posterfilename
                    Try
                        pbposterIMP24.Load()
                    Catch ex As Exception
                        File.Delete(posterfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case Else
                Debug.Print("Fanart image that was set for display greater then the 24 allowed in the GUI, I have nowhere to put the darn thing so I'll act like it was never there!")
        End Select
    End Sub
    Private Sub displaytvwideicons(ByVal wideiconfilename As String, ByVal tbdcou As Integer, ByVal ais As Boolean)
        If wideiconfilename.Length <= 3 Then Exit Sub

        Dim extension As String = Strings.Right(wideiconfilename.ToLower, 3)
        Dim extensionpassed As Boolean = False
        If extension = "jpg" Then extensionpassed = True
        If extension = "png" Then extensionpassed = True
        If Not extensionpassed Then Exit Sub

        If messageprompts Then lblPbar.Text = "Setting Wide Icon: " + tbdcou.ToString
        'If messageprompts Then Me.Refresh()()
        Select Case tbdcou
            Case 0
                Try
                    Me.pbtvwide1.ImageLocation = wideiconfilename
                    Me.pbtvwide1.Enabled = True
                    Me.pbtvwide1.Visible = True
                    Me.pbtvwide1.AccessibleName = wideiconfilename
                    Try
                        pbtvwide1.Load()
                    Catch ex As Exception
                        File.Delete(wideiconfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 1
                Try

                    Me.pbtvwide2.ImageLocation = wideiconfilename
                    Me.pbtvwide2.Enabled = True
                    Me.pbtvwide2.Visible = True
                    Me.pbtvwide2.AccessibleName = wideiconfilename
                    Try
                        pbtvwide2.Load()
                    Catch ex As Exception
                        File.Delete(wideiconfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 2
                Try

                    Me.pbtvwide3.ImageLocation = wideiconfilename
                    Me.pbtvwide3.Enabled = True
                    Me.pbtvwide3.Visible = True
                    Me.pbtvwide3.AccessibleName = wideiconfilename
                    Try
                        pbtvwide3.Load()
                    Catch ex As Exception
                        File.Delete(wideiconfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 3
                Try

                    Me.pbtvwide4.ImageLocation = wideiconfilename
                    Me.pbtvwide4.Enabled = True
                    Me.pbtvwide4.Visible = True
                    Me.pbtvwide4.AccessibleName = wideiconfilename
                    Try
                        pbtvwide4.Load()
                    Catch ex As Exception
                        File.Delete(wideiconfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 4
                Try

                    Me.pbtvwide5.ImageLocation = wideiconfilename
                    Me.pbtvwide5.Enabled = True
                    Me.pbtvwide5.Visible = True
                    Me.pbtvwide5.AccessibleName = wideiconfilename
                    Try
                        pbtvwide5.Load()
                    Catch ex As Exception
                        File.Delete(wideiconfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 5
                Try
                    Me.pbtvwide6.ImageLocation = wideiconfilename
                    Me.pbtvwide6.AccessibleName = wideiconfilename
                    Me.pbtvwide6.Enabled = True
                    Me.pbtvwide6.Visible = True
                    Try
                        pbtvwide6.Load()

                    Catch ex As Exception
                        File.Delete(wideiconfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 6
                Try

                    Me.pbtvwide7.ImageLocation = wideiconfilename
                    Me.pbtvwide7.Enabled = True
                    Me.pbtvwide7.Visible = True
                    Me.pbtvwide7.AccessibleName = wideiconfilename
                    Try
                        pbtvwide7.Load()

                    Catch ex As Exception
                        File.Delete(wideiconfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 7
                Try
                    Me.pbtvwide8.ImageLocation = wideiconfilename
                    Me.pbtvwide8.Enabled = True
                    Me.pbtvwide8.Visible = True
                    Me.pbtvwide8.AccessibleName = wideiconfilename
                    Try
                        pbtvwide8.Load()
                    Catch ex As Exception
                        File.Delete(wideiconfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 8
                Try
                    Me.pbtvwide9.ImageLocation = wideiconfilename
                    Me.pbtvwide9.Enabled = True
                    Me.pbtvwide9.Visible = True
                    Me.pbtvwide9.AccessibleName = wideiconfilename
                    Try
                        pbtvwide9.Load()
                    Catch ex As Exception
                        File.Delete(wideiconfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 9

                Try
                    Me.pbtvwide10.ImageLocation = wideiconfilename
                    Me.pbtvwide10.Enabled = True
                    Me.pbtvwide10.Visible = True
                    Me.pbtvwide10.AccessibleName = wideiconfilename
                    Try
                        pbtvwide10.Load()
                    Catch ex As Exception
                        File.Delete(wideiconfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 10
                Try
                    Me.pbtvwide11.ImageLocation = wideiconfilename
                    Me.pbtvwide11.Enabled = True
                    Me.pbtvwide11.Visible = True
                    Me.pbtvwide11.AccessibleName = wideiconfilename
                    Try
                        pbtvwide11.Load()
                    Catch ex As Exception
                        File.Delete(wideiconfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 11
                Try
                    Me.pbtvwide12.ImageLocation = wideiconfilename
                    Me.pbtvwide12.Enabled = True
                    Me.pbtvwide12.Visible = True
                    Me.pbtvwide12.AccessibleName = wideiconfilename
                    Try
                        pbtvwide12.Load()
                    Catch ex As Exception
                        File.Delete(wideiconfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 12
                Try
                    Me.pbtvwide13.ImageLocation = wideiconfilename
                    Me.pbtvwide13.Enabled = True
                    Me.pbtvwide13.Visible = True
                    Me.pbtvwide13.AccessibleName = wideiconfilename
                    Try
                        pbtvwide13.Load()
                    Catch ex As Exception
                        File.Delete(wideiconfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 13
                Try
                    Me.pbtvwide14.ImageLocation = wideiconfilename
                    Me.pbtvwide14.Enabled = True
                    Me.pbtvwide14.Visible = True
                    Me.pbtvwide14.AccessibleName = wideiconfilename
                    Try
                        pbtvwide14.Load()
                    Catch ex As Exception
                        File.Delete(wideiconfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 14
                Try
                    Me.pbtvwide15.ImageLocation = wideiconfilename
                    Me.pbtvwide15.Enabled = True
                    Me.pbtvwide15.Visible = True
                    Me.pbtvwide15.AccessibleName = wideiconfilename
                    Try
                        pbtvwide15.Load()
                    Catch ex As Exception
                        File.Delete(wideiconfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 15
                Try
                    Me.pbtvwide16.ImageLocation = wideiconfilename
                    Me.pbtvwide16.AccessibleName = wideiconfilename
                    Me.pbtvwide16.Enabled = True
                    Me.pbtvwide16.Visible = True
                    Try
                        pbtvwide16.Load()
                    Catch ex As Exception
                        File.Delete(wideiconfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 16
                Try
                    Me.pbtvwide17.ImageLocation = wideiconfilename
                    Me.pbtvwide17.Enabled = True
                    Me.pbtvwide17.Visible = True
                    Me.pbtvwide17.AccessibleName = wideiconfilename
                    Try
                        pbtvwide17.Load()
                    Catch ex As Exception
                        File.Delete(wideiconfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 17
                Try
                    Me.pbtvwide18.ImageLocation = wideiconfilename
                    Me.pbtvwide18.Enabled = True
                    Me.pbtvwide18.Visible = True
                    Me.pbtvwide18.AccessibleName = wideiconfilename
                    Try
                        pbtvwide18.Load()
                    Catch ex As Exception
                        File.Delete(wideiconfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 18
                Try
                    Me.pbtvwide19.ImageLocation = wideiconfilename
                    Me.pbtvwide19.Enabled = True
                    Me.pbtvwide19.Visible = True
                    Me.pbtvwide19.AccessibleName = wideiconfilename
                    Try
                        pbtvwide19.Load()
                    Catch ex As Exception
                        File.Delete(wideiconfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 19
                Try
                    Me.pbtvwide20.ImageLocation = wideiconfilename
                    Me.pbtvwide20.Enabled = True
                    Me.pbtvwide20.Visible = True
                    Me.pbtvwide20.AccessibleName = wideiconfilename
                    Try
                        pbtvwide20.Load()

                    Catch ex As Exception
                        File.Delete(wideiconfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 20
                Try
                    Me.pbtvwide21.ImageLocation = wideiconfilename
                    Me.pbtvwide21.Enabled = True
                    Me.pbtvwide21.Visible = True
                    Me.pbtvwide21.AccessibleName = wideiconfilename
                    Try
                        pbtvwide21.Load()
                    Catch ex As Exception
                        File.Delete(wideiconfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 21
                Try
                    Me.pbtvwide22.ImageLocation = wideiconfilename
                    Me.pbtvwide22.AccessibleName = wideiconfilename
                    Me.pbtvwide22.Enabled = True
                    Me.pbtvwide22.Visible = True
                    Try
                        pbtvwide22.Load()
                    Catch ex As Exception
                        File.Delete(wideiconfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 22
                Try
                    Me.pbtvwide23.ImageLocation = wideiconfilename
                    Me.pbtvwide23.Enabled = True
                    Me.pbtvwide23.Visible = True
                    Me.pbtvwide23.AccessibleName = wideiconfilename
                    Try
                        pbtvwide23.Load()
                    Catch ex As Exception
                        File.Delete(wideiconfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case 23
                Try
                    Me.pbtvwide24.ImageLocation = wideiconfilename
                    Me.pbtvwide24.Enabled = True
                    Me.pbtvwide24.Visible = True
                    Me.pbtvwide24.AccessibleName = wideiconfilename
                    Try
                        pbtvwide24.Load()
                    Catch ex As Exception
                        File.Delete(wideiconfilename)
                    End Try
                Catch exerror As Exception
                    Debug.Print(exerror.ToString)
                End Try
            Case Else
                Debug.Print("WideIcon image that was set for display greater then the 24 allowed in the GUI, I have nowhere to put the darn thing so I'll act like it was never there!")
        End Select
    End Sub
    Private Sub displaytvfanart(ByVal fanartfilename As String, ByVal tbdcou As Integer, ByVal ais As Boolean)
        If fanartfilename.Length <= 3 Then Exit Sub

        Dim extension As String = Strings.Right(fanartfilename.ToLower, 3)
        Dim extensionpassed As Boolean = False
        If extension = "jpg" Then extensionpassed = True
        If extension = "png" Then extensionpassed = True
        If Not extensionpassed Then Exit Sub

        If ais Then
            'temp mod to fanart filename
            'fanartfilename = tmovie.pimdbnumber + "\" + fanartfilename
            Select Case tbdcou
                'the try block is an attempt to load the image and set the sizelbl for it, this also validates the download of the full size image
                Case 0
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(fanartfilename)
                        klblfatmdb1.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(fanartfilename)
                        'objImage = Nothing
                        objImage.Dispose()
                        klblfatmdb1.Visible = True
                        Me.pbfatmdb1.ImageLocation = fanartfilename
                        Me.pbfatmdb1.Enabled = True
                        Me.pbfatmdb1.Visible = True
                        Me.pbfatmdb1.AccessibleName = fanartfilename
                        pbfatmdb1.Load()
                    Catch ex As Exception
                        Debug.Print(ex.ToString)
                    End Try

                Case 1
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(fanartfilename)
                        klblfatmdb2.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(fanartfilename)
                        'objImage = Nothing
                        objImage.Dispose()
                        klblfatmdb2.Visible = True
                        Me.pbfatmdb2.ImageLocation = fanartfilename
                        Me.pbfatmdb2.Enabled = True
                        Me.pbfatmdb2.Visible = True
                        Me.pbfatmdb2.AccessibleName = fanartfilename
                        pbfatmdb2.Load()
                    Catch ex As Exception
                        Debug.Print(ex.ToString)
                    End Try
                Case 2
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(fanartfilename)
                        klblfatmdb3.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(fanartfilename)
                        'objImage = Nothing
                        objImage.Dispose()
                        klblfatmdb3.Visible = True
                        Me.pbfatmdb3.ImageLocation = fanartfilename
                        Me.pbfatmdb3.Enabled = True
                        Me.pbfatmdb3.Visible = True
                        Me.pbfatmdb3.AccessibleName = fanartfilename
                        pbfatmdb3.Load()
                    Catch ex As Exception
                        Debug.Print(ex.ToString)
                    End Try
                Case 3
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(fanartfilename)
                        klblfatmdb4.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(fanartfilename)
                        'objImage = Nothing
                        objImage.Dispose()
                        klblfatmdb4.Visible = True
                        Me.pbfatmdb4.ImageLocation = fanartfilename
                        Me.pbfatmdb4.Enabled = True
                        Me.pbfatmdb4.Visible = True
                        Me.pbfatmdb4.AccessibleName = fanartfilename
                        pbfatmdb4.Load()
                    Catch ex As Exception
                        Debug.Print(ex.ToString)
                    End Try
                Case 4
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(fanartfilename)
                        klblfatmdb5.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(fanartfilename)
                        'objImage = Nothing
                        objImage.Dispose()
                        klblfatmdb5.Visible = True
                        Me.pbfatmdb5.ImageLocation = fanartfilename
                        Me.pbfatmdb5.Enabled = True
                        Me.pbfatmdb5.Visible = True
                        Me.pbfatmdb5.AccessibleName = fanartfilename
                        pbfatmdb5.Load()
                    Catch ex As Exception
                        Debug.Print(ex.ToString)
                    End Try
                Case 5
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(fanartfilename)
                        klblfatmdb6.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(fanartfilename)
                        'objImage = Nothing
                        objImage.Dispose()
                        klblfatmdb6.Visible = True
                        Me.pbfatmdb6.ImageLocation = fanartfilename
                        Me.pbfatmdb6.Enabled = True
                        Me.pbfatmdb6.Visible = True
                        Me.pbfatmdb6.AccessibleName = fanartfilename
                        pbfatmdb6.Load()
                    Catch ex As Exception
                        Debug.Print(ex.ToString)
                    End Try

                Case 6
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(fanartfilename)
                        klblfatmdb7.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(fanartfilename)
                        'objImage = Nothing
                        objImage.Dispose()
                        klblfatmdb7.Visible = True
                        Me.pbfatmdb7.ImageLocation = fanartfilename
                        Me.pbfatmdb7.Enabled = True
                        Me.pbfatmdb7.Visible = True
                        Me.pbfatmdb7.AccessibleName = fanartfilename
                        pbfatmdb7.Load()
                    Catch ex As Exception
                        Debug.Print(ex.ToString)
                    End Try
                Case 7
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(fanartfilename)
                        klblfatmdb8.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(fanartfilename)
                        'objImage = Nothing
                        objImage.Dispose()
                        klblfatmdb8.Visible = True
                        Me.pbfatmdb8.ImageLocation = fanartfilename
                        Me.pbfatmdb8.Enabled = True
                        Me.pbfatmdb8.Visible = True
                        Me.pbfatmdb8.AccessibleName = fanartfilename
                        pbfatmdb8.Load()
                    Catch ex As Exception
                        Debug.Print(ex.ToString)
                    End Try
                Case 8
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(fanartfilename)
                        klblfatmdb9.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(fanartfilename)
                        'objImage = Nothing
                        objImage.Dispose()
                        klblfatmdb9.Visible = True
                        Me.pbfatmdb9.ImageLocation = fanartfilename
                        Me.pbfatmdb9.Enabled = True
                        Me.pbfatmdb9.Visible = True
                        Me.pbfatmdb9.AccessibleName = fanartfilename
                        pbfatmdb9.Load()
                    Catch ex As Exception
                        Debug.Print(ex.ToString)
                    End Try
                Case 9
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(fanartfilename)
                        klblfatmdb10.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(fanartfilename)
                        'objImage = Nothing
                        objImage.Dispose()
                        klblfatmdb10.Visible = True
                        Me.pbfatmdb10.ImageLocation = fanartfilename
                        Me.pbfatmdb10.Enabled = True
                        Me.pbfatmdb10.Visible = True
                        Me.pbfatmdb10.AccessibleName = fanartfilename
                        pbfatmdb10.Load()
                    Catch ex As Exception
                        Debug.Print(ex.ToString)
                    End Try
                Case 10
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(fanartfilename)
                        klblfatmdb11.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(fanartfilename)
                        'objImage = Nothing
                        objImage.Dispose()
                        klblfatmdb11.Visible = True
                        Me.pbfatmdb11.ImageLocation = fanartfilename
                        Me.pbfatmdb11.Enabled = True
                        Me.pbfatmdb11.Visible = True
                        Me.pbfatmdb11.AccessibleName = fanartfilename
                        pbfatmdb11.Load()
                    Catch ex As Exception
                        Debug.Print(ex.ToString)
                    End Try
                Case 11
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(fanartfilename)
                        klblfatmdb12.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(fanartfilename)
                        'objImage = Nothing
                        objImage.Dispose()
                        klblfatmdb12.Visible = True
                        Me.pbfatmdb12.ImageLocation = fanartfilename
                        Me.pbfatmdb12.Enabled = True
                        Me.pbfatmdb12.Visible = True
                        Me.pbfatmdb12.AccessibleName = fanartfilename
                        pbfatmdb12.Load()
                    Catch ex As Exception
                        Debug.Print(ex.ToString)
                    End Try
                Case 12
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(fanartfilename)
                        klblfatmdb13.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(fanartfilename)
                        'objImage = Nothing
                        objImage.Dispose()
                        klblfatmdb13.Visible = True
                        Me.pbfatmdb13.ImageLocation = fanartfilename
                        Me.pbfatmdb13.Enabled = True
                        Me.pbfatmdb13.Visible = True
                        Me.pbfatmdb13.AccessibleName = fanartfilename
                        pbfatmdb13.Load()
                    Catch ex As Exception
                        Debug.Print(ex.ToString)
                    End Try
                Case 13
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(fanartfilename)
                        klblfatmdb14.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(fanartfilename)
                        'objImage = Nothing
                        objImage.Dispose()
                        klblfatmdb14.Visible = True
                        Me.pbfatmdb14.ImageLocation = fanartfilename
                        Me.pbfatmdb14.Enabled = True
                        Me.pbfatmdb14.Visible = True
                        Me.pbfatmdb14.AccessibleName = fanartfilename
                        pbfatmdb14.Load()
                    Catch ex As Exception
                        Debug.Print(ex.ToString)
                    End Try
                Case 14
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(fanartfilename)
                        klblfatmdb15.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(fanartfilename)
                        'objImage = Nothing
                        objImage.Dispose()
                        klblfatmdb15.Visible = True
                        Me.pbfatmdb15.ImageLocation = fanartfilename
                        Me.pbfatmdb15.Enabled = True
                        Me.pbfatmdb15.Visible = True
                        Me.pbfatmdb15.AccessibleName = fanartfilename
                        pbfatmdb16.Load()
                    Catch ex As Exception
                        Debug.Print(ex.ToString)
                    End Try
                Case 15
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(fanartfilename)
                        klblfatmdb16.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(fanartfilename)
                        'objImage = Nothing
                        objImage.Dispose()
                        klblfatmdb16.Visible = True
                        Me.pbfatmdb16.ImageLocation = fanartfilename
                        Me.pbfatmdb16.Enabled = True
                        Me.pbfatmdb16.Visible = True
                        Me.pbfatmdb16.AccessibleName = fanartfilename
                        pbfatmdb16.Load()
                    Catch ex As Exception
                        Debug.Print(ex.ToString)
                    End Try
                Case 16
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(fanartfilename)
                        klblfatmdb17.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(fanartfilename)
                        'objImage = Nothing
                        objImage.Dispose()
                        klblfatmdb17.Visible = True
                        Me.pbfatmdb17.ImageLocation = fanartfilename
                        Me.pbfatmdb17.Enabled = True
                        Me.pbfatmdb17.Visible = True
                        Me.pbfatmdb17.AccessibleName = fanartfilename
                        pbfatmdb17.Load()
                    Catch ex As Exception
                        Debug.Print(ex.ToString)
                    End Try
                Case 17
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(fanartfilename)
                        klblfatmdb18.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(fanartfilename)
                        'objImage = Nothing
                        objImage.Dispose()
                        klblfatmdb18.Visible = True
                        Me.pbfatmdb18.ImageLocation = fanartfilename
                        Me.pbfatmdb18.Enabled = True
                        Me.pbfatmdb18.Visible = True
                        Me.pbfatmdb18.AccessibleName = fanartfilename
                        pbfatmdb18.Load()
                    Catch ex As Exception
                        Debug.Print(ex.ToString)
                    End Try
                Case 18
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(fanartfilename)
                        klblfatmdb19.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(fanartfilename)
                        'objImage = Nothing
                        objImage.Dispose()
                        klblfatmdb19.Visible = True
                        Me.pbfatmdb19.ImageLocation = fanartfilename
                        Me.pbfatmdb19.Enabled = True
                        Me.pbfatmdb19.Visible = True
                        Me.pbfatmdb19.AccessibleName = fanartfilename
                        pbfatmdb19.Load()
                    Catch ex As Exception
                        Debug.Print(ex.ToString)
                    End Try
                Case 19
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(fanartfilename)
                        klblfatmdb20.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(fanartfilename)
                        'objImage = Nothing
                        objImage.Dispose()
                        klblfatmdb20.Visible = True
                        Me.pbfatmdb20.ImageLocation = fanartfilename
                        Me.pbfatmdb20.Enabled = True
                        Me.pbfatmdb20.Visible = True
                        Me.pbfatmdb20.AccessibleName = fanartfilename
                        pbfatmdb20.Load()
                    Catch ex As Exception
                        Debug.Print(ex.ToString)
                    End Try
                Case 20
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(fanartfilename)
                        klblfatmdb21.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(fanartfilename)
                        'objImage = Nothing
                        objImage.Dispose()
                        klblfatmdb21.Visible = True
                        Me.pbfatmdb21.ImageLocation = fanartfilename
                        Me.pbfatmdb21.Enabled = True
                        Me.pbfatmdb21.Visible = True
                        Me.pbfatmdb21.AccessibleName = fanartfilename
                        pbfatmdb21.Load()
                    Catch ex As Exception
                        Debug.Print(ex.ToString)
                    End Try
                Case 21
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(fanartfilename)
                        klblfatmdb22.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(fanartfilename)
                        'objImage = Nothing
                        objImage.Dispose()
                        klblfatmdb22.Visible = True
                        Me.pbfatmdb22.ImageLocation = fanartfilename
                        Me.pbfatmdb22.Enabled = True
                        Me.pbfatmdb22.Visible = True
                        Me.pbfatmdb22.AccessibleName = fanartfilename
                        pbfatmdb22.Load()
                    Catch ex As Exception
                        Debug.Print(ex.ToString)
                    End Try
                Case 22
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(fanartfilename)
                        klblfatmdb23.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(fanartfilename)
                        'objImage = Nothing
                        objImage.Dispose()
                        klblfatmdb23.Visible = True
                        Me.pbfatmdb23.ImageLocation = fanartfilename
                        Me.pbfatmdb23.Enabled = True
                        Me.pbfatmdb23.Visible = True
                        Me.pbfatmdb23.AccessibleName = fanartfilename
                        pbfatmdb23.Load()
                    Catch ex As Exception
                        Debug.Print(ex.ToString)
                    End Try
                Case 23
                    Try
                        Dim objImage As System.Drawing.Image = System.Drawing.Image.FromFile(fanartfilename)
                        klblfatmdb24.Text = objImage.Width.ToString & "x" & objImage.Height.ToString & " Size: " & getFileSize(fanartfilename)
                        'objImage = Nothing
                        objImage.Dispose()
                        klblfatmdb24.Visible = True
                        Me.pbfatmdb24.ImageLocation = fanartfilename
                        Me.pbfatmdb24.Enabled = True
                        Me.pbfatmdb24.Visible = True
                        Me.pbfatmdb24.AccessibleName = fanartfilename
                        pbfatmdb24.Load()
                    Catch ex As Exception
                        Debug.Print(ex.ToString)
                    End Try
                Case Else
                    Debug.Print("fanart image display greater then 24, nowhere to put the darn thing")
            End Select
        End If
        'tbdcou += 1
        ''break out of loop if running autopilot after the 1st item (counter = 1)
        'If autopilotrunning And tbdcou = 1 Then Exit Sub
        ''break out of loop if there's more then 24 fanarts, there's no gui option for those
        'If tbdcou = 25 Then Exit Sub

        'End While
    End Sub
    Private Sub tvratingtostars(ByVal rating As String)
        'no longer visable
        Exit Sub


        Debug.Print(rating)
        If rating = "" Then rating = "0.0"
        Dim fullstars As Integer
        Dim halfstars As Integer
        Try
            Dim ratingnPeices() As String = rating.Split(CChar("."))
            fullstars = CInt(ratingnPeices(0))
            halfstars = CInt(ratingnPeices(1))
        Catch ex As Exception
            Debug.Print(ex.ToString)
        End Try

        Dim stararray As New List(Of Windows.Forms.PictureBox)
        stararray.Add(pbTVStar1)
        stararray.Add(pbTVStar2)
        stararray.Add(pbTVStar3)
        stararray.Add(pbTVStar4)
        stararray.Add(pbTVStar5)
        stararray.Add(pbTVStar6)
        stararray.Add(pbTVStar7)
        stararray.Add(pbTVStar8)
        stararray.Add(pbTVStar9)
        stararray.Add(pbTVStar10)


        For Each star As Windows.Forms.PictureBox In stararray
            star.ImageLocation = Nothing
            star.Image = Nothing
        Next

        'If Not fullstars = Nothing And Not fullstars = 0 Then
        Dim fstarcount As Integer
        For fstarcount = 0 To 9 'fullstars
            If fullstars >= fstarcount + 1 Then
                stararray.Item(fstarcount).ImageLocation = rconf.resourcefolder + "fullstar.png"
                stararray.Item(fstarcount).Load()
            ElseIf fullstars = fstarcount And halfstars >= 5 Then
                stararray.Item(fstarcount).ImageLocation = rconf.resourcefolder + "halfstar.png"
                stararray.Item(fstarcount).Load()
            Else
                stararray.Item(fstarcount).ImageLocation = rconf.resourcefolder + "emptystar.png"
                stararray.Item(fstarcount).Load()
            End If
        Next

    End Sub


    Private Sub lbTvShowPicker_click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles lbTvShowPicker.Click
        If lbTvShowPicker.SelectedValue Is Nothing Then Exit Sub
        currenttvshowdownloadlist.Clear()
        klblAllSeasonPosterStatic.Visible = True
        kgpbSeasonAllposter.Visible = True
        If rbem.Checked Then
            lblPbar.Visible = True
            messageprompts = True
        Else
            messageprompts = False
        End If
        khgShowsMI.Visible = False
        If messageprompts Then lblPbar.Text = "Reading TV Show Data"
        'If messageprompts Then Me.Refresh()()
        If cbAllowIconSelection.Checked Then resetanddisableimages()
        tpmmn.Enabled = False
        tpmipf.Enabled = False
        tpTVWideIcons.Text = "TV Wide Icons"
        tpTVWideIcons.Enabled = True

        tpIMPPosters.Text = "TV Show Posters"
        tpTMDBPosters.Text = "Season Specific Posters - Click on Season to select"
        tpTMDBPosters.Enabled = False

        kpEpisodeData.Visible = False
        'TVCurrentTVRightMain.Panel1Collapsed = False
        kcstvMainRightBottom.Panel2Collapsed = False
        Debug.Print("kcbshowpicker clicked")
        Dim curtvshowpath As String = lbTvShowPicker.SelectedValue.ToString
        'strip out the id from the path'
        Dim theid As String = Regex.Match(curtvshowpath, "(:\d*?:)").Groups(1).Value
        curtvshowpath = Strings.Replace(curtvshowpath, theid, "")

        If messageprompts Then lblPbar.Text = "Setting up Icon Selection Data"
        'If messageprompts Then Me.Refresh()()

        'setup for icon selection

        curtvshowiconsetting = addfiletofolder(curtvshowpath, "folder.jpg")
        curtvshowiconsettinglbl.Text = "Selected Image to save or modify: TV Show Wide or Poster Icon (folder.jpg)"
        curtvshowpicturboxtoupdate = pbTVWide

        mycurrentshow.Clear()

        If messageprompts Then lblPbar.Text = "Gathering Season Information"
        'If messageprompts Then Me.Refresh()()

        Dim dtcurrentshowseason As New DataTable
        dtcurrentshowseason.Columns.Add("Season Number", GetType(System.String))
        dtcurrentshowseason.Columns.Add("dtuid", GetType(System.String))
        dtcurrentshowseason.Columns.Add("Index")
        dtcurrentshowseason.Clear()
        seasonshashtable.Clear()
        Dim currentshowid As String = Strings.Replace(theid, ":", "")
        'asdf()
        For Each tctvshow As movieinfoplus.completeshows In mytvshowcollection
            'If 
            Debug.Print(tctvshow.tvshowid)
            If currentshowid = tctvshow.tvshowid Then
                For Each tctvseason As seasons In tctvshow.seasons
                    mycurrentshow.Add(tctvseason)
                    'Debug.Print(tctvseason.seasonnumber)
                    'Dim episodecounter As Integer = 0
                    'While episodecounter < tctvseason.episodes.Count
                    'Debug.Print(tctvseason.episodes(episodecounter).EpisodeName)
                    'Debug.Print(" --- File is: " + tctvseason.episodes(episodecounter).episodefilepath)
                    'episodecounter += 1
                    'End While
                Next
            End If
        Next
        gvcurrenttvshow.Id = Nothing
        gvcurrenttvshow.Id = currentshowid
        curtvshowlocationlbl.Text = curtvshowpath
        If messageprompts Then lblPbar.Text = "Setting up Season Information"
        'If messageprompts Then Me.Refresh()()
        Dim t_tctvcount As Integer = 0
        For Each t_tctvseason As seasons In mycurrentshow
            Dim key As String = currentshowid & t_tctvseason.seasonnumber & curtvshowpath
            Dim seasonstr As String = "Season " & t_tctvseason.seasonnumber
            Dim hashofkey As String = key.GetHashCode().ToString
            Try
                seasonshashtable.Add(hashofkey, t_tctvseason)
                dtcurrentshowseason.LoadDataRow(New Object() {seasonstr, hashofkey, t_tctvcount}, True)
                t_tctvcount += 1
            Catch ex As Exception

            End Try

            '.LoadDataRow(New Object() {showfullpathname + ":" + xbmctvshow.Tvdbid + ":", xbmctvshow.Title, xbmctvshow.Tvdbid, showcount}, True)
        Next
        'dtIDA.LoadDataRow(New Object() {tctvshow.seasons(cutcmIndex).episodes., tcmMovie.pmoviename, cutcmIndex}, True)
        '''' Debug.Print(tcmMovie.pmoviename + cutcmIndex.ToString)
        'cutcmIndex += 1

        'asdf()
        dtcurrentshowseason.DefaultView.Sort = "Season Number"
        'tbloftvshows = maindttv
        lbSeasonPicker.ValueMember = "dtuid"
        lbSeasonPicker.DisplayMember = "Season Number"
        lbSeasonPicker.DataSource = dtcurrentshowseason.DefaultView
        lbEpisodes.DataSource = Nothing
        lbEpisodesMissing.DataSource = Nothing

        lbSeasonPicker.SelectedIndex = -1
        '(lbSeasonPicker.Click())

        'display tvshow data in gui boxes
        If messageprompts Then lblPbar.Text = "Loading .nfo file Information"
        'If messageprompts Then Me.Refresh()()
        'load nfo to temp var
        Dim currentxbmctvshow As New xbmc.xbmcTvshow
        If File.Exists(curtvshowpath + "\tvshow.nfo") Then
            'read it 

            currentxbmctvshow.readXML(curtvshowpath + "\tvshow.nfo", currentxbmctvshow)
        End If
        'lblCurMovieFolder.Text = curtvshowpath ' - put path into gui
        klblTvShowName.Text = currentxbmctvshow.Title
        krtbTvShowOverview.Text = currentxbmctvshow.Plot
        klbltvFirstAired.Text = currentxbmctvshow.Premiered
        klbltvNetwork.Text = currentxbmctvshow.Studio
        klbltvAirDay.Text = "" ' - Day of Week
        klbltvAirTime.Text = "" ' - HH:MM AM?PM
        klbltvRunTime.Text = "" '(-Runtime)
        klbltvGenre.Text = currentxbmctvshow.Genre
        'tvMainRightMiddle.SplitterWidth = 0
        'tvMainRightMiddle.SplitterDistance = tvMainRightMiddle.Panel1.Width + tvMainRightMiddle.Panel2.Width
        'tvMainRightMiddle.Panel2MinSize = 0
        tvMainRightMiddle.Panel2Collapsed = True
        'currentxbmctvshow.Tvdbid
        'currentxbmctvshow.Genre
        'currentxbmctvshow.Mpaa
        'currentxbmctvshow.Rating - rating 9.8

        'display gui version of rating
        tvratingtostars(currentxbmctvshow.Rating)

        'Figure out where to put the folder.jpg by image AR
        '--- Deteremine where to put the image by it's AR
        If File.Exists(curtvshowpath + "\folder.jpg") Then

            Dim bmpImage As System.Drawing.Image
            bmpImage = System.Drawing.Image.FromFile(curtvshowpath + "\folder.jpg")
            'aspect ratio items
            Dim imagetype As String
            Dim taspect As Double = aspectratio(bmpImage)
            If taspect < 0.25 Then
                'wide(Icon)
                If bmpImage.Width >= 500 Then
                    imagetype = "widenoformat"
                Else
                    imagetype = "wideicon"
                End If
            ElseIf taspect >= 0.98 And taspect <= 1.02 Then
                imagetype = "square"
            ElseIf (taspect > 0.8 Or taspect < 0.95) And bmpImage.Height < 500 And bmpImage.Width < 450 Then
                'boxed icon or maybe squared poster
                imagetype = "boxed"
            Else
                imagetype = "poster" 'consider it a poster
            End If
            bmpImage.Dispose()

            If imagetype = "wideicon" Or imagetype = "widenoformat" Then
                Try
                    pbTVPoster.Image = Nothing
                    pbTVPoster.ImageLocation = Nothing
                    pbTVPoster.Visible = False
                    pbTVWide.Image = Nothing
                    pbTVWide.ImageLocation = Nothing
                    pbTVWide.ImageLocation = addfiletofolder(curtvshowpath, "folder.jpg") ' - wide tv show icon
                    pbTVWide.Load()
                    pbTVWide.Visible = True
                Catch ex As Exception
                    Debug.Print(ex.ToString)
                End Try
            Else
                Try
                    pbTVWide.Image = Nothing
                    pbTVWide.ImageLocation = Nothing
                    pbTVWide.Visible = False
                    pbTVPoster.Image = Nothing
                    pbTVPoster.ImageLocation = Nothing
                    pbTVPoster.ImageLocation = addfiletofolder(curtvshowpath, "folder.jpg") ' - wide tv show icon
                    pbTVPoster.Load()
                    pbTVPoster.Visible = True
                Catch ex As Exception
                    Debug.Print(ex.ToString)
                End Try

            End If
        Else
            pbTVWide.Image = Nothing
            pbTVWide.ImageLocation = Nothing
            pbTVWide.Visible = False
            pbTVPoster.Image = Nothing
            pbTVPoster.ImageLocation = Nothing
            pbTVPoster.Visible = False
        End If

        Try
            pbTVFanart.ImageLocation = Nothing
            pbTVFanart.Image = Nothing
            pbTVFanart.Visible = False
            'Dim fabackground As System.Drawing.Image
            'fabackground = System.Drawing.Image.FromFile(curtvshowpath + "\fanart.jpg")
            'tvMainRightMiddle.Panel1.StateCommon.Image = fabackground
            'tvMainRightMiddle.Panel1.StateCommon.ImageStyle = CType(5, PaletteImageStyle)
            ' fabackground.Dispose()
            pbTVFanart.ImageLocation = addfiletofolder(curtvshowpath, "fanart.jpg") '- fanart for show
            Try
                pbTVFanart.Load()
            Catch ex As Exception

            End Try

            pbTVFanart.Visible = True
        Catch ex As Exception
            Debug.Print(ex.ToString)
        End Try
        Try
            pbSeasonAllposter.ImageLocation = Nothing
            pbSeasonAllposter.Image = Nothing
            pbSeasonAllposter.ImageLocation = addfiletofolder(curtvshowpath, "season-all.tbn") '- poster for show
            pbSeasonAllposter.Load()
            pbSeasonAllposter.Visible = True
        Catch ex As Exception
            Debug.Print(ex.ToString)
        End Try


        'show tvshow poster and wide icon during tvshow display

        'pbTVPoster.Visible = True
        'hide ep details
        kpEpisodeData.Visible = False
        pbTVSeasonPoster.Visible = False
        lblPbar.Visible = False
        If cbAllowIconSelection.Checked Then
            lblPbar.Visible = True
            messageprompts = True
            tpPosters.Enabled = True
            tpIMPPosters.Enabled = True
            tpFanart.Enabled = True
            'tcPIB.Enabled = True
            tpmipf.Enabled = True
            tpmipf.Text = "Icons and Box Shots"
            'clear out old images
            '  resetanddisableimages()
            'tvshow fanart
            Dim faworkingdir As String = addfiletofolder(rconf.tvdbcachefolder, currentshowid + "\fanart\original")
            Dim fafilelist() As String
            fafilelist = Directory.GetFiles(faworkingdir)
            Dim fatotfilecount As Integer = 0
            Dim facurfilecount As Integer = 0
            fatotfilecount = fafilelist.Length
            For Each fapathedfile As String In fafilelist
                'add to a fanart pb
                displaytvfanart(fapathedfile, facurfilecount, True)
                facurfilecount += 1
            Next
            'tvshow posters
            Dim posterworkingdir As String = addfiletofolder(rconf.tvdbcachefolder, currentshowid + "\posters")
            Dim posterfilelist() As String
            posterfilelist = Directory.GetFiles(posterworkingdir)
            Dim postertotfilecount As Integer = 0
            Dim postercurfilecount As Integer = 0
            postertotfilecount = posterfilelist.Length
            For Each pathedfile As String In posterfilelist
                'add to a fanart pb
                displaytvposters(pathedfile, postercurfilecount, True)
                postercurfilecount += 1
            Next
            'tvshow wideicons
            'displaytvwideicons
            Dim wideiconworkingdir As String = addfiletofolder(rconf.tvdbcachefolder, currentshowid + "\graphical")
            Dim wideiconfilelist() As String
            wideiconfilelist = Directory.GetFiles(wideiconworkingdir)
            Dim wideicontotfilecount As Integer = 0
            Dim wideiconcurfilecount As Integer = 0
            wideicontotfilecount = wideiconfilelist.Length
            For Each pathedfile As String In wideiconfilelist
                'add to a fanart pb
                displaytvwideicons(pathedfile, wideiconcurfilecount, True)
                wideiconcurfilecount += 1
            Next

            '---------------------------- Mediaicons TVShow Section ---------------------------
            Dim selectedNameXMLfile As String
            Dim dname As String = ""
            If currentxbmctvshow.Title = "CSI: Crime Scene Investigation" Then
                dname = "CSI"
            Else
                dname = cleanname(currentxbmctvshow.Title)
            End If
            selectedNameXMLfile = Strings.Replace(dname, " ", ".")
            dname = Strings.Replace(dname, " ", ".")
            currentTVShowSelectedNameXMLfile = selectedNameXMLfile

            Dim xmltemppathname As String = rconf.xmlfolder + selectedNameXMLfile
            'check to see if there is already an xml file in there

            'need to add in new download method here
            'asdf()
            If rconf.pcbf1s0 Then
                If rbem.Checked = True Then
                    If messageprompts Then lblPbar.Text = "-- Getting Square (no style) icon for " + dname + "--"
                    'If messageprompts Then Me.Refresh()()
                    xmlDownloadTV(dname, xmltemppathname, "1", "4", "0") 'square no style
                End If
                getdisplayimages(selectedNameXMLfile, "1", "4", "0", dname, True)
            End If
            If rconf.pcbf1s3 Then
                If rbem.Checked = True Then
                    If messageprompts Then lblPbar.Text = "-- Getting Square Box Shot for " + dname + "--"
                    'If messageprompts Then Me.Refresh()()
                    xmlDownloadTV(dname, xmltemppathname, "1", "4", "3") 'square box shot
                End If
                getdisplayimages(selectedNameXMLfile, "1", "4", "3", dname, True)
            End If
            If rconf.pcbf1s9 Then
                If rbem.Checked = True Then
                    If messageprompts Then lblPbar.Text = "-- Getting Round icon for " + dname + "--"
                    'If messageprompts Then Me.Refresh()()
                    xmlDownloadTV(dname, xmltemppathname, "1", "4", "9") 'square classification, but it's a round token
                End If
                getdisplayimages(selectedNameXMLfile, "1", "4", "9", dname, True)
            End If
            If rconf.pcbf2s0 Then
                If rbem.Checked = True Then
                    If messageprompts Then lblPbar.Text = "-- Getting Wide (no style) icon for " + dname + "--"
                    'If messageprompts Then Me.Refresh()()
                    xmlDownloadTV(dname, xmltemppathname, "2", "4", "0") 'wide no style
                End If
                getdisplayimages(selectedNameXMLfile, "2", "4", "0", dname, True)
            End If
            If rconf.pcbf2s2 Then
                If rbem.Checked = True Then
                    If messageprompts Then lblPbar.Text = "-- Getting Wide (rounded shadow scanlines) icon for " + dname + "--"
                    'If messageprompts Then Me.Refresh()()
                    xmlDownloadTV(dname, xmltemppathname, "2", "4", "2") 'wide rounded shadow with scanlines
                End If
                getdisplayimages(selectedNameXMLfile, "2", "4", "2", dname, True)
            End If
            If rconf.pcbf2s8 Then
                If rbem.Checked = True Then
                    If messageprompts Then lblPbar.Text = "-- Getting Wide (round shadow) icon for " + dname + "--"
                    'If messageprompts Then Me.Refresh()()
                    xmlDownloadTV(dname, xmltemppathname, "2", "4", "8") 'wide rounded shadow
                End If
                getdisplayimages(selectedNameXMLfile, "2", "4", "8", dname, True)
            End If
            If rconf.pcbf2s10 Then
                If rbem.Checked = True Then
                    If messageprompts Then lblPbar.Text = "-- Getting Wide (round shadow Glass overlay) icon for " + dname + "--"
                    'If messageprompts Then Me.Refresh()()
                    xmlDownloadTV(dname, xmltemppathname, "2", "4", "10") 'wide rounded shadow with glass overlay
                End If
                getdisplayimages(selectedNameXMLfile, "2", "4", "10", dname, True)
            End If
            'If cbf3s0.Checked Then
            '    If rbem.Checked = True Then
            '        If messageprompts Then lblPbar.Text = "-- Getting Tall (no style) icon for " + dname + "--"
            '        'If messageprompts Then Me.gbDisplay.Refresh()
            '        xmlDownload(currentmovie, xmltemppathname, "3", "4", "0") 'tall no style
            '    End If
            '    getdisplayimages(selectedNameXMLfile, "3", "4", "0")
            'End If

            'download the images
            If Not currenttvshowdownloadlist.Count = 0 Then
                'dlgDownloadingFile.downloadertxtFileName.Text = url
                'dlgDownloadingFile.whereToSave = folder + tfanartfilename
                dlgDownloadingFile.downloadingmutliimages = True
                dlgDownloadingFile.downloadlist = currenttvshowdownloadlist
                dlgDownloadingFile.ShowDialog()
            End If
            'display them

            If rconf.pcbf1s0 Then
                If rbem.Checked = True Then
                    If messageprompts Then lblPbar.Text = "-- Getting Square (no style) icon for " + dname + "--"
                    'If messageprompts Then Me.Refresh()()
                    xmlDownloadTV(dname, xmltemppathname, "1", "4", "0") 'square no style
                End If
                getdisplayimages(selectedNameXMLfile, "1", "4", "0", dname)
            End If
            If rconf.pcbf1s3 Then
                If rbem.Checked = True Then
                    If messageprompts Then lblPbar.Text = "-- Getting Square Box Shot for " + dname + "--"
                    'If messageprompts Then Me.Refresh()()
                    xmlDownloadTV(dname, xmltemppathname, "1", "4", "3") 'square box shot
                End If
                getdisplayimages(selectedNameXMLfile, "1", "4", "3", dname)
            End If
            If rconf.pcbf1s9 Then
                If rbem.Checked = True Then
                    If messageprompts Then lblPbar.Text = "-- Getting Round icon for " + dname + "--"
                    'If messageprompts Then Me.Refresh()()
                    xmlDownloadTV(dname, xmltemppathname, "1", "4", "9") 'square classification, but it's a round token
                End If
                getdisplayimages(selectedNameXMLfile, "1", "4", "9", dname)
            End If
            If rconf.pcbf2s0 Then
                If rbem.Checked = True Then
                    If messageprompts Then lblPbar.Text = "-- Getting Wide (no style) icon for " + dname + "--"
                    'If messageprompts Then Me.Refresh()()
                    xmlDownloadTV(dname, xmltemppathname, "2", "4", "0") 'wide no style
                End If
                getdisplayimages(selectedNameXMLfile, "2", "4", "0", dname)
            End If
            If rconf.pcbf2s2 Then
                If rbem.Checked = True Then
                    If messageprompts Then lblPbar.Text = "-- Getting Wide (rounded shadow scanlines) icon for " + dname + "--"
                    'If messageprompts Then Me.Refresh()()
                    xmlDownloadTV(dname, xmltemppathname, "2", "4", "2") 'wide rounded shadow with scanlines
                End If
                getdisplayimages(selectedNameXMLfile, "2", "4", "2", dname)
            End If
            If rconf.pcbf2s8 Then
                If rbem.Checked = True Then
                    If messageprompts Then lblPbar.Text = "-- Getting Wide (round shadow) icon for " + dname + "--"
                    'If messageprompts Then Me.Refresh()()
                    xmlDownloadTV(dname, xmltemppathname, "2", "4", "8") 'wide rounded shadow
                End If
                getdisplayimages(selectedNameXMLfile, "2", "4", "8", dname)
            End If
            If rconf.pcbf2s10 Then
                If rbem.Checked = True Then
                    If messageprompts Then lblPbar.Text = "-- Getting Wide (round shadow Glass overlay) icon for " + dname + "--"
                    'If messageprompts Then Me.Refresh()()
                    xmlDownloadTV(dname, xmltemppathname, "2", "4", "10") 'wide rounded shadow with glass overlay
                End If
                getdisplayimages(selectedNameXMLfile, "2", "4", "10", dname)
            End If
        End If

        lblPbar.Visible = False
        'kbtnTVUpdateShows.Enabled = True
    End Sub

    Private Sub getfcdn_music_front(ByVal searchstring As String, Optional ByVal precache As Boolean = False, Optional ByRef downloadlist As ArrayList = Nothing, Optional ByVal substring As String = "")
        If Not rconf.pgetMediaImagesMusicFront Then Exit Sub
        Dim newfcdn As New freecoversdotnet.Rsp
        newfcdn.parentdirname = rconf.basefolder
        Dim dllist As ArrayList = newfcdn.downloadimages(4, searchstring, "front", 4, 0, False, substring) '0,1,2 blue,dvd,hddvd .. section 0 is front cover
        For Each curdlobj As miplibfc.mip.dlobject In dllist
            If Not precache Then currentalbum.pdownloadlist.Add(curdlobj)
            If precache And Not downloadlist Is Nothing Then downloadlist.Add(curdlobj)
        Next
    End Sub
    Private Sub getfcdn_music_back(ByVal searchstring As String, Optional ByVal precache As Boolean = False, Optional ByRef downloadlist As ArrayList = Nothing, Optional ByVal substring As String = "")
        If Not rconf.pgetMediaImagesMusicback Then Exit Sub
        Dim newfcdn As New freecoversdotnet.Rsp
        newfcdn.parentdirname = rconf.basefolder
        Dim dllist As ArrayList = newfcdn.downloadimages(4, searchstring, "back", 4, 1, False, substring) '0,1,2 blue,dvd,hddvd .. section 0 is front cover
        For Each curdlobj As miplibfc.mip.dlobject In dllist
            If Not precache Then currentalbum.pdownloadlist.Add(curdlobj)
            If precache And Not downloadlist Is Nothing Then downloadlist.Add(curdlobj)
        Next
    End Sub
    Private Sub getfcdn_music_cd1(ByVal searchstring As String, Optional ByVal precache As Boolean = False, Optional ByRef downloadlist As ArrayList = Nothing, Optional ByVal substring As String = "")
        If Not rconf.pgetMediaImagesMusiccd1 Then Exit Sub
        Dim newfcdn As New freecoversdotnet.Rsp
        newfcdn.parentdirname = rconf.basefolder
        Dim dllist As ArrayList = newfcdn.downloadimages(4, searchstring, "cd", 4, 2, False, substring) '0,1,2 blue,dvd,hddvd .. section 0 is front cover
        For Each curdlobj As miplibfc.mip.dlobject In dllist
            If Not precache Then currentalbum.pdownloadlist.Add(curdlobj)
            If precache And Not downloadlist Is Nothing Then downloadlist.Add(curdlobj)
        Next
    End Sub
    Private Sub getfcdn_music_cd2(ByVal searchstring As String, Optional ByVal precache As Boolean = False, Optional ByRef downloadlist As ArrayList = Nothing, Optional ByVal substring As String = "")
        If Not rconf.pgetMediaImagesMusiccd2 Then Exit Sub
        Dim newfcdn As New freecoversdotnet.Rsp
        newfcdn.parentdirname = rconf.basefolder
        Dim dllist As ArrayList = newfcdn.downloadimages(4, searchstring, "cd2", 4, 3, False, substring) '0,1,2 blue,dvd,hddvd .. section 0 is front cover
        For Each curdlobj As miplibfc.mip.dlobject In dllist
            If Not precache Then currentalbum.pdownloadlist.Add(curdlobj)
            If precache And Not downloadlist Is Nothing Then downloadlist.Add(curdlobj)
        Next
    End Sub
    Private Sub getfcdn_music_cd3(ByVal searchstring As String, Optional ByVal precache As Boolean = False, Optional ByRef downloadlist As ArrayList = Nothing, Optional ByVal substring As String = "")
        If Not rconf.pgetMediaImagesMusiccd3 Then Exit Sub
        Dim newfcdn As New freecoversdotnet.Rsp
        newfcdn.parentdirname = rconf.basefolder
        Dim dllist As ArrayList = newfcdn.downloadimages(4, searchstring, "cd3", 4, 4, False, substring) '0,1,2 blue,dvd,hddvd .. section 0 is front cover
        For Each curdlobj As miplibfc.mip.dlobject In dllist
            If Not precache Then currentalbum.pdownloadlist.Add(curdlobj)
            If precache And Not downloadlist Is Nothing Then downloadlist.Add(curdlobj)
        Next
    End Sub
    Private Sub getfcdn_music_cd4(ByVal searchstring As String, Optional ByVal precache As Boolean = False, Optional ByRef downloadlist As ArrayList = Nothing, Optional ByVal substring As String = "")
        If Not rconf.pgetMediaImagesMusiccd4 Then Exit Sub
        Dim newfcdn As New freecoversdotnet.Rsp
        newfcdn.parentdirname = rconf.basefolder
        Dim dllist As ArrayList = newfcdn.downloadimages(4, searchstring, "cd4", 4, 5, False, substring) '0,1,2 blue,dvd,hddvd .. section 0 is front cover
        For Each curdlobj As miplibfc.mip.dlobject In dllist
            If Not precache Then currentalbum.pdownloadlist.Add(curdlobj)
            If precache And Not downloadlist Is Nothing Then downloadlist.Add(curdlobj)
        Next
    End Sub
    Private Sub getfcdn_music_inlay(ByVal searchstring As String, Optional ByVal precache As Boolean = False, Optional ByRef downloadlist As ArrayList = Nothing, Optional ByVal substring As String = "")
        If Not rconf.pgetMediaImagesMusicinlay Then Exit Sub
        Dim newfcdn As New freecoversdotnet.Rsp
        newfcdn.parentdirname = rconf.basefolder
        Dim dllist As ArrayList = newfcdn.downloadimages(4, searchstring, "inlay", 4, 7, False, substring) '0,1,2 blue,dvd,hddvd .. section 0 is front cover
        For Each curdlobj As miplibfc.mip.dlobject In dllist
            If Not precache Then currentalbum.pdownloadlist.Add(curdlobj)
            If precache And Not downloadlist Is Nothing Then downloadlist.Add(curdlobj)
        Next
    End Sub
    Private Sub getfcdn_music_insert(ByVal searchstring As String, Optional ByVal precache As Boolean = False, Optional ByRef downloadlist As ArrayList = Nothing, Optional ByVal substring As String = "")
        If Not rconf.pgetMediaImagesMusicinsert Then Exit Sub
        Dim newfcdn As New freecoversdotnet.Rsp
        newfcdn.parentdirname = rconf.basefolder
        Dim dllist As ArrayList = newfcdn.downloadimages(4, searchstring, "inside", 4, 6, False, substring) '0,1,2 blue,dvd,hddvd .. section 0 is front cover
        For Each curdlobj As miplibfc.mip.dlobject In dllist
            If Not precache Then currentalbum.pdownloadlist.Add(curdlobj)
            If precache And Not downloadlist Is Nothing Then downloadlist.Add(curdlobj)
        Next
    End Sub

    Private Sub getfcdn_tvshow_front(ByVal searchstring As String, Optional ByVal precache As Boolean = False, Optional ByRef downloadlist As ArrayList = Nothing, Optional ByVal substring As String = "")
        If Not rconf.pgetMediaImagesShowsFront Then Exit Sub
        Dim newfcdn As New freecoversdotnet.Rsp
        newfcdn.parentdirname = rconf.basefolder
        Dim dllist As ArrayList = newfcdn.downloadimages(15, searchstring, "front", 15, 0, False, substring) '0,1,2 blue,dvd,hddvd .. section 0 is front cover
        For Each curdlobj As miplibfc.mip.dlobject In dllist
            If Not precache Then gvcurtvseason.pdownloadlist.Add(curdlobj)
            If precache And Not downloadlist Is Nothing Then downloadlist.Add(curdlobj)
        Next
    End Sub
    Private Sub getfcdn_tvshow_back(ByVal searchstring As String, Optional ByVal precache As Boolean = False, Optional ByRef downloadlist As ArrayList = Nothing, Optional ByVal substring As String = "")
        If Not rconf.pgetMediaImagesShowsback Then Exit Sub
        Dim newfcdn As New freecoversdotnet.Rsp
        newfcdn.parentdirname = rconf.basefolder
        Dim dllist As ArrayList = newfcdn.downloadimages(15, searchstring, "back", 15, 1, False, substring) '0,1,2 blue,dvd,hddvd .. section 0 is front cover
        For Each curdlobj As miplibfc.mip.dlobject In dllist
            If Not precache Then gvcurtvseason.pdownloadlist.Add(curdlobj)
            If precache And Not downloadlist Is Nothing Then downloadlist.Add(curdlobj)
        Next
    End Sub
    Private Sub getfcdn_tvshow_cd1(ByVal searchstring As String, Optional ByVal precache As Boolean = False, Optional ByRef downloadlist As ArrayList = Nothing, Optional ByVal substring As String = "")
        If Not rconf.pgetMediaImagesShowscd1 Then Exit Sub
        Dim newfcdn As New freecoversdotnet.Rsp
        newfcdn.parentdirname = rconf.basefolder
        Dim dllist As ArrayList = newfcdn.downloadimages(15, searchstring, "cd", 15, 2, False, substring) '0,1,2 blue,dvd,hddvd .. section 0 is front cover
        For Each curdlobj As miplibfc.mip.dlobject In dllist
            If Not precache Then gvcurtvseason.pdownloadlist.Add(curdlobj)
            If precache And Not downloadlist Is Nothing Then downloadlist.Add(curdlobj)
        Next
    End Sub
    Private Sub getfcdn_tvshow_cd2(ByVal searchstring As String, Optional ByVal precache As Boolean = False, Optional ByRef downloadlist As ArrayList = Nothing, Optional ByVal substring As String = "")
        If Not rconf.pgetMediaImagesShowscd2 Then Exit Sub
        Dim newfcdn As New freecoversdotnet.Rsp
        newfcdn.parentdirname = rconf.basefolder
        Dim dllist As ArrayList = newfcdn.downloadimages(15, searchstring, "cd2", 15, 3, False, substring) '0,1,2 blue,dvd,hddvd .. section 0 is front cover
        For Each curdlobj As miplibfc.mip.dlobject In dllist
            If Not precache Then gvcurtvseason.pdownloadlist.Add(curdlobj)
            If precache And Not downloadlist Is Nothing Then downloadlist.Add(curdlobj)
        Next
    End Sub
    Private Sub getfcdn_tvshow_cd3(ByVal searchstring As String, Optional ByVal precache As Boolean = False, Optional ByRef downloadlist As ArrayList = Nothing, Optional ByVal substring As String = "")
        If Not rconf.pgetMediaImagesShowscd3 Then Exit Sub
        Dim newfcdn As New freecoversdotnet.Rsp
        newfcdn.parentdirname = rconf.basefolder
        Dim dllist As ArrayList = newfcdn.downloadimages(15, searchstring, "cd3", 15, 4, False, substring) '0,1,2 blue,dvd,hddvd .. section 0 is front cover
        For Each curdlobj As miplibfc.mip.dlobject In dllist
            If Not precache Then gvcurtvseason.pdownloadlist.Add(curdlobj)
            If precache And Not downloadlist Is Nothing Then downloadlist.Add(curdlobj)
        Next
    End Sub
    Private Sub getfcdn_tvshow_cd4(ByVal searchstring As String, Optional ByVal precache As Boolean = False, Optional ByRef downloadlist As ArrayList = Nothing, Optional ByVal substring As String = "")
        If Not rconf.pgetMediaImagesShowscd4 Then Exit Sub
        Dim newfcdn As New freecoversdotnet.Rsp
        newfcdn.parentdirname = rconf.basefolder
        Dim dllist As ArrayList = newfcdn.downloadimages(15, searchstring, "cd4", 15, 5, False, substring) '0,1,2 blue,dvd,hddvd .. section 0 is front cover
        For Each curdlobj As miplibfc.mip.dlobject In dllist
            If Not precache Then gvcurtvseason.pdownloadlist.Add(curdlobj)
            If precache And Not downloadlist Is Nothing Then downloadlist.Add(curdlobj)
        Next
    End Sub
    Private Sub getfcdn_tvshow_inlay(ByVal searchstring As String, Optional ByVal precache As Boolean = False, Optional ByRef downloadlist As ArrayList = Nothing, Optional ByVal substring As String = "")
        If Not rconf.pgetMediaImagesShowsinlay Then Exit Sub
        Dim newfcdn As New freecoversdotnet.Rsp
        newfcdn.parentdirname = rconf.basefolder
        Dim dllist As ArrayList = newfcdn.downloadimages(15, searchstring, "inlay", 15, 7, False, substring) '0,1,2 blue,dvd,hddvd .. section 0 is front cover
        For Each curdlobj As miplibfc.mip.dlobject In dllist
            If Not precache Then gvcurtvseason.pdownloadlist.Add(curdlobj)
            If precache And Not downloadlist Is Nothing Then downloadlist.Add(curdlobj)
        Next
    End Sub
    Private Sub getfcdn_tvshow_insert(ByVal searchstring As String, Optional ByVal precache As Boolean = False, Optional ByRef downloadlist As ArrayList = Nothing, Optional ByVal substring As String = "")
        If Not rconf.pgetMediaImagesShowsinsert Then Exit Sub
        Dim newfcdn As New freecoversdotnet.Rsp
        newfcdn.parentdirname = rconf.basefolder
        Dim dllist As ArrayList = newfcdn.downloadimages(15, searchstring, "inside", 15, 6, False, substring) '0,1,2 blue,dvd,hddvd .. section 0 is front cover
        For Each curdlobj As miplibfc.mip.dlobject In dllist
            If Not precache Then gvcurtvseason.pdownloadlist.Add(curdlobj)
            If precache And Not downloadlist Is Nothing Then downloadlist.Add(curdlobj)
        Next
    End Sub

    Private Sub lbseasonPicker_click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles lbSeasonPicker.Click
        If lbSeasonPicker.SelectedValue Is Nothing Then Exit Sub
        If lbSeasonPicker.SelectedValue Is "" Then Exit Sub
        klblAllSeasonPosterStatic.Visible = False
        kgpbSeasonAllposter.Visible = False
        khgShowsMI.Visible = True
        tpIMPPosters.Text = "TV Show Posters - click on TV Show Name to select"
        tpIMPPosters.Enabled = False
        tpTVWideIcons.Text = ""
        tpTVWideIcons.Enabled = False
        tpFanart.Enabled = False
        tpTVWideIcons.Enabled = True
        pbSeasonAllposter.Visible = False
        Dim curtvshowpath As String = lbTvShowPicker.SelectedValue.ToString
        'strip out the id from the path'
        Dim theid As String = Regex.Match(curtvshowpath, "(:\d*?:)").Groups(1).Value
        curtvshowpath = Strings.Replace(curtvshowpath, theid, "")
        Dim currentshowid As String = Strings.Replace(theid, ":", "")

        Debug.Print("seasonpicker clicked")
        If lbSeasonPicker.SelectedIndex = -1 Then Exit Sub
        'Debug.Print(lbSeasonPicker.SelectedValue.ToString)
        kpEpisodeData.Visible = False
        Dim curtvseason As movieinfoplus.seasons = CType(seasonshashtable.Item(lbSeasonPicker.SelectedValue), seasons)
        Debug.Print(curtvseason.episodes.Count.ToString)
        gvcurtvseason = curtvseason
        'bring splitter back up at 569
        'tvMainRightMiddle.SplitterWidth = 5
        'tvMainRightMiddle.Panel2MinSize = 100
        TVCurrentTVRightMain.Panel1Collapsed = True
        kcstvMainRightBottom.Panel2Collapsed = True
        tvMainRightMiddle.Panel2Collapsed = True 'right panel no longer used, but kept for future gui changes
        'tvMainRightMiddle.SplitterDistance = tvMainRightMiddle.Panel1.Width - 100

        flpTVShowMI.Visible = False
        Dim curseasonas2digitid As String
        Dim curseasonas1or2digitid As String
        If curtvseason.seasonnumber.Length = 1 Then
            curseasonas2digitid = CStr("0" & curtvseason.seasonnumber)
            curseasonas1or2digitid = CStr(curtvseason.seasonnumber)
        Else
            curseasonas2digitid = CStr(curtvseason.seasonnumber)
            If Strings.Left(curseasonas2digitid, 1) = "0" Then
                curseasonas1or2digitid = Strings.Right(curseasonas2digitid, curseasonas2digitid.Length - 1)
            Else
                curseasonas1or2digitid = curseasonas2digitid
            End If
        End If
        If Not gvcurtvseason.pdownloadlist Is Nothing Then gvcurtvseason.pdownloadlist.Clear()
        gvcurrenttvseasonpath = addfiletofolder(curtvshowpath, rconf.pseasonfoldername & curseasonas1or2digitid)
        Dim vcurrenttvseasonsearchstr As String = lbTvShowPicker.Text & "+" & "Season%20" + curseasonas1or2digitid
        getfcdn_tvshow_front(lbTvShowPicker.Text, False, , "Season " + curseasonas1or2digitid) 'vcurrenttvseasonsearchstr)
        getfcdn_tvshow_back(lbTvShowPicker.Text, False, , "Season " + curseasonas1or2digitid)
        getfcdn_tvshow_cd1(lbTvShowPicker.Text, False, , "Season " + curseasonas1or2digitid)
        getfcdn_tvshow_cd2(lbTvShowPicker.Text, False, , "Season " + curseasonas1or2digitid)
        getfcdn_tvshow_cd3(lbTvShowPicker.Text, False, , "Season " + curseasonas1or2digitid)
        getfcdn_tvshow_cd4(lbTvShowPicker.Text, False, , "Season " + curseasonas1or2digitid)
        getfcdn_tvshow_insert(lbTvShowPicker.Text, False, , "Season " + curseasonas1or2digitid)
        getfcdn_tvshow_inlay(lbTvShowPicker.Text, False, , "Season " + curseasonas1or2digitid)
        'download items
        If Not gvcurtvseason.pdownloadlist.Count = Nothing And Not gvcurtvseason.pdownloadlist.Count = 0 Then

            'dlgDownloadingFile.downloadertxtFileName.Text = url
            'dlgDownloadingFile.whereToSave = folder + tfanartfilename
            dlgDownloadingFile.downloadingmutliimages = True
            dlgDownloadingFile.downloadlist = gvcurtvseason.pdownloadlist
            dlgDownloadingFile.ShowDialog()

        End If
        'search for correct season? 

        'asdf()
        'setup for icon selection
        curtvshowiconsetting = addfiletofolder(curtvshowpath, "season" + curseasonas2digitid + ".tbn")
        curtvshowpicturboxtoupdate = pbTVSeasonPoster
        curtvshowiconsettinglbl.Text = "Selected Image to save or modify: Season " + curtvseason.seasonnumber + " Image (season" + curseasonas2digitid + ".tbn)"

        tpTMDBPosters.Text = "Season Specific Posters: Season " + curseasonas2digitid
        'hide tvshow poster and wide icon during season display
        pbTVWide.Visible = False
        pbTVPoster.Visible = False
        'hide ep details
        kpEpisodeData.Visible = False
        pbTVSeasonPoster.Visible = True

        If File.Exists(addfiletofolder(curtvshowpath, "season" + curseasonas2digitid + ".tbn")) Then
            pbTVSeasonPoster.ImageLocation = addfiletofolder(curtvshowpath, "season" + curseasonas2digitid + ".tbn")
            Try
                pbTVSeasonPoster.Load()
            Catch ex As Exception
                pbTVSeasonPoster.ImageLocation = Nothing
                pbTVSeasonPoster.Image = Nothing
            End Try

        Else
            pbTVSeasonPoster.ImageLocation = Nothing
            pbTVSeasonPoster.Image = Nothing
        End If

        Dim dtcurrentshowepisodes As New DataTable
        dtcurrentshowepisodes.Columns.Add("Episode Number", GetType(System.String))
        dtcurrentshowepisodes.Columns.Add("dtuid", GetType(System.String))
        dtcurrentshowepisodes.Columns.Add("Index")
        dtcurrentshowepisodes.Clear()
        episodeshashtable.Clear()

        'display the episodes we have and add them to an array to find out what we don't have
        Dim allepisodeswehave As New ArrayList 'used to find those we don't have
        Dim t_tctvcount As Integer = 0
        For Each tctvshowepisode As tvdblangEpisode In curtvseason.episodes
            Dim curepnumberlongform As String = tctvshowepisode.EpisodeNumber
            If curepnumberlongform.Length = 1 Then
                curepnumberlongform = "0" + curepnumberlongform
            End If
            Dim key As String = tctvshowepisode.episodefilepath & tctvshowepisode.EpisodeName & tctvshowepisode.SeasonNumber & tctvshowepisode.EpisodeNumber
            Dim episodestr As String = "s" & tctvshowepisode.SeasonNumber & "e" & curepnumberlongform & " : " & tctvshowepisode.EpisodeName
            Dim hashofkey As String = key.GetHashCode().ToString
            Try
                episodeshashtable.Add(hashofkey, tctvshowepisode)
                dtcurrentshowepisodes.LoadDataRow(New Object() {episodestr, hashofkey, t_tctvcount}, True)
                allepisodeswehave.Add(tctvshowepisode)
                t_tctvcount += 1
            Catch ex As Exception
                Debug.Print(ex.ToString)
            End Try
        Next

        dtcurrentshowepisodes.DefaultView.Sort = "Episode Number"
        lbEpisodes.ValueMember = "dtuid"
        lbEpisodes.DisplayMember = "Episode Number"
        lbEpisodes.DataSource = dtcurrentshowepisodes.DefaultView
        lbEpisodes.SelectedIndex = -1

        ' ''display the episodes that we are missing
        'setup tables
        Dim dtcurrentshowepisodesmissing As New DataTable
        dtcurrentshowepisodesmissing.Columns.Add("Episode Number", GetType(System.String))
        dtcurrentshowepisodesmissing.Columns.Add("dtuid", GetType(System.String))
        dtcurrentshowepisodesmissing.Columns.Add("Index")
        dtcurrentshowepisodesmissing.Clear()
        episodeshashtablemissing.Clear()
        'load curlang.xml 
        Dim newtvdbdata As New tvdblangData
        Dim allepisodes As New ArrayList
        Try
            newtvdbdata.readXML(rconf.tvdbcachefolder + currentshowid + "\" + rconf.tv_curlang + ".xml", newtvdbdata)
            'get all listed episodes for season
            Dim curseasonformissingsearch As String = curtvseason.seasonnumber
            For Each tepisode In newtvdbdata.Episodes
                If tepisode.CombinedSeason = curseasonformissingsearch Then
                    allepisodes.Add(tepisode)
                End If
            Next
        Catch ex As Exception
            Debug.Print(ex.ToString)
        End Try


        For Each tepisode2 As tvdblangEpisode In allepisodes
            'format it to match the data stored in for real episodes
            Dim curepnumberlongform2 As String = tepisode2.EpisodeNumber
            If curepnumberlongform2.Length = 1 Then
                curepnumberlongform2 = "0" + curepnumberlongform2
            End If

            Dim episodestr2 As String = "s" & tepisode2.SeasonNumber & "e" & curepnumberlongform2 & " : " & tepisode2.EpisodeName
            'if it's already in there, don't add it, else add it
            Dim totalepwehave As Integer = lbEpisodes.Items.Count
            Dim curepwehavecou As Integer = 0
            Dim alreadyhaveit As Boolean = False
            While curepwehavecou < totalepwehave
                Dim curepworking As tvdblangEpisode = CType(allepisodeswehave(curepwehavecou), tvdblangEpisode)
                'asdf()
                If curepworking.EpisodeNumber = tepisode2.EpisodeNumber Then
                    alreadyhaveit = True
                End If
                curepwehavecou += 1
            End While
            If Not alreadyhaveit Then 'add to the dtcurrentshowepisodesmissing datatable
                Dim curepnumberlongform As String = tepisode2.EpisodeNumber
                If curepnumberlongform.Length = 1 Then
                    curepnumberlongform = "0" + curepnumberlongform
                End If
                Dim key As String = tepisode2.EpisodeName & tepisode2.SeasonNumber & tepisode2.EpisodeNumber
                Dim strAirdate As String = ""
                strAirdate = "(" & tepisode2.FirstAired & ") "
                Dim episodestr As String = "s" & tepisode2.SeasonNumber & "e" & curepnumberlongform & " :" & strAirdate & tepisode2.EpisodeName
                Dim hashofkey As String = key.GetHashCode().ToString
                Try
                    episodeshashtablemissing.Add(hashofkey, tepisode2)
                    dtcurrentshowepisodesmissing.LoadDataRow(New Object() {episodestr, hashofkey, t_tctvcount}, True)
                    t_tctvcount += 1
                Catch ex As Exception
                    Debug.Print(ex.ToString)
                End Try
            End If
        Next


        'read the current eipsodes list box and if the episode not in there, add it to the dtcurrentshowepisodesmissing
        'Next

        dtcurrentshowepisodesmissing.DefaultView.Sort = "Episode Number"
        lbEpisodesMissing.ValueMember = "dtuid"
        lbEpisodesMissing.DisplayMember = "Episode Number"
        lbEpisodesMissing.DataSource = dtcurrentshowepisodesmissing.DefaultView
        lbEpisodesMissing.SelectedIndex = -1
        flpTVShowMI.Visible = True
        'If Not Directory.Exists(addfiletofolder(gvcurrenttvseasonpath, "extras")) Then Directory.CreateDirectory(addfiletofolder(gvcurrenttvseasonpath, "extras"))
        displayAndLoadMIThumbs(addfiletofolder(gvcurrenttvseasonpath, "extras"), flpTVShowMI)

        Dim curlang As String = rconf.tv_curlang
        If cbAllowIconSelection.Checked Then
            lblPbar.Visible = True
            messageprompts = True
            tpTMDBPosters.Enabled = True
            resetmiimages()
            resettmdbposterimages() 'reset just the season images
            'ASDF()

            'display mi images

            showfcdn_tvshow_front(lbTvShowPicker.Text, False, , "Season " + curseasonas1or2digitid) 'vcurrenttvseasonsearchstr)
            showfcdn_tvshow_Back(lbTvShowPicker.Text, False, , "Season " + curseasonas1or2digitid)
            showfcdn_tvshow_cd1(lbTvShowPicker.Text, False, , "Season " + curseasonas1or2digitid)
            showfcdn_tvshow_cd2(lbTvShowPicker.Text, False, , "Season " + curseasonas1or2digitid)
            showfcdn_tvshow_cd3(lbTvShowPicker.Text, False, , "Season " + curseasonas1or2digitid)
            showfcdn_tvshow_cd4(lbTvShowPicker.Text, False, , "Season " + curseasonas1or2digitid)
            showfcdn_tvshow_insert(lbTvShowPicker.Text, False, , "Season " + curseasonas1or2digitid)
            showfcdn_tvshow_inlay(lbTvShowPicker.Text, False, , "Season " + curseasonas1or2digitid)

            'read up banners.xml for the show, match the season number, update the tab label text, and then display the posters for that season
            Dim tbanners As New Banners
            Dim filelistal As New ArrayList
            Dim seasoncounter As Integer = 0
            Dim seasonpostercounter As Integer = 0
            Dim seasonwidecounter As Integer = 0
            Try
                tbanners.readBannerXML(rconf.tvdbcachefolder + currentshowid + "\banners.xml", tbanners)
            Catch ex As Exception
                MsgBox("error in banner.xml read")
                Debug.Print(rconf.tvdbcachefolder + currentshowid + "\banners.xml")
                Debug.Print("unable to load xml file from cache folder")
                Exit Sub
            End Try

            For Each tmbanner As BannersBanner In tbanners.Banners
                If curlang = tmbanner.Language Then 'check language and match it, if no match, skip it
                    'See If the file already exsists
                    Dim switchpath As String = Strings.Replace(tmbanner.BannerPath, "/", "\")
                    Debug.Print(switchpath)
                    Select Case tmbanner.BannerType.ToLower
                        Case "season"
                            If tmbanner.Season = curtvseason.seasonnumber Then
                                Dim boolGetSeason As Boolean = False
                                Dim boolGetSeasonwide As Boolean = False
                                If rconf.tv_season_banners_download_type_string.ToLower Is Nothing Then
                                    rconf.tv_season_banners_download_type_string = "all"
                                End If
                                If rconf.tv_season_banners_download_type_string.ToLower = "" Then
                                    rconf.tv_season_banners_download_type_string = "all"
                                End If
                                Try
                                    If rconf.tv_season_banners_download_type_string.ToLower = "all" Then
                                        boolGetSeason = True
                                        boolGetSeasonwide = True
                                    ElseIf rconf.tv_season_banners_download_type_string.ToLower = "season" Then
                                        boolGetSeason = True
                                    ElseIf rconf.tv_season_banners_download_type_string.ToLower = "seasonwide" Then
                                        boolGetSeasonwide = True
                                    End If
                                    'workaround for busted configs where the value isn't entered correctly
                                    If boolGetSeason = False And boolGetSeasonwide = False Then
                                        boolGetSeason = True
                                    End If
                                Catch ex As Exception
                                    boolGetSeason = True
                                    Debug.Print(ex.ToString)
                                    MsgBox("Configuration setting is missing for season selection, please report this bug and include a copy of your config.xml file")
                                End Try

                                If tmbanner.BannerType2.ToLower = "season" And boolGetSeason Then 'And Not File.Exists(rconf.tvdbcachefolder + selectedshow + "\" + switchpath) Then gettvseasonbanners(tmbanner, selectedshow, switchpath)
                                    'put season posters in gui
                                    displayseasonposters(addfiletofolder(rconf.tvdbcachefolder + currentshowid, switchpath), seasonpostercounter, True)
                                    seasonpostercounter += 1
                                End If

                                If tmbanner.BannerType2.ToLower = "seasonwide" And boolGetSeasonwide Then 'And Not File.Exists(rconf.tvdbcachefolder + selectedshow + "\" + switchpath) Then gettvseasonbanners(tmbanner, selectedshow, switchpath)
                                    'put season wide banners somewhere
                                    'displaytvwideicons(addfiletofolder(rconf.tvdbcachefolder + currentshowid, switchpath), seasonwidecounter, True)
                                    seasonwidecounter += 1
                                End If

                                seasoncounter += 1
                            End If
                        Case Else
                            'do nothing
                    End Select
                End If
                lblPbar.Visible = False
                messageprompts = False
            Next


        End If
    End Sub
    Private Sub lbEpsidoes_click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles lbEpisodes.Click
        If lbEpisodes.SelectedIndex = -1 Then Exit Sub
        Debug.Print("lbEpisodes clicked")
        Debug.Print(lbEpisodes.SelectedValue.ToString)

        kpEpisodeData.Visible = True
        bshgSaveEpisodeData.Enabled = ButtonEnabled.True
        'Dim curepisode As tvdblangEpisode
        gvcurrenttvepisode = CType(episodeshashtable.Item(lbEpisodes.SelectedValue), tvdblangEpisode)
        Try
            pbep_episodeimage.ImageLocation = Nothing
            pbep_episodeimage.Image = Nothing
            pbep_episodeimage.ImageLocation = removeextension(gvcurrenttvepisode.episodefilepath) + ".tbn"
            If File.Exists(removeextension(gvcurrenttvepisode.episodefilepath) + ".tbn") Then pbep_episodeimage.Load()

        Catch ex As Exception

        End Try

        'setup for icon selection
        curtvshowiconsetting = removeextension(gvcurrenttvepisode.episodefilepath) + ".tbn"
        curtvshowpicturboxtoupdate = pbep_episodeimage
        curtvshowiconsettinglbl.Text = "Icons and Box Shots will be saved as the: Season: " + gvcurrenttvepisode.SeasonNumber + " Episode: " + gvcurrenttvepisode.EpisodeNumber + " Image File (" + removeextension(getfilefrompath(gvcurrenttvepisode.episodefilepath)) + ".tbn)"
        'determine .nfo file name
        Dim nfofilename As String = removeextension(gvcurrenttvepisode.episodefilepath) + ".nfo" 'Strings.Left(gvcurrenttvepisode.Filename, gvcurrenttvepisode.Filename.Length - 4) & ".nfo"
        Dim ismultipart As Boolean = gvcurrenttvepisode.mutlipart
        If ismultipart Then
            bshgSaveEpisodeData.Enabled = ButtonEnabled.False
            bshgShowsEpisodeMediaRefresh.Enabled = ButtonEnabled.False
            bshgReloadEPData.Enabled = ButtonEnabled.False
        Else
            bshgSaveEpisodeData.Enabled = ButtonEnabled.True
            bshgShowsEpisodeMediaRefresh.Enabled = ButtonEnabled.True
            bshgReloadEPData.Enabled = ButtonEnabled.True
        End If
        If Not ismultipart Then
            Dim xbmccurep As New xbmc.xbmcEpisodedetails
            Try
                xbmccurep.readNfo(nfofilename, xbmccurep)
                ktbep_aired.Text = xbmccurep.Aired
                ktbep_credits.Text = Strings.Replace(xbmccurep.Credits, "|", "/")
                ktbep_director.Text = xbmccurep.Director
                ktbep_epName.Text = xbmccurep.Title
                ktbEp_epnum.Text = xbmccurep.Episode
                krtbep_Overview.Text = xbmccurep.Plot
                ktbep_epseason.Text = xbmccurep.Season
                ktbep_epRating.Text = xbmccurep.Rating
                xbmccurep.filename = gvcurrenttvepisode.episodefilepath
                If xbmccurep.fileinfo.streamdetails Is Nothing Then
                    'do nothing
                Else
                End If
                If Not xbmccurep.fileinfo.version = 1.3 Then
                    messageprompts = True
                    gettvepmediainfo_bw()
                    'save nfo ?

                Else
                    'display the data
                    krtbTVShowMediaInfo.Text = xbmccurep.fileinfo.objtostring(xbmccurep.fileinfo)
                End If

            Catch ex As Exception
                MsgBox("Failed to read the .nfo file for this episode.")
                'ktbep_aired.Text = gvcurrenttvepisode.FirstAired
                'ktbep_credits.Text = Strings.Replace(gvcurrenttvepisode.Writer, "|", "/")
                'ktbep_director.Text = gvcurrenttvepisode.Director
                'ktbep_epName.Text = gvcurrenttvepisode.EpisodeName
                'ktbEp_epnum.Text = gvcurrenttvepisode.EpisodeNumber
                'krtbep_Overview.Text = gvcurrenttvepisode.Overview
                'ktbep_epseason.Text = gvcurrenttvepisode.SeasonNumber
                Exit Sub
            End Try
        End If

        If ismultipart Then
            ktbep_aired.Text = gvcurrenttvepisode.FirstAired
            ktbep_credits.Text = Strings.Replace(gvcurrenttvepisode.Writer, "|", "/")
            ktbep_director.Text = gvcurrenttvepisode.Director
            ktbep_epName.Text = gvcurrenttvepisode.EpisodeName
            ktbEp_epnum.Text = gvcurrenttvepisode.EpisodeNumber
            krtbep_Overview.Text = gvcurrenttvepisode.Overview
            ktbep_epseason.Text = gvcurrenttvepisode.SeasonNumber
            ktbep_epRating.Text = gvcurrenttvepisode.Rating
            If Not gvcurrenttvepisode.fileinfo.version = 1.3 Then
                messageprompts = True
                krtbTVShowMediaInfo.Text = "Multi-part episodes can't be re-scanned at this time." & vbNewLine & "If this is not a multipart episode, check the filename for -2 .. or any - and a number, x and a number, or e and a number."
                'gettvepmediainfo_bw()
                'save nfo ?

            Else
                'display the data
                krtbTVShowMediaInfo.Text = "Multi-part episodes can't be re-scanned at this time." & vbNewLine & "If this is not a multipart episode, check the filename for -2 .. or any - and a number, x and a number, or e and a number." 'krtbTVShowMediaInfo.Text = "Multi-part episodes can't be scanned at this time." 'gvcurrenttvepisode.fileinfo.objtostring(gvcurrenttvepisode.fileinfo)
            End If
            'krtbTVShowMediaInfo.Text = xbmccurep.fileinfo.objtostring(xbmccurep.fileinfo)
        End If

        ''see it it's a mutlipart ep
        'If gvcurrenttvepisode.mutlipart Then
        '    ktbep_aired.Text = gvcurrenttvepisode.FirstAired
        '    ktbep_credits.Text = Strings.Replace(gvcurrenttvepisode.Writer, "|", "/")
        '    ktbep_director.Text = gvcurrenttvepisode.Director
        '    ktbep_epName.Text = gvcurrenttvepisode.EpisodeName
        '    ktbEp_epnum.Text = gvcurrenttvepisode.EpisodeNumber
        '    krtbep_Overview.Text = gvcurrenttvepisode.Overview
        '    ktbep_epseason.Text = gvcurrenttvepisode.SeasonNumber
        '    ktbep_epRating.Text = gvcurrenttvepisode.Rating
        'Else
        '    'load the .nfo file


        '    'If xbmccurep.fileinfo.Video.Height = "" Then
        '    '    Dim micurep As New MediaInfo
        '    '    micurep.getdata_XBMC_EP(xbmccurep)

        '    'End If
        'End If
        ''update gui text
        ''asdf()
        'End If 'asdf()
        ' ''---------------------------- Mediaicons TVShow Section ---------------------------
        ''Dim selectedNameXMLfile As String
        'Dim dname As String = ""
        ''If currentxbmctvshow.Title = "CSI: Crime Scene Investigation" Then
        ''    dname = "CSI"
        ''Else
        ''    dname = cleanname(currentxbmctvshow.Title)
        ''End If

        'selectedNameXMLfile = currentTVShowSelectedNameXMLfile
        'dname = selectedNameXMLfile
        'Dim xmltemppathname As String = rconf.xmlfolder + selectedNameXMLfile
        ''check to see if there is already an xml file in there

        'If rconf.pcbf1s0 Then
        '    If rbem.Checked = True Then
        '        If messageprompts Then lblPbar.Text = "-- Getting Square (no style) icon for " + dname + "--"
        '        ''If messageprompts Then Me.Refresh()()
        '        xmlDownloadTV(dname, xmltemppathname, "1", "4", "0") 'square no style
        '    End If
        '    getdisplayimages(selectedNameXMLfile, "1", "4", "0", dname)
        'End If
        'If rconf.pcbf1s3 Then
        '    If rbem.Checked = True Then
        '        If messageprompts Then lblPbar.Text = "-- Getting Square Box Shot for " + dname + "--"
        '        ''If messageprompts Then Me.Refresh()()
        '        xmlDownloadTV(dname, xmltemppathname, "1", "4", "3") 'square box shot
        '    End If
        '    getdisplayimages(selectedNameXMLfile, "1", "4", "3", dname)
        'End If
        'If rconf.pcbf1s9 Then
        '    If rbem.Checked = True Then
        '        If messageprompts Then lblPbar.Text = "-- Getting Round icon for " + dname + "--"
        '        'If messageprompts Then Me.gbDisplay.Refresh()
        '        xmlDownloadTV(dname, xmltemppathname, "1", "4", "9") 'square classification, but it's a round token
        '    End If
        '    getdisplayimages(selectedNameXMLfile, "1", "4", "9", dname)
        'End If
        'If rconf.pcbf2s0 Then
        '    If rbem.Checked = True Then
        '        If messageprompts Then lblPbar.Text = "-- Getting Wide (no style) icon for " + dname + "--"
        '        'If messageprompts Then Me.gbDisplay.Refresh()
        '        xmlDownloadTV(dname, xmltemppathname, "2", "4", "0") 'wide no style
        '    End If
        '    getdisplayimages(selectedNameXMLfile, "2", "4", "0", dname)
        'End If
        'If rconf.pcbf2s2 Then
        '    If rbem.Checked = True Then
        '        If messageprompts Then lblPbar.Text = "-- Getting Wide (rounded shadow scanlines) icon for " + dname + "--"
        '        'If messageprompts Then Me.gbDisplay.Refresh()
        '        xmlDownloadTV(dname, xmltemppathname, "2", "4", "2") 'wide rounded shadow with scanlines
        '    End If
        '    getdisplayimages(selectedNameXMLfile, "2", "4", "2", dname)
        'End If
        'If rconf.pcbf2s8 Then
        '    If rbem.Checked = True Then
        '        If messageprompts Then lblPbar.Text = "-- Getting Wide (round shadow) icon for " + dname + "--"
        '        'If messageprompts Then Me.gbDisplay.Refresh()
        '        xmlDownloadTV(dname, xmltemppathname, "2", "4", "8") 'wide rounded shadow
        '    End If
        '    getdisplayimages(selectedNameXMLfile, "2", "4", "8", dname)
        'End If
        'If rconf.pcbf2s10 Then
        '    If rbem.Checked = True Then
        '        If messageprompts Then lblPbar.Text = "-- Getting Wide (round shadow Glass overlay) icon for " + dname + "--"
        '        'If messageprompts Then Me.gbDisplay.Refresh()
        '        xmlDownloadTV(dname, xmltemppathname, "2", "4", "10") 'wide rounded shadow with glass overlay
        '    End If
        '    getdisplayimages(selectedNameXMLfile, "2", "4", "10", dname)
        'End If
        'If cbf3s0.Checked Then
        '    If rbem.Checked = True Then
        '        If messageprompts Then lblPbar.Text = "-- Getting Tall (no style) icon for " + dname + "--"
        '        'If messageprompts Then Me.gbDisplay.Refresh()
        '        xmlDownload(currentmovie, xmltemppathname, "3", "4", "0") 'tall no style
        '    End If
        '    getdisplayimages(selectedNameXMLfile, "3", "4", "0")
        'End If
        'gvcurrenttvepisode = curepisode
        'xbmctvepisode.Actors = theactors
        'xbmctvepisode.Aired = tls.FirstAired
        'xbmctvepisode.Credits = Strings.Replace(tls.Writer, "|", "/")
        'xbmctvepisode.Director = tls.Director
        'xbmctvepisode.Episode = tls.EpisodeNumber
        'xbmctvepisode.Plot = tls.Overview
        'xbmctvepisode.Season = tls.SeasonNumber
        'xbmctvepisode.Thumb = currentmirror + "/banners/" + tls.Filename
        'xbmctvepisode.Title = tls.EpisodeName
        'xbmctvepisode.Watched = ""
    End Sub

    Private Sub lbEpisodesMissing_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles lbEpisodesMissing.Click
        If lbEpisodesMissing.SelectedIndex = -1 Then Exit Sub
        Debug.Print("lbEpisodesMissing clicked")
        Debug.Print(lbEpisodesMissing.SelectedValue.ToString)

        kpEpisodeData.Visible = True

        'Dim curepisode As tvdblangEpisode
        gvcurrenttvepisode = CType(episodeshashtablemissing.Item(lbEpisodesMissing.SelectedValue), tvdblangEpisode)
        Dim dateFirstAired As Date = Nothing
        Try
            dateFirstAired = CDate(gvcurrenttvepisode.FirstAired)
        Catch ex As Exception

        End Try

        MsgBox(dateFirstAired)
        Try
            pbep_episodeimage.ImageLocation = Nothing
            pbep_episodeimage.Image = Nothing
            Dim imagemissingorfuture As String = "missingepisode.jpg"
            If Not dateFirstAired = Nothing Then
                If dateFirstAired < Date.Today Then
                    imagemissingorfuture = "missingepisode.jpg"
                ElseIf dateFirstAired > Date.Today Then
                    imagemissingorfuture = "futureepisode.jpg"
                ElseIf dateFirstAired = Date.Today Then
                    imagemissingorfuture = "currentepisode.jpg"
                End If
            End If
            pbep_episodeimage.ImageLocation = rconf.resourcefolder + imagemissingorfuture '"missingepisode.jpg" 'removeextension(gvcurrenttvepisode.episodefilepath) + ".tbn"
            If File.Exists(rconf.resourcefolder + "missingepisode.jpg") Then pbep_episodeimage.Load()

        Catch ex As Exception

        End Try

        If File.Exists(rconf.basefolder + "popmissingepisode.mip") Then
            'later read the xml for pre and post append
            Dim strUri As String = ""
            Dim reworkedep As String = gvcurrenttvepisode.EpisodeNumber
            If reworkedep.Length = 1 Then reworkedep = "0" & reworkedep
            strUri += File.ReadAllText(rconf.basefolder + "popmissingepisode_prepend.mip")
            strUri += klblTvShowName.Text + "%20" + gvcurrenttvepisode.CombinedSeason + "x" + reworkedep
            strUri += File.ReadAllText(rconf.basefolder + "popmissingepisode_post.mip")
            System.Diagnostics.Process.Start(strUri)
        End If
        Dim createfakefiles As Boolean = False
        If createfakefiles Then
            'setup for icon selection
            Dim curtvshowpath As String = lbTvShowPicker.SelectedValue.ToString 'need to split this 
            If Not Directory.Exists(addfiletofolder(curtvshowpath, "MISSING")) Then
                Directory.CreateDirectory(addfiletofolder(curtvshowpath, "MISSING"))
            End If
            Dim fakefilename As String = ""
            fakefilename = gvcurrenttvepisode.EpisodeName + "s" + gvcurrenttvepisode.CombinedSeason + "e" + gvcurrenttvepisode.EpisodeNumber + "_emptyfile.avi"
            If Not File.Exists(addfiletofolder((addfiletofolder(curtvshowpath, "MISSING")), fakefilename)) Then
                File.WriteAllText(addfiletofolder((addfiletofolder(curtvshowpath, "MISSING")), fakefilename), "")
            End If
            gvcurrenttvepisode.episodefilepath = addfiletofolder((addfiletofolder(curtvshowpath, "MISSING")), fakefilename)
            curtvshowiconsetting = removeextension(gvcurrenttvepisode.episodefilepath) + ".tbn"
            curtvshowpicturboxtoupdate = pbep_episodeimage
            curtvshowiconsettinglbl.Text = "Icons and Box Shots will be saved as the: Season: " + gvcurrenttvepisode.SeasonNumber + " Episode: " + gvcurrenttvepisode.EpisodeNumber + " Image File (" + removeextension(getfilefrompath(gvcurrenttvepisode.episodefilepath)) + ".tbn)"
        Else
            bshgSaveEpisodeData.Enabled = ButtonEnabled.False
        End If
        ktbep_aired.Text = gvcurrenttvepisode.FirstAired
        ktbep_credits.Text = Strings.Replace(gvcurrenttvepisode.Writer, "|", "/")
        ktbep_director.Text = gvcurrenttvepisode.Director
        ktbep_epName.Text = gvcurrenttvepisode.EpisodeName
        ktbEp_epnum.Text = gvcurrenttvepisode.EpisodeNumber
        krtbep_Overview.Text = gvcurrenttvepisode.Overview
        ktbep_epseason.Text = gvcurrenttvepisode.SeasonNumber

    End Sub
    Private Sub getfcdn_movie_front(Optional ByVal precache As Boolean = False, Optional ByRef downloadlist As ArrayList = Nothing)
        If Not rconf.pgetMediaImagesMoviesFront Then Exit Sub
        Dim newfcdn As New freecoversdotnet.Rsp
        newfcdn.parentdirname = rconf.basefolder
        Dim dllist As ArrayList = newfcdn.downloadimages(0, currentmovie.pmoviename, "front", 1, 0) '0,1,2 blue,dvd,hddvd .. section 0 is front cover
        For Each curdlobj As miplibfc.mip.dlobject In dllist
            If Not precache Then currentmovie.pdownloadlist.Add(curdlobj)
            If precache And Not downloadlist Is Nothing Then downloadlist.Add(curdlobj)
        Next
    End Sub
    Private Sub getfcdn_movie_back(Optional ByVal precache As Boolean = False, Optional ByRef downloadlist As ArrayList = Nothing)
        If Not rconf.pgetMediaImagesMoviesback Then Exit Sub
        Dim newfcdn As New freecoversdotnet.Rsp
        newfcdn.parentdirname = rconf.basefolder
        Dim dllist As ArrayList = newfcdn.downloadimages(0, currentmovie.pmoviename, "back", 1, 1) '0,1,2 blue,dvd,hddvd .. section 0 is front cover
        For Each curdlobj As miplibfc.mip.dlobject In dllist
            If Not precache Then currentmovie.pdownloadlist.Add(curdlobj)
            If precache And Not downloadlist Is Nothing Then downloadlist.Add(curdlobj)
        Next
    End Sub
    Private Sub getfcdn_movie_cd1(Optional ByVal precache As Boolean = False, Optional ByRef downloadlist As ArrayList = Nothing)
        If Not rconf.pgetMediaImagesMoviescd1 Then Exit Sub
        Dim newfcdn As New freecoversdotnet.Rsp
        newfcdn.parentdirname = rconf.basefolder
        Dim dllist As ArrayList = newfcdn.downloadimages(0, currentmovie.pmoviename, "cd", 1, 2) '0,1,2 blue,dvd,hddvd .. section 0 is front cover
        For Each curdlobj As miplibfc.mip.dlobject In dllist
            If Not precache Then currentmovie.pdownloadlist.Add(curdlobj)
            If precache And Not downloadlist Is Nothing Then downloadlist.Add(curdlobj)
        Next
    End Sub
    Private Sub getfcdn_movie_cd2(Optional ByVal precache As Boolean = False, Optional ByRef downloadlist As ArrayList = Nothing)
        If Not rconf.pgetMediaImagesMoviescd2 Then Exit Sub
        Dim newfcdn As New freecoversdotnet.Rsp
        newfcdn.parentdirname = rconf.basefolder
        Dim dllist As ArrayList = newfcdn.downloadimages(0, currentmovie.pmoviename, "cd2", 1, 3) '0,1,2 blue,dvd,hddvd .. section 0 is front cover
        For Each curdlobj As miplibfc.mip.dlobject In dllist
            If Not precache Then currentmovie.pdownloadlist.Add(curdlobj)
            If precache And Not downloadlist Is Nothing Then downloadlist.Add(curdlobj)
        Next
    End Sub
    Private Sub getfcdn_movie_cd3(Optional ByVal precache As Boolean = False, Optional ByRef downloadlist As ArrayList = Nothing)
        If Not rconf.pgetMediaImagesMoviescd3 Then Exit Sub
        Dim newfcdn As New freecoversdotnet.Rsp
        newfcdn.parentdirname = rconf.basefolder
        Dim dllist As ArrayList = newfcdn.downloadimages(0, currentmovie.pmoviename, "cd3", 1, 4) '0,1,2 blue,dvd,hddvd .. section 0 is front cover
        For Each curdlobj As miplibfc.mip.dlobject In dllist
            If Not precache Then currentmovie.pdownloadlist.Add(curdlobj)
            If precache And Not downloadlist Is Nothing Then downloadlist.Add(curdlobj)
        Next
    End Sub
    Private Sub getfcdn_movie_cd4(Optional ByVal precache As Boolean = False, Optional ByRef downloadlist As ArrayList = Nothing)
        If Not rconf.pgetMediaImagesMoviescd4 Then Exit Sub
        Dim newfcdn As New freecoversdotnet.Rsp
        newfcdn.parentdirname = rconf.basefolder
        Dim dllist As ArrayList = newfcdn.downloadimages(0, currentmovie.pmoviename, "cd4", 1, 5) '0,1,2 blue,dvd,hddvd .. section 0 is front cover
        For Each curdlobj As miplibfc.mip.dlobject In dllist
            If Not precache Then currentmovie.pdownloadlist.Add(curdlobj)
            If precache And Not downloadlist Is Nothing Then downloadlist.Add(curdlobj)
        Next
    End Sub
    Private Sub getfcdn_movie_inlay(Optional ByVal precache As Boolean = False, Optional ByRef downloadlist As ArrayList = Nothing)
        If Not rconf.pgetMediaImagesMoviesinlay Then Exit Sub
        Dim newfcdn As New freecoversdotnet.Rsp
        newfcdn.parentdirname = rconf.basefolder
        Dim dllist As ArrayList = newfcdn.downloadimages(0, currentmovie.pmoviename, "inlay", 1, 7) '0,1,2 blue,dvd,hddvd .. section 0 is front cover
        For Each curdlobj As miplibfc.mip.dlobject In dllist
            If Not precache Then currentmovie.pdownloadlist.Add(curdlobj)
            If precache And Not downloadlist Is Nothing Then downloadlist.Add(curdlobj)
        Next
    End Sub
    Private Sub getfcdn_movie_insert(Optional ByVal precache As Boolean = False, Optional ByRef downloadlist As ArrayList = Nothing)
        If Not rconf.pgetMediaImagesMoviesinsert Then Exit Sub
        Dim newfcdn As New freecoversdotnet.Rsp
        newfcdn.parentdirname = rconf.basefolder
        Dim dllist As ArrayList = newfcdn.downloadimages(0, currentmovie.pmoviename, "inside", 1, 6) '0,1,2 blue,dvd,hddvd .. section 0 is front cover
        For Each curdlobj As miplibfc.mip.dlobject In dllist
            If Not precache Then currentmovie.pdownloadlist.Add(curdlobj)
            If precache And Not downloadlist Is Nothing Then downloadlist.Add(curdlobj)
        Next


    End Sub

    Private Sub showfcdn_movie_front()
        If Not rconf.pgetMediaImagesMoviesFront Then Exit Sub
        Dim newfcdn As New freecoversdotnet.Rsp
        newfcdn.parentdirname = rconf.basefolder
        Dim dllist As ArrayList = newfcdn.downloadimages(0, currentmovie.pmoviename, "front", 1, 0, True) '0,1,2 blue,dvd,hddvd .. section 0 is front cover
        Dim curcount As Integer = 0
        For Each curdlobj As miplibfc.mip.dlobject In dllist
            'currentmovie.pdownloadlist.Add(curdlobj)
            Select Case curcount
                Case 0
                    pbFront1.ImageLocation = curdlobj.Destination
                    pbFront1.AccessibleName = curdlobj.misc
                    Try
                        pbFront1.Load()
                    Catch ex As Exception

                    End Try
                Case 1
                    pbFront2.ImageLocation = curdlobj.Destination
                    pbFront2.AccessibleName = curdlobj.misc
                    Try
                        pbFront2.Load()
                    Catch ex As Exception

                    End Try
                Case 2
                    pbFront3.ImageLocation = curdlobj.Destination
                    pbFront3.AccessibleName = curdlobj.misc
                    Try
                        pbFront3.Load()
                    Catch ex As Exception

                    End Try
                Case 3
                    pbFront4.ImageLocation = curdlobj.Destination
                    pbFront4.AccessibleName = curdlobj.misc
                    Try
                        pbFront4.Load()
                    Catch ex As Exception

                    End Try
                Case 4
                    pbFront5.ImageLocation = curdlobj.Destination
                    pbFront5.AccessibleName = curdlobj.misc
                    Try
                        pbFront5.Load()
                    Catch ex As Exception

                    End Try
                Case 5
                    pbFront6.ImageLocation = curdlobj.Destination
                    pbFront6.AccessibleName = curdlobj.misc
                    Try
                        pbFront6.Load()
                    Catch ex As Exception

                    End Try
                Case 6
                    pbFront7.ImageLocation = curdlobj.Destination
                    pbFront7.AccessibleName = curdlobj.misc
                    Try
                        pbFront7.Load()
                    Catch ex As Exception

                    End Try
                Case 7
                    pbFront8.ImageLocation = curdlobj.Destination
                    pbFront8.AccessibleName = curdlobj.misc
                    Try
                        pbFront8.Load()
                    Catch ex As Exception

                    End Try
                Case 8
                    pbFront9.ImageLocation = curdlobj.Destination
                    pbFront9.AccessibleName = curdlobj.misc
                    Try
                        pbFront9.Load()
                    Catch ex As Exception

                    End Try
                Case 9
                    pbFront10.ImageLocation = curdlobj.Destination
                    pbFront10.AccessibleName = curdlobj.misc
                    Try
                        pbFront10.Load()
                    Catch ex As Exception

                    End Try
                Case Else
                    'do nothing
            End Select
            curcount += 1
        Next
    End Sub
    '0,%,"back",1,1
    Private Sub showfcdn_movie_Back()
        If Not rconf.pgetMediaImagesMoviesback Then Exit Sub
        Dim newfcdn As New freecoversdotnet.Rsp
        newfcdn.parentdirname = rconf.basefolder
        Dim dllist As ArrayList = newfcdn.downloadimages(0, currentmovie.pmoviename, "back", 1, 1, True) '0,1,2 blue,dvd,hddvd .. section 0 is Back cover
        Dim curcount As Integer = 0
        For Each curdlobj As miplibfc.mip.dlobject In dllist
            'currentmovie.pdownloadlist.Add(curdlobj)
            Select Case curcount
                Case 0
                    pbBack1.ImageLocation = curdlobj.Destination
                    pbBack1.AccessibleName = curdlobj.misc
                    Try
                        pbBack1.Load()
                    Catch ex As Exception

                    End Try
                Case 1
                    pbBack2.ImageLocation = curdlobj.Destination
                    pbBack2.AccessibleName = curdlobj.misc
                    Try
                        pbBack2.Load()
                    Catch ex As Exception

                    End Try
                Case 2
                    pbBack3.ImageLocation = curdlobj.Destination
                    pbBack3.AccessibleName = curdlobj.misc
                    Try
                        pbBack3.Load()
                    Catch ex As Exception

                    End Try
                Case 3
                    pbBack4.ImageLocation = curdlobj.Destination
                    pbBack4.AccessibleName = curdlobj.misc
                    Try
                        pbBack4.Load()
                    Catch ex As Exception

                    End Try
                Case 4
                    pbBack5.ImageLocation = curdlobj.Destination
                    pbBack5.AccessibleName = curdlobj.misc
                    Try
                        pbBack5.Load()
                    Catch ex As Exception

                    End Try
                Case 5
                    pbBack6.ImageLocation = curdlobj.Destination
                    pbBack6.AccessibleName = curdlobj.misc
                    Try
                        pbBack6.Load()
                    Catch ex As Exception

                    End Try
                Case 6
                    pbBack7.ImageLocation = curdlobj.Destination
                    pbBack7.AccessibleName = curdlobj.misc
                    Try
                        pbBack7.Load()
                    Catch ex As Exception

                    End Try
                Case 7
                    pbBack8.ImageLocation = curdlobj.Destination
                    pbBack8.AccessibleName = curdlobj.misc
                    Try
                        pbBack8.Load()
                    Catch ex As Exception

                    End Try
                Case 8
                    pbBack9.ImageLocation = curdlobj.Destination
                    pbBack9.AccessibleName = curdlobj.misc
                    Try
                        pbBack9.Load()
                    Catch ex As Exception

                    End Try

                Case Else
                    'do nothing
            End Select
            curcount += 1
        Next
    End Sub
    '0,%,"cd",1,2
    Private Sub showfcdn_movie_cd1()
        If Not rconf.pgetMediaImagesMoviescd1 Then Exit Sub
        Dim newfcdn As New freecoversdotnet.Rsp
        newfcdn.parentdirname = rconf.basefolder
        Dim dllist As ArrayList = newfcdn.downloadimages(0, currentmovie.pmoviename, "cd", 1, 2, True) '0,1,2 blue,dvd,hddvd .. section 0 is cd cover
        Dim curcount As Integer = 0
        For Each curdlobj As miplibfc.mip.dlobject In dllist
            'currentmovie.pdownloadlist.Add(curdlobj)
            Select Case curcount
                Case 0
                    pbcdi1.ImageLocation = curdlobj.Destination
                    pbcdi1.AccessibleName = curdlobj.misc
                    Try
                        pbcdi1.Load()
                    Catch ex As Exception

                    End Try
                Case 1
                    pbcdi2.ImageLocation = curdlobj.Destination
                    pbcdi2.AccessibleName = curdlobj.misc
                    Try
                        pbcdi2.Load()
                    Catch ex As Exception

                    End Try
                Case 2
                    pbcdi3.ImageLocation = curdlobj.Destination
                    pbcdi3.AccessibleName = curdlobj.misc
                    Try
                        pbcdi3.Load()
                    Catch ex As Exception

                    End Try
                Case 3
                    pbcdi4.ImageLocation = curdlobj.Destination
                    pbcdi4.AccessibleName = curdlobj.misc
                    Try
                        pbcdi4.Load()
                    Catch ex As Exception

                    End Try
                Case 4
                    pbcdi5.ImageLocation = curdlobj.Destination
                    pbcdi5.AccessibleName = curdlobj.misc
                    Try
                        pbcdi5.Load()
                    Catch ex As Exception

                    End Try
                Case 5
                    pbcdi6.ImageLocation = curdlobj.Destination
                    pbcdi6.AccessibleName = curdlobj.misc
                    Try
                        pbcdi6.Load()
                    Catch ex As Exception

                    End Try
                Case 6
                    pbcdi7.ImageLocation = curdlobj.Destination
                    pbcdi7.AccessibleName = curdlobj.misc
                    Try
                        pbcdi7.Load()
                    Catch ex As Exception

                    End Try
                Case 7
                    pbcdi8.ImageLocation = curdlobj.Destination
                    pbcdi8.AccessibleName = curdlobj.misc
                    Try
                        pbcdi8.Load()
                    Catch ex As Exception

                    End Try
                Case 8
                    pbcdi9.ImageLocation = curdlobj.Destination
                    pbcdi9.AccessibleName = curdlobj.misc
                    Try
                        pbcdi9.Load()
                    Catch ex As Exception

                    End Try

                Case Else
                    'do nothing
            End Select
            curcount += 1
        Next
    End Sub
    '0,%,"cd2",1,3
    Private Sub showfcdn_movie_cd2()
        If Not rconf.pgetMediaImagesMoviescd2 Then Exit Sub
        Dim newfcdn As New freecoversdotnet.Rsp
        newfcdn.parentdirname = rconf.basefolder
        Dim dllist As ArrayList = newfcdn.downloadimages(0, currentmovie.pmoviename, "cd2", 1, 3, True) '0,1,2 blue,dvd,hddvd .. section 0 is cd cover
        Dim curcount As Integer = 0
        For Each curdlobj As miplibfc.mip.dlobject In dllist
            'currentmovie.pdownloadlist.Add(curdlobj)
            Select Case curcount
                Case 0
                    pbcd2i1.ImageLocation = curdlobj.Destination
                    pbcd2i1.AccessibleName = curdlobj.misc
                    Try
                        pbcd2i1.Load()
                    Catch ex As Exception

                    End Try
                Case 1
                    pbcd2i2.ImageLocation = curdlobj.Destination
                    pbcd2i2.AccessibleName = curdlobj.misc
                    Try
                        pbcd2i2.Load()
                    Catch ex As Exception

                    End Try
                Case 2
                    pbcd2i3.ImageLocation = curdlobj.Destination
                    pbcd2i3.AccessibleName = curdlobj.misc
                    Try
                        pbcd2i3.Load()
                    Catch ex As Exception

                    End Try
                Case 3
                    pbcd2i4.ImageLocation = curdlobj.Destination
                    pbcd2i4.AccessibleName = curdlobj.misc
                    Try
                        pbcd2i4.Load()
                    Catch ex As Exception

                    End Try
                Case 4
                    pbcd2i5.ImageLocation = curdlobj.Destination
                    pbcd2i5.AccessibleName = curdlobj.misc
                    Try
                        pbcd2i5.Load()
                    Catch ex As Exception

                    End Try
                Case 5
                    pbcd2i6.ImageLocation = curdlobj.Destination
                    pbcd2i6.AccessibleName = curdlobj.misc
                    Try
                        pbcd2i6.Load()
                    Catch ex As Exception

                    End Try
                Case 6
                    pbcd2i7.ImageLocation = curdlobj.Destination
                    pbcd2i7.AccessibleName = curdlobj.misc
                    Try
                        pbcd2i7.Load()
                    Catch ex As Exception

                    End Try
                Case 7
                    pbcd2i8.ImageLocation = curdlobj.Destination
                    pbcd2i8.AccessibleName = curdlobj.misc
                    Try
                        pbcd2i8.Load()
                    Catch ex As Exception

                    End Try
                Case 8
                    pbcd2i9.ImageLocation = curdlobj.Destination
                    pbcd2i9.AccessibleName = curdlobj.misc
                    Try
                        pbcd2i9.Load()
                    Catch ex As Exception

                    End Try

                Case Else
                    'do nothing
            End Select
            curcount += 1
        Next
    End Sub
    '0,%,"cd3",1,4
    Private Sub showfcdn_movie_cd3()
        If Not rconf.pgetMediaImagesMoviescd3 Then Exit Sub
        Dim newfcdn As New freecoversdotnet.Rsp
        newfcdn.parentdirname = rconf.basefolder
        Dim dllist As ArrayList = newfcdn.downloadimages(0, currentmovie.pmoviename, "cd3", 1, 4, True) '0,1,2 blue,dvd,hddvd .. section 0 is cd cover
        Dim curcount As Integer = 0
        For Each curdlobj As miplibfc.mip.dlobject In dllist
            'currentmovie.pdownloadlist.Add(curdlobj)
            Select Case curcount
                Case 0
                    pbcd3i1.ImageLocation = curdlobj.Destination
                    pbcd3i1.AccessibleName = curdlobj.misc
                    Try
                        pbcd3i1.Load()
                    Catch ex As Exception

                    End Try
                Case 1
                    pbcd3i2.ImageLocation = curdlobj.Destination
                    pbcd3i2.AccessibleName = curdlobj.misc
                    Try
                        pbcd3i2.Load()
                    Catch ex As Exception

                    End Try
                Case 2
                    pbcd3i3.ImageLocation = curdlobj.Destination
                    pbcd3i3.AccessibleName = curdlobj.misc
                    Try
                        pbcd3i3.Load()
                    Catch ex As Exception

                    End Try
                Case 3
                    pbcd3i4.ImageLocation = curdlobj.Destination
                    pbcd3i4.AccessibleName = curdlobj.misc
                    Try
                        pbcd3i4.Load()
                    Catch ex As Exception

                    End Try
                Case 4
                    pbcd3i5.ImageLocation = curdlobj.Destination
                    pbcd3i5.AccessibleName = curdlobj.misc
                    Try
                        pbcd3i5.Load()
                    Catch ex As Exception

                    End Try
                Case 5
                    pbcd3i6.ImageLocation = curdlobj.Destination
                    pbcd3i6.AccessibleName = curdlobj.misc
                    Try
                        pbcd3i6.Load()
                    Catch ex As Exception

                    End Try
                Case 6
                    pbcd3i7.ImageLocation = curdlobj.Destination
                    pbcd3i7.AccessibleName = curdlobj.misc
                    Try
                        pbcd3i7.Load()
                    Catch ex As Exception

                    End Try
                Case 7
                    pbcd3i8.ImageLocation = curdlobj.Destination
                    pbcd3i8.AccessibleName = curdlobj.misc
                    Try
                        pbcd3i8.Load()
                    Catch ex As Exception

                    End Try
                Case 8
                    pbcd3i9.ImageLocation = curdlobj.Destination
                    pbcd3i9.AccessibleName = curdlobj.misc
                    Try
                        pbcd3i9.Load()
                    Catch ex As Exception

                    End Try

                Case Else
                    'do nothing
            End Select
            curcount += 1
        Next
    End Sub
    '0,%,"cd4",1,5
    Private Sub showfcdn_movie_cd4()
        If Not rconf.pgetMediaImagesMoviescd4 Then Exit Sub
        Dim newfcdn As New freecoversdotnet.Rsp
        newfcdn.parentdirname = rconf.basefolder
        Dim dllist As ArrayList = newfcdn.downloadimages(0, currentmovie.pmoviename, "cd4", 1, 5, True) '0,1,2 blue,dvd,hddvd .. section 0 is cd cover
        Dim curcount As Integer = 0
        For Each curdlobj As miplibfc.mip.dlobject In dllist
            'currentmovie.pdownloadlist.Add(curdlobj)
            Select Case curcount
                Case 0
                    pbcd4i1.ImageLocation = curdlobj.Destination
                    pbcd4i1.AccessibleName = curdlobj.misc
                    Try
                        pbcd4i1.Load()
                    Catch ex As Exception

                    End Try
                Case 1
                    pbcd4i2.ImageLocation = curdlobj.Destination
                    pbcd4i2.AccessibleName = curdlobj.misc
                    Try
                        pbcd4i2.Load()
                    Catch ex As Exception

                    End Try
                Case 2
                    pbcd4i3.ImageLocation = curdlobj.Destination
                    pbcd4i3.AccessibleName = curdlobj.misc
                    Try
                        pbcd4i3.Load()
                    Catch ex As Exception

                    End Try
                Case 3
                    pbcd4i4.ImageLocation = curdlobj.Destination
                    pbcd4i4.AccessibleName = curdlobj.misc
                    Try
                        pbcd4i4.Load()
                    Catch ex As Exception

                    End Try
                Case 4
                    pbcd4i5.ImageLocation = curdlobj.Destination
                    pbcd4i5.AccessibleName = curdlobj.misc
                    Try
                        pbcd4i5.Load()
                    Catch ex As Exception

                    End Try
                Case 5
                    pbcd4i6.ImageLocation = curdlobj.Destination
                    pbcd4i6.AccessibleName = curdlobj.misc
                    Try
                        pbcd4i6.Load()
                    Catch ex As Exception

                    End Try
                Case 6
                    pbcd4i7.ImageLocation = curdlobj.Destination
                    pbcd4i7.AccessibleName = curdlobj.misc
                    Try
                        pbcd4i7.Load()
                    Catch ex As Exception

                    End Try
                Case 7
                    pbcd4i8.ImageLocation = curdlobj.Destination
                    pbcd4i8.AccessibleName = curdlobj.misc
                    Try
                        pbcd4i8.Load()
                    Catch ex As Exception

                    End Try
                Case 8
                    pbcd4i9.ImageLocation = curdlobj.Destination
                    pbcd4i9.AccessibleName = curdlobj.misc
                    Try
                        pbcd4i9.Load()
                    Catch ex As Exception

                    End Try

                Case Else
                    'do nothing
            End Select
            curcount += 1
        Next
    End Sub
    '0,%,"inside",1,6
    Private Sub showfcdn_movie_insert()
        If Not rconf.pgetMediaImagesMoviesinsert Then Exit Sub
        Dim newfcdn As New freecoversdotnet.Rsp
        newfcdn.parentdirname = rconf.basefolder
        Dim dllist As ArrayList = newfcdn.downloadimages(0, currentmovie.pmoviename, "inside", 1, 6, True) '0,1,2 blue,dvd,hddvd .. section 0 is cd cover
        Dim curcount As Integer = 0
        For Each curdlobj As miplibfc.mip.dlobject In dllist
            'currentmovie.pdownloadlist.Add(curdlobj)
            Select Case curcount
                Case 0
                    pbInsert1.ImageLocation = curdlobj.Destination
                    pbInsert1.AccessibleName = curdlobj.misc
                    Try
                        pbInsert1.Load()
                    Catch ex As Exception

                    End Try
                Case 1
                    pbInsert2.ImageLocation = curdlobj.Destination
                    pbInsert2.AccessibleName = curdlobj.misc
                    Try
                        pbInsert2.Load()
                    Catch ex As Exception

                    End Try
                Case 2
                    pbInsert3.ImageLocation = curdlobj.Destination
                    pbInsert3.AccessibleName = curdlobj.misc
                    Try
                        pbInsert3.Load()
                    Catch ex As Exception

                    End Try
                Case 3
                    pbInsert4.ImageLocation = curdlobj.Destination
                    pbInsert4.AccessibleName = curdlobj.misc
                    Try
                        pbInsert4.Load()
                    Catch ex As Exception

                    End Try
                Case 4
                    pbInsert5.ImageLocation = curdlobj.Destination
                    pbInsert5.AccessibleName = curdlobj.misc
                    Try
                        pbInsert5.Load()
                    Catch ex As Exception

                    End Try
                Case 5
                    pbInsert6.ImageLocation = curdlobj.Destination
                    pbInsert6.AccessibleName = curdlobj.misc
                    Try
                        pbInsert6.Load()
                    Catch ex As Exception

                    End Try
                Case 6
                    pbInsert7.ImageLocation = curdlobj.Destination
                    pbInsert7.AccessibleName = curdlobj.misc
                    Try
                        pbInsert7.Load()
                    Catch ex As Exception

                    End Try
                Case 7
                    pbInsert8.ImageLocation = curdlobj.Destination
                    pbInsert8.AccessibleName = curdlobj.misc
                    Try
                        pbInsert8.Load()
                    Catch ex As Exception

                    End Try
                Case 8
                    pbInsert9.ImageLocation = curdlobj.Destination
                    pbInsert9.AccessibleName = curdlobj.misc
                    Try
                        pbInsert9.Load()
                    Catch ex As Exception

                    End Try

                Case Else
                    'do nothing
            End Select
            curcount += 1
        Next
    End Sub
    '0,%,"inlay",1,7
    Private Sub showfcdn_movie_inlay()
        If Not rconf.pgetMediaImagesMoviesinlay Then Exit Sub
        Dim newfcdn As New freecoversdotnet.Rsp
        newfcdn.parentdirname = rconf.basefolder
        Dim dllist As ArrayList = newfcdn.downloadimages(0, currentmovie.pmoviename, "inlay", 1, 7, True) '0,1,2 blue,dvd,hddvd .. section 0 is cd cover
        Dim curcount As Integer = 0
        For Each curdlobj As miplibfc.mip.dlobject In dllist
            'currentmovie.pdownloadlist.Add(curdlobj)
            Select Case curcount
                Case 0
                    pbInlay1.ImageLocation = curdlobj.Destination
                    pbInlay1.AccessibleName = curdlobj.misc
                    Try
                        pbInlay1.Load()
                    Catch ex As Exception

                    End Try
                Case 1
                    pbInlay2.ImageLocation = curdlobj.Destination
                    pbInlay2.AccessibleName = curdlobj.misc
                    Try
                        pbInlay2.Load()
                    Catch ex As Exception

                    End Try
                Case 2
                    pbInlay3.ImageLocation = curdlobj.Destination
                    pbInlay3.AccessibleName = curdlobj.misc
                    Try
                        pbInlay3.Load()
                    Catch ex As Exception

                    End Try
                Case 3
                    pbInlay4.ImageLocation = curdlobj.Destination
                    pbInlay4.AccessibleName = curdlobj.misc
                    Try
                        pbInlay4.Load()
                    Catch ex As Exception

                    End Try
                Case 4
                    pbInlay5.ImageLocation = curdlobj.Destination
                    pbInlay5.AccessibleName = curdlobj.misc
                    Try
                        pbInlay5.Load()
                    Catch ex As Exception

                    End Try
                Case 5
                    pbInlay6.ImageLocation = curdlobj.Destination
                    pbInlay6.AccessibleName = curdlobj.misc
                    Try
                        pbInlay6.Load()
                    Catch ex As Exception

                    End Try
                Case 6
                    pbInlay7.ImageLocation = curdlobj.Destination
                    pbInlay7.AccessibleName = curdlobj.misc
                    Try
                        pbInlay7.Load()
                    Catch ex As Exception

                    End Try
                Case 7
                    pbInlay8.ImageLocation = curdlobj.Destination
                    pbInlay8.AccessibleName = curdlobj.misc
                    Try
                        pbInlay8.Load()
                    Catch ex As Exception

                    End Try
                Case 8
                    pbInlay9.ImageLocation = curdlobj.Destination
                    pbInlay9.AccessibleName = curdlobj.misc
                    Try
                        pbInlay9.Load()
                    Catch ex As Exception

                    End Try

                Case Else
                    'do nothing
            End Select
            curcount += 1
        Next
    End Sub

    Private Sub showfcdn_tvshow_front(ByVal searchstring As String, Optional ByVal precache As Boolean = False, Optional ByRef downloadlist As ArrayList = Nothing, Optional ByVal substring As String = "")
        If Not rconf.pgetMediaImagesShowsFront Then Exit Sub
        Dim newfcdn As New freecoversdotnet.Rsp
        newfcdn.parentdirname = rconf.basefolder
        Dim dllist As ArrayList = newfcdn.downloadimages(15, searchstring, "front", 15, 0, True, substring)
        Dim curcount As Integer = 0
        For Each curdlobj As miplibfc.mip.dlobject In dllist
            'currentmovie.pdownloadlist.Add(curdlobj)
            Select Case curcount
                Case 0
                    pbFront1.ImageLocation = curdlobj.Destination
                    pbFront1.AccessibleName = curdlobj.misc
                    Try
                        pbFront1.Load()
                    Catch ex As Exception

                    End Try
                Case 1
                    pbFront2.ImageLocation = curdlobj.Destination
                    pbFront2.AccessibleName = curdlobj.misc
                    Try
                        pbFront2.Load()
                    Catch ex As Exception

                    End Try
                Case 2
                    pbFront3.ImageLocation = curdlobj.Destination
                    pbFront3.AccessibleName = curdlobj.misc
                    Try
                        pbFront3.Load()
                    Catch ex As Exception

                    End Try
                Case 3
                    pbFront4.ImageLocation = curdlobj.Destination
                    pbFront4.AccessibleName = curdlobj.misc
                    Try
                        pbFront4.Load()
                    Catch ex As Exception

                    End Try
                Case 4
                    pbFront5.ImageLocation = curdlobj.Destination
                    pbFront5.AccessibleName = curdlobj.misc
                    Try
                        pbFront5.Load()
                    Catch ex As Exception

                    End Try
                Case 5
                    pbFront6.ImageLocation = curdlobj.Destination
                    pbFront6.AccessibleName = curdlobj.misc
                    Try
                        pbFront6.Load()
                    Catch ex As Exception

                    End Try
                Case 6
                    pbFront7.ImageLocation = curdlobj.Destination
                    pbFront7.AccessibleName = curdlobj.misc
                    Try
                        pbFront7.Load()
                    Catch ex As Exception

                    End Try
                Case 7
                    pbFront8.ImageLocation = curdlobj.Destination
                    pbFront8.AccessibleName = curdlobj.misc
                    Try
                        pbFront8.Load()
                    Catch ex As Exception

                    End Try
                Case 8
                    pbFront9.ImageLocation = curdlobj.Destination
                    pbFront9.AccessibleName = curdlobj.misc
                    Try
                        pbFront9.Load()
                    Catch ex As Exception

                    End Try
                Case 9
                    pbFront10.ImageLocation = curdlobj.Destination
                    pbFront10.AccessibleName = curdlobj.misc
                    Try
                        pbFront10.Load()
                    Catch ex As Exception

                    End Try
                Case Else
                    'do nothing
            End Select
            curcount += 1
        Next
    End Sub

    Private Sub showfcdn_tvshow_Back(ByVal searchstring As String, Optional ByVal precache As Boolean = False, Optional ByRef downloadlist As ArrayList = Nothing, Optional ByVal substring As String = "")
        If Not rconf.pgetMediaImagesShowsback Then Exit Sub
        Dim newfcdn As New freecoversdotnet.Rsp
        newfcdn.parentdirname = rconf.basefolder
        Dim dllist As ArrayList = newfcdn.downloadimages(15, searchstring, "back", 15, 1, True, substring)
        Dim curcount As Integer = 0
        For Each curdlobj As miplibfc.mip.dlobject In dllist
            'currentmovie.pdownloadlist.Add(curdlobj)
            Select Case curcount
                Case 0
                    pbBack1.ImageLocation = curdlobj.Destination
                    pbBack1.AccessibleName = curdlobj.misc
                    Try
                        pbBack1.Load()
                    Catch ex As Exception

                    End Try
                Case 1
                    pbBack2.ImageLocation = curdlobj.Destination
                    pbBack2.AccessibleName = curdlobj.misc
                    Try
                        pbBack2.Load()
                    Catch ex As Exception

                    End Try
                Case 2
                    pbBack3.ImageLocation = curdlobj.Destination
                    pbBack3.AccessibleName = curdlobj.misc
                    Try
                        pbBack3.Load()
                    Catch ex As Exception

                    End Try
                Case 3
                    pbBack4.ImageLocation = curdlobj.Destination
                    pbBack4.AccessibleName = curdlobj.misc
                    Try
                        pbBack4.Load()
                    Catch ex As Exception

                    End Try
                Case 4
                    pbBack5.ImageLocation = curdlobj.Destination
                    pbBack5.AccessibleName = curdlobj.misc
                    Try
                        pbBack5.Load()
                    Catch ex As Exception

                    End Try
                Case 5
                    pbBack6.ImageLocation = curdlobj.Destination
                    pbBack6.AccessibleName = curdlobj.misc
                    Try
                        pbBack6.Load()
                    Catch ex As Exception

                    End Try
                Case 6
                    pbBack7.ImageLocation = curdlobj.Destination
                    pbBack7.AccessibleName = curdlobj.misc
                    Try
                        pbBack7.Load()
                    Catch ex As Exception

                    End Try
                Case 7
                    pbBack8.ImageLocation = curdlobj.Destination
                    pbBack8.AccessibleName = curdlobj.misc
                    Try
                        pbBack8.Load()
                    Catch ex As Exception

                    End Try
                Case 8
                    pbBack9.ImageLocation = curdlobj.Destination
                    pbBack9.AccessibleName = curdlobj.misc
                    Try
                        pbBack9.Load()
                    Catch ex As Exception

                    End Try

                Case Else
                    'do nothing
            End Select
            curcount += 1
        Next
    End Sub
    '0,%,"cd",1,2
    Private Sub showfcdn_tvshow_cd1(ByVal searchstring As String, Optional ByVal precache As Boolean = False, Optional ByRef downloadlist As ArrayList = Nothing, Optional ByVal substring As String = "")
        If Not rconf.pgetMediaImagesShowscd1 Then Exit Sub
        Dim newfcdn As New freecoversdotnet.Rsp
        newfcdn.parentdirname = rconf.basefolder
        Dim dllist As ArrayList = newfcdn.downloadimages(15, searchstring, "cd", 15, 2, True, substring)
        Dim curcount As Integer = 0
        For Each curdlobj As miplibfc.mip.dlobject In dllist
            'currentmovie.pdownloadlist.Add(curdlobj)
            Select Case curcount
                Case 0
                    pbcdi1.ImageLocation = curdlobj.Destination
                    pbcdi1.AccessibleName = curdlobj.misc
                    Try
                        pbcdi1.Load()
                    Catch ex As Exception

                    End Try
                Case 1
                    pbcdi2.ImageLocation = curdlobj.Destination
                    pbcdi2.AccessibleName = curdlobj.misc
                    Try
                        pbcdi2.Load()
                    Catch ex As Exception

                    End Try
                Case 2
                    pbcdi3.ImageLocation = curdlobj.Destination
                    pbcdi3.AccessibleName = curdlobj.misc
                    Try
                        pbcdi3.Load()
                    Catch ex As Exception

                    End Try
                Case 3
                    pbcdi4.ImageLocation = curdlobj.Destination
                    pbcdi4.AccessibleName = curdlobj.misc
                    Try
                        pbcdi4.Load()
                    Catch ex As Exception

                    End Try
                Case 4
                    pbcdi5.ImageLocation = curdlobj.Destination
                    pbcdi5.AccessibleName = curdlobj.misc
                    Try
                        pbcdi5.Load()
                    Catch ex As Exception

                    End Try
                Case 5
                    pbcdi6.ImageLocation = curdlobj.Destination
                    pbcdi6.AccessibleName = curdlobj.misc
                    Try
                        pbcdi6.Load()
                    Catch ex As Exception

                    End Try
                Case 6
                    pbcdi7.ImageLocation = curdlobj.Destination
                    pbcdi7.AccessibleName = curdlobj.misc
                    Try
                        pbcdi7.Load()
                    Catch ex As Exception

                    End Try
                Case 7
                    pbcdi8.ImageLocation = curdlobj.Destination
                    pbcdi8.AccessibleName = curdlobj.misc
                    Try
                        pbcdi8.Load()
                    Catch ex As Exception

                    End Try
                Case 8
                    pbcdi9.ImageLocation = curdlobj.Destination
                    pbcdi9.AccessibleName = curdlobj.misc
                    Try
                        pbcdi9.Load()
                    Catch ex As Exception

                    End Try

                Case Else
                    'do nothing
            End Select
            curcount += 1
        Next
    End Sub
    '0,%,"cd2",1,3
    Private Sub showfcdn_tvshow_cd2(ByVal searchstring As String, Optional ByVal precache As Boolean = False, Optional ByRef downloadlist As ArrayList = Nothing, Optional ByVal substring As String = "")
        If Not rconf.pgetMediaImagesShowscd2 Then Exit Sub
        Dim newfcdn As New freecoversdotnet.Rsp
        newfcdn.parentdirname = rconf.basefolder
        Dim dllist As ArrayList = newfcdn.downloadimages(15, searchstring, "cd2", 15, 3, True, substring)
        Dim curcount As Integer = 0
        For Each curdlobj As miplibfc.mip.dlobject In dllist
            'currentmovie.pdownloadlist.Add(curdlobj)
            Select Case curcount
                Case 0
                    pbcd2i1.ImageLocation = curdlobj.Destination
                    pbcd2i1.AccessibleName = curdlobj.misc
                    Try
                        pbcd2i1.Load()
                    Catch ex As Exception

                    End Try
                Case 1
                    pbcd2i2.ImageLocation = curdlobj.Destination
                    pbcd2i2.AccessibleName = curdlobj.misc
                    Try
                        pbcd2i2.Load()
                    Catch ex As Exception

                    End Try
                Case 2
                    pbcd2i3.ImageLocation = curdlobj.Destination
                    pbcd2i3.AccessibleName = curdlobj.misc
                    Try
                        pbcd2i3.Load()
                    Catch ex As Exception

                    End Try
                Case 3
                    pbcd2i4.ImageLocation = curdlobj.Destination
                    pbcd2i4.AccessibleName = curdlobj.misc
                    Try
                        pbcd2i4.Load()
                    Catch ex As Exception

                    End Try
                Case 4
                    pbcd2i5.ImageLocation = curdlobj.Destination
                    pbcd2i5.AccessibleName = curdlobj.misc
                    Try
                        pbcd2i5.Load()
                    Catch ex As Exception

                    End Try
                Case 5
                    pbcd2i6.ImageLocation = curdlobj.Destination
                    pbcd2i6.AccessibleName = curdlobj.misc
                    Try
                        pbcd2i6.Load()
                    Catch ex As Exception

                    End Try
                Case 6
                    pbcd2i7.ImageLocation = curdlobj.Destination
                    pbcd2i7.AccessibleName = curdlobj.misc
                    Try
                        pbcd2i7.Load()
                    Catch ex As Exception

                    End Try
                Case 7
                    pbcd2i8.ImageLocation = curdlobj.Destination
                    pbcd2i8.AccessibleName = curdlobj.misc
                    Try
                        pbcd2i8.Load()
                    Catch ex As Exception

                    End Try
                Case 8
                    pbcd2i9.ImageLocation = curdlobj.Destination
                    pbcd2i9.AccessibleName = curdlobj.misc
                    Try
                        pbcd2i9.Load()
                    Catch ex As Exception

                    End Try

                Case Else
                    'do nothing
            End Select
            curcount += 1
        Next
    End Sub
    '0,%,"cd3",1,4
    Private Sub showfcdn_tvshow_cd3(ByVal searchstring As String, Optional ByVal precache As Boolean = False, Optional ByRef downloadlist As ArrayList = Nothing, Optional ByVal substring As String = "")
        If Not rconf.pgetMediaImagesShowscd3 Then Exit Sub
        Dim newfcdn As New freecoversdotnet.Rsp
        newfcdn.parentdirname = rconf.basefolder
        Dim dllist As ArrayList = newfcdn.downloadimages(15, searchstring, "cd3", 15, 4, True, substring)
        Dim curcount As Integer = 0
        For Each curdlobj As miplibfc.mip.dlobject In dllist
            'currentmovie.pdownloadlist.Add(curdlobj)
            Select Case curcount
                Case 0
                    pbcd3i1.ImageLocation = curdlobj.Destination
                    pbcd3i1.AccessibleName = curdlobj.misc
                    Try
                        pbcd3i1.Load()
                    Catch ex As Exception

                    End Try
                Case 1
                    pbcd3i2.ImageLocation = curdlobj.Destination
                    pbcd3i2.AccessibleName = curdlobj.misc
                    Try
                        pbcd3i2.Load()
                    Catch ex As Exception

                    End Try
                Case 2
                    pbcd3i3.ImageLocation = curdlobj.Destination
                    pbcd3i3.AccessibleName = curdlobj.misc
                    Try
                        pbcd3i3.Load()
                    Catch ex As Exception

                    End Try
                Case 3
                    pbcd3i4.ImageLocation = curdlobj.Destination
                    pbcd3i4.AccessibleName = curdlobj.misc
                    Try
                        pbcd3i4.Load()
                    Catch ex As Exception

                    End Try
                Case 4
                    pbcd3i5.ImageLocation = curdlobj.Destination
                    pbcd3i5.AccessibleName = curdlobj.misc
                    Try
                        pbcd3i5.Load()
                    Catch ex As Exception

                    End Try
                Case 5
                    pbcd3i6.ImageLocation = curdlobj.Destination
                    pbcd3i6.AccessibleName = curdlobj.misc
                    Try
                        pbcd3i6.Load()
                    Catch ex As Exception

                    End Try
                Case 6
                    pbcd3i7.ImageLocation = curdlobj.Destination
                    pbcd3i7.AccessibleName = curdlobj.misc
                    Try
                        pbcd3i7.Load()
                    Catch ex As Exception

                    End Try
                Case 7
                    pbcd3i8.ImageLocation = curdlobj.Destination
                    pbcd3i8.AccessibleName = curdlobj.misc
                    Try
                        pbcd3i8.Load()
                    Catch ex As Exception

                    End Try
                Case 8
                    pbcd3i9.ImageLocation = curdlobj.Destination
                    pbcd3i9.AccessibleName = curdlobj.misc
                    Try
                        pbcd3i9.Load()
                    Catch ex As Exception

                    End Try

                Case Else
                    'do nothing
            End Select
            curcount += 1
        Next
    End Sub
    '0,%,"cd4",1,5
    Private Sub showfcdn_tvshow_cd4(ByVal searchstring As String, Optional ByVal precache As Boolean = False, Optional ByRef downloadlist As ArrayList = Nothing, Optional ByVal substring As String = "")
        If Not rconf.pgetMediaImagesShowscd4 Then Exit Sub
        Dim newfcdn As New freecoversdotnet.Rsp
        newfcdn.parentdirname = rconf.basefolder
        Dim dllist As ArrayList = newfcdn.downloadimages(15, searchstring, "cd4", 15, 5, True, substring)
        Dim curcount As Integer = 0
        For Each curdlobj As miplibfc.mip.dlobject In dllist
            'currentmovie.pdownloadlist.Add(curdlobj)
            Select Case curcount
                Case 0
                    pbcd4i1.ImageLocation = curdlobj.Destination
                    pbcd4i1.AccessibleName = curdlobj.misc
                    Try
                        pbcd4i1.Load()
                    Catch ex As Exception

                    End Try
                Case 1
                    pbcd4i2.ImageLocation = curdlobj.Destination
                    pbcd4i2.AccessibleName = curdlobj.misc
                    Try
                        pbcd4i2.Load()
                    Catch ex As Exception

                    End Try
                Case 2
                    pbcd4i3.ImageLocation = curdlobj.Destination
                    pbcd4i3.AccessibleName = curdlobj.misc
                    Try
                        pbcd4i3.Load()
                    Catch ex As Exception

                    End Try
                Case 3
                    pbcd4i4.ImageLocation = curdlobj.Destination
                    pbcd4i4.AccessibleName = curdlobj.misc
                    Try
                        pbcd4i4.Load()
                    Catch ex As Exception

                    End Try
                Case 4
                    pbcd4i5.ImageLocation = curdlobj.Destination
                    pbcd4i5.AccessibleName = curdlobj.misc
                    Try
                        pbcd4i5.Load()
                    Catch ex As Exception

                    End Try
                Case 5
                    pbcd4i6.ImageLocation = curdlobj.Destination
                    pbcd4i6.AccessibleName = curdlobj.misc
                    Try
                        pbcd4i6.Load()
                    Catch ex As Exception

                    End Try
                Case 6
                    pbcd4i7.ImageLocation = curdlobj.Destination
                    pbcd4i7.AccessibleName = curdlobj.misc
                    Try
                        pbcd4i7.Load()
                    Catch ex As Exception

                    End Try
                Case 7
                    pbcd4i8.ImageLocation = curdlobj.Destination
                    pbcd4i8.AccessibleName = curdlobj.misc
                    Try
                        pbcd4i8.Load()
                    Catch ex As Exception

                    End Try
                Case 8
                    pbcd4i9.ImageLocation = curdlobj.Destination
                    pbcd4i9.AccessibleName = curdlobj.misc
                    Try
                        pbcd4i9.Load()
                    Catch ex As Exception

                    End Try

                Case Else
                    'do nothing
            End Select
            curcount += 1
        Next
    End Sub
    '0,%,"inside",1,6
    Private Sub showfcdn_tvshow_insert(ByVal searchstring As String, Optional ByVal precache As Boolean = False, Optional ByRef downloadlist As ArrayList = Nothing, Optional ByVal substring As String = "")
        If Not rconf.pgetMediaImagesShowsinsert Then Exit Sub
        Dim newfcdn As New freecoversdotnet.Rsp
        newfcdn.parentdirname = rconf.basefolder
        Dim dllist As ArrayList = newfcdn.downloadimages(15, searchstring, "inside", 15, 7, True, substring)
        Dim curcount As Integer = 0
        For Each curdlobj As miplibfc.mip.dlobject In dllist
            'currentmovie.pdownloadlist.Add(curdlobj)
            Select Case curcount
                Case 0
                    pbInsert1.ImageLocation = curdlobj.Destination
                    pbInsert1.AccessibleName = curdlobj.misc
                    Try
                        pbInsert1.Load()
                    Catch ex As Exception

                    End Try
                Case 1
                    pbInsert2.ImageLocation = curdlobj.Destination
                    pbInsert2.AccessibleName = curdlobj.misc
                    Try
                        pbInsert2.Load()
                    Catch ex As Exception

                    End Try
                Case 2
                    pbInsert3.ImageLocation = curdlobj.Destination
                    pbInsert3.AccessibleName = curdlobj.misc
                    Try
                        pbInsert3.Load()
                    Catch ex As Exception

                    End Try
                Case 3
                    pbInsert4.ImageLocation = curdlobj.Destination
                    pbInsert4.AccessibleName = curdlobj.misc
                    Try
                        pbInsert4.Load()
                    Catch ex As Exception

                    End Try
                Case 4
                    pbInsert5.ImageLocation = curdlobj.Destination
                    pbInsert5.AccessibleName = curdlobj.misc
                    Try
                        pbInsert5.Load()
                    Catch ex As Exception

                    End Try
                Case 5
                    pbInsert6.ImageLocation = curdlobj.Destination
                    pbInsert6.AccessibleName = curdlobj.misc
                    Try
                        pbInsert6.Load()
                    Catch ex As Exception

                    End Try
                Case 6
                    pbInsert7.ImageLocation = curdlobj.Destination
                    pbInsert7.AccessibleName = curdlobj.misc
                    Try
                        pbInsert7.Load()
                    Catch ex As Exception

                    End Try
                Case 7
                    pbInsert8.ImageLocation = curdlobj.Destination
                    pbInsert8.AccessibleName = curdlobj.misc
                    Try
                        pbInsert8.Load()
                    Catch ex As Exception

                    End Try
                Case 8
                    pbInsert9.ImageLocation = curdlobj.Destination
                    pbInsert9.AccessibleName = curdlobj.misc
                    Try
                        pbInsert9.Load()
                    Catch ex As Exception

                    End Try

                Case Else
                    'do nothing
            End Select
            curcount += 1
        Next
    End Sub
    '0,%,"inlay",1,7
    Private Sub showfcdn_tvshow_inlay(ByVal searchstring As String, Optional ByVal precache As Boolean = False, Optional ByRef downloadlist As ArrayList = Nothing, Optional ByVal substring As String = "")
        If Not rconf.pgetMediaImagesShowsinlay Then Exit Sub
        Dim newfcdn As New freecoversdotnet.Rsp
        newfcdn.parentdirname = rconf.basefolder
        Dim dllist As ArrayList = newfcdn.downloadimages(15, searchstring, "inlay", 15, 6, True, substring)
        Dim curcount As Integer = 0
        For Each curdlobj As miplibfc.mip.dlobject In dllist
            'currentmovie.pdownloadlist.Add(curdlobj)
            Select Case curcount
                Case 0
                    pbInlay1.ImageLocation = curdlobj.Destination
                    pbInlay1.AccessibleName = curdlobj.misc
                    Try
                        pbInlay1.Load()
                    Catch ex As Exception

                    End Try
                Case 1
                    pbInlay2.ImageLocation = curdlobj.Destination
                    pbInlay2.AccessibleName = curdlobj.misc
                    Try
                        pbInlay2.Load()
                    Catch ex As Exception

                    End Try
                Case 2
                    pbInlay3.ImageLocation = curdlobj.Destination
                    pbInlay3.AccessibleName = curdlobj.misc
                    Try
                        pbInlay3.Load()
                    Catch ex As Exception

                    End Try
                Case 3
                    pbInlay4.ImageLocation = curdlobj.Destination
                    pbInlay4.AccessibleName = curdlobj.misc
                    Try
                        pbInlay4.Load()
                    Catch ex As Exception

                    End Try
                Case 4
                    pbInlay5.ImageLocation = curdlobj.Destination
                    pbInlay5.AccessibleName = curdlobj.misc
                    Try
                        pbInlay5.Load()
                    Catch ex As Exception

                    End Try
                Case 5
                    pbInlay6.ImageLocation = curdlobj.Destination
                    pbInlay6.AccessibleName = curdlobj.misc
                    Try
                        pbInlay6.Load()
                    Catch ex As Exception

                    End Try
                Case 6
                    pbInlay7.ImageLocation = curdlobj.Destination
                    pbInlay7.AccessibleName = curdlobj.misc
                    Try
                        pbInlay7.Load()
                    Catch ex As Exception

                    End Try
                Case 7
                    pbInlay8.ImageLocation = curdlobj.Destination
                    pbInlay8.AccessibleName = curdlobj.misc
                    Try
                        pbInlay8.Load()
                    Catch ex As Exception

                    End Try
                Case 8
                    pbInlay9.ImageLocation = curdlobj.Destination
                    pbInlay9.AccessibleName = curdlobj.misc
                    Try
                        pbInlay9.Load()
                    Catch ex As Exception

                    End Try

                Case Else
                    'do nothing
            End Select
            curcount += 1
        Next
    End Sub

    Private Sub showfcdn_music_front(ByVal searchstring As String, Optional ByVal precache As Boolean = False, Optional ByRef downloadlist As ArrayList = Nothing, Optional ByVal substring As String = "")
        If Not rconf.pgetMediaImagesMusicFront Then Exit Sub
        Dim newfcdn As New freecoversdotnet.Rsp
        newfcdn.parentdirname = rconf.basefolder
        Dim dllist As ArrayList = newfcdn.downloadimages(4, searchstring, "front", 4, 0, True, substring)
        Dim curcount As Integer = 0
        For Each curdlobj As miplibfc.mip.dlobject In dllist
            'currentmovie.pdownloadlist.Add(curdlobj)
            Select Case curcount
                Case 0
                    pbFront1.ImageLocation = curdlobj.Destination
                    pbFront1.AccessibleName = curdlobj.misc
                    Try
                        pbFront1.Load()
                    Catch ex As Exception

                    End Try
                Case 1
                    pbFront2.ImageLocation = curdlobj.Destination
                    pbFront2.AccessibleName = curdlobj.misc
                    Try
                        pbFront2.Load()
                    Catch ex As Exception

                    End Try
                Case 2
                    pbFront3.ImageLocation = curdlobj.Destination
                    pbFront3.AccessibleName = curdlobj.misc
                    Try
                        pbFront3.Load()
                    Catch ex As Exception

                    End Try
                Case 3
                    pbFront4.ImageLocation = curdlobj.Destination
                    pbFront4.AccessibleName = curdlobj.misc
                    Try
                        pbFront4.Load()
                    Catch ex As Exception

                    End Try
                Case 4
                    pbFront5.ImageLocation = curdlobj.Destination
                    pbFront5.AccessibleName = curdlobj.misc
                    Try
                        pbFront5.Load()
                    Catch ex As Exception

                    End Try
                Case 5
                    pbFront6.ImageLocation = curdlobj.Destination
                    pbFront6.AccessibleName = curdlobj.misc
                    Try
                        pbFront6.Load()
                    Catch ex As Exception

                    End Try
                Case 6
                    pbFront7.ImageLocation = curdlobj.Destination
                    pbFront7.AccessibleName = curdlobj.misc
                    Try
                        pbFront7.Load()
                    Catch ex As Exception

                    End Try
                Case 7
                    pbFront8.ImageLocation = curdlobj.Destination
                    pbFront8.AccessibleName = curdlobj.misc
                    Try
                        pbFront8.Load()
                    Catch ex As Exception

                    End Try
                Case 8
                    pbFront9.ImageLocation = curdlobj.Destination
                    pbFront9.AccessibleName = curdlobj.misc
                    Try
                        pbFront9.Load()
                    Catch ex As Exception

                    End Try
                Case 9
                    pbFront10.ImageLocation = curdlobj.Destination
                    pbFront10.AccessibleName = curdlobj.misc
                    Try
                        pbFront10.Load()
                    Catch ex As Exception

                    End Try
                Case Else
                    'do nothing
            End Select
            curcount += 1
        Next
    End Sub

    Private Sub showfcdn_music_Back(ByVal searchstring As String, Optional ByVal precache As Boolean = False, Optional ByRef downloadlist As ArrayList = Nothing, Optional ByVal substring As String = "")
        If Not rconf.pgetMediaImagesMusicback Then Exit Sub
        Dim newfcdn As New freecoversdotnet.Rsp
        newfcdn.parentdirname = rconf.basefolder
        Dim dllist As ArrayList = newfcdn.downloadimages(4, searchstring, "back", 4, 1, True, substring)
        Dim curcount As Integer = 0
        For Each curdlobj As miplibfc.mip.dlobject In dllist
            'currentmovie.pdownloadlist.Add(curdlobj)
            Select Case curcount
                Case 0
                    pbBack1.ImageLocation = curdlobj.Destination
                    pbBack1.AccessibleName = curdlobj.misc
                    Try
                        pbBack1.Load()
                    Catch ex As Exception
                        MsgBox("failed to load image to showfcdn_music_Back pb1")
                    End Try
                Case 1
                    pbBack2.ImageLocation = curdlobj.Destination
                    pbBack2.AccessibleName = curdlobj.misc
                    Try
                        pbBack2.Load()
                    Catch ex As Exception

                    End Try
                Case 2
                    pbBack3.ImageLocation = curdlobj.Destination
                    pbBack3.AccessibleName = curdlobj.misc
                    Try
                        pbBack3.Load()
                    Catch ex As Exception

                    End Try
                Case 3
                    pbBack4.ImageLocation = curdlobj.Destination
                    pbBack4.AccessibleName = curdlobj.misc
                    Try
                        pbBack4.Load()
                    Catch ex As Exception

                    End Try
                Case 4
                    pbBack5.ImageLocation = curdlobj.Destination
                    pbBack5.AccessibleName = curdlobj.misc
                    Try
                        pbBack5.Load()
                    Catch ex As Exception

                    End Try
                Case 5
                    pbBack6.ImageLocation = curdlobj.Destination
                    pbBack6.AccessibleName = curdlobj.misc
                    Try
                        pbBack6.Load()
                    Catch ex As Exception

                    End Try
                Case 6
                    pbBack7.ImageLocation = curdlobj.Destination
                    pbBack7.AccessibleName = curdlobj.misc
                    Try
                        pbBack7.Load()
                    Catch ex As Exception

                    End Try
                Case 7
                    pbBack8.ImageLocation = curdlobj.Destination
                    pbBack8.AccessibleName = curdlobj.misc
                    Try
                        pbBack8.Load()
                    Catch ex As Exception

                    End Try
                Case 8
                    pbBack9.ImageLocation = curdlobj.Destination
                    pbBack9.AccessibleName = curdlobj.misc
                    Try
                        pbBack9.Load()
                    Catch ex As Exception

                    End Try

                Case Else
                    'do nothing
            End Select
            curcount += 1
        Next
    End Sub
    '0,%,"cd",1,2
    Private Sub showfcdn_music_cd1(ByVal searchstring As String, Optional ByVal precache As Boolean = False, Optional ByRef downloadlist As ArrayList = Nothing, Optional ByVal substring As String = "")
        If Not rconf.pgetMediaImagesMusiccd1 Then Exit Sub
        Dim newfcdn As New freecoversdotnet.Rsp
        newfcdn.parentdirname = rconf.basefolder
        Dim dllist As ArrayList = newfcdn.downloadimages(4, searchstring, "cd", 4, 2, True, substring)
        Dim curcount As Integer = 0
        For Each curdlobj As miplibfc.mip.dlobject In dllist
            'currentmovie.pdownloadlist.Add(curdlobj)
            Select Case curcount
                Case 0
                    pbcdi1.ImageLocation = curdlobj.Destination
                    pbcdi1.AccessibleName = curdlobj.misc
                    Try
                        pbcdi1.Load()
                    Catch ex As Exception

                    End Try
                Case 1
                    pbcdi2.ImageLocation = curdlobj.Destination
                    pbcdi2.AccessibleName = curdlobj.misc
                    Try
                        pbcdi2.Load()
                    Catch ex As Exception

                    End Try
                Case 2
                    pbcdi3.ImageLocation = curdlobj.Destination
                    pbcdi3.AccessibleName = curdlobj.misc
                    Try
                        pbcdi3.Load()
                    Catch ex As Exception

                    End Try
                Case 3
                    pbcdi4.ImageLocation = curdlobj.Destination
                    pbcdi4.AccessibleName = curdlobj.misc
                    Try
                        pbcdi4.Load()
                    Catch ex As Exception

                    End Try
                Case 4
                    pbcdi5.ImageLocation = curdlobj.Destination
                    pbcdi5.AccessibleName = curdlobj.misc
                    Try
                        pbcdi5.Load()
                    Catch ex As Exception

                    End Try
                Case 5
                    pbcdi6.ImageLocation = curdlobj.Destination
                    pbcdi6.AccessibleName = curdlobj.misc
                    Try
                        pbcdi6.Load()
                    Catch ex As Exception

                    End Try
                Case 6
                    pbcdi7.ImageLocation = curdlobj.Destination
                    pbcdi7.AccessibleName = curdlobj.misc
                    Try
                        pbcdi7.Load()
                    Catch ex As Exception

                    End Try
                Case 7
                    pbcdi8.ImageLocation = curdlobj.Destination
                    pbcdi8.AccessibleName = curdlobj.misc
                    Try
                        pbcdi8.Load()
                    Catch ex As Exception

                    End Try
                Case 8
                    pbcdi9.ImageLocation = curdlobj.Destination
                    pbcdi9.AccessibleName = curdlobj.misc
                    Try
                        pbcdi9.Load()
                    Catch ex As Exception

                    End Try

                Case Else
                    'do nothing
            End Select
            curcount += 1
        Next
    End Sub
    '0,%,"cd2",1,3
    Private Sub showfcdn_music_cd2(ByVal searchstring As String, Optional ByVal precache As Boolean = False, Optional ByRef downloadlist As ArrayList = Nothing, Optional ByVal substring As String = "")
        If Not rconf.pgetMediaImagesMusiccd2 Then Exit Sub
        Dim newfcdn As New freecoversdotnet.Rsp
        newfcdn.parentdirname = rconf.basefolder
        Dim dllist As ArrayList = newfcdn.downloadimages(4, searchstring, "cd2", 4, 3, True, substring)
        Dim curcount As Integer = 0
        For Each curdlobj As miplibfc.mip.dlobject In dllist
            'currentmovie.pdownloadlist.Add(curdlobj)
            Select Case curcount
                Case 0
                    pbcd2i1.ImageLocation = curdlobj.Destination
                    pbcd2i1.AccessibleName = curdlobj.misc
                    Try
                        pbcd2i1.Load()
                    Catch ex As Exception

                    End Try
                Case 1
                    pbcd2i2.ImageLocation = curdlobj.Destination
                    pbcd2i2.AccessibleName = curdlobj.misc
                    Try
                        pbcd2i2.Load()
                    Catch ex As Exception

                    End Try
                Case 2
                    pbcd2i3.ImageLocation = curdlobj.Destination
                    pbcd2i3.AccessibleName = curdlobj.misc
                    Try
                        pbcd2i3.Load()
                    Catch ex As Exception

                    End Try
                Case 3
                    pbcd2i4.ImageLocation = curdlobj.Destination
                    pbcd2i4.AccessibleName = curdlobj.misc
                    Try
                        pbcd2i4.Load()
                    Catch ex As Exception

                    End Try
                Case 4
                    pbcd2i5.ImageLocation = curdlobj.Destination
                    pbcd2i5.AccessibleName = curdlobj.misc
                    Try
                        pbcd2i5.Load()
                    Catch ex As Exception

                    End Try
                Case 5
                    pbcd2i6.ImageLocation = curdlobj.Destination
                    pbcd2i6.AccessibleName = curdlobj.misc
                    Try
                        pbcd2i6.Load()
                    Catch ex As Exception

                    End Try
                Case 6
                    pbcd2i7.ImageLocation = curdlobj.Destination
                    pbcd2i7.AccessibleName = curdlobj.misc
                    Try
                        pbcd2i7.Load()
                    Catch ex As Exception

                    End Try
                Case 7
                    pbcd2i8.ImageLocation = curdlobj.Destination
                    pbcd2i8.AccessibleName = curdlobj.misc
                    Try
                        pbcd2i8.Load()
                    Catch ex As Exception

                    End Try
                Case 8
                    pbcd2i9.ImageLocation = curdlobj.Destination
                    pbcd2i9.AccessibleName = curdlobj.misc
                    Try
                        pbcd2i9.Load()
                    Catch ex As Exception

                    End Try

                Case Else
                    'do nothing
            End Select
            curcount += 1
        Next
    End Sub
    '0,%,"cd3",1,4
    Private Sub showfcdn_music_cd3(ByVal searchstring As String, Optional ByVal precache As Boolean = False, Optional ByRef downloadlist As ArrayList = Nothing, Optional ByVal substring As String = "")
        If Not rconf.pgetMediaImagesMusiccd3 Then Exit Sub
        Dim newfcdn As New freecoversdotnet.Rsp
        newfcdn.parentdirname = rconf.basefolder
        Dim dllist As ArrayList = newfcdn.downloadimages(4, searchstring, "cd3", 4, 4, True, substring)
        Dim curcount As Integer = 0
        For Each curdlobj As miplibfc.mip.dlobject In dllist
            'currentmovie.pdownloadlist.Add(curdlobj)
            Select Case curcount
                Case 0
                    pbcd3i1.ImageLocation = curdlobj.Destination
                    pbcd3i1.AccessibleName = curdlobj.misc
                    Try
                        pbcd3i1.Load()
                    Catch ex As Exception

                    End Try
                Case 1
                    pbcd3i2.ImageLocation = curdlobj.Destination
                    pbcd3i2.AccessibleName = curdlobj.misc
                    Try
                        pbcd3i2.Load()
                    Catch ex As Exception

                    End Try
                Case 2
                    pbcd3i3.ImageLocation = curdlobj.Destination
                    pbcd3i3.AccessibleName = curdlobj.misc
                    Try
                        pbcd3i3.Load()
                    Catch ex As Exception

                    End Try
                Case 3
                    pbcd3i4.ImageLocation = curdlobj.Destination
                    pbcd3i4.AccessibleName = curdlobj.misc
                    Try
                        pbcd3i4.Load()
                    Catch ex As Exception

                    End Try
                Case 4
                    pbcd3i5.ImageLocation = curdlobj.Destination
                    pbcd3i5.AccessibleName = curdlobj.misc
                    Try
                        pbcd3i5.Load()
                    Catch ex As Exception

                    End Try
                Case 5
                    pbcd3i6.ImageLocation = curdlobj.Destination
                    pbcd3i6.AccessibleName = curdlobj.misc
                    Try
                        pbcd3i6.Load()
                    Catch ex As Exception

                    End Try
                Case 6
                    pbcd3i7.ImageLocation = curdlobj.Destination
                    pbcd3i7.AccessibleName = curdlobj.misc
                    Try
                        pbcd3i7.Load()
                    Catch ex As Exception

                    End Try
                Case 7
                    pbcd3i8.ImageLocation = curdlobj.Destination
                    pbcd3i8.AccessibleName = curdlobj.misc
                    Try
                        pbcd3i8.Load()
                    Catch ex As Exception

                    End Try
                Case 8
                    pbcd3i9.ImageLocation = curdlobj.Destination
                    pbcd3i9.AccessibleName = curdlobj.misc
                    Try
                        pbcd3i9.Load()
                    Catch ex As Exception

                    End Try

                Case Else
                    'do nothing
            End Select
            curcount += 1
        Next
    End Sub
    '0,%,"cd4",1,5
    Private Sub showfcdn_music_cd4(ByVal searchstring As String, Optional ByVal precache As Boolean = False, Optional ByRef downloadlist As ArrayList = Nothing, Optional ByVal substring As String = "")
        If Not rconf.pgetMediaImagesMusiccd4 Then Exit Sub
        Dim newfcdn As New freecoversdotnet.Rsp
        newfcdn.parentdirname = rconf.basefolder
        Dim dllist As ArrayList = newfcdn.downloadimages(4, searchstring, "cd4", 4, 5, True, substring)
        Dim curcount As Integer = 0
        For Each curdlobj As miplibfc.mip.dlobject In dllist
            'currentmovie.pdownloadlist.Add(curdlobj)
            Select Case curcount
                Case 0
                    pbcd4i1.ImageLocation = curdlobj.Destination
                    pbcd4i1.AccessibleName = curdlobj.misc
                    Try
                        pbcd4i1.Load()
                    Catch ex As Exception

                    End Try
                Case 1
                    pbcd4i2.ImageLocation = curdlobj.Destination
                    pbcd4i2.AccessibleName = curdlobj.misc
                    Try
                        pbcd4i2.Load()
                    Catch ex As Exception

                    End Try
                Case 2
                    pbcd4i3.ImageLocation = curdlobj.Destination
                    pbcd4i3.AccessibleName = curdlobj.misc
                    Try
                        pbcd4i3.Load()
                    Catch ex As Exception

                    End Try
                Case 3
                    pbcd4i4.ImageLocation = curdlobj.Destination
                    pbcd4i4.AccessibleName = curdlobj.misc
                    Try
                        pbcd4i4.Load()
                    Catch ex As Exception

                    End Try
                Case 4
                    pbcd4i5.ImageLocation = curdlobj.Destination
                    pbcd4i5.AccessibleName = curdlobj.misc
                    Try
                        pbcd4i5.Load()
                    Catch ex As Exception

                    End Try
                Case 5
                    pbcd4i6.ImageLocation = curdlobj.Destination
                    pbcd4i6.AccessibleName = curdlobj.misc
                    Try
                        pbcd4i6.Load()
                    Catch ex As Exception

                    End Try
                Case 6
                    pbcd4i7.ImageLocation = curdlobj.Destination
                    pbcd4i7.AccessibleName = curdlobj.misc
                    Try
                        pbcd4i7.Load()
                    Catch ex As Exception

                    End Try
                Case 7
                    pbcd4i8.ImageLocation = curdlobj.Destination
                    pbcd4i8.AccessibleName = curdlobj.misc
                    Try
                        pbcd4i8.Load()
                    Catch ex As Exception

                    End Try
                Case 8
                    pbcd4i9.ImageLocation = curdlobj.Destination
                    pbcd4i9.AccessibleName = curdlobj.misc
                    Try
                        pbcd4i9.Load()
                    Catch ex As Exception

                    End Try

                Case Else
                    'do nothing
            End Select
            curcount += 1
        Next
    End Sub
    '0,%,"inside",1,6
    Private Sub showfcdn_music_insert(ByVal searchstring As String, Optional ByVal precache As Boolean = False, Optional ByRef downloadlist As ArrayList = Nothing, Optional ByVal substring As String = "")
        If Not rconf.pgetMediaImagesMusicinsert Then Exit Sub
        Dim newfcdn As New freecoversdotnet.Rsp
        newfcdn.parentdirname = rconf.basefolder
        Dim dllist As ArrayList = newfcdn.downloadimages(4, searchstring, "inside", 4, 7, True, substring)
        Dim curcount As Integer = 0
        For Each curdlobj As miplibfc.mip.dlobject In dllist
            'currentmovie.pdownloadlist.Add(curdlobj)
            Select Case curcount
                Case 0
                    pbInsert1.ImageLocation = curdlobj.Destination
                    pbInsert1.AccessibleName = curdlobj.misc
                    Try
                        pbInsert1.Load()
                    Catch ex As Exception

                    End Try
                Case 1
                    pbInsert2.ImageLocation = curdlobj.Destination
                    pbInsert2.AccessibleName = curdlobj.misc
                    Try
                        pbInsert2.Load()
                    Catch ex As Exception

                    End Try
                Case 2
                    pbInsert3.ImageLocation = curdlobj.Destination
                    pbInsert3.AccessibleName = curdlobj.misc
                    Try
                        pbInsert3.Load()
                    Catch ex As Exception

                    End Try
                Case 3
                    pbInsert4.ImageLocation = curdlobj.Destination
                    pbInsert4.AccessibleName = curdlobj.misc
                    Try
                        pbInsert4.Load()
                    Catch ex As Exception

                    End Try
                Case 4
                    pbInsert5.ImageLocation = curdlobj.Destination
                    pbInsert5.AccessibleName = curdlobj.misc
                    Try
                        pbInsert5.Load()
                    Catch ex As Exception

                    End Try
                Case 5
                    pbInsert6.ImageLocation = curdlobj.Destination
                    pbInsert6.AccessibleName = curdlobj.misc
                    Try
                        pbInsert6.Load()
                    Catch ex As Exception

                    End Try
                Case 6
                    pbInsert7.ImageLocation = curdlobj.Destination
                    pbInsert7.AccessibleName = curdlobj.misc
                    Try
                        pbInsert7.Load()
                    Catch ex As Exception

                    End Try
                Case 7
                    pbInsert8.ImageLocation = curdlobj.Destination
                    pbInsert8.AccessibleName = curdlobj.misc
                    Try
                        pbInsert8.Load()
                    Catch ex As Exception

                    End Try
                Case 8
                    pbInsert9.ImageLocation = curdlobj.Destination
                    pbInsert9.AccessibleName = curdlobj.misc
                    Try
                        pbInsert9.Load()
                    Catch ex As Exception

                    End Try

                Case Else
                    'do nothing
            End Select
            curcount += 1
        Next
    End Sub
    '0,%,"inlay",1,7
    Private Sub showfcdn_music_inlay(ByVal searchstring As String, Optional ByVal precache As Boolean = False, Optional ByRef downloadlist As ArrayList = Nothing, Optional ByVal substring As String = "")
        If Not rconf.pgetMediaImagesMusicinlay Then Exit Sub
        Dim newfcdn As New freecoversdotnet.Rsp
        newfcdn.parentdirname = rconf.basefolder
        Dim dllist As ArrayList = newfcdn.downloadimages(4, searchstring, "inlay", 4, 6, True, substring)
        Dim curcount As Integer = 0
        For Each curdlobj As miplibfc.mip.dlobject In dllist
            'currentmovie.pdownloadlist.Add(curdlobj)
            Select Case curcount
                Case 0
                    pbInlay1.ImageLocation = curdlobj.Destination
                    pbInlay1.AccessibleName = curdlobj.misc
                    Try
                        pbInlay1.Load()
                    Catch ex As Exception

                    End Try
                Case 1
                    pbInlay2.ImageLocation = curdlobj.Destination
                    pbInlay2.AccessibleName = curdlobj.misc
                    Try
                        pbInlay2.Load()
                    Catch ex As Exception

                    End Try
                Case 2
                    pbInlay3.ImageLocation = curdlobj.Destination
                    pbInlay3.AccessibleName = curdlobj.misc
                    Try
                        pbInlay3.Load()
                    Catch ex As Exception

                    End Try
                Case 3
                    pbInlay4.ImageLocation = curdlobj.Destination
                    pbInlay4.AccessibleName = curdlobj.misc
                    Try
                        pbInlay4.Load()
                    Catch ex As Exception

                    End Try
                Case 4
                    pbInlay5.ImageLocation = curdlobj.Destination
                    pbInlay5.AccessibleName = curdlobj.misc
                    Try
                        pbInlay5.Load()
                    Catch ex As Exception

                    End Try
                Case 5
                    pbInlay6.ImageLocation = curdlobj.Destination
                    pbInlay6.AccessibleName = curdlobj.misc
                    Try
                        pbInlay6.Load()
                    Catch ex As Exception

                    End Try
                Case 6
                    pbInlay7.ImageLocation = curdlobj.Destination
                    pbInlay7.AccessibleName = curdlobj.misc
                    Try
                        pbInlay7.Load()
                    Catch ex As Exception

                    End Try
                Case 7
                    pbInlay8.ImageLocation = curdlobj.Destination
                    pbInlay8.AccessibleName = curdlobj.misc
                    Try
                        pbInlay8.Load()
                    Catch ex As Exception

                    End Try
                Case 8
                    pbInlay9.ImageLocation = curdlobj.Destination
                    pbInlay9.AccessibleName = curdlobj.misc
                    Try
                        pbInlay9.Load()
                    Catch ex As Exception

                    End Try

                Case Else
                    'do nothing
            End Select
            curcount += 1
        Next
    End Sub

    'Private Function getfcdn_movie_front() As ArrayList
    '    Dim newfcdn As New freecoversdotnet.Rsp
    '    Dim dllist As ArrayList = newfcdn.downloadimages(currentmovie.pmoviename, 1, 0) '0,1,2 blue,dvd,hddvd .. section 0 is front cover
    '    Return dllist
    'End Function
 
    Private Function getfilefromurlpath_fcdn(ByVal filenameandpath As String) As String
        'http://www.freecovers.net/preview/0/36eee8941f5151c6e26974f243a0dc1e/big.jpg
        Dim curstring As String = filenameandpath
        curstring = curstring.Replace("http://www.freecovers.net/preview/", "")
        curstring = curstring.Replace("http://freecovers.net/preview/", "")
        curstring = curstring.Replace("/", "")
        'Try
        '    Dim rObj2 As New Regex("(/.*?/)")
        '    curstring = curstring.Replace(rObj2.Match(curstring).Groups(1).Value, "")
        'Catch ex As ArgumentException
        '    Return ""
        '    'Syntax error in the regular expression
        'End Try
        Return curstring
    End Function
  
    Private Sub tsbShowsUpdateShows_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsbShowsUpdateShows.Click
        If lbTvShowPicker.Items.Count = 0 Then Exit Sub

        Dim tvshc As New tvshowcollection
        tvshc.updatetvshows()
        lbTvShowPicker.SelectedIndex = 0
        lbTvShowPicker_click(lbTvShowPicker, New System.EventArgs)


    End Sub
    Public Sub updateshows()
        If lbTvShowPicker.Items.Count = 0 Then Exit Sub

        Dim tvshc As New tvshowcollection
        tvshc.updatetvshows()
        lbTvShowPicker.SelectedIndex = 0
        lbTvShowPicker_click(lbTvShowPicker, New System.EventArgs)

    End Sub


    Public Sub setguicolor(ByRef vcolor As String)
        Select Case vcolor
            Case "black"
                kManager.GlobalPalette = kpalette
                'rconf.guicolor = "black"
                tcMain.SelectedTabColor = Color.Gray
                tcMain.BackColor = Color.Black
                tcMain.TabColor = Color.Black
                tcMain.ForeColor = Color.White
                tcMain.HotColor = Color.Silver
                tcPIB.SelectedTabColor = Color.Gray
                tcPIB.BackColor = Color.Black
                tcPIB.TabColor = Color.Black
                tcPIB.ForeColor = Color.White
                tcPIB.HotColor = Color.Silver
                tcFCDN.SelectedTabColor = Color.Gray
                tcFCDN.BackColor = Color.Black
                tcFCDN.TabColor = Color.Black
                tcFCDN.ForeColor = Color.White
                tcFCDN.HotColor = Color.Silver
            Case "bubbles"
                kManager.GlobalPalette = kPaletteBubbles
                tcMain.SelectedTabColor = Color.RoyalBlue
                tcMain.BackColor = Color.FromArgb(223, 233, 245)
                tcMain.TabColor = Color.SteelBlue
                tcMain.ForeColor = Color.FromArgb(223, 233, 245)
                tcMain.HotColor = Color.Orange
                tcPIB.SelectedTabColor = Color.RoyalBlue
                tcPIB.BackColor = Color.FromArgb(223, 233, 245)
                tcPIB.TabColor = Color.SteelBlue
                tcPIB.ForeColor = Color.FromArgb(223, 233, 245)
                tcPIB.HotColor = Color.Orange
                tcFCDN.SelectedTabColor = Color.RoyalBlue
                tcFCDN.BackColor = Color.FromArgb(223, 233, 245)
                tcFCDN.TabColor = Color.SteelBlue
                tcFCDN.ForeColor = Color.FromArgb(223, 233, 245)
                tcFCDN.HotColor = Color.Orange
            Case "silver"
                kManager.GlobalPalette = kpaletteSilver
                'rconf.guicolor = "silver"
                tcMain.SelectedTabColor = Color.Gray
                tcMain.BackColor = Color.Black
                tcMain.TabColor = Color.Black
                tcMain.ForeColor = Color.White
                tcMain.HotColor = Color.Silver
                tcPIB.SelectedTabColor = Color.Gray
                tcPIB.BackColor = Color.Black
                tcPIB.TabColor = Color.Black
                tcPIB.ForeColor = Color.White
                tcPIB.HotColor = Color.Silver
                tcFCDN.SelectedTabColor = Color.Gray
                tcFCDN.BackColor = Color.Black
                tcFCDN.TabColor = Color.Black
                tcFCDN.ForeColor = Color.White
                tcFCDN.HotColor = Color.Silver
            Case "bling"
                kManager.GlobalPalette = kPaletteBling
                'rconf.guicolor = "bling"
                tcMain.SelectedTabColor = Color.Gray
                tcMain.BackColor = Color.Black
                tcMain.TabColor = Color.Black
                tcMain.ForeColor = Color.White
                tcMain.HotColor = Color.Silver
                tcPIB.SelectedTabColor = Color.Gray
                tcPIB.BackColor = Color.Black
                tcPIB.TabColor = Color.Black
                tcPIB.ForeColor = Color.White
                tcPIB.HotColor = Color.Silver
                tcFCDN.SelectedTabColor = Color.Gray
                tcFCDN.BackColor = Color.Black
                tcFCDN.TabColor = Color.Black
                tcFCDN.ForeColor = Color.White
                tcFCDN.HotColor = Color.Silver
            Case "blinglarge"
                kManager.GlobalPalette = kPaletteBlingLarge
                'rconf.guicolor = "blinglarge"
                tcMain.SelectedTabColor = Color.Gray
                tcMain.BackColor = Color.Black
                tcMain.TabColor = Color.Black
                tcMain.ForeColor = Color.White
                tcMain.HotColor = Color.Silver
                tcPIB.SelectedTabColor = Color.Gray
                tcPIB.BackColor = Color.Black
                tcPIB.TabColor = Color.Black
                tcPIB.ForeColor = Color.White
                tcPIB.HotColor = Color.Silver
                tcFCDN.SelectedTabColor = Color.Gray
                tcFCDN.BackColor = Color.Black
                tcFCDN.TabColor = Color.Black
                tcFCDN.ForeColor = Color.White
                tcFCDN.HotColor = Color.Silver
            Case "blue"
                kManager.GlobalPalette = kpaletteBlue
                'rconf.guicolor = "blue"
                tcMain.SelectedTabColor = Color.Gray
                tcMain.BackColor = Color.Black
                tcMain.TabColor = Color.Black
                tcMain.ForeColor = Color.White
                tcMain.HotColor = Color.Silver
                tcPIB.SelectedTabColor = Color.Gray
                tcPIB.BackColor = Color.Black
                tcPIB.TabColor = Color.Black
                tcPIB.ForeColor = Color.White
                tcPIB.HotColor = Color.Silver
                tcFCDN.SelectedTabColor = Color.Gray
                tcFCDN.BackColor = Color.Black
                tcFCDN.TabColor = Color.Black
                tcFCDN.ForeColor = Color.White
                tcFCDN.HotColor = Color.Silver
            Case "pink"
                kManager.GlobalPalette = kPalettePink
                'rconf.guicolor = "pink"
                tcMain.SelectedTabColor = Color.RoyalBlue
                tcMain.BackColor = Color.FromArgb(223, 233, 245)
                tcMain.TabColor = Color.SteelBlue
                tcMain.ForeColor = Color.FromArgb(223, 233, 245)
                tcMain.HotColor = Color.Orange
                tcPIB.SelectedTabColor = Color.RoyalBlue
                tcPIB.BackColor = Color.FromArgb(223, 233, 245)
                tcPIB.TabColor = Color.SteelBlue
                tcPIB.ForeColor = Color.FromArgb(223, 233, 245)
                tcPIB.HotColor = Color.Orange
                tcFCDN.SelectedTabColor = Color.RoyalBlue
                tcFCDN.BackColor = Color.FromArgb(223, 233, 245)
                tcFCDN.TabColor = Color.SteelBlue
                tcFCDN.ForeColor = Color.FromArgb(223, 233, 245)
                tcFCDN.HotColor = Color.Orange
            Case "fire"
                kManager.GlobalPalette = kPaletteBlueSkulls
                'rconf.guicolor = "fire"
                tcMain.SelectedTabColor = Color.Gray
                tcMain.BackColor = Color.Black
                tcMain.TabColor = Color.Black
                tcMain.ForeColor = Color.White
                tcMain.HotColor = Color.Silver
                tcPIB.SelectedTabColor = Color.Gray
                tcPIB.BackColor = Color.Black
                tcPIB.TabColor = Color.Black
                tcPIB.ForeColor = Color.White
                tcPIB.HotColor = Color.Silver
                tcFCDN.SelectedTabColor = Color.Gray
                tcFCDN.BackColor = Color.Black
                tcFCDN.TabColor = Color.Black
                tcFCDN.ForeColor = Color.White
                tcFCDN.HotColor = Color.Silver
            Case "skybluelarge"
                kManager.GlobalPalette = kPaletteSkyBlueLarge
                'rconf.guicolor = "skybluelarge"
                tcMain.SelectedTabColor = Color.RoyalBlue
                tcMain.BackColor = Color.FromArgb(223, 233, 245)
                tcMain.TabColor = Color.SteelBlue
                tcMain.ForeColor = Color.FromArgb(223, 233, 245)
                tcMain.HotColor = Color.Orange
                tcPIB.SelectedTabColor = Color.RoyalBlue
                tcPIB.BackColor = Color.FromArgb(223, 233, 245)
                tcPIB.TabColor = Color.SteelBlue
                tcPIB.ForeColor = Color.FromArgb(223, 233, 245)
                tcPIB.HotColor = Color.Orange
                tcFCDN.SelectedTabColor = Color.RoyalBlue
                tcFCDN.BackColor = Color.FromArgb(223, 233, 245)
                tcFCDN.TabColor = Color.SteelBlue
                tcFCDN.ForeColor = Color.FromArgb(223, 233, 245)
                tcFCDN.HotColor = Color.Orange
            Case "green"
                kManager.GlobalPalette = kPaletteGreen
                'rconf.guicolor = "green"
                tcMain.SelectedTabColor = Color.SeaGreen
                tcMain.BackColor = Color.LightSeaGreen
                tcMain.TabColor = Color.Black
                tcMain.ForeColor = Color.White
                tcMain.HotColor = Color.Silver
                tcPIB.SelectedTabColor = Color.Gray
                tcPIB.BackColor = Color.Black
                tcPIB.TabColor = Color.Black
                tcPIB.ForeColor = Color.White
                tcPIB.HotColor = Color.Silver
                tcFCDN.SelectedTabColor = Color.Gray
                tcFCDN.BackColor = Color.Black
                tcFCDN.TabColor = Color.Black
                tcFCDN.ForeColor = Color.White
                tcFCDN.HotColor = Color.Silver
            Case "pro"
                kManager.GlobalPalette = kPaletteSystem
                'rconf.guicolor = "pro"
                tcMain.SelectedTabColor = Color.Gray
                tcMain.BackColor = Color.Black
                tcMain.TabColor = Color.Black
                tcMain.ForeColor = Color.White
                tcMain.HotColor = Color.Silver
                tcPIB.SelectedTabColor = Color.Gray
                tcPIB.BackColor = Color.Black
                tcPIB.TabColor = Color.Black
                tcPIB.ForeColor = Color.White
                tcPIB.HotColor = Color.Silver
                tcFCDN.SelectedTabColor = Color.Gray
                tcFCDN.BackColor = Color.Black
                tcFCDN.TabColor = Color.Black
                tcFCDN.ForeColor = Color.White
                tcFCDN.HotColor = Color.Silver
            Case Else
                'do nothing
        End Select
    End Sub


    Private Sub tbGenre_click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tbGenre.Click
        If Not currentmovie Is Nothing Then
            If Not currentmovie.pmoviename = "" Then
                dlgMovieGenreSelect.prepop(currentmovie, rconf.basefolder)
                dlgMovieGenreSelect.ShowDialog()
                'MsgBox(currentmovie.pgenre)
                If Not currentmovie.pgenre = tbGenre.Text Then
                    tbGenre.Text = currentmovie.pgenre
                    saveNfoFromGuiText(False)
                End If
            End If
        End If
    End Sub
    Private Sub tbStudio_click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnMovieStudioSelect.Click
        If Not currentmovie Is Nothing Then
            If Not currentmovie.pmoviename = "" Then
                dlgMovieStudioSelect.prepop(currentmovie, rconf.basefolder)
                dlgMovieStudioSelect.ShowDialog()
                'tbStudio.Text = currentmovie.pstudio
                tbStudioReal.Text = currentmovie.pstudioreal
                'MsgBox(currentmovie.pgenre)
                'If Not currentmovie.pstudio = tbStudio.Text Then
                saveNfoFromGuiText(False)
                tbStudio.Text = currentmovie.pstudio
                'End If
            End If
        End If
    End Sub

    Private Sub reload_tv_media_information()
        messageprompts = True
        gettvepmediainfo_bw()

        'Dim curmedinfo As New MediaInfo
        'curmedinfo.getdata(gvcurrenttvepisode, True)
        'gvcurrenttvepisode.FirstAired = ktbep_aired.Text '= curepisode.FirstAired
        'gvcurrenttvepisode.Writer = ktbep_credits.Text '= Strings.Replace(curepisode.Writer, "|", "/")
        'gvcurrenttvepisode.Director = ktbep_director.Text '= curepisode.Director
        'gvcurrenttvepisode.EpisodeName = ktbep_epName.Text '= curepisode.EpisodeName
        'gvcurrenttvepisode.EpisodeNumber = ktbEp_epnum.Text '= curepisode.EpisodeNumber
        'gvcurrenttvepisode.Overview = krtbep_Overview.Text ' = curepisode.Overview

       

    End Sub


    Private Sub bshgSaveEpisodeData_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bshgSaveEpisodeData.Click
        'asdf()
        gvcurrenttvepisode.FirstAired = ktbep_aired.Text '= curepisode.FirstAired
        gvcurrenttvepisode.Writer = ktbep_credits.Text '= Strings.Replace(curepisode.Writer, "|", "/")
        gvcurrenttvepisode.Director = ktbep_director.Text '= curepisode.Director
        gvcurrenttvepisode.EpisodeName = ktbep_epName.Text '= curepisode.EpisodeName
        gvcurrenttvepisode.EpisodeNumber = ktbEp_epnum.Text '= curepisode.EpisodeNumber
        gvcurrenttvepisode.Overview = krtbep_Overview.Text ' = curepisode.Overview

        Dim xbmced1 As New xbmc.xbmcEpisodedetails
        gvcurrenttvepisode.tvdblangepisode2xbmcTvepisodeManualFromGUI(gvcurrenttvepisode, xbmced1) ', xbmctvshow1.Actors, curmirror)
        xbmced1.writeNfo(removeextension(gvcurrenttvepisode.episodefilepath) + ".nfo")

        'gvcurrenttvepisode()
        'xbmctvepisode.Actors = theactors
        'xbmctvepisode.Aired = tls.FirstAired
        'xbmctvepisode.Credits = Strings.Replace(tls.Writer, "|", "/")
        'xbmctvepisode.Director = tls.Director
        'xbmctvepisode.Episode = tls.EpisodeNumber
        'xbmctvepisode.Plot = tls.Overview
        'xbmctvepisode.Season = tls.SeasonNumber
        'xbmctvepisode.Thumb = currentmirror + "/banners/" + tls.Filename
        'xbmctvepisode.Title = tls.EpisodeName
        'xbmctvepisode.Watched = ""
    End Sub


    Private Sub header1ButtonSpec_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles header1ButtonSpec.Click

    End Sub




    'Private Sub combolTVCheckForNewTVShowData_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles combolTVCheckForNewTVShowData.SelectedIndexChanged
    '    rconf.pcombolTVCheckForNewTVShowData = combolTVCheckForNewTVShowData.SelectedItem.ToString
    'End Sub


    'Private Sub kcbUseFileNamesForMovies_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles kcbUseFileNamesForMovies.Click
    '    'updateconfig
    '    rconf.pkcbUseFileNamesForMovies = kcbUseFileNamesForMovies.Checked
    '    'set moviemode to file (default is folder)
    '    If kcbUseFileNamesForMovies.Checked Then moviemode = "file" Else moviemode = "folder"
    '    'if it's checked, display notice message
    '    If kcbUseFileNamesForMovies.Checked Then
    '        MessageBox.Show(" --  File Names --" + vbNewLine + _
    '                        "Tokens that end the movie name" + vbNewLine + _
    '                        "  " + """" + "-" + """" + " (hyphen)" + vbNewLine + _
    '                        "  " + """" + "_" + """" + " (underscore)" + vbNewLine + _
    '                        "  " + """" + "(" + """" + "  open paran" + vbNewLine + _
    '                        vbNewLine + _
    '                        " All Periods (.) are replaced with a space (for the name)" + vbNewLine + _
    '                        "If the last character is a space, it's removed" + vbNewLine + _
    '                        "Anything within parans ( ) is ignored" + vbNewLine + _
    '                        vbNewLine + _
    '                        vbNewLine + _
    '                        " -- File Extension (Matching) --" + vbNewLine + _
    '                        "Only the following extensions are considered movies when scanning the folder" + vbNewLine + _
    '                        ".iso .img .dat .bin .cue .vob .dvb .m2t .mts .evo .mp4" + vbNewLine + _
    '                        ".avi .asf .asx .wmv .wma .mov .flv .swf .nut .avs .nsv" + vbNewLine + _
    '                        ".mp4 .ram .ogg .ogm .ogv .mkv .viv .pva .mpg .mp4 .m4v" + vbNewLine + _
    '                        vbNewLine + _
    '                        vbNewLine + _
    '                        " -- Folder Scanning --" + vbNewLine + _
    '                        "0 levels deep, only matches files in the given path" + vbNewLine + _
    '                        vbNewLine + _
    '                        vbNewLine + _
    '                        " -- Features That are Not Available when using filenames --" + vbNewLine + _
    '                        " folder.jpg - can't be used or set" + vbNewLine + _
    '                        " movie.nfo, movie.tbn, movie-trailer.ext - can't be used or set" + vbNewLine + _
    '                        " mutliple different icons per movie - Not available" + vbNewLine + _
    '                        " scan is 0 levels deep - you must specify each folder containing movies" + vbNewLine + _
    '                        vbNewLine _
    '                        , "Important Note when using filenames" _
    '                        , MessageBoxButtons.OK, MessageBoxIcon.Warning)
    '    End If

    'End Sub


    Private Sub bwUpdatePosters_DoWork(ByVal sender As Object, ByVal e As System.ComponentModel.DoWorkEventArgs) Handles bwUpdatePosters.DoWork
        'asdf()
        Dim cou As Integer = 2007
        While cou < 2020
            'wget base + cou + .html
            Dim prefix, post As String
            prefix = " http://www.impawards.com/"
            post = "/std.html"
            Dim url As String = prefix + cou.ToString + post
            wget(url, rconf.tempfolder, cou)

            'Debug.Print("parse starting")
            Dim filename As String = rconf.tempfolder + Convert.ToString(cou) + "\" + "std.html"
            If Not File.Exists(filename) Then
                'MsgBox("No file available for " + cou.ToString + ".")
                Exit Sub
            End If

            'show something to user in gui
            'Me.lblPbar.Visible = True
            'Me.Refresh()
            'pbTick.Start()

            'pbar1.Value = pbar1.Maximum
            'lblPbar.Visible = True
            'lblPbar.Text = " ____---- WORKING ----____ "
            'Me.Refresh()

            Dim data0 As String = File.ReadAllText(filename)
            'create a new poster object
            Try
                Dim counter As Integer = 0
                'old format Dim RegexObj3 As New Regex("<tr width = 200 bgcolor = #\d{6}>.{0,5}<td><font size=\+1>(?<fullname>.{2,86})</font></td>.{0,7}<td width = 600>(?:(?:<a href = ""(?<lastnameinlink>.{2,86}).html"">)??<img src = ""thumbs/.{2,86}.jpg"" border = \d{1}>(?:</a>)??){1,35}?</td>.{0,2}</tr>", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline)
                'new format <tr width = 200 bgcolor = #\d{6}>.{0,5}<td><font size=\+1>(?<fullname>.{2,86})</font></td>.{0,7}<td width = 600>(?:(?:<a href=(?<lastnameinlink>.{2,86}).html>)??<img src=thumbs/.{2,86}.jpg border = \d{1}>(?:</a>)??){1,35}?</td>.{0,2}</tr>
                Dim RegexObj3 As New Regex("<tr width = 200 bgcolor = #\d{6}>.{0,5}<td><font size=\+1>(?<fullname>.{2,86})</font></td>.{0,7}<td width = 600>(?:(?:<a href=(?<lastnameinlink>.{2,86}).html>)??<img src=thumbs/.{2,86}.jpg border = \d{1}>(?:</a>)??){1,35}?</td>.{0,2}</tr>", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline)
                Dim MatchResults As Match = RegexObj3.Match(data0)
                While MatchResults.Success
                    Dim poster As New posters
                    Dim aposters As New ArrayList
                    '       Debug.Print(MatchResults.Groups("fullname").Value)
                    poster.pmoviename = cleanname(MatchResults.Groups("fullname").Value.ToString)
                    poster.pyear = cou '()
                    Dim curMatch As String = MatchResults.ToString
                    Dim linknames As String = ""
                    Try
                        Dim RegexObj As New Regex("<a href=(?<nameinlink>.{2,72}).html>", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline)
                        Dim CurMatchResults As Match = RegexObj.Match(MatchResults.ToString)
                        Dim curcounter As Integer = 0
                        While CurMatchResults.Success
                            '              Debug.Print(CurMatchResults.Groups("nameinlink").Value.ToString)
                            Dim curlink As String = CurMatchResults.Groups("nameinlink").Value
                            If curlink.Contains("""") Or curlink.Contains("<") Or curlink.Contains(">") Then
                                Debug.Print(curlink.ToString)
                            Else
                                aposters.Add(curlink)
                            End If

                            curcounter = curcounter + 1
                            CurMatchResults = CurMatchResults.NextMatch()
                        End While
                        'inject imdb info
                        Dim curmovie As New movie
                        curmovie.setmoviename(poster.pmoviename)
                        curmovie.setyear(poster.pyear)
                        Dim namestr As String = aposters(0).ToString
                        curmovie.ppostername = namestr
                        grabimdbfromimpawards(curmovie, curmovie.getyear)
                        poster.pimdbid = curmovie.getimdbid
                        'set posters from the array and write the poster xml file
                        poster.pposters = aposters
                        bwUpdatePosters.ReportProgress(counter, "Updating " + cou.ToString + ": " + poster.pmoviename)
                        'poster.writeXML(poster, rconf.xmlfolderposters)
                        poster.writeXML(poster, rconf.xmlfolderposters, True)
                        counter += 1
                    Catch ex As ArgumentException
                        'Syntax error in the regular expression
                    End Try
                    MatchResults = MatchResults.NextMatch()
                End While
            Catch ex As ArgumentException
                'Syntax error in the regular expression
                File.Delete(filename)
                'Me.pbar1.Visible = False
                'Me.Refresh()

            End Try
            File.Delete(filename)
            'pbTick.Stop()
            cou = cou + 1
        End While
        'bwFolderData.ReportProgress(currentindex, mname)
    End Sub

    Private Sub bwUpdatePosters_ProgressChanged(ByVal sender As Object, ByVal e As System.ComponentModel.ProgressChangedEventArgs) Handles bwUpdatePosters.ProgressChanged
        prgThread.Value = e.ProgressPercentage
        lblPCWorking.Text = e.UserState.ToString
    End Sub

    Private Sub bwUpdatePosters_RunWorkerCompleted(ByVal sender As Object, ByVal e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles bwUpdatePosters.RunWorkerCompleted
        tsbMoviesPreCache.Enabled = True
        'btnPrecache.Visible = True
        btnCancelPC.Enabled = False
        btnCancelPC.Visible = False
        prgThread.Visible = False
        tcMain.Enabled = True
        gbAppMode.Enabled = True
        gbDisplay.Enabled = True
        tsbMoviesLoadMovies.Enabled = True
        tsbMoviesAutoPilot.Enabled = True
        'btnAutoPilot.Visible = True
        lblPCWorking.Visible = False
        lbMyMovies.Enabled = True
        kgMovieOrTVShow.Enabled = True
        kgMyMovieInfoPicker.Enabled = True
        btnShowMovieInfo.Enabled = True
        'fwdbackbuttons()
        'klNumMovies.Text = movies.Count.ToString
        MessageBox.Show("Poster Update Completed", "Poster Update Completed", MessageBoxButtons.OK, MessageBoxIcon.Information)

    End Sub

    Private Sub kbtnOverlayImages_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles kbtnOverlayImages.Click
        ' overlayleft("SD.png")

    End Sub
    'tsbAddmyOwnAlbumart
    Private Sub tsbAddmyOwnAlbumart_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsbAddmyOwnAlbumart.Click
        If rconf.popgoogleimagesearch Then System.Diagnostics.Process.Start("http://images.google.com/images?&q=imagesize%3A500x500+" + Strings.Replace(currentartist.artistname, "&", "%26") + "%20" + Strings.Replace(currentalbum.albumname, "&", "%26")) '.pmoviename)
        addyourownimageformusicalbumart()
        'asdf()
    End Sub
    Private Sub tsbAddmyOwnFanart_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsbAddMusicFanart.Click
        If rconf.popgoogleimagesearch Then System.Diagnostics.Process.Start("http://images.google.com/images?&q=" + currentartist.artistname) ' + "%20") '+ currentalbum.albumname) '.pmoviename)
        addyourownimageformusicfanart()
        'asdf()
    End Sub

    Private Sub ToolStripButton2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripButton2.Click
        If rconf.popgoogleimagesearch Then System.Diagnostics.Process.Start("http://images.google.com/images?&q=" + currentmovie.pmoviename)
        addyourownimageforicon()
    End Sub

    Private Sub ToolStripButton1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripButton1.Click
        If rconf.popgoogleimagesearch Then System.Diagnostics.Process.Start("http://images.google.com/images?&q=" + currentmovie.pmoviename) '
        addyourownimageforfanart()
    End Sub

#Region "Tagging Menu Events"
    Private Sub SDSDTSES_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles SDSDTSES.Click
        overlayleft("SD.png", "dtses.png")
    End Sub
    Private Sub SDSHDAudio_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles SDSHDAudio.Click
        overlayleft("SD.png", "hdaudio.png")
    End Sub
    Private Sub SDSDTS_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles SDSDTS.Click
        overlayleft("SD.png", "dts.png")
    End Sub
    Private Sub SDSDD51_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles SDSDD51.Click
        overlayleft("SD.png", "5.1.png")
    End Sub
    Private Sub SDSDD71_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles SDSDD71.Click
        overlayleft("SD.png", "7.1.png")
    End Sub
    Private Sub SDSmono_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles SDSmono.Click
        overlayleft("SD.png", "mono.png")
    End Sub
    Private Sub SDSSterio_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles SDSStereo.Click
        overlayleft("SD.png", "stereo.png")
    End Sub


    '720p
    Private Sub hd720pSDTSES_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles hd720pSDTSES.Click
        overlayleft("720p.png", "dtses.png")
    End Sub
    Private Sub hd720pSHDAudio_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles hd720pSHDAudio.Click
        overlayleft("720p.png", "hdaudio.png")
    End Sub
    Private Sub hd720pSDTS_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles hd720pSDTS.Click
        overlayleft("720p.png", "dts.png")
    End Sub
    Private Sub hd720pSDD51_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles hd720pSDD51.Click
        overlayleft("720p.png", "5.1.png")
    End Sub
    Private Sub hd720pSDD71_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles hd720pSDD71.Click
        overlayleft("720p.png", "7.1.png")
    End Sub
    Private Sub hd720pSmono_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles hd720pSmono.Click
        overlayleft("720p.png", "mono.png")
    End Sub
    Private Sub hd720pSSterio_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles hd720pSStereo.Click
        overlayleft("720p.png", "stereo.png")
    End Sub


    '1080i
    Private Sub hd1080iSDTSES_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles hd1080iSDTSES.Click
        overlayleft("1080i.png", "dtses.png")
    End Sub
    Private Sub hd1080iSHDAudio_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles hd1080iSHDAudio.Click
        overlayleft("1080i.png", "hdaudio.png")
    End Sub
    Private Sub hd1080iSDTS_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles hd1080iSDTS.Click
        overlayleft("1080i.png", "dts.png")
    End Sub
    Private Sub hd1080iSDD51_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles hd1080iSDD51.Click
        overlayleft("1080i.png", "5.1.png")
    End Sub
    Private Sub hd1080iSDD71_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles hd1080iSDD71.Click
        overlayleft("1080i.png", "7.1.png")
    End Sub
    Private Sub hd1080iSmono_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles hd1080iSmono.Click
        overlayleft("1080i.png", "mono.png")
    End Sub
    Private Sub hd1080iSSterio_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles hd1080iSStereo.Click
        overlayleft("1080i.png", "stereo.png")
    End Sub


    '1080p
    Private Sub hd1080pSDTSES_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles hd1080pSDTSES.Click
        overlayleft("1080p.png", "dtses.png")
    End Sub
    Private Sub hd1080pSHDAudio_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles hd1080pSHDAudio.Click
        overlayleft("1080p.png", "hdaudio.png")
    End Sub
    Private Sub hd1080pSDTS_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles hd1080pSDTS.Click
        overlayleft("1080p.png", "dts.png")
    End Sub
    Private Sub hd1080pSDD51_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles hd1080pSDD51.Click
        overlayleft("1080p.png", "5.1.png")
    End Sub
    Private Sub hd1080pSDD71_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles hd1080pSDD71.Click
        overlayleft("1080p.png", "7.1.png")
    End Sub
    Private Sub hd1080pSmono_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles hd1080pSmono.Click
        overlayleft("1080p.png", "mono.png")
    End Sub
    Private Sub hd1080pSSterio_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles hd1080pSStereo.Click
        overlayleft("1080p.png", "stereo.png")
    End Sub


    'bluray
    Private Sub hdbluraySDTSES_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles BluRaySDTSES.Click
        overlayleft("bluray.png", "dtses.png")
    End Sub
    Private Sub hdbluraySHDAudio_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles BluRaySHDAudio.Click
        overlayleft("bluray.png", "hdaudio.png")
    End Sub
    Private Sub hdbluraySDTS_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles BluRaySDTS.Click
        overlayleft("bluray.png", "dts.png")
    End Sub
    Private Sub hdbluraySDD51_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles BluRaySDD51.Click
        overlayleft("bluray.png", "5.1.png")
    End Sub
    Private Sub hdbluraySDD71_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles BluRaySDD71.Click
        overlayleft("bluray.png", "7.1.png")
    End Sub
    Private Sub hdbluraySmono_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles BluRaySmono.Click
        overlayleft("bluray.png", "mono.png")
    End Sub
    Private Sub hdbluraySSterio_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles BluRaySStereo.Click
        overlayleft("bluray.png", "stereo.png")
    End Sub


    'xvid
    Private Sub xvidSDTS_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles xvidSDTS.Click
        overlayleft("xvid.png", "dts.png")
    End Sub
    Private Sub xvidSDD51_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles xvidSDD51.Click
        overlayleft("xvid.png", "5.1.png")
    End Sub
    Private Sub xvidSDD71_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles xvidSDD71.Click
        overlayleft("xvid.png", "7.1.png")
    End Sub
    Private Sub xvidSmono_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles xvidSmono.Click
        overlayleft("xvid.png", "mono.png")
    End Sub
    Private Sub xvidSSterio_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles xvidSStereo.Click
        overlayleft("xvid.png", "stereo.png")
    End Sub
    Private Sub xvidSDTSES_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles xvidSDTSES.Click
        overlayleft("xvid.png", "dtses.png")
    End Sub
    Private Sub xvidSHDAudio_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles xvidSHDAudio.Click
        overlayleft("xvid.png", "hdaudio.png")
    End Sub

    'divx
    Private Sub divxSDTS_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles divxSDTS.Click
        overlayleft("divx.png", "dts.png")
    End Sub
    Private Sub divxSDTSES_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles divxSDTSES.Click
        overlayleft("divx.png", "dtses.png")
    End Sub
    Private Sub divxSDHDAudio_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles divxSHDAudio.Click
        overlayleft("divx.png", "hdaudio.png")
    End Sub
    Private Sub divxSDD51_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles divxSDD51.Click
        overlayleft("divx.png", "5.1.png")
    End Sub
    Private Sub divxSDD71_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles divxSDD71.Click
        overlayleft("divx.png", "7.1.png")
    End Sub
    Private Sub divxSmono_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles divxSmono.Click
        overlayleft("divx.png", "mono.png")
    End Sub
    Private Sub divxSSterio_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles divxSStereo.Click
        overlayleft("divx.png", "stereo.png")
    End Sub


    'dvd
    Private Sub dvdSDTS_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles dvdSDTS.Click
        overlayleft("dvd.png", "dts.png")
    End Sub
    Private Sub dvdSDTSES_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles DVDSDTSES.Click
        overlayleft("dvd.png", "dtses.png")
    End Sub
    Private Sub dvdSHDAudio_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles DVDSHDAudio.Click
        overlayleft("dvd.png", "hdaudio.png")
    End Sub
    Private Sub dvdSDD51_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles dvdSDD51.Click
        overlayleft("dvd.png", "5.1.png")
    End Sub
    Private Sub dvdSDD71_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles dvdSDD71.Click
        overlayleft("dvd.png", "7.1.png")
    End Sub
    Private Sub dvdSmono_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles dvdSmono.Click
        overlayleft("dvd.png", "mono.png")
    End Sub
    Private Sub dvdSSterio_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles dvdSStereo.Click
        overlayleft("dvd.png", "stereo.png")
    End Sub
#End Region


    Private Sub autoTag()
        'automatically tag icon based on current movie found in current movie (being dipsplayed) movie file
        Dim videotag As String
        Dim audiotag As String
        Dim vtpieces() As String

        Dim videotype As String = getmediadata("c:\") 'put moviename in here
        'split videotype into videotag and audiotag
        vtpieces = Strings.Split(videotype, ":")
        videotag = vtpieces(0)
        audiotag = vtpieces(1)
        overlayleft(videotag, audiotag)
    End Sub
    Private Sub getmediadata()
        Dim MI As New MediaInfo
        MI.getdata(currentmovie, moviemode)
        If Not currentmovie.pimdbnumber = Nothing Then
            If rconf.pcbCreateMovieNFO Or rconf.pcbcreatemovienamedotnfo Then
                currentmovie.saveimdbinfomanual(currentmovie, rconf.pcbCreateMovieNFO, rconf.pcbcreatemovienamedotnfo)
            End If
        End If
        Debug.Print("done")
    End Sub
    Private Sub getmediadata(ByRef vcurrenttvepisode As xbmc.xbmcEpisodedetails) 'tvdblang.tvdblangEpisode)
        Dim MI As New MediaInfo
        MI.getdata_XBMC_EP(vcurrenttvepisode)
        Debug.Print("done")
    End Sub
    Private Sub getmediadata(ByRef gvcurrenttvepisode As tvdblang.tvdblangEpisode, ByVal initialnfofill As Boolean) 'tvdblang.tvdblangEpisode)
        Dim MI As New MediaInfo
        MI.getdata(gvcurrenttvepisode, True)
        Debug.Print("done")
    End Sub
    Private Function getmediadata(ByVal filenameandpath As String) As String
        'must have mediainfo.dll in the movieinfoplus folder with movieinfoplus.exe
        'must also have the icons and image magick files (not sure if those have to be installed or if they will run from the folder)
        Dim width As Integer = 0
        Dim scantype As String = ""
        Dim audiochan As Integer = 0
        Dim miresults As String = ""
        Dim retString As String = ""
        Try
            Dim MI As MediaInfo
            MI = New MediaInfo
            MI.Open(filenameandpath)
            MI.Option_("Complete")
            'To_Display += RichTextBox1.Text + vbCrLf + vbCrLf + "Close" + vbCrLf
            miresults += MI.Inform()
            MI.Close()
            Dim RegexObj As New Regex("Width.*?: (.*?) pixels")
            width = CInt(Strings.Replace((RegexObj.Match(miresults).Groups(1).Value), " ", ""))
            Dim RegexObj2 As New Regex("ScanType.*: (.*)", RegexOptions.IgnoreCase)
            scantype = RegexObj2.Match(miresults).Groups(1).Value
            Dim RegexObj3 As New Regex("Channel\(s\).*: (.*) channels", RegexOptions.IgnoreCase)
            audiochan = CInt(RegexObj3.Match(miresults).Groups(1).Value)
            'get the width, if it's 540 < then it's SD content
            If width < 540 Then
                retString += "SD"
            ElseIf width >= 540 And width < 730 Then
                retString += "480"
            ElseIf width >= 730 And width < 1700 Then
                retString += "720"
            ElseIf width >= 1700 Then
                retString += "1080"
            End If

            If scantype.ToLower = "progressive" Then
                retString += "p"
            Else
                retString += "i"
            End If

            retString += ":"
            If audiochan = 1 Then
                retString += "mono"
            ElseIf audiochan < 4 Then
                retString += "sterio"
            ElseIf audiochan < 7 Then
                retString += "5.1"
            ElseIf audiochan < 9 Then
                retString += "7.1"
            End If
        Catch ex As Exception
            MsgBox(ex.ToString)
        End Try
        Return retString
    End Function

    Private Sub SetupTagIconsToolStripMenuItem_Click_1(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles SetupTagIconsToolStripMenuItem.Click
        dlgTagIconSelection.ShowDialog()
    End Sub


    Private Sub llOpenTVShowLocation_LinkClicked(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsbShowsOpenFolder.Click '.LinkClicked
        Try
            Dim curtvshowpath As String = lbTvShowPicker.SelectedValue.ToString
            'strip out the id from the path'
            Dim theid As String = Regex.Match(curtvshowpath, "(:\d*?:)").Groups(1).Value
            curtvshowpath = Strings.Replace(curtvshowpath, theid, "")
            Dim currentshowid As String = Strings.Replace(theid, ":", "")
            Dim cmpath As String = "" 'intentionally not single line entry
            cmpath = curtvshowpath

            Dim strtestcurrentepisode As String = cmpath
            If cmpath = Nothing Or cmpath = "" Then
                Exit Sub
            Else
                Shell("C:\windows\explorer  " + """" + cmpath + """", AppWinStyle.NormalFocus)
                Exit Sub
            End If
        Catch ex2 As Exception
            Exit Sub
        End Try

    End Sub

    Private Sub kbtnDebugtvgo_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        rconf.debugtvshows = True
        Dim tshows As New tvshowcollection
        tshows.kbLoadTvShows(True)
        tshows.updatetvshows()

        If lbTvShowPicker.Items.Count > 0 Then
            lbTvShowPicker.SelectedIndex = 0
        End If
    End Sub


    Private Sub btnCreateTestFromLogfile_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnCreateTestFromLogfile.Click
        createtvdbdebugfromlog.ShowDialog()
    End Sub

    Private Sub btnGetMovieInfofromvideofile_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnGetMovieInfofromvideofile.Click
        If currentmovie Is Nothing Then Exit Sub
        'getmediadata()
        bwGetMovieMediaInfo = New System.ComponentModel.BackgroundWorker
        bwGetMovieMediaInfo.WorkerReportsProgress = True
        bwGetMovieMediaInfo.WorkerSupportsCancellation = True
        bwGetMovieMediaInfo.RunWorkerAsync()
    End Sub

    Private Sub getmoviemediainfo_bw()
        If messageprompts Then krtbMovieVideoInfo.Text = "Reading Movie Media Information"
        If messageprompts Then lblpbarLoadingMovieMediaInfo.Visible = True
        If messageprompts Then pbarLoadingMovieMediaInfo.Visible = True
        If messageprompts Then Me.Refresh()
        If messageprompts Then lbMyMovies.Enabled = False
        bwGetMovieMediaInfo = New System.ComponentModel.BackgroundWorker
        bwGetMovieMediaInfo.WorkerReportsProgress = True
        bwGetMovieMediaInfo.WorkerSupportsCancellation = True
        bwGetMovieMediaInfo.RunWorkerAsync()
    End Sub

    Private Sub gettvepmediainfo_bw()
        If messageprompts Then krtbTVShowMediaInfo.Text = "Reading TV Show Media Information"
        If messageprompts Then lblpbarLoadingTVShowMediaInfo.Visible = True
        If messageprompts Then pbarLoadingTVShowMediaInfo.Visible = True
        Me.Refresh()
        bwGetTVEPMediaInfo = New System.ComponentModel.BackgroundWorker
        bwGetTVEPMediaInfo.WorkerReportsProgress = True
        bwGetTVEPMediaInfo.WorkerSupportsCancellation = True
        bwGetTVEPMediaInfo.RunWorkerAsync()
    End Sub
    Private Sub bwGetMovieMediaInfo_DoWork(ByVal sender As Object, ByVal e As System.ComponentModel.DoWorkEventArgs) Handles bwGetMovieMediaInfo.DoWork
        getmediadata()
    End Sub

    Private Sub bwGetMovieMediaInfo_RunWorkerCompleted(ByVal sender As Object, ByVal e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles bwGetMovieMediaInfo.RunWorkerCompleted
        If messageprompts Then lblpbarLoadingMovieMediaInfo.Visible = False
        If messageprompts Then pbarLoadingMovieMediaInfo.Visible = False
        If messageprompts Then krtbMovieVideoInfo.Text = currentmovie.fileinfo.objtostring(currentmovie.fileinfo)
        If messageprompts Then Me.tbStudio.Text = currentmovie.pstudio
        If messageprompts Then lbMyMovies.Enabled = True
    End Sub
    Private Sub bwGetTVEPMediaInfo_DoWork(ByVal sender As Object, ByVal e As System.ComponentModel.DoWorkEventArgs) Handles bwGetTVEPMediaInfo.DoWork
        getmediadata(gvcurrenttvepisode, True)
    End Sub

    Private Sub bwGetTVEPMediaInfo_RunWorkerCompleted(ByVal sender As Object, ByVal e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles bwGetTVEPMediaInfo.RunWorkerCompleted
        If messageprompts Then lblpbarLoadingTVShowMediaInfo.Visible = False
        If messageprompts Then pbarLoadingTVShowMediaInfo.Visible = False
        If messageprompts Then krtbTVShowMediaInfo.Text = gvcurrenttvepisode.fileinfo.objtostring(gvcurrenttvepisode.fileinfo)
        'save it
        Dim xbmced1 As New xbmc.xbmcEpisodedetails
        gvcurrenttvepisode.tvdblangepisode2xbmcTvepisodeManualFromGUI(gvcurrenttvepisode, xbmced1) ', xbmctvshow1.Actors, curmirror)
        xbmced1.writeNfo(removeextension(gvcurrenttvepisode.episodefilepath) + ".nfo")

    End Sub
    Private Sub pbTVSeasonPoster_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbTVSeasonPoster.Click
        dlgCurrentIconUsed2.pbCurrentIconUsed2.ImageLocation = pbTVSeasonPoster.ImageLocation 'currentmovie.getmoviepath + "\folder.jpg" 'pbCurIconUsed2.ImageLocation
        dlgCurrentIconUsed2.pbCurrentIconUsed2.Load()
        dlgCurrentIconUsed2.Show()

    End Sub



    Private Sub btnGenXMLNiceCovers_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Dim newnc As New nicecover
        newnc.generatenicecoversxmlcache(rconf.nicecovertempfolder, rconf.nicecoverxmlcachefolderlocation)
    End Sub

    Private Sub pbNiceCovers1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        ' savecip(pbNiceCovers1)
    End Sub

    Private Sub kbtnPrecacheTVShows_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Dim tshows As New tvshowcollection
        Dim swatch As New Stopwatch
        'swatch.Start()
        tshows.precacheTvShows()
        'swatch.Stop()
        'Dim howlong As String = swatch.Elapsed.ToString
        'MsgBox(howlong)
        MsgBox("You need to wait until all wget windows have finished before doing anything else with shows")
    End Sub
    Public Sub tsbtvPreCacheMediaIconsdata(ByVal Title As String)
        Dim selectedNameXMLfile As String
        Dim dname As String = ""
        If Title = "CSI: Crime Scene Investigation" Then
            dname = "CSI"
        Else
            dname = cleanname(Title)
        End If
        selectedNameXMLfile = Strings.Replace(dname, " ", ".")
        dname = Strings.Replace(dname, " ", ".")
        currentTVShowSelectedNameXMLfile = selectedNameXMLfile

        Dim xmltemppathname As String = rconf.xmlfolder + selectedNameXMLfile
        'check to see if there is already an xml file in there

        'need to add in new download method here
        'asdf()
        If rconf.pcbf1s0 Then
            If rbem.Checked = True Then
                If messageprompts Then lblPbar.Text = "-- Getting Square (no style) icon for " + dname + "--"
                'If messageprompts Then Me.Refresh()()
                xmlDownloadTV(dname, xmltemppathname, "1", "4", "0") 'square no style
            End If
            getdisplayimages(selectedNameXMLfile, "1", "4", "0", dname, True)
        End If
        If rconf.pcbf1s3 Then
            If rbem.Checked = True Then
                If messageprompts Then lblPbar.Text = "-- Getting Square Box Shot for " + dname + "--"
                'If messageprompts Then Me.Refresh()()
                xmlDownloadTV(dname, xmltemppathname, "1", "4", "3") 'square box shot
            End If
            getdisplayimages(selectedNameXMLfile, "1", "4", "3", dname, True)
        End If
        If rconf.pcbf1s9 Then
            If rbem.Checked = True Then
                If messageprompts Then lblPbar.Text = "-- Getting Round icon for " + dname + "--"
                'If messageprompts Then Me.Refresh()()
                xmlDownloadTV(dname, xmltemppathname, "1", "4", "9") 'square classification, but it's a round token
            End If
            getdisplayimages(selectedNameXMLfile, "1", "4", "9", dname, True)
        End If
        If rconf.pcbf2s0 Then
            If rbem.Checked = True Then
                If messageprompts Then lblPbar.Text = "-- Getting Wide (no style) icon for " + dname + "--"
                'If messageprompts Then Me.Refresh()()
                xmlDownloadTV(dname, xmltemppathname, "2", "4", "0") 'wide no style
            End If
            getdisplayimages(selectedNameXMLfile, "2", "4", "0", dname, True)
        End If
        If rconf.pcbf2s2 Then
            If rbem.Checked = True Then
                If messageprompts Then lblPbar.Text = "-- Getting Wide (rounded shadow scanlines) icon for " + dname + "--"
                'If messageprompts Then Me.Refresh()()
                xmlDownloadTV(dname, xmltemppathname, "2", "4", "2") 'wide rounded shadow with scanlines
            End If
            getdisplayimages(selectedNameXMLfile, "2", "4", "2", dname, True)
        End If
        If rconf.pcbf2s8 Then
            If rbem.Checked = True Then
                If messageprompts Then lblPbar.Text = "-- Getting Wide (round shadow) icon for " + dname + "--"
                'If messageprompts Then Me.Refresh()()
                xmlDownloadTV(dname, xmltemppathname, "2", "4", "8") 'wide rounded shadow
            End If
            getdisplayimages(selectedNameXMLfile, "2", "4", "8", dname, True)
        End If
        If rconf.pcbf2s10 Then
            If rbem.Checked = True Then
                If messageprompts Then lblPbar.Text = "-- Getting Wide (round shadow Glass overlay) icon for " + dname + "--"
                'If messageprompts Then Me.Refresh()()
                xmlDownloadTV(dname, xmltemppathname, "2", "4", "10") 'wide rounded shadow with glass overlay
            End If
            getdisplayimages(selectedNameXMLfile, "2", "4", "10", dname, True)
        End If
        'If cbf3s0.Checked Then
        '    If rbem.Checked = True Then
        '        If messageprompts Then lblPbar.Text = "-- Getting Tall (no style) icon for " + dname + "--"
        '        'If messageprompts Then Me.gbDisplay.Refresh()
        '        xmlDownload(currentmovie, xmltemppathname, "3", "4", "0") 'tall no style
        '    End If
        '    getdisplayimages(selectedNameXMLfile, "3", "4", "0")
        'End If

    End Sub
    Private Sub tsbtvPreCache_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsbtvPreCache.Click
        MsgBox("this feature is no longer used as it is called by loading the tv shows")
        Exit Sub

        'Dim tshows As New tvshowcollection
        'tshows.precacheTvShows()
        ''now we have all the data

        ''download the stuff
        'If Not currenttvshowdownloadlist.Count = 0 Then
        '    dlgDownloadingFile.downloadlist = currenttvshowdownloadlist
        '    dlgDownloadingFile.downloadingmutliimages = True
        '    dlgDownloadingFile.ShowDialog()
        'End If
        ''clear the arraylist
        'Me.currenttvshowdownloadlist.Clear()

        'MsgBox("Pre cache completed, now loading the tvshows")
        'tsbtvPreCache.Enabled = False
        ''load the tvshows into the dialog
        ''Dim tshows As New tvshowcollection
        'tshows.kbLoadTvShows()
        'tshows.updatetvshows()

        'If lbTvShowPicker.Items.Count > 0 Then
        '    lbTvShowPicker.SelectedIndex = 0
        'End If
        'TVCurrentTVRightMain.Panel1Collapsed = True
        ''tsbtvPreCache.Enabled = False


    End Sub

    Private Sub kbtnMoviesChangeIMDBid_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles kbtnMoviesChangeIMDBid.Click
        If currentmovie Is Nothing Then Exit Sub

        Dim curnonfochangprompt As Boolean = rconf.pcbNoNfoChangePrompt
        rconf.pcbNoNfoChangePrompt = True
        saveNfoFromGuiText(False)
        rconf.pcbNoNfoChangePrompt = curnonfochangprompt
        Dim checkid As String = Me.tbIMDBID.Text
        If checkid = Nothing Then
            'MsgBox("can't save a movie without an imdb id number")
            Exit Sub
        End If
        If File.Exists(rconf.imdbcachefolder + currentmovie.pimdbnumber + ".xml") Then
            Try
                File.SetAttributes(rconf.imdbcachefolder + currentmovie.pimdbnumber + ".xml", FileAttributes.Normal)
            Catch ex As Exception

            End Try
            Try
                File.Delete(rconf.imdbcachefolder + currentmovie.pimdbnumber + ".xml")
            Catch ex As Exception

            End Try
        End If
        If Directory.Exists(rconf.tempfolder + currentmovie.pimdbnumber) Then
            Try
                File.SetAttributes(rconf.tempfolder + currentmovie.pimdbnumber + "\fullcredits\fullcredits", FileAttributes.Normal)
                File.Delete(rconf.tempfolder + currentmovie.pimdbnumber + "\fullcredits\fullcredits")
                Directory.Delete(rconf.tempfolder + currentmovie.pimdbnumber + "\fullcredits")
                File.SetAttributes(rconf.tempfolder + currentmovie.pimdbnumber + "\plotsummary\plotsummary", FileAttributes.Normal)
                File.Delete(rconf.tempfolder + currentmovie.pimdbnumber + "\plotsummary\plotsummary")
                Directory.Delete(rconf.tempfolder + currentmovie.pimdbnumber + "\plotsummary")
                File.SetAttributes(rconf.tempfolder + currentmovie.pimdbnumber + "\index.html", FileAttributes.Normal)
                File.Delete(rconf.tempfolder + currentmovie.pimdbnumber + "\index.html")
            Catch ex As Exception
                MsgBox(ex.ToString)
            End Try
            Try
                Directory.Delete(rconf.tempfolder + currentmovie.pimdbnumber)
            Catch ex As Exception
                MsgBox(ex.ToString)
            End Try
        End If
        currentmovie.pdatafromnfo = False
        movies.Item(CInt(lbMyMovies.SelectedValue)) = currentmovie
        processdropdownitems()
    End Sub

    ''    Public Class dlgDownloadingFile
    ''Dim cconf As configuration = maincollection.rconf
    'Public downloaderwhereToSave As String 'Where the program save the file
    'Public downloaderwhattosave As String
    'Public nomultidownload As Boolean = True
    'Delegate Sub ChangeTextsSafe(ByVal length As Long, ByVal position As Integer, ByVal percent As Integer, ByVal speed As Double)
    'Delegate Sub DownloadCompleteSafe(ByVal cancelled As Boolean, ByVal retry As Boolean)


    'Public Sub DownloadComplete(ByVal cancelled As Boolean, Optional ByVal dlretry As Boolean = False)
    '    Me.downloadertxtFileName.Enabled = True
    '    'Me.btnDownload.Enabled = True
    '    Me.downloaderbtnCancel.Enabled = False
    '    If Not File.Exists(downloaderwhereToSave) Then
    '        Dim binfilelocal As String = rconf.wgetfolder + "wget.exe"
    '        Dim filenameuri As String = Me.downloadertxtFileName.Text
    '        Dim pro1 As System.Diagnostics.Process = New System.Diagnostics.Process()
    '        pro1.StartInfo.FileName = binfilelocal
    '        pro1.StartInfo.Arguments = filenameuri + " -O " + """" + downloaderwhereToSave + """"
    '        pro1.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden
    '        pro1.Start()
    '        pro1.WaitForExit()
    '    End If
    '    If Not File.Exists(downloaderwhereToSave) Then
    '        System.Threading.Thread.Sleep(3000) 'wait 3 seconds
    '        dlretry = True 'retry it again '3rd attempt 
    '    End If
    '    If dlretry Then 'retrycount 4th attempt
    '        System.Threading.Thread.Sleep(5000) 'wait 5 seconds and try again
    '        Me.downloaderlblAmountDownloaded.Text = "Stream failed - retrying with backup method..."
    '        Debug.Print(" ==== ==== ===== ==== ==== ")
    '        Debug.Print(" ==== ==== ===== ==== ==== ")
    '        Debug.Print(" ==== ==== RETRY ==== ==== ")
    '        Debug.Print(" ==== ==== ===== ==== ==== ")

    '        dlretry = False
    '        'try again with wget 
    '        Dim binfilelocal As String = rconf.wgetfolder + "wget.exe"
    '        Dim filenameuri As String = Me.downloadertxtFileName.Text
    '        'Debug.Print(binfilelocal + url + " -P " + """" + folder + """")
    '        Dim pro1 As System.Diagnostics.Process = New System.Diagnostics.Process()
    '        pro1.StartInfo.FileName = binfilelocal
    '        pro1.StartInfo.Arguments = filenameuri + " -O " + """" + downloaderwhereToSave + """"
    '        pro1.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden
    '        pro1.Start()
    '        pro1.WaitForExit()

    '    End If
    '    If cancelled Then
    '        Me.downloaderlblAmountDownloaded.Text = "Cancelled"
    '        'MessageBox.Show("Download aborted", "Aborted", MessageBoxButtons.OK, MessageBoxIcon.Information)
    '        'Me.Dispose()
    '        'Me.Close()

    '    Else
    '        Me.downloaderlblAmountDownloaded.Text = "Successfully downloaded"
    '        'MessageBox.Show("Successfully downloaded!", "All OK", MessageBoxButtons.OK, MessageBoxIcon.Information)
    '        'Me.Dispose()
    '        'Me.Close()
    '    End If

    '    Me.downloaderpbar.Value = 0
    '    Me.downloaderlblFileDownloading.Text = "Downloading: "
    '    Me.downloaderlblSavingFileTo.Text = "Save to: "
    '    Me.downloaderlblFileSize.Text = "File size: "
    '    Me.downloaderlblSpeed.Text = "Download speed: "
    '    Me.downloaderlblAmountDownloaded.Text = ""

    'End Sub

    'Public Sub ChangeTexts(ByVal length As Long, ByVal position As Integer, ByVal percent As Integer, ByVal speed As Double)
    '    Dim filesizetmp As Double = Math.Round((length / 1024), 2)
    '    If filesizetmp = 0 Then
    '        'no file size.. hide status bar and change labels
    '        Me.downloaderpbar.Style = ProgressBarStyle.Marquee
    '        'Me.pbar.MarqueeAnimationSpeed = 20
    '        Me.downloaderlblFileSize.Text = "File Size: " & "Unable to determine dynamic sizes"
    '        Me.downloaderlblFileDownloading.Text = "Downloading: " & Me.downloadertxtFileName.Text
    '        Me.downloaderlblAmountDownloaded.Text = "Downloaded " & Math.Round((position / 1024), 2) & " KB"

    '    Else
    '        Me.downloaderpbar.Style = ProgressBarStyle.Blocks
    '        Me.downloaderlblFileSize.Text = "File Size: " & Math.Round((length / 1024), 2) & " KB"
    '        Me.downloaderlblFileDownloading.Text = "Downloading: " & Me.downloadertxtFileName.Text
    '        Me.downloaderlblAmountDownloaded.Text = "Downloaded " & Math.Round((position / 1024), 2) & " KB of " & Math.Round((length / 1024), 2) & "KB (" & Me.downloaderpbar.Value & "%)"

    '    End If
    '    If speed = -1 Then
    '        Me.downloaderlblSpeed.Text = "Speed: calculating..."
    '    Else
    '        Me.downloaderlblSpeed.Text = "Speed: " & Math.Round((speed / 1024), 2) & " KB/s"
    '    End If
    '    Me.downloaderpbar.Value = percent
    'End Sub

    'Public Sub downloadergo() '(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnDownload.Click
    '    'If Me.txtFileName.Text <> "" AndAlso Me.txtFileName.Text.StartsWith("http://") Then
    '    '    Me.SaveFileDialog1.FileName = Me.txtFileName.Text.Split("/"c)(Me.txtFileName.Text.Split("/"c).Length - 1)
    '    '    If Me.SaveFileDialog1.ShowDialog = Windows.Forms.DialogResult.OK Then
    '    '        Me.whereToSave = Me.SaveFileDialog1.FileName
    '    '        Me.SaveFileDialog1.FileName = ""
    '    Me.downloaderlblAmountDownloaded.Text = ""
    '    If nomultidownload = False Then
    '        wgetandforget()
    '        'Me.Dispose()
    '        'Me.Close()
    '    Else
    '        Me.downloaderlblSavingFileTo.Text = "Save to: " & Me.downloaderwhereToSave
    '        'Me.txtFileName.Enabled = False
    '        'Me.btnDownload.Enabled = False
    '        Me.downloaderbtnCancel.Enabled = True
    '        bwDownloader = New System.ComponentModel.BackgroundWorker
    '        bwDownloader.WorkerReportsProgress = True
    '        bwDownloader.WorkerSupportsCancellation = True
    '        System.Threading.Thread.Sleep(100)
    '        bwDownloader.RunWorkerAsync() 'Start download
    '    End If



    '    '    End If
    '    'Else
    '    'MessageBox.Show("Please insert valid URL for download", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning)
    '    'End If
    'End Sub
    'Private Sub wgetandforget()
    '    Dim binfilelocal As String = rconf.wgetfolder + "wget.exe"
    '    Dim filenameuri As String = Me.downloadertxtFileName.Text
    '    'Debug.Print(binfilelocal + url + " -P " + """" + folder + """")
    '    Dim pro1 As System.Diagnostics.Process = New System.Diagnostics.Process()
    '    pro1.StartInfo.FileName = binfilelocal
    '    pro1.StartInfo.Arguments = filenameuri + " -O " + """" + downloaderwhereToSave + """"
    '    pro1.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden
    '    System.Threading.Thread.Sleep(100) 'wait .03 second(s) before firing off this thread
    '    pro1.Start()
    '    'pro1.WaitForExit()
    'End Sub
    'Private Sub bwdownloader_DoWork(ByVal sender As System.Object, ByVal e As System.ComponentModel.DoWorkEventArgs) Handles bwDownloader.DoWork
    '    'Me.downloadertxtFileName.Text = downloaderwhattosave
    '    'Creating the request and getting the response
    '    Dim theResponse As HttpWebResponse
    '    Dim theRequest As HttpWebRequest
    '    Try 'Checks if the file exist

    '        theRequest = CType(WebRequest.Create(downloaderwhattosave), HttpWebRequest)
    '        theResponse = CType(theRequest.GetResponse, HttpWebResponse)
    '    Catch ex As Exception

    '        'MessageBox.Show("An error occurred while downloading file. Possibe causes:" & ControlChars.CrLf & _
    '        '"1) File doesn't exist" & ControlChars.CrLf & _
    '        '"2) Remote server error", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error)

    '        Dim cancelDelegate As New DownloadCompleteSafe(AddressOf DownloadComplete)

    '        Me.Invoke(cancelDelegate, True, False)

    '        Exit Sub
    '    End Try
    '    Dim length As Long = theResponse.ContentLength 'Size of the response (in bytes)

    '    Dim safedelegate As New ChangeTextsSafe(AddressOf ChangeTexts)
    '    Me.Invoke(safedelegate, length, 0, 0, 0) 'Invoke the TreadsafeDelegate

    '    Dim writeStream As New IO.FileStream(Me.downloaderwhereToSave, IO.FileMode.Create)

    '    'Replacement for Stream.Position (webResponse stream doesn't support seek)
    '    Dim nRead As Integer

    '    'To calculate the download speed
    '    Dim speedtimer As New Stopwatch
    '    Dim currentspeed As Double = -1
    '    Dim readings As Integer = 0
    '    Dim locretry As Boolean = False
    '    Do

    '        If bwDownloader.CancellationPending Then 'If user abort download
    '            Exit Do
    '        End If

    '        speedtimer.Start()

    '        Dim readBytes(4095) As Byte
    '        Dim bytesread As Integer = 0
    '        Try
    '            bytesread = theResponse.GetResponseStream.Read(readBytes, 0, 4096)
    '        Catch ex As Exception
    '            Debug.Print(ex.ToString)
    '            locretry = True
    '            Exit Do

    '        End Try


    '        nRead += bytesread
    '        Dim percent As Short
    '        Try
    '            If length = -1 Then
    '                percent = 0
    '            Else
    '                percent = CShort((nRead / length) * 100)
    '            End If

    '        Catch ex As Exception
    '            percent = 0
    '        End Try


    '        Me.Invoke(safedelegate, length, nRead, percent, currentspeed)

    '        If bytesread = 0 Then Exit Do

    '        writeStream.Write(readBytes, 0, bytesread)

    '        speedtimer.Stop()

    '        readings += 1
    '        If readings >= 15 Then 'For increase precision, the speed it's calculated only every fifteen cicles
    '            currentspeed = 20480 / (speedtimer.ElapsedMilliseconds / 1000)
    '            speedtimer.Reset()
    '            readings = 0
    '        End If
    '    Loop

    '    'Close the streams
    '    theResponse.GetResponseStream.Close()
    '    writeStream.Close()

    '    If locretry = True Then
    '        IO.File.Delete(Me.downloaderwhereToSave)
    '        Dim retryDelegate As New DownloadCompleteSafe(AddressOf DownloadComplete)
    '        Me.Invoke(retryDelegate, False, True)
    '        Exit Sub
    '    End If

    '    If Me.bwDownloader.CancellationPending Then
    '        IO.File.Delete(Me.downloaderwhereToSave)
    '        Dim cancelDelegate As New DownloadCompleteSafe(AddressOf DownloadComplete)
    '        Me.Invoke(cancelDelegate, True, False)
    '        Exit Sub
    '    End If

    '    Dim completeDelegate As New DownloadCompleteSafe(AddressOf DownloadComplete)
    '    Me.Invoke(completeDelegate, False, False)

    'End Sub



    ''Private Sub mainForm_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
    ''   Me.downloaderlblAmountDownloaded.Text = ""
    ''  downloadergo()

    ''End Sub

    'Private Sub btnCancel_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
    '    Me.bwDownloader.CancelAsync() 'Send cancel request
    '    downloaderbtnCancel.Enabled = False
    'End Sub

    'Private Sub btngo_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
    '    downloadergo()

    'End Sub

    'Private Sub BackgroundWorker1_RunWorkerCompleted(ByVal sender As Object, ByVal e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles bwDownloader.RunWorkerCompleted
    '    bwDownloader.Dispose()
    'End Sub
    ''End Class




    Private Sub llIMDBIDStudio_LinkClicked(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles llIMDBIDStudio.LinkClicked
        If currentmovie Is Nothing Then Exit Sub
        System.Diagnostics.Process.Start("http://www.imdb.com/title/" + currentmovie.pimdbnumber + "/companycredits")


    End Sub

    Private Sub kcbUseFileNamesForMovies_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs)

    End Sub

    Private Sub SortMyMusicToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsbMusicSortMyMusicToolStripMenuItem.Click
        Dim cexamplesong As New Music
        cexamplesong.Artist = "Green Day"
        cexamplesong.Album = "Dookie"
        cexamplesong.Tracknum = "5"
        cexamplesong.Title = "Welcome to Paradise"
        cexamplesong.Filename = "c:\program files\mmmp\greenday_dookie_5_welcome_to_paradise.mp3"
        dlgMusicSortWizard.examplesong = cexamplesong
        dlgMusicSortWizard.ShowDialog()
        'If Not Directory.Exists("f:\musicnow") Then Directory.CreateDirectory("f:\musicnow")
        'sortmusic("e:\music", "f:\musicnow", True)
    End Sub

    Private Sub tsbLoadMyMusic_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsbLoadMyMusic.Click
        loadmusic()
    End Sub

    Private Sub tsbInjectImageToSong_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        If currentsong Is Nothing Then Exit Sub
        If Not currentsong.Filename = "" Then
            Try
                If File.Exists(addfiletofolder(currentalbum.path, "folder.jpg")) Then
                    injectimageintotag(currentsong.Filename, addfiletofolder(currentalbum.path, "folder.jpg"))
                End If
                Try
                    getimagefromid3tag(currentsong.Filename, pbMusic_CurSongImage)
                Catch ex As Exception
                    Debug.Print("loading image from music file failed")
                End Try
            Catch exmain As Exception
                Debug.Print(exmain.ToString)
            End Try
        End If
    End Sub
    Private Sub tsb_music_ExtractImageFromMusicFileToAlbumImageToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsb_music_ExtractImageFromMusicFileToAlbumImageToolStripMenuItem.Click
        If currentsong Is Nothing Then Exit Sub
        If Not currentsong.Filename = "" Then
            getimagefromid3tagSaveLocal(currentsong.Filename, addfiletofolder(currentalbum.path, "folder.jpg"))
        End If
    End Sub

    Private Sub tsbInjectIntoCurSong_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsbInjectIntoCurSong.Click
        If currentsong Is Nothing Then Exit Sub
        If Not currentsong.Filename = "" Then
            Try
                If File.Exists(addfiletofolder(currentalbum.path, "folder.jpg")) Then
                    injectimageintotag(currentsong.Filename, addfiletofolder(currentalbum.path, "folder.jpg"))
                End If
                Try
                    getimagefromid3tag(currentsong.Filename, pbMusic_CurSongImage)
                Catch ex As Exception
                    Debug.Print("loading image from music file failed")
                End Try
            Catch exmain As Exception
                Debug.Print(exmain.ToString)
            End Try
        End If
    End Sub
    Public Sub injectmodifiedalbumdata()
        Dim newartistname As String = gvnewartistname
        Dim newalbumname As String = gvnewalbumname
        If newalbumname Is Nothing Then Exit Sub
        If newartistname Is Nothing Then Exit Sub
        If newalbumname = "" Then Exit Sub
        If newartistname = "" Then Exit Sub

        'modify artist and ablum name for current album (all songs in album)
        Me.pbar1.Visible = True
        pbar1.Value = pbar1.Maximum
        lblPbar.Visible = True
        lblPbar.BringToFront()

        If currentalbum Is Nothing Then Exit Sub

        Dim tempmusicarray As New ArrayList
        For Each musicitem As Music In currentalbum.music
            '    tempmusicarray.Add(musicitem.Filename)
            'Next
            'For Each cursongfilename As String In tempmusicarray
            Dim cursongfilename As String = musicitem.Filename
            If Not cursongfilename = "" Then
                lblPbar.Text = "-- Working On: " + getfilefrompath(cursongfilename) + "--"
                Me.Refresh()
                Try
                    'make sure it's an mp3
                    Dim filext As String = getmusicextension(cursongfilename)
                    If filext = ".mp3" Then
                        Try
                            injectalbumdata(cursongfilename, newartistname, newalbumname)
                            musicitem.Artist = newartistname
                            musicitem.Album = newalbumname
                        Catch ex As Exception

                        End Try
                    End If
                Catch exmain As Exception
                    Debug.Print(exmain.ToString)
                End Try
            End If
        Next
        'For Each musicitem As Music In currentalbum.music
        '    'tempmusicarray.Add(musicitem.Filename)
        '    lblPbar.Text = "-- Scanning: " + musicitem.Filename + "--"
        '    Me.Refresh()
        '    Dim updatemusic As New MediaInfo
        '    updatemusic.getmusicdata(musicitem)
        'Next
        Me.pbar1.Visible = False
        lblPbar.Visible = False
        lblPbar.Text = "" '"-- Updating Music List -- " ' + musicitem.Filename + "--"
        Me.Refresh()
        MsgBox("Note: To see changed data in the Artist and Album views, you must rescan the data from the files." + vbNewLine + "You can see the modified data by clicking on the song.")
        'updatemusicafterchanges(newartistname, newalbumname)
    End Sub
    Private Sub updatemusicafterchanges(ByVal newartistname As String, ByVal newalbumname As String)
        Exit Sub
        'This routine doesn't work correctly and is very slow

        'after any data is modified (except image injection)
        'rescan only modded data (updates the stored info)
        'set current artist string to the modded artist string (so i can bounce back to it)
        'resort list like initial load
        'load the artist back into gui view
        Dim curtempartistcou As Integer = 0
        gvmusicobjects.Clear()

        Dim tempartistlist As New Hashtable
        'get all music from the collection and load it back into gvmusicobjects for re-processing
        For Each artname As String In mymusicbyartist
            Dim tempartist As musicartist = CType(mymusiccollection.Item(artname), musicartist)
            For Each tempalbum As musicalbums In tempartist.albums
                For Each tempmusobj As Music In tempalbum.music
                    gvmusicobjects.Add(tempmusobj)

                    Dim tempartistobj As New musicartist
                    Dim tempablum As New musicalbums
                    tempablum.albumname = tempmusobj.Album
                    tempartistobj.artistname = tempmusobj.Artist
                    tempartistobj.albums.Add(tempablum)
                    tempartistobj.path = getartistdirectory(tempmusobj.Filename)
                    Try
                        tempartistlist.Add(tempmusobj.Artist, tempartistobj)
                    Catch ex As Exception
                        'used to filter out duplicate artists
                    End Try
                Next
            Next
        Next
        '-------------

        'we now have a list of(music) that contains all of our artists
        'loop through each artist and mod the artist object

        'loop through each music object, add in the albums to the artists
        For Each musicobj As Music In gvmusicobjects
            'get artist from hastable
            Dim tempartist As musicartist = CType(tempartistlist.Item(musicobj.Artist), musicartist)
            'If musicobj.Artist = tempartist.artistname Then
            'this music object is for this artist

            'create the default album if there isn't any albums
            If tempartist.albums.Count = 0 Then
                'create a new album since we don't have one 
                Dim tempalbum As New musicalbums
                tempalbum.albumname = "Unknown"
                tempartist.albums.Add(tempalbum)
            End If

            'see if the ablum already exists
            Dim havealbuminartistalready As Boolean = False
            For Each artistalbum As musicalbums In tempartist.albums
                If artistalbum.albumname = musicobj.Album Then havealbuminartistalready = True
            Next
            If Not havealbuminartistalready Then
                'if it's not there, add it
                If Not musicobj.Album = "" Then
                    'create the album based on it's name
                    Dim tempalbum As New musicalbums
                    tempalbum.albumname = musicobj.Album
                    tempartist.albums.Add(tempalbum)

                End If
            End If

            'now add the music to the album
            For Each artistalbum As musicalbums In tempartist.albums
                If artistalbum.albumname = musicobj.Album Then
                    artistalbum.path = getparentdirectory(musicobj.Filename)
                    artistalbum.music.Add(musicobj)
                End If
            Next
        Next

        mymusiccollection = tempartistlist

        'Dim curcountallart As Integer = 0
        Dim dtcurrentartist As New DataTable
        dtcurrentartist.Columns.Add("Artist", GetType(System.String))
        dtcurrentartist.Columns.Add("dtuid", GetType(System.String))
        'dtcurrentartist.Columns.Add("Index")
        dtcurrentartist.Clear()

        'dtcurrentalbum.Clear()
        For Each de As DictionaryEntry In mymusiccollection
            mymusicbyartist.Add(de.Key)
            If Not de.Key.ToString = "" Then dtcurrentartist.LoadDataRow(New Object() {de.Key, de.Key}, True)
        Next de
        dtcurrentartist.DefaultView.Sort = "Artist"
        lbmusicArtist.ValueMember = "dtuid"
        lbmusicArtist.DisplayMember = "Artist"
        lbmusicArtist.DataSource = dtcurrentartist.DefaultView
        lbmusicArtist.SelectedIndex = -1

        'figure out which index is the newartistname and select it
        'lbmusicArtist.SelectedIndex = 2


    End Sub
    Private Sub injectIntoCurAlbum()
        Me.pbar1.Visible = True
        pbar1.Value = pbar1.Maximum
        lblPbar.Visible = True
        lblPbar.BringToFront()

        If currentalbum Is Nothing Then Exit Sub
        Dim tempmusicarray As New ArrayList
        For Each musicitem As Music In currentalbum.music
            tempmusicarray.Add(musicitem.Filename)
        Next
        For Each cursongfilename As String In tempmusicarray
            If Not cursongfilename = "" Then
                lblPbar.Text = "-- Working On: " + getfilefrompath(cursongfilename) + "--"
                Me.Refresh()
                Try
                    If File.Exists(addfiletofolder(currentalbum.path, "folder.jpg")) Then
                        injectimageintotag(cursongfilename, addfiletofolder(currentalbum.path, "folder.jpg"))
                    End If
                Catch exmain As Exception
                    Debug.Print(exmain.ToString)
                End Try
            End If
        Next
        Me.pbar1.Visible = False
        lblPbar.Visible = False

    End Sub
    Private Sub tsbInjectIntoCurAlbum_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsbInjectIntoCurAlbum.Click
        injectIntoCurAlbum()
    End Sub

    Private Sub tsbInjectIntoCurArtist_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsbInjectIntoCurArtist.Click
        'temp exit, need to think more on this function
        Exit Sub

        If currentartist Is Nothing Then Exit Sub
        Dim tempmusicarray As New ArrayList
        For Each tempalbum As musicalbums In currentartist.albums
            For Each musicitem As Music In tempalbum.music
                tempmusicarray.Add(musicitem.Filename)
            Next
        Next

        For Each cursongfilename As String In tempmusicarray
            If Not cursongfilename = "" Then
                Try
                    If File.Exists(addfiletofolder(currentalbum.path, "folder.jpg")) Then
                        injectimageintotag(cursongfilename, addfiletofolder(currentalbum.path, "folder.jpg"))
                    End If
                Catch exmain As Exception
                    Debug.Print(exmain.ToString)
                End Try
            End If
        Next
    End Sub

    Private Sub tsbSettings_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        dlgConfiguration.tcSettings.SelectedTab = dlgConfiguration.tpSettingsMusic
        dlgConfiguration.ShowDialog()

    End Sub
    'tsbMovieSettingsLink
    Private Sub tsbMovieSettingsLink_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        dlgConfiguration.tcSettings.SelectedTab = dlgConfiguration.tpSettingsMovies
        dlgConfiguration.ShowDialog()

    End Sub

    Private Sub tso_auto_addtoablumonnewart_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tso_auto_addtoablumonnewart.Click
        If Not tso_auto_addtoablumonnewart.Checked Then tso_auto_addtoablumonnewart.Checked = True Else tso_auto_addtoablumonnewart.Checked = False
        rconf.ptso_auto_addtoablumonnewart = tso_auto_addtoablumonnewart.Checked
    End Sub

    Private Sub bwLoadMusic_DoWork(ByVal sender As System.Object, ByVal e As System.ComponentModel.DoWorkEventArgs) Handles bwLoadMusic.DoWork
        Dim tempartistlist As New Hashtable
        Dim tempalbumlist As New Hashtable
        Dim tempmusiclist As New List(Of Music)
        Dim tempartistcleanlist As New ArrayList


        'for each sub folder, get all files it in, if they end in .mp3 .wav they are music, add those to the main music array
        Dim musicfilelist As New ArrayList
        musicfilelist = mymusicfilelist
        ''find each file
        'For Each musicdir As String In musiclist
        '    Dim musicfiles() As String = Directory.GetFiles(musicdir)
        '    For Each fileitem In musicfiles
        '        If checkmusicextension(fileitem) Then
        '            musicfilelist.Add(fileitem)
        '        End If
        '    Next
        'Next

        Dim curthecou As Integer = 0
        klNumMusic.Text = musicfilelist.Count.ToString
        Dim totcou As Integer = musicfilelist.Count
        If Not Directory.Exists(rconf.tempfolder + "musiccachedata/") Then Directory.CreateDirectory(rconf.tempfolder + "musiccachedata/")
        If Directory.Exists(rconf.tempfolder + "musicdata/") Then
            'clean out old cache info, removed in build 2810
            For Each curfile As String In Directory.GetFiles(rconf.tempfolder + "musicdata/")
                File.Delete(curfile)
            Next
        End If
        'setup the musiclist file
        Dim curmusiccachelist As New MusicCache
        If File.Exists(rconf.tempfolder + "musiccachedata/mymusicdata.nfo") Then
            Try
                curmusiccachelist.readxml(rconf.tempfolder + "musiccachedata/mymusicdata.nfo", curmusiccachelist)
            Catch ex As Exception
                MsgBox("Loading Music Cached Data Failed!" & vbNewLine & ex.ToString)
            End Try
        End If
        ' MsgBox("counter: " & curmusiccachelist.musiclist.Count.ToString)
        'setup the hash table
        Dim curmusichashcache As New Hashtable
        For Each curMus As Music In curmusiccachelist.musiclist
            Try
                curmusichashcache.Add(curMus.md5, curMus)
            Catch ex As Exception

            End Try
        Next
        Dim newcache As New MusicCache
        'Directory.CreateDirectory(rconf.tempfolder + "musicdata/")
        'read up each file and get it's id3 data and store those into the mainarray of music objects, add add the artist oject into the hashtable
        For Each musicfile As String In musicfilelist
            bwLoadMusic.ReportProgress(curthecou, "Scanning " + curthecou.ToString + " of " + totcou.ToString + ": " + getfilefrompath(musicfile))
            'get md5 hash of file
            Dim curhash As New crypto
            Dim curmd5 As String = curhash.GenerateHash(musicfile)
            'see if we already have data for this file
            Dim rescan As Boolean = False
            Dim curmusicitem As New Music
            curmusicitem.Filename = musicfile
            'Dim nfofilename As String = cleanimdbdata(musicfile) '+ ".nfo"
            ' Dim hashedname As String = nfofilename.GetHashCode.ToString
            curmusicitem.md5 = curmd5
            'Dim nfoloc As String = rconf.tempfolder + "musicdata/" + hashedname + ".nfo"
            'try to add hashtable based on hashstring, if that fails, it doesn't need to be scanned
            Try
                curmusichashcache.Add(curmusicitem.md5, curmusicitem)
                'curmusicitem = CType(curmusichashcache.Item(hashedname), Music)
                rescan = True
            Catch ex As Exception
                rescan = False
                'get data from hashtable for cur music file
                curmusicitem = CType(curmusichashcache.Item(curmd5), Music)
                'Debug.Print("Non-Crit Failure: failed to pull from hashtable based on hashstring")
            End Try
            'If File.Exists(nfoloc) Then
            '    'read the nfo and compare hash
            '    curmusicitem.readxml(nfoloc, curmusicitem)
            '    'compare hash, if it matches,don't rescan item
            '    If curmd5 = curmusicitem.md5 Then
            '        norescan = True
            '    End If
            'End If

            'if hash failed, rescan
            'use mediainfo to get data about the file
            If rescan Then
                Dim curmediainfo As New MediaInfo
                curmediainfo.getmusicdata(curmusicitem)
                curmusicitem.md5 = curmd5
                'add to hashtable (it's new or changed)
                'curmusicitem.writexml(nfoloc)
                'curmusichashcache.Add(curmusicitem.md5, curmusicitem)
            End If

            tempmusiclist.Add(curmusicitem)
            Dim tempartistobj As New musicartist
            Dim tempablum As New musicalbums
            tempablum.albumname = curmusicitem.Album
            tempartistobj.artistname = curmusicitem.Artist
            tempartistobj.albums.Add(tempablum)
            tempartistobj.path = getartistdirectory(curmusicitem.Filename)
            Try
                tempartistlist.Add(curmusicitem.Artist, tempartistobj)
            Catch ex As Exception
                'used to filter out duplicate artists
            End Try
            'Debug.Print(curthecou.ToString + " ---item---")
            newcache.musiclist.Add(curmusicitem)
            curthecou += 1
        Next

        newcache.writexml(rconf.tempfolder + "musiccachedata/mymusicdata.nfo")

        gvmusicobjects = tempmusiclist
        'we now have a list of(music) that contains all of our artists
        'loop through each artist and mod the artist object
        Dim curtempartistcou As Integer = 0
        'loop through each music object, add in the albums to the artists
        For Each musicobj As Music In tempmusiclist
            'get artist from hastable
            Dim tempartist As musicartist = CType(tempartistlist.Item(musicobj.Artist), musicartist)
            'If musicobj.Artist = tempartist.artistname Then
            'this music object is for this artist

            'create the default album if there isn't any albums
            If tempartist.albums.Count = 0 Then
                'create a new album since we don't have one 
                Dim tempalbum As New musicalbums
                tempalbum.albumname = "Unknown"
                tempartist.albums.Add(tempalbum)
            End If

            'see if the ablum already exists
            Dim havealbuminartistalready As Boolean = False
            For Each artistalbum As musicalbums In tempartist.albums
                If artistalbum.albumname = musicobj.Album Then havealbuminartistalready = True
            Next
            If Not havealbuminartistalready Then
                'if it's not there, add it
                If Not musicobj.Album = "" Then
                    'create the album based on it's name
                    Dim tempalbum As New musicalbums
                    tempalbum.albumname = musicobj.Album
                    tempartist.albums.Add(tempalbum)

                End If
            End If

            'now add the music to the album
            For Each artistalbum As musicalbums In tempartist.albums
                If artistalbum.albumname = musicobj.Album Then
                    artistalbum.path = getparentdirectory(musicobj.Filename)
                    artistalbum.music.Add(musicobj)
                End If
            Next
        Next

        mymusiccollection = tempartistlist
        Dim curcountallart As Integer = 0

    End Sub

    Private Sub bwLoadMusic_ProgressChanged(ByVal sender As Object, ByVal e As System.ComponentModel.ProgressChangedEventArgs) Handles bwLoadMusic.ProgressChanged
        prgThread.Value = e.ProgressPercentage
        lblPCWorking.Text = e.UserState.ToString
    End Sub

    Private Sub bwLoadMusic_RunWorkerCompleted(ByVal sender As Object, ByVal e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles bwLoadMusic.RunWorkerCompleted
        prgThread.Style = ProgressBarStyle.Blocks
        prgThread.Visible = False
        lblPCWorking.Text = ""
        lblPCWorking.Visible = False
        Dim dtcurrentartist As New DataTable
        dtcurrentartist.Columns.Add("Artist", GetType(System.String))
        dtcurrentartist.Columns.Add("dtuid", GetType(System.String))
        'dtcurrentartist.Columns.Add("Index")
        dtcurrentartist.Clear()

        'dtcurrentalbum.Clear()
        For Each de As DictionaryEntry In mymusiccollection
            mymusicbyartist.Add(de.Key)
            If Not de.Key.ToString = "" Then dtcurrentartist.LoadDataRow(New Object() {de.Key, de.Key}, True)
        Next de
        dtcurrentartist.DefaultView.Sort = "Artist"
        lbmusicArtist.ValueMember = "dtuid"
        lbmusicArtist.DisplayMember = "Artist"
        lbmusicArtist.DataSource = dtcurrentartist.DefaultView
        lbmusicArtist.SelectedIndex = -1
    End Sub


    Private Sub DoNotResizeTheImagesToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsmimovieDoNotResizeTheImagesToolStripMenuItem.Click
        If tsmimovieDoNotResizeTheImagesToolStripMenuItem.Checked Then
            tsmimovieDoNotResizeTheImagesToolStripMenuItem.Checked = False
        Else
            tsmimovieDoNotResizeTheImagesToolStripMenuItem.Checked = True
        End If

        'If DoNotResizeTheImagesToolStripMenuItem.Checked = False Then DoNotResizeTheImagesToolStripMenuItem.Checked = True
        rconf.pcbSkipTransparency = tsmimovieDoNotResizeTheImagesToolStripMenuItem.Checked
    End Sub

    Private Sub OpenConfigurationSettingsToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsmimovieOpenConfigurationSettingsToolStripMenuItem.Click
        dlgConfiguration.tcSettings.SelectedTab = dlgConfiguration.tpSettingsMovies
        dlgConfiguration.ShowDialog()
    End Sub

    Private Sub SetupAndConfigurationToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        dlgConfiguration.tcSettings.SelectedTab = dlgConfiguration.tpSettingsMusic
        dlgConfiguration.ShowDialog()
    End Sub

    Private Sub tvtbar_SetupAndConfigurationToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        dlgConfiguration.tcSettings.SelectedTab = dlgConfiguration.tpSettingsTvShows
        dlgConfiguration.ShowDialog()
    End Sub

    Private Sub movtbar_tsb_SetupAndConfigurationToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles movtbar_tsb_SetupAndConfigurationToolStripMenuItem1.Click
        dlgConfiguration.tcSettings.SelectedTab = dlgConfiguration.tpSettingsMusic
        dlgConfiguration.ShowDialog()
    End Sub

    Private Sub tsbTVShows_SetupAndConfigurationToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsbTVShows_SetupAndConfigurationToolStripMenuItem.Click
        dlgConfiguration.tcSettings.SelectedTab = dlgConfiguration.tpSettingsTvShows
        dlgConfiguration.ShowDialog()
    End Sub


    Private Sub ModifyAlbumDataToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsbMusicModifyAlbumDataToolStripMenuItem.Click
        If currentartist Is Nothing Or currentalbum Is Nothing Then Exit Sub
        dlgModifyCurrentAlbum.tbArtistName.Text = currentartist.artistname
        dlgModifyCurrentAlbum.tbAlbumName.Text = currentalbum.albumname
        dlgModifyCurrentAlbum.ShowDialog()
        If Not gvnewartistname = currentartist.artistname And Not gvnewalbumname = currentalbum.albumname Then
            injectmodifiedalbumdata()
        End If
    End Sub

    Private Sub ScanAllArtistsAndCheckForBackgroundslooksLocallyForBackgroundsToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ScanAllArtistsAndCheckForBackgroundslooksLocallyForBackgroundsToolStripMenuItem.Click
        scanforandcopylocalfanart()
    End Sub

#Region "Tagging Menu Events - Episode Tagging"
    Private Sub SDSDTSEStv_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles SDSDTSEStv.Click
        overlayleft("SD.png", "dtses.png")
    End Sub
    Private Sub SDSHDAudiotv_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles SDSHDAudiotv.Click
        overlayleft("SD.png", "hdaudio.png")
    End Sub
    Private Sub SDSDTStv_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles SDSDTStv.Click
        overlayleft("SD.png", "dts.png")
    End Sub
    Private Sub SDSDD51tv_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles SDSDD51tv.Click
        overlayleft("SD.png", "5.1.png")
    End Sub
    Private Sub SDSDD71tv_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles SDSDD71tv.Click
        overlayleft("SD.png", "7.1.png")
    End Sub
    Private Sub SDSmonotv_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles SDSmonotv.Click
        overlayleft("SD.png", "mono.png")
    End Sub
    Private Sub SDSSteriotv_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles SDSStereotv.Click
        overlayleft("SD.png", "stereo.png")
    End Sub


    '720p
    Private Sub hd720pSDTSEStv_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles hd720pSDTSEStv.Click
        overlayleft("720p.png", "dtses.png")
    End Sub
    Private Sub hd720pSHDAudiotv_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles hd720pSHDAudiotv.Click
        overlayleft("720p.png", "hdaudio.png")
    End Sub
    Private Sub hd720pSDTStv_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles hd720pSDTStv.Click
        overlayleft("720p.png", "dts.png")
    End Sub
    Private Sub hd720pSDD51tv_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles hd720pSDD51tv.Click
        overlayleft("720p.png", "5.1.png")
    End Sub
    Private Sub hd720pSDD71tv_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles hd720pSDD71tv.Click
        overlayleft("720p.png", "7.1.png")
    End Sub
    Private Sub hd720pSmonotv_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles hd720pSmonotv.Click
        overlayleft("720p.png", "mono.png")
    End Sub
    Private Sub hd720pSSteriotv_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles hd720pSStereotv.Click
        overlayleft("720p.png", "stereo.png")
    End Sub


    '1080i
    Private Sub hd1080iSDTSEStv_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles hd1080iSDTSEStv.Click
        overlayleft("1080i.png", "dtses.png")
    End Sub
    Private Sub hd1080iSHDAudiotv_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles hd1080iSHDAudiotv.Click
        overlayleft("1080i.png", "hdaudio.png")
    End Sub
    Private Sub hd1080iSDTStv_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles hd1080iSDTStv.Click
        overlayleft("1080i.png", "dts.png")
    End Sub
    Private Sub hd1080iSDD51tv_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles hd1080iSDD51tv.Click
        overlayleft("1080i.png", "5.1.png")
    End Sub
    Private Sub hd1080iSDD71tv_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles hd1080iSDD71tv.Click
        overlayleft("1080i.png", "7.1.png")
    End Sub
    Private Sub hd1080iSmonotv_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles hd1080iSmonotv.Click
        overlayleft("1080i.png", "mono.png")
    End Sub
    Private Sub hd1080iSSteriotv_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles hd1080iSStereotv.Click
        overlayleft("1080i.png", "stereo.png")
    End Sub


    '1080p
    Private Sub hd1080pSDTSEStv_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles hd1080pSDTSEStv.Click
        overlayleft("1080p.png", "dtses.png")
    End Sub
    Private Sub hd1080pSHDAudiotv_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles hd1080pSHDAudiotv.Click
        overlayleft("1080p.png", "hdaudio.png")
    End Sub
    Private Sub hd1080pSDTStv_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles hd1080pSDTStv.Click
        overlayleft("1080p.png", "dts.png")
    End Sub
    Private Sub hd1080pSDD51tv_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles hd1080pSDD51tv.Click
        overlayleft("1080p.png", "5.1.png")
    End Sub
    Private Sub hd1080pSDD71tv_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles hd1080pSDD71tv.Click
        overlayleft("1080p.png", "7.1.png")
    End Sub
    Private Sub hd1080pSmonotv_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles hd1080pSmonotv.Click
        overlayleft("1080p.png", "mono.png")
    End Sub
    Private Sub hd1080pSSteriotv_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles hd1080pSStereotv.Click
        overlayleft("1080p.png", "stereo.png")
    End Sub


    'bluray
    Private Sub hdbluraySDTSEStv_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles BluRaySDTSEStv.Click
        overlayleft("bluray.png", "dtses.png")
    End Sub
    Private Sub hdbluraySHDAudiotv_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles BluRaySHDAudiotv.Click
        overlayleft("bluray.png", "hdaudio.png")
    End Sub
    Private Sub hdbluraySDTStv_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles BluRaySDTStv.Click
        overlayleft("bluray.png", "dts.png")
    End Sub
    Private Sub hdbluraySDD51tv_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles BluRaySDD51tv.Click
        overlayleft("bluray.png", "5.1.png")
    End Sub
    Private Sub hdbluraySDD71tv_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles BluRaySDD71tv.Click
        overlayleft("bluray.png", "7.1.png")
    End Sub
    Private Sub hdbluraySmonotv_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles BluRaySmonotv.Click
        overlayleft("bluray.png", "mono.png")
    End Sub
    Private Sub hdbluraySSteriotv_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles BluRaySStereotv.Click
        overlayleft("bluray.png", "stereo.png")
    End Sub


    'xvid
    Private Sub xvidSDTStv_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles xvidSDTStv.Click
        overlayleft("xvid.png", "dts.png")
    End Sub
    Private Sub xvidSDD51tv_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles xvidSDD51tv.Click
        overlayleft("xvid.png", "5.1.png")
    End Sub
    Private Sub xvidSDD71tv_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles xvidSDD71tv.Click
        overlayleft("xvid.png", "7.1.png")
    End Sub
    Private Sub xvidSmonotv_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles xvidSmonotv.Click
        overlayleft("xvid.png", "mono.png")
    End Sub
    Private Sub xvidSSteriotv_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles xvidSStereotv.Click
        overlayleft("xvid.png", "stereo.png")
    End Sub
    Private Sub xvidSDTSEStv_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles xvidSDTSEStv.Click
        overlayleft("xvid.png", "dtses.png")
    End Sub
    Private Sub xvidSHDAudiotv_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles xvidSHDAudiotv.Click
        overlayleft("xvid.png", "hdaudio.png")
    End Sub

    'divx
    Private Sub divxSDTStv_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles divxSDTStv.Click
        overlayleft("divx.png", "dts.png")
    End Sub
    Private Sub divxSDTSEStv_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles divxSDTSEStv.Click
        overlayleft("divx.png", "dtses.png")
    End Sub
    Private Sub divxSDHDAudiotv_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles divxSHDAudiotv.Click
        overlayleft("divx.png", "hdaudio.png")
    End Sub
    Private Sub divxSDD51tv_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles divxSDD51tv.Click
        overlayleft("divx.png", "5.1.png")
    End Sub
    Private Sub divxSDD71tv_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles divxSDD71tv.Click
        overlayleft("divx.png", "7.1.png")
    End Sub
    Private Sub divxSmonotv_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles divxSmonotv.Click
        overlayleft("divx.png", "mono.png")
    End Sub
    Private Sub divxSSteriotv_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles divxSStereotv.Click
        overlayleft("divx.png", "stereo.png")
    End Sub


    'dvd
    Private Sub dvdSDTStv_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles dvdSDTStv.Click
        overlayleft("dvd.png", "dts.png")
    End Sub
    Private Sub dvdSDTSEStv_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles DVDSDTSEStv.Click
        overlayleft("dvd.png", "dtses.png")
    End Sub
    Private Sub dvdSHDAudiotv_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles DVDSHDAudiotv.Click
        overlayleft("dvd.png", "hdaudio.png")
    End Sub
    Private Sub dvdSDD51tv_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles dvdSDD51tv.Click
        overlayleft("dvd.png", "5.1.png")
    End Sub
    Private Sub dvdSDD71tv_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles dvdSDD71tv.Click
        overlayleft("dvd.png", "7.1.png")
    End Sub
    Private Sub dvdSmonotv_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles dvdSmonotv.Click
        overlayleft("dvd.png", "mono.png")
    End Sub
    Private Sub dvdSSteriotv_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles dvdSStereotv.Click
        overlayleft("dvd.png", "stereo.png")
    End Sub
#End Region


    Private Sub bshgRefreshMovieMediaInfo_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bshgRefreshMovieMediaInfo.Click
        If Not currentmovie Is Nothing Then
            getmoviemediainfo_bw()
        End If

    End Sub

    Private Sub rbmonitor_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles rbmonitor.CheckedChanged
        'asdf()
    End Sub

    Private Sub tsmiTVDebug_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsmiTVDebug.Click
        If tsmiTVDebug.Checked = True Then
            tsmiTVDebug.Checked = False
            tsmiTVDebug.Text = "Debug Mode Disabled"
        ElseIf tsmiTVDebug.Checked = False Then
            tsmiTVDebug.Checked = True
            tsmiTVDebug.Text = "Debug Mode Enabled"
        End If
        If tsmiTVDebug.Checked = True Then
            rconf.debugtvshows = True
        Else
            rconf.debugtvshows = False
        End If
    End Sub

    Private Sub tsbAddTVFanart_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsbAddTVFanart.Click
        'asdf()
        'If currentmovie.pimdbnumber = "" Then
        '    MsgBox("You must pick a movie first")
        '    Exit Sub
        'End If
        Dim curtvshowpath As String = lbTvShowPicker.SelectedValue.ToString
        'strip out the id from the path'
        Dim theid As String = Regex.Match(curtvshowpath, "(:\d*?:)").Groups(1).Value
        Dim thename As String = ""

        'curtvshowiconsetting
        curtvshowpath = Strings.Replace(curtvshowpath, theid, "")
        thename = cleanshownameforsearch(getfilefrompath(curtvshowpath))

        'if popup is set in rconf, then search for it on google
        If rconf.popgoogleimagesearch Then System.Diagnostics.Process.Start("http://images.google.com/images?&q=" + thename + "+""tv+show""")

        Dim currentshowid As String = Strings.Replace(theid, ":", "")
        Dim cmpath As String = "" 'intentionally not single line entry
        cmpath = curtvshowpath
        Dim imagelocationandname As String = ""
        imagelocationandname = addfiletofolder(cmpath, "fanart.jpg")
        Dim savefanartjpg As Boolean = True

        With opfd2
            .InitialDirectory = rconf.customimagesfanart
            '...
            If .ShowDialog = Windows.Forms.DialogResult.Cancel Then
                'MessageBox.Show("Canceling")
            Else
                Dim fileselectedforposter As String
                fileselectedforposter = opfd2.FileName
                If opfd2.FileName = "" Or opfd2.FileName = "Select your custom image or enter URL" Then Exit Sub
                If Not File.Exists(opfd2.FileName) Then Exit Sub

                'release all current image picture boxes and hide them all
                pbTVFanart.ImageLocation = Nothing
                pbTVFanart.Image = Nothing

                'copy the files to the custom images folder and the movie folder
                'if the custom image is coming from the custom images folder, do not try to copy it there
                'if the custom image already exsists in that folder, delete it first
                Try
                    If Not opfd2.FileName.ToLower = (rconf.customimagesfanart + currentshowid + "-fanart.jpg").ToLower Then
                        If File.Exists(rconf.customimagesfanart + currentshowid + "-fanart.jpg") Then
                            Try
                                File.SetAttributes(rconf.customimagesfanart + currentshowid + "-fanart.jpg", FileAttributes.Normal)
                            Catch exa As Exception
                                Debug.Print("unable to remove old attribute")
                            End Try
                            File.Delete(rconf.customimagesfanart + currentshowid + "-fanart.jpg")
                        End If
                        File.Copy(opfd2.FileName, rconf.customimagesfanart + currentshowid + "-fanart.jpg", overwrite:=True)
                        File.SetAttributes(rconf.customimagesfanart + currentshowid + "-fanart.jpg", FileAttributes.Normal)
                    End If
                Catch ex As Exception
                    MsgBox("Unable to copy the file from the custom folder, is it already open in another application or READ ONLY?" + vbNewLine + rconf.customimagesicons + currentmovie.pmoviename + "-fanart.jpg" + vbNewLine + vbNewLine + ex.ToString)
                    Exit Sub
                End Try

                Dim newfile As String = opfd2.FileName
                Dim curfile As String = imagelocationandname
               
                File.Copy(newfile, imagelocationandname, True)
                File.SetAttributes(imagelocationandname, FileAttributes.Normal)
            
                pbTVFanart.ImageLocation = curfile
                Try
                    pbTVFanart.Load()
                Catch ex As Exception

                End Try


            End If
        End With

        '

        


        ''old file attribute checks and file removal
        'If savefanartjpg Then
        '    If File.Exists(imagelocationandname) Then
        '        Try
        '            File.SetAttributes(imagelocationandname, FileAttributes.Normal)
        '        Catch exsa As Exception
        '            Debug.Print("unable to set attribute - fanart.jpg" + exsa.ToString)
        '        End Try
        '        Try
        '            File.Delete(imagelocationandname)
        '        Catch exfd As Exception

        '        End Try
        '    End If
        'End If


        ''saving the new files
        'Try
        '    Dim curloc As String = ""
        '    curloc = selectedicon.ImageLocation
        '    If curloc = "" Then
        '        curloc = selectedicon.AccessibleName
        '    End If
        '    If Not curloc = "" Then
        '        If savefanartjpg Then File.Copy(curloc, imagelocationandname, True)
        '        If savefanartjpg Then Debug.Print("saved: " + imagelocationandname)
        '    End If
        'Catch ex As Exception
        '    MessageBox.Show("Unable to save the tv show fanart, check permissions on the files in the tv show folder", "Saving fanart for tvshow failed", MessageBoxButtons.OK, MessageBoxIcon.Error)
        '    Exit Sub
        'End Try

        ''Dim fabackground As System.Drawing.Image
        ''fabackground = System.Drawing.Image.FromFile(curtvshowpath + "\fanart.jpg")
        ''tvMainRightMiddle.Panel1.StateCommon.Image = fabackground
        ''tvMainRightMiddle.Panel1.StateCommon.ImageStyle = CType(5, PaletteImageStyle)
        ''If savefanartjpg Then 'refresh all as start point may have shifted
        'pbTVFanart.ImageLocation = imagelocationandname
        'pbTVFanart.Visible = True
        'Try
        '    pbTVFanart.Load()
        'Catch ex As Exception

        'End Try


        '    'showfolderjpginmainwindow(cmpath, False)
        '    'showtbninmainwindow(cmpath, False)
        ''tcMain.SelectTab(1)
        '    'validatefoldercontents()
        '    Exit Sub
        'End If


    End Sub
    Private Sub ScanImages(ByVal folderPath As String)
        'Scan images
        Dim files() As String = Directory.GetFiles(folderPath)

        Dim tmpPath As String
        Dim tmpImage As Bitmap
        Dim btnImage As linkedimage

        Me.flpMoviesMI.SuspendLayout()
        Me.flpMoviesMI.Controls.Clear()

        Dim i As Integer

        For i = 0 To files.Length - 1

            tmpPath = files(i)

            If tmpPath.EndsWith("_thumb.jpg") Then 'OrElse tmpPath.EndsWith("jpg") OrElse tmpPath.EndsWith("bmp") OrElse tmpPath.EndsWith("png")) Then
                Try
                    tmpImage = CType(Image.FromFile(tmpPath), Bitmap) 'Me.CreateThumb(tmpPath)
                Catch
                    tmpImage = Nothing
                End Try

                If Not (tmpImage Is Nothing) Then

                    btnImage = New linkedimage()
                    btnImage.Width = tmpImage.Width
                    btnImage.Height = tmpImage.Height
                    btnImage.Image = tmpImage
                    btnImage.Tag = tmpPath
                    btnImage.Margin = New System.Windows.Forms.Padding(2)
                    Me.flpMoviesMI.Controls.Add(btnImage)
                End If
            End If
        Next
        flpMoviesMI.BackColor = Color.Transparent
        Me.flpMoviesMI.ResumeLayout()
    End Sub
    Private Sub displayAndLoadMIThumbs(ByVal folderPath As String, ByRef whichflp As FlowLayoutPanel)
        'Scan images
        If Not Directory.Exists(folderPath) Then
            'clear out the panel
            whichflp.SuspendLayout()
            For Each curlinki As linkedimage In whichflp.Controls
                curlinki.Image = Nothing
                curlinki.ImageLocation = Nothing
                curlinki.Dispose()
            Next
            whichflp.Controls.Clear()
            Exit Sub
        End If
        Dim files() As String = Directory.GetFiles(folderPath)


        ' Dim tmpImage As Bitmap
        Dim btnImage As linkedimage

        whichflp.SuspendLayout()
        For Each curlinki As linkedimage In whichflp.Controls
            curlinki.Image = Nothing
            curlinki.ImageLocation = Nothing
            curlinki.Dispose()
        Next
        whichflp.Controls.Clear()

        'Dim i As Integer
        'Dim imglist As New ArrayList
        'Dim imgLoc1 As String = addfiletofolder(folderPath, "front_thumb.jpg")
        'Dim imgLoc2 As String = addfiletofolder(folderPath, "back_thumb.jpg")
        'Dim imgLoc3 As String = addfiletofolder(folderPath, "cd1_thumb.jpg")
        'Dim imgLoc4 As String = addfiletofolder(folderPath, "cd2_thumb.jpg")
        'Dim imgLoc5 As String = addfiletofolder(folderPath, "cd3_thumb.jpg")
        'Dim imgLoc6 As String = addfiletofolder(folderPath, "cd4_thumb.jpg")
        'Dim imgLoc7 As String = addfiletofolder(folderPath, "inlay_thumb.jpg")
        'Dim imgLoc8 As String = addfiletofolder(folderPath, "inside_thumb.jpg")
        'If File.Exists(imgLoc1) Then imglist.Add(imgLoc1)
        'If File.Exists(imgLoc2) Then imglist.Add(imgLoc2)
        'If File.Exists(imgLoc3) Then imglist.Add(imgLoc3)
        'If File.Exists(imgLoc4) Then imglist.Add(imgLoc4)
        'If File.Exists(imgLoc5) Then imglist.Add(imgLoc5)
        'If File.Exists(imgLoc6) Then imglist.Add(imgLoc6)
        'If File.Exists(imgLoc7) Then imglist.Add(imgLoc7)
        'If File.Exists(imgLoc8) Then imglist.Add(imgLoc8)

        'create thumbs
        Dim backimg As Image
        Dim frontimg As Image
        Dim cd1img As Image
        Dim cd2img As Image
        Dim cd3img As Image
        Dim cd4img As Image
        Dim inlayimg As Image
        Dim insideimg As Image
        Dim currfolder As String = folderPath

        'create thumbs if they are not there already
        For Each curfile As String In Directory.GetFiles(currfolder)
            If curfile.Contains("_thumb") Then Continue For
            If curfile.Contains("_preview") Then Continue For
            If Strings.Right(curfile, 3) = "jpg" Or Strings.Right(curfile, 3) = "png" Then
                'make sure it's not 0k, if it is, try to remove that invalid file
                If getFileSizeExact(curfile) < 1 Then
                    Try
                        File.Delete(curfile)
                    Catch ex As Exception
                        Debug.Print(ex.ToString)
                    End Try
                    Continue For 'next item
                End If

                Dim thumbfile As String = Strings.Left(curfile, curfile.Length - 4) & "_thumb.jpg"
                If File.Exists(thumbfile) Then
                    If getFileSizeExact(thumbfile) < 1 Then
                        Try
                            File.Delete(thumbfile)
                        Catch exthumb As Exception
                            Debug.Print(exthumb.ToString)
                        End Try
                    End If
                End If

                If Not File.Exists(thumbfile) Then
                    Try
                        frontimg = System.Drawing.Image.FromFile(curfile) 'addfiletofolder(currfolder, "front.jpg"))
                        Dim curh, curw As Integer
                        curh = frontimg.Height
                        curw = frontimg.Width
                        Dim ar As Double = CDbl(curw / curh)
                        frontimg = frontimg.GetThumbnailImage(CInt(150 * ar), 150, Nothing, IntPtr.Zero)
                        frontimg.Save(thumbfile)
                        frontimg.Dispose()
                    Catch ex As Exception
                        MsgBox("Error during thumbnail generation for Media Image." + ex.ToString)
                        Try
                            If File.Exists(thumbfile) Then File.Delete(thumbfile)
                        Catch exFD As Exception

                        End Try

                    End Try
                    'addfiletofolder(currfolder, "front_thumb.jpg"))
                    'If Not (frontimg Is Nothing) Then
                    '    'With btnImage
                    '    btnImage = New linkedimage()
                    '    btnImage.Width = frontimg.Width ' + 20
                    '    btnImage.Height = frontimg.Height ' + 20
                    '    btnImage.Image = frontimg
                    '    AddHandler btnImage.Click, AddressOf HandleSomethingHappenedEvent 'pbmithumb_MouseUp
                    '    'AddHandler c.SomethingHappened, AddressOf                    HandleSomethingHappenedEvent()
                    '    btnImage.Tag = curfile 'addfiletofolder(currfolder, "front.jpg")
                    '    btnImage.Margin = New System.Windows.Forms.Padding(0)
                    '    whichflp.Controls.Add(btnImage)
                    'End If
                End If

            End If
        Next
        'display thumbs 
        For Each curfile As String In Directory.GetFiles(currfolder)
            If curfile.Contains("_thumb") Then Continue For
            If curfile.Contains("_preview") Then Continue For
            If Strings.Right(curfile, 3) = "jpg" Or Strings.Right(curfile, 3) = "png" Then
                Dim thumbfile As String = Strings.Left(curfile, curfile.Length - 4) & "_thumb.jpg"
                If File.Exists(thumbfile) Then
                    frontimg = System.Drawing.Image.FromFile(thumbfile) 'addfiletofolder(currfolder, "front.jpg"))
                    Dim curh, curw As Integer
                    curh = frontimg.Height
                    curw = frontimg.Width
                    frontimg.Dispose()

                    'Dim ar As Double = CDbl(curw / curh)
                    'frontimg = frontimg.GetThumbnailImage(CInt(150 * ar), 150, Nothing, IntPtr.Zero)
                    'frontimg.Save(thumbfile) 'addfiletofolder(currfolder, "front_thumb.jpg"))
                    'If Not (frontimg Is Nothing) Then
                    'With btnImage
                    btnImage = New linkedimage()
                    btnImage.Width = curw 'frontimg.Width ' + 20
                    btnImage.Height = curh 'frontimg.Height ' + 20
                    btnImage.ImageLocation = thumbfile 'frontimg
                    btnImage.Load()
                    AddHandler btnImage.Click, AddressOf HandleSomethingHappenedEvent 'pbmithumb_MouseUp
                    'AddHandler c.SomethingHappened, AddressOf                    HandleSomethingHappenedEvent()
                    btnImage.Tag = curfile 'addfiletofolder(currfolder, "front.jpg")
                    btnImage.Margin = New System.Windows.Forms.Padding(0)
                    whichflp.Controls.Add(btnImage)
                    'End If
                End If

            End If
        Next
        'display thumbs
        whichflp.ResumeLayout()
        Exit Sub
    End Sub
#Region "junk"


    '    Try


    '        If File.Exists(addfiletofolder(currfolder, "front.jpg")) Then 'And Not File.Exists(addfiletofolder(currfolder, "front_thumb.jpg")) Then
    '            frontimg = System.Drawing.Image.FromFile(addfiletofolder(currfolder, "front.jpg"))
    'Dim curh, curw As Integer
    '            curh = frontimg.Height
    '            curw = frontimg.Width
    'Dim ar As Double = CDbl(curw / curh)
    '            frontimg = frontimg.GetThumbnailImage(CInt(150 * ar), 150, Nothing, IntPtr.Zero)
    ''frontimg.Save(addfiletofolder(currfolder, "front_thumb.jpg"))
    '            If Not (frontimg Is Nothing) Then
    '                btnImage = New linkedimage()
    '                btnImage.Width = frontimg.Width ' + 20
    '                btnImage.Height = frontimg.Height ' + 20
    '                btnImage.Image = frontimg
    '                btnImage.Tag = addfiletofolder(currfolder, "front.jpg")
    '                btnImage.Margin = New System.Windows.Forms.Padding(0)
    '                whichflp.Controls.Add(btnImage)
    '            End If
    '        End If


    '        If File.Exists(addfiletofolder(currfolder, "back.jpg")) Then ' And Not File.Exists(addfiletofolder(currfolder, "back_thumb.jpg")) Then
    '            backimg = System.Drawing.Image.FromFile(addfiletofolder(currfolder, "back.jpg"))
    'Dim curh, curw As Integer
    '            curh = backimg.Height
    '            curw = backimg.Width
    'Dim ar As Double = CDbl(curw / curh)
    '            backimg = backimg.GetThumbnailImage(CInt(150 * ar), 150, Nothing, IntPtr.Zero)
    '            If Not (backimg Is Nothing) Then
    '                btnImage = New linkedimage()
    '                btnImage.Width = backimg.Width
    '                btnImage.Height = backimg.Height
    '                btnImage.Image = backimg
    '                btnImage.Tag = addfiletofolder(currfolder, "back.jpg")
    '                btnImage.Margin = New System.Windows.Forms.Padding(2)
    '                whichflp.Controls.Add(btnImage)
    '            End If
    ''backimg.Save(addfiletofolder(currfolder, "back_thumb.jpg"))
    '        End If



    '        If File.Exists(addfiletofolder(currfolder, "cd1.jpg")) Then 'And Not File.Exists(addfiletofolder(currfolder, "cd1_thumb.jpg")) Then
    '            cd1img = System.Drawing.Image.FromFile(addfiletofolder(currfolder, "cd1.jpg"))
    'Dim curh, curw As Integer
    '            curh = cd1img.Height
    '            curw = cd1img.Width
    'Dim ar As Double = CDbl(curw / curh)
    '            cd1img = cd1img.GetThumbnailImage(CInt(150 * ar), 150, Nothing, IntPtr.Zero)
    ''cd1img.Save(addfiletofolder(currfolder, "cd1_thumb.jpg"))
    '            If Not (cd1img Is Nothing) Then
    '                btnImage = New linkedimage()
    '                btnImage.Width = cd1img.Width
    '                btnImage.Height = cd1img.Height
    '                btnImage.Image = cd1img
    '                btnImage.Tag = addfiletofolder(currfolder, "cd1.jpg")
    '                btnImage.Margin = New System.Windows.Forms.Padding(2, 0, 0, 0)
    '                whichflp.Controls.Add(btnImage)
    '            End If
    '        End If

    '        If File.Exists(addfiletofolder(currfolder, "cd2.jpg")) Then 'And Not File.Exists(addfiletofolder(currfolder, "cd2_thumb.jpg")) Then
    '            cd2img = System.Drawing.Image.FromFile(addfiletofolder(currfolder, "cd2.jpg"))
    'Dim curh, curw As Integer
    '            curh = cd2img.Height
    '            curw = cd2img.Width
    'Dim ar As Double = CDbl(curw / curh)
    '            cd2img = cd2img.GetThumbnailImage(CInt(150 * ar), 150, Nothing, IntPtr.Zero)
    ''cd2img.Save(addfiletofolder(currfolder, "cd2_thumb.jpg"))
    '            If Not (cd2img Is Nothing) Then
    '                btnImage = New linkedimage()
    '                btnImage.Width = cd2img.Width
    '                btnImage.Height = cd2img.Height
    '                btnImage.Image = cd2img
    '                btnImage.Tag = addfiletofolder(currfolder, "cd2.jpg")
    '                btnImage.Margin = New System.Windows.Forms.Padding(2, 0, 0, 0)
    '                whichflp.Controls.Add(btnImage)
    '            End If
    '        End If

    '        If File.Exists(addfiletofolder(currfolder, "cd3.jpg")) Then 'And Not File.Exists(addfiletofolder(currfolder, "cd3_thumb.jpg")) Then
    '            cd3img = System.Drawing.Image.FromFile(addfiletofolder(currfolder, "cd3.jpg"))
    'Dim curh, curw As Integer
    '            curh = cd3img.Height
    '            curw = cd3img.Width
    'Dim ar As Double = CDbl(curw / curh)
    '            cd3img = cd3img.GetThumbnailImage(CInt(150 * ar), 150, Nothing, IntPtr.Zero)
    ''cd3img.Save(addfiletofolder(currfolder, "cd3_thumb.jpg"))
    '            If Not (cd3img Is Nothing) Then
    '                btnImage = New linkedimage()
    '                btnImage.Width = cd3img.Width
    '                btnImage.Height = cd3img.Height
    '                btnImage.Image = cd3img
    '                btnImage.Tag = addfiletofolder(currfolder, "cd3.jpg")
    '                btnImage.Margin = New System.Windows.Forms.Padding(2, 0, 0, 0)
    '                whichflp.Controls.Add(btnImage)
    '            End If
    '        End If
    '        If File.Exists(addfiletofolder(currfolder, "cd4.jpg")) Then 'And Not File.Exists(addfiletofolder(currfolder, "cd4_thumb.jpg")) Then
    '            cd4img = System.Drawing.Image.FromFile(addfiletofolder(currfolder, "cd4.jpg"))
    'Dim curh, curw As Integer
    '            curh = cd4img.Height
    '            curw = cd4img.Width
    'Dim ar As Double = CDbl(curw / curh)
    '            cd4img = cd4img.GetThumbnailImage(CInt(150 * ar), 150, Nothing, IntPtr.Zero)
    ''cd4img.Save(addfiletofolder(currfolder, "cd4_thumb.jpg"))
    '            If Not (cd4img Is Nothing) Then
    '                btnImage = New linkedimage()
    '                btnImage.Width = cd4img.Width
    '                btnImage.Height = cd4img.Height
    '                btnImage.Image = cd4img
    '                btnImage.Tag = addfiletofolder(currfolder, "cd4.jpg")
    '                btnImage.Margin = New System.Windows.Forms.Padding(2, 0, 0, 0)
    '                whichflp.Controls.Add(btnImage)
    '            End If
    '        End If
    '        If File.Exists(addfiletofolder(currfolder, "inlay.jpg")) Then 'And Not File.Exists(addfiletofolder(currfolder, "inlay_thumb.jpg")) Then
    '            inlayimg = System.Drawing.Image.FromFile(addfiletofolder(currfolder, "inlay.jpg"))
    'Dim curh, curw As Integer
    '            curh = inlayimg.Height
    '            curw = inlayimg.Width
    'Dim ar As Double = CDbl(curw / curh)
    '            inlayimg = inlayimg.GetThumbnailImage(CInt(150 * ar), 150, Nothing, IntPtr.Zero)
    ''inlayimg.Save(addfiletofolder(currfolder, "inlay_thumb.jpg"))
    '            If Not (inlayimg Is Nothing) Then
    '                btnImage = New linkedimage()
    '                btnImage.Width = inlayimg.Width
    '                btnImage.Height = inlayimg.Height
    '                btnImage.Image = inlayimg
    '                btnImage.Tag = addfiletofolder(currfolder, "inlay.jpg")
    '                btnImage.Margin = New System.Windows.Forms.Padding(2, 0, 0, 0)
    '                whichflp.Controls.Add(btnImage)
    '            End If
    '        End If
    '        If File.Exists(addfiletofolder(currfolder, "inside.jpg")) Then 'And Not File.Exists(addfiletofolder(currfolder, "inside_thumb.jpg")) Then
    '            insideimg = System.Drawing.Image.FromFile(addfiletofolder(currfolder, "inside.jpg"))
    'Dim curh, curw As Integer
    '            curh = insideimg.Height
    '            curw = insideimg.Width
    'Dim ar As Double = CDbl(curw / curh)
    '            insideimg = insideimg.GetThumbnailImage(CInt(150 * ar), 150, Nothing, IntPtr.Zero)
    ''insideimg.Save(addfiletofolder(currfolder, "inside_thumb.jpg"))
    '            If Not (insideimg Is Nothing) Then
    '                btnImage = New linkedimage()
    '                btnImage.Width = insideimg.Width
    '                btnImage.Height = insideimg.Height
    '                btnImage.Image = insideimg
    '                btnImage.Tag = addfiletofolder(currfolder, "inside.jpg")
    '                btnImage.Margin = New System.Windows.Forms.Padding(2, 0, 0, 0)
    '                whichflp.Controls.Add(btnImage)
    '            End If
    '        End If

    ''For Each tmpPath As String In imglist ' i = 0 To 7 'files.Length - 1
    ''    'tmpPath = files(i)
    ''    'If tmpPath.EndsWith("_thumb.jpg") Then 'OrElse tmpPath.EndsWith("jpg") OrElse tmpPath.EndsWith("bmp") OrElse tmpPath.EndsWith("png")) Then
    ''    Try
    ''        tmpImage = CType(Image.FromFile(tmpPath), Bitmap) 'Me.CreateThumb(tmpPath)
    ''    Catch
    ''        tmpImage = Nothing
    ''    End Try

    ''    If Not (tmpImage Is Nothing) Then
    ''        btnImage = New linkedimage()
    ''        btnImage.Width = tmpImage.Width
    ''        btnImage.Height = tmpImage.Height
    ''        btnImage.Image = tmpImage
    ''        btnImage.Tag = tmpPath
    ''        btnImage.Margin = New System.Windows.Forms.Padding(2)
    ''        whichflp.Controls.Add(btnImage)
    ''        'tmpImage.Dispose()
    ''    End If
    ''    'End If
    ''Next
    ''whichflp.BackColor = Color.Transparent
    '    Catch ex As Exception

    '    End Try
    '    whichflp.ResumeLayout()

    ''If Not backimg Is Nothing Then backimg.Dispose() ' As Image
    ''If Not frontimg Is Nothing Then frontimg.Dispose() ' As Image
    ''If Not cd1img Is Nothing Then cd1img.Dispose() ' As Image
    ''If Not cd2img Is Nothing Then cd2img.Dispose() ' As Image
    ''If Not cd3img Is Nothing Then cd3img.Dispose() ' As Image
    ''If Not cd4img Is Nothing Then cd4img.Dispose() ' As Image
    ''If Not inlayimg Is Nothing Then inlayimg.Dispose() ' As Image
    ''If Not insideimg Is Nothing Then insideimg.Dispose() ' As Image
    'End Sub
#End Region

    Private Sub HandleSomethingHappenedEvent(ByVal sender As Object, ByVal ByVale As EventArgs)
        'Cast the sender as your user control type
        Dim pb As PictureBox = DirectCast(sender, PictureBox)
        Try
            dlgPreviewPrintMediaImage.pbMainImage.ImageLocation = pb.Tag.ToString
            dlgPreviewPrintMediaImage.pbMainImage.Load()
            dlgPreviewPrintMediaImage.ShowDialog()
        Catch ex As Exception
            MsgBox("Error: I could not load the full sized image.")
        End Try

        'Now access the string property
        ' Dim s As String = mycontrol.TheInformation
        'Dim flocal As String = pb.Tag.ToString
        'And if you need the Name property, you can access it
        'MsgBox("Image is located at " & flocal & vbNewLine & "TODO: Add in the preview this image option on this event call")

    End Sub
    'Private Sub pbmithumb_MouseUp(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles btnImage.MouseUp
    '    Dim pb As PictureBox = DirectCast(sender, PictureBox)
    '    'MessageBox.Show(pb.ImageLocation)
    '    Dim flocal As String = pb.Tag.ToString
    '    Try
    '        MsgBox(flocal)
    '    Catch ex As Exception
    '        MsgBox(ErrorToString)
    '    End Try

    'End Sub
    Private Sub populatemediaimagethumbs(ByRef currfolder As String, ByRef vwhichflp As FlowLayoutPanel, ByVal recreatethumb As Boolean, ByVal whichthumb As String)
        vwhichflp.SuspendLayout()
        vwhichflp.Controls.Clear()
        For Each curcont As linkedimage In vwhichflp.Controls
            curcont.Dispose()
        Next
        ' vwhichflp.Dispose()
        vwhichflp.ResumeLayout()

        'pbMovieBack.ImageLocation = Nothing
        'pbMovieBack.Image = Nothing
        'pbMovieDisc1.ImageLocation = Nothing
        'pbMovieDisc1.Image = Nothing
        'pbMovieDisc2.ImageLocation = Nothing
        'pbMovieDisc2.Image = Nothing
        'pbMovieDisc3.ImageLocation = Nothing
        'pbMovieDisc3.Image = Nothing
        'pbMovieDisc4.ImageLocation = Nothing
        'pbMovieDisc4.Image = Nothing
        'pbMovieInlay.ImageLocation = Nothing
        'pbMovieInlay.Image = Nothing
        'pbMovieInside.ImageLocation = Nothing
        'pbMovieInside.Image = Nothing
        'pbMovieFront.ImageLocation = Nothing
        'pbMovieFront.Image = Nothing
        'If currentmovie.pfilemode Then Exit Sub

        'need to code in the file level items, current code is folder level only

        'Dim currfolder As String = addfiletofolder(currentmovie.getmoviepath, "extras")
        If Not Directory.Exists(currfolder) Then Exit Sub 'nothing to do, there's no directory to parse

        If recreatethumb Then
            whichthumb = Strings.Replace(whichthumb, ".jpg", "")
            If Not whichthumb = "all" Then
                File.Delete(addfiletofolder(currfolder, whichthumb + "_thumb.jpg"))
            Else
                'need to check for file level items
                Dim allthumbs() As String = Directory.GetFiles(currfolder)
                For Each curthumb As String In allthumbs
                    If curthumb.Contains("_thumb.jpg") Then
                        Try
                            File.Delete(curthumb)
                        Catch ex As Exception

                        End Try
                    End If
                Next
            End If
        End If


        ''create thumbs if needed
        'If File.Exists(addfiletofolder(currfolder, "back.jpg")) And Not File.Exists(addfiletofolder(currfolder, "back_thumb.jpg")) Then
        '    Dim backimg As Image = System.Drawing.Image.FromFile(addfiletofolder(currfolder, "back.jpg"))
        '    backimg = backimg.GetThumbnailImage(160, 122, Nothing, IntPtr.Zero)
        '    backimg.Save(addfiletofolder(currfolder, "back_thumb.jpg"))
        'End If

        'If File.Exists(addfiletofolder(currfolder, "front.jpg")) And Not File.Exists(addfiletofolder(currfolder, "front_thumb.jpg")) Then
        '    Dim frontimg As Image = System.Drawing.Image.FromFile(addfiletofolder(currfolder, "front.jpg"))
        '    frontimg = frontimg.GetThumbnailImage(181, 122, Nothing, IntPtr.Zero)
        '    frontimg.Save(addfiletofolder(currfolder, "front_thumb.jpg"))
        'End If

        'If File.Exists(addfiletofolder(currfolder, "cd1.jpg")) And Not File.Exists(addfiletofolder(currfolder, "cd1_thumb.jpg")) Then
        '    Dim cd1img As Image = System.Drawing.Image.FromFile(addfiletofolder(currfolder, "cd1.jpg"))
        '    cd1img = cd1img.GetThumbnailImage(122, 122, Nothing, IntPtr.Zero)
        '    cd1img.Save(addfiletofolder(currfolder, "cd1_thumb.jpg"))
        'End If

        'If File.Exists(addfiletofolder(currfolder, "cd2.jpg")) And Not File.Exists(addfiletofolder(currfolder, "cd2_thumb.jpg")) Then
        '    Dim cd2img As Image = System.Drawing.Image.FromFile(addfiletofolder(currfolder, "cd2.jpg"))
        '    cd2img = cd2img.GetThumbnailImage(122, 122, Nothing, IntPtr.Zero)
        '    cd2img.Save(addfiletofolder(currfolder, "cd2_thumb.jpg"))
        'End If

        'If File.Exists(addfiletofolder(currfolder, "cd3.jpg")) And Not File.Exists(addfiletofolder(currfolder, "cd3_thumb.jpg")) Then
        '    Dim cd3img As Image = System.Drawing.Image.FromFile(addfiletofolder(currfolder, "cd3.jpg"))
        '    cd3img = cd3img.GetThumbnailImage(122, 122, Nothing, IntPtr.Zero)
        '    cd3img.Save(addfiletofolder(currfolder, "cd3_thumb.jpg"))
        'End If
        'If File.Exists(addfiletofolder(currfolder, "cd4.jpg")) And Not File.Exists(addfiletofolder(currfolder, "cd4_thumb.jpg")) Then
        '    Dim cd4img As Image = System.Drawing.Image.FromFile(addfiletofolder(currfolder, "cd4.jpg"))
        '    cd4img = cd4img.GetThumbnailImage(122, 122, Nothing, IntPtr.Zero)
        '    cd4img.Save(addfiletofolder(currfolder, "cd4_thumb.jpg"))
        'End If
        'If File.Exists(addfiletofolder(currfolder, "inlay.jpg")) And Not File.Exists(addfiletofolder(currfolder, "inlay_thumb.jpg")) Then
        '    Dim inlayimg As Image = System.Drawing.Image.FromFile(addfiletofolder(currfolder, "inlay.jpg"))
        '    inlayimg = inlayimg.GetThumbnailImage(90, 122, Nothing, IntPtr.Zero)
        '    inlayimg.Save(addfiletofolder(currfolder, "inlay_thumb.jpg"))
        'End If
        'If File.Exists(addfiletofolder(currfolder, "inside.jpg")) And Not File.Exists(addfiletofolder(currfolder, "inside_thumb.jpg")) Then
        '    Dim insideimg As Image = System.Drawing.Image.FromFile(addfiletofolder(currfolder, "inside.jpg"))
        '    insideimg = insideimg.GetThumbnailImage(90, 122, Nothing, IntPtr.Zero)
        '    insideimg.Save(addfiletofolder(currfolder, "inside_thumb.jpg"))
        'End If

        'If File.Exists(addfiletofolder(currfolder, "front_thumb.jpg")) Then
        '    pbMovieFront.ImageLocation = addfiletofolder(currfolder, "front_thumb.jpg")
        'End If
        'If File.Exists(addfiletofolder(currfolder, "back_thumb.jpg")) Then
        '    pbMovieBack.ImageLocation = addfiletofolder(currfolder, "back_thumb.jpg")
        'End If
        'If File.Exists(addfiletofolder(currfolder, "cd1_thumb.jpg")) Then
        '    pbMovieDisc1.ImageLocation = addfiletofolder(currfolder, "cd1_thumb.jpg")
        'End If
        'If File.Exists(addfiletofolder(currfolder, "cd2_thumb.jpg")) Then
        '    pbMovieDisc2.ImageLocation = addfiletofolder(currfolder, "cd2_thumb.jpg")
        'End If
        'If File.Exists(addfiletofolder(currfolder, "cd3_thumb.jpg")) Then
        '    pbMovieDisc3.ImageLocation = addfiletofolder(currfolder, "cd3_thumb.jpg")
        'End If
        'If File.Exists(addfiletofolder(currfolder, "cd4_thumb.jpg")) Then
        '    pbMovieDisc4.ImageLocation = addfiletofolder(currfolder, "cd4_thumb.jpg")
        'End If
        'If File.Exists(addfiletofolder(currfolder, "inlay_thumb.jpg")) Then
        '    pbMovieInlay.ImageLocation = addfiletofolder(currfolder, "inlay_thumb.jpg")
        'End If
        'If File.Exists(addfiletofolder(currfolder, "inside_thumb.jpg")) Then
        '    pbMovieInside.ImageLocation = addfiletofolder(currfolder, "inside_thumb.jpg")
        'End If

        'If Not pbMovieBack.ImageLocation = Nothing Then pbMovieBack.Load()
        'If Not pbMovieFront.ImageLocation = Nothing Then pbMovieFront.Load()
        'If Not pbMovieDisc1.ImageLocation = Nothing Then pbMovieDisc1.Load()
        'If Not pbMovieDisc2.ImageLocation = Nothing Then pbMovieDisc2.Load()
        'If Not pbMovieDisc3.ImageLocation = Nothing Then pbMovieDisc3.Load()
        'If Not pbMovieDisc4.ImageLocation = Nothing Then pbMovieDisc4.Load()
        'If Not pbMovieFront.ImageLocation = Nothing Then pbMovieFront.Load()
        'If Not pbMovieInlay.ImageLocation = Nothing Then pbMovieInlay.Load()
        'If Not pbMovieInside.ImageLocation = Nothing Then pbMovieInside.Load()
        displayAndLoadMIThumbs(currfolder, vwhichflp)
        'ScanImages(currfolder)
    End Sub


    Private Sub pbFront1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbFront1.Click
        savecMIF(pbFront1)
    End Sub
    Private Sub pbFront2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbFront2.Click
        savecMIF(pbFront2)
    End Sub
    Private Sub pbFront3_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbFront3.Click
        savecMIF(pbFront3)
    End Sub
    Private Sub pbFront4_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbFront4.Click
        savecMIF(pbFront4)
    End Sub
    Private Sub pbFront5_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbFront5.Click
        savecMIF(pbFront5)
    End Sub
    Private Sub pbFront6_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbFront6.Click
        savecMIF(pbFront6)
    End Sub
    Private Sub pbFront7_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbFront7.Click
        savecMIF(pbFront7)
    End Sub
    Private Sub pbFront8_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbFront8.Click
        savecMIF(pbFront8)
    End Sub
    Private Sub pbFront9_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbFront9.Click
        savecMIF(pbFront9)
    End Sub
    Private Sub pbFront10_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbFront10.Click
        savecMIF(pbFront10)
    End Sub
    Private Sub pbBack1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbBack1.Click
        savecMIB(pbBack1)
    End Sub
    Private Sub pbBack2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbBack2.Click
        savecMIB(pbBack2)
    End Sub
    Private Sub pbBack3_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbBack3.Click
        savecMIB(pbBack3)
    End Sub
    Private Sub pbBack4_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbBack4.Click
        savecMIB(pbBack4)
    End Sub
    Private Sub pbBack5_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbBack5.Click
        savecMIB(pbBack5)
    End Sub
    Private Sub pbBack6_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbBack6.Click
        savecMIB(pbBack6)
    End Sub
    Private Sub pbBack7_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbBack7.Click
        savecMIB(pbBack7)
    End Sub
    Private Sub pbBack8_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbBack8.Click
        savecMIB(pbBack8)
    End Sub
    Private Sub pbBack9_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbBack9.Click
        savecMIB(pbBack9)
    End Sub
    Private Sub pbCdi1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbcdi1.Click
        savecMICD(pbcdi1)
    End Sub
    Private Sub pbCdi2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbcdi2.Click
        savecMICD(pbcdi2)
    End Sub
    Private Sub pbCdi3_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbcdi3.Click
        savecMICD(pbcdi3)
    End Sub
    Private Sub pbCdi4_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbcdi4.Click
        savecMICD(pbcdi4)
    End Sub
    Private Sub pbCdi5_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbcdi5.Click
        savecMICD(pbcdi5)
    End Sub
    Private Sub pbCdi6_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbcdi6.Click
        savecMICD(pbcdi6)
    End Sub
    Private Sub pbCdi7_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbcdi7.Click
        savecMICD(pbcdi7)
    End Sub
    Private Sub pbCdi8_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbcdi8.Click
        savecMICD(pbcdi8)
    End Sub
    Private Sub pbCdi9_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbcdi9.Click
        savecMICD(pbcdi9)
    End Sub
    Private Sub pbCd2i1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbcd2i1.Click
        savecMICD2(pbcd2i1)
    End Sub
    Private Sub pbCd2i2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbcd2i2.Click
        savecMICD2(pbcd2i2)
    End Sub
    Private Sub pbCd2i3_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbcd2i3.Click
        savecMICD2(pbcd2i3)
    End Sub
    Private Sub pbCd2i4_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbcd2i4.Click
        savecMICD2(pbcd2i4)
    End Sub
    Private Sub pbCd2i5_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbcd2i5.Click
        savecMICD2(pbcd2i5)
    End Sub
    Private Sub pbCd2i6_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbcd2i6.Click
        savecMICD2(pbcd2i6)
    End Sub
    Private Sub pbCd2i7_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbcd2i7.Click
        savecMICD2(pbcd2i7)
    End Sub
    Private Sub pbCd2i8_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbcd2i8.Click
        savecMICD2(pbcd2i8)
    End Sub
    Private Sub pbCd2i9_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbcd2i9.Click
        savecMICD2(pbcd2i9)
    End Sub
    Private Sub pbCd3i1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbcd3i1.Click
        savecMICD3(pbcd3i1)
    End Sub
    Private Sub pbCd3i2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbcd3i2.Click
        savecMICD3(pbcd3i2)
    End Sub
    Private Sub pbCd3i3_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbcd3i3.Click
        savecMICD3(pbcd3i3)
    End Sub
    Private Sub pbCd3i4_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbcd3i4.Click
        savecMICD3(pbcd3i4)
    End Sub
    Private Sub pbCd3i5_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbcd3i5.Click
        savecMICD3(pbcd3i5)
    End Sub
    Private Sub pbCd3i6_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbcd3i6.Click
        savecMICD3(pbcd3i6)
    End Sub
    Private Sub pbCd3i7_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbcd3i7.Click
        savecMICD3(pbcd3i7)
    End Sub
    Private Sub pbCd3i8_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbcd3i8.Click
        savecMICD3(pbcd3i8)
    End Sub
    Private Sub pbCd3i9_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbcd3i9.Click
        savecMICD3(pbcd3i9)
    End Sub
    Private Sub pbCd4i1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbcd4i1.Click
        savecMICD4(pbcd4i1)
    End Sub
    Private Sub pbCd4i2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbcd4i2.Click
        savecMICD4(pbcd4i2)
    End Sub
    Private Sub pbCd4i3_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbcd4i3.Click
        savecMICD4(pbcd4i3)
    End Sub
    Private Sub pbCd4i4_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbcd4i4.Click
        savecMICD4(pbcd4i4)
    End Sub
    Private Sub pbCd4i5_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbcd4i5.Click
        savecMICD4(pbcd4i5)
    End Sub
    Private Sub pbCd4i6_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbcd4i6.Click
        savecMICD4(pbcd4i6)
    End Sub
    Private Sub pbCd4i7_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbcd4i7.Click
        savecMICD4(pbcd4i7)
    End Sub
    Private Sub pbCd4i8_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbcd4i8.Click
        savecMICD4(pbcd4i8)
    End Sub
    Private Sub pbCd4i9_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbcd4i9.Click
        savecMICD4(pbcd4i9)
    End Sub
    Private Sub pbInsert1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbInsert1.Click
        savecMIInsert(pbInsert1)
    End Sub
    Private Sub pbInsert2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbInsert2.Click
        savecMIInsert(pbInsert2)
    End Sub
    Private Sub pbInsert3_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbInsert3.Click
        savecMIInsert(pbInsert3)
    End Sub
    Private Sub pbInsert4_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbInsert4.Click
        savecMIInsert(pbInsert4)
    End Sub
    Private Sub pbInsert5_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbInsert5.Click
        savecMIInsert(pbInsert5)
    End Sub
    Private Sub pbInsert6_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbInsert6.Click
        savecMIInsert(pbInsert6)
    End Sub
    Private Sub pbInsert7_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbInsert7.Click
        savecMIInsert(pbInsert7)
    End Sub
    Private Sub pbInsert8_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbInsert8.Click
        savecMIInsert(pbInsert8)
    End Sub
    Private Sub pbInsert9_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbInsert9.Click
        savecMIInsert(pbInsert9)
    End Sub
    Private Sub pbInlay1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbInlay1.Click
        savecMIInlay(pbInlay1)
    End Sub
    Private Sub pbInlay2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbInlay2.Click
        savecMIInlay(pbInlay2)
    End Sub
    Private Sub pbInlay3_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbInlay3.Click
        savecMIInlay(pbInlay3)
    End Sub
    Private Sub pbInlay4_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbInlay4.Click
        savecMIInlay(pbInlay4)
    End Sub
    Private Sub pbInlay5_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbInlay5.Click
        savecMIInlay(pbInlay5)
    End Sub
    Private Sub pbInlay6_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbInlay6.Click
        savecMIInlay(pbInlay6)
    End Sub
    Private Sub pbInlay7_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbInlay7.Click
        savecMIInlay(pbInlay7)
    End Sub
    Private Sub pbInlay8_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbInlay8.Click
        savecMIInlay(pbInlay8)
    End Sub
    Private Sub pbInlay9_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pbInlay9.Click
        savecMIInlay(pbInlay9)
    End Sub

    Private Sub savecMIInlay(ByRef currentpb As PictureBox)
        saveMI("inlay.jpg", currentpb)
    End Sub
    Private Sub savecMIInsert(ByRef currentpb As PictureBox)
        saveMI("inside.jpg", currentpb)
    End Sub
    Private Sub savecMIF(ByRef currentpb As PictureBox)
        saveMI("front.jpg", currentpb)
    End Sub
    Private Sub savecMIB(ByRef currentpb As PictureBox)
        saveMI("back.jpg", currentpb)
    End Sub
    Private Sub savecMICD(ByRef currentpb As PictureBox)
        saveMI("cd1.jpg", currentpb)
    End Sub
    Private Sub savecMICD2(ByRef currentpb As PictureBox)
        saveMI("cd2.jpg", currentpb)
    End Sub
    Private Sub savecMICD3(ByRef currentpb As PictureBox)
        saveMI("cd3.jpg", currentpb)
    End Sub
    Private Sub savecMICD4(ByRef currentpb As PictureBox)
        saveMI("cd4.jpg", currentpb)
    End Sub

    Private Sub saveMI(ByVal imgFileName As String, ByRef selectedicon As PictureBox)
        If rconf.psinmi Then
            dlgMISave.ShowDialog()
            If sinmiString = "" Then Exit Sub
            If Not sinmiString = "" Then imgFileName = sinmiString
        End If
        Dim curpath As String = "" 'currentalbum.path
        Dim tabjump As String = ""
        Dim flpjump As FlowLayoutPanel
        If cmmode = "movie" Then
            curpath = addfiletofolder(currentmovie.getmoviepath, "extras")
            tabjump = "tpcm"
            flpjump = flpMoviesMI
        End If
        If cmmode = "music" Then
            curpath = addfiletofolder(currentalbum.path, "extras")
            tabjump = "tpMusic"
            flpjump = flpMusicMI
        End If
        If cmmode = "tv" Then
            'Exit Sub
            curpath = addfiletofolder(gvcurrenttvseasonpath, "extras")
            tabjump = "tptv"
            flpjump = flpTVShowMI
        End If
        If Not Directory.Exists(curpath) Then Directory.CreateDirectory(curpath)
        If Not File.Exists(addfiletofolder(curpath, "specialfolder.nfo")) Then
            Dim spfold As New specialfolder
            spfold.type = "mediaicons"
            spfold.prefix = "extras"
            spfold.micode = ""
            spfold.writeNfo(addfiletofolder(curpath, "specialfolder.nfo"))
        End If
        'File.Copy(rconf.resourcefolder + "specialfolder.nfo", addfiletofolder(curpath, "specialfolder.nfo"))
        Dim curfile As String = addfiletofolder(curpath, imgFileName)

        If File.Exists(curfile) Then
            Try
                File.Delete(curfile)

            Catch ex As Exception
                'Dim fStream As IO.FileStream = Nothing
                MsgBox("Unable to remove old file, waiting 15 seconds for file level operations to complete.")

                Threading.Thread.Sleep(15000)
                '    Try
                '        fStream = fiFile.Open(FileMode.OpenOrCreate, FileAccess.Write, FileShare.Write)
                '    Catch ex1 As IOException

                '    Catch ex2 As Exception

                '    End Try


                '    If fStream IsNot Nothing Then
                '        fStream.Dispose()
                Try
                    File.Delete(curfile)
                    GC.Collect()
                Catch ex22 As Exception

                End Try

                '            End If
                'Debug.Print("workin")
                '        Loop While fStream Is Nothing
                'File.SetAttributes(curfile, FileAttributes.Normal)
                'Debug.Print("unable to set attribute - " + curfile + vbNewLine + ex.ToString)
            End Try
            System.Threading.Thread.Sleep(300)
            Try
                If File.Exists(curfile) Then
                    File.Delete(curfile)
                End If
                'File.Delete(curfile)
            Catch ex As Exception
                Debug.Print(ex.ToString)
            End Try

        End If

        'large image 
        Dim hugeimage As String = selectedicon.ImageLocation
        hugeimage = Strings.Replace(hugeimage, ".jpg", ".freecoversdotnet.jpg")

        'clear out old thumb
        Dim curthumb As String
        curthumb = Strings.Replace(curfile, ".jpg", "_thumb.jpg")
        Try
            If File.Exists(curthumb) Then
                Try
                    File.SetAttributes(curthumb, FileAttributes.Normal)
                    System.Threading.Thread.Sleep(100)
                Catch exTa As Exception

                End Try
                Try
                    File.Delete(curthumb)
                Catch exTd As Exception

                End Try
            End If
        Catch exT As Exception

        End Try

        Try
            File.Copy(hugeimage, curfile, True)
            'File.SetAttributes(curfile, FileAttributes.Normal)
        Catch ex As Exception

        End Try

        System.Threading.Thread.Sleep(100)

        'if automatic add to album is enabled, run that
        If Not rconf.dontreturnaftermediaimagepick Then tcMain.SelectTab(tabjump)
        'If rconf.ptso_auto_addtoablumonnewart Then injectIntoCurAlbum()
        If Not flpjump Is Nothing Then populatemediaimagethumbs(curpath, flpjump, True, imgFileName)
    End Sub

    Private Sub tsmiTVAllowMediaImageSelectionToAnyTypeToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsmiTVAllowMediaImageSelectionToAnyTypeToolStripMenuItem.Click
        If tsmiTVAllowMediaImageSelectionToAnyTypeToolStripMenuItem.Checked Then tsmiTVAllowMediaImageSelectionToAnyTypeToolStripMenuItem.Checked = False Else tsmiTVAllowMediaImageSelectionToAnyTypeToolStripMenuItem.Checked = True
        rconf.psinmi = tsmiTVAllowMediaImageSelectionToAnyTypeToolStripMenuItem.Checked
        If rconf.psinmi Then
            tsmimovieAllowMediaImageSelectionToAnyTypeToolStripMenuItem.Checked = True
        Else
            tsmimovieAllowMediaImageSelectionToAnyTypeToolStripMenuItem.Checked = False
        End If
    End Sub

    Private Sub tsmiTVDontChangeTabsAfterPickingMediaImageToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsmiTVDontChangeTabsAfterPickingMediaImageToolStripMenuItem.Click
        If tsmiTVDontChangeTabsAfterPickingMediaImageToolStripMenuItem.Checked Then tsmiTVDontChangeTabsAfterPickingMediaImageToolStripMenuItem.Checked = False Else tsmiTVDontChangeTabsAfterPickingMediaImageToolStripMenuItem.Checked = True
        rconf.dontreturnaftermediaimagepick = tsmiTVDontChangeTabsAfterPickingMediaImageToolStripMenuItem.Checked
        If rconf.dontreturnaftermediaimagepick Then
            tsmimovieDontSwitchTabsAfterSelectingMediaImagesToolStripMenuItem.Checked = True
        Else
            tsmimovieDontSwitchTabsAfterSelectingMediaImagesToolStripMenuItem.Checked = False
        End If
    End Sub

    Private Sub tsmimovieAllowMediaImageSelectionToAnyTypeToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsmimovieAllowMediaImageSelectionToAnyTypeToolStripMenuItem.Click
        If tsmimovieAllowMediaImageSelectionToAnyTypeToolStripMenuItem.Checked Then tsmimovieAllowMediaImageSelectionToAnyTypeToolStripMenuItem.Checked = False Else tsmimovieAllowMediaImageSelectionToAnyTypeToolStripMenuItem.Checked = True
        rconf.psinmi = tsmimovieAllowMediaImageSelectionToAnyTypeToolStripMenuItem.Checked
        If rconf.psinmi Then
            tsmiTVAllowMediaImageSelectionToAnyTypeToolStripMenuItem.Checked = True
        Else
            tsmiTVAllowMediaImageSelectionToAnyTypeToolStripMenuItem.Checked = False
        End If
    End Sub
    Private Sub tsmimovieDontSwitchTabsAfterSelectingMediaImagesToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsmimovieDontSwitchTabsAfterSelectingMediaImagesToolStripMenuItem.Click
        If tsmimovieDontSwitchTabsAfterSelectingMediaImagesToolStripMenuItem.Checked Then tsmimovieDontSwitchTabsAfterSelectingMediaImagesToolStripMenuItem.Checked = False Else tsmimovieDontSwitchTabsAfterSelectingMediaImagesToolStripMenuItem.Checked = True
        rconf.dontreturnaftermediaimagepick = tsmimovieDontSwitchTabsAfterSelectingMediaImagesToolStripMenuItem.Checked
        If rconf.dontreturnaftermediaimagepick Then
            tsmiTVDontChangeTabsAfterPickingMediaImageToolStripMenuItem.Checked = True
        Else
            tsmiTVDontChangeTabsAfterPickingMediaImageToolStripMenuItem.Checked = False
        End If
    End Sub


    Private Sub tsbMainDonate_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsbMainDonate.Click
        'https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=3835885
        System.Diagnostics.Process.Start("https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=3835885")
    End Sub

    Private Sub tsbMoviesOpenTMDBLink_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsbMoviesOpenTMDBLink.Click
        If currentmovie.ptmdbid Is Nothing Then Exit Sub
        If currentmovie.ptmdbid = "" Then Exit Sub
        System.Diagnostics.Process.Start("http://www.themoviedb.org/movie/" & currentmovie.ptmdbid)
    End Sub


    Private Sub bshgShowsEpisodeMediaRefresh_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bshgShowsEpisodeMediaRefresh.Click
        reload_tv_media_information()
    End Sub


    Private Sub lblMovieInfcloGenre_click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles lblMovieInfoGenre.Click
        If Not currentmovie Is Nothing Then
            If Not currentmovie.pmoviename = "" Then
                dlgMovieGenreSelect.prepop(currentmovie, rconf.basefolder)
                dlgMovieGenreSelect.ShowDialog()
                'MsgBox(currentmovie.pgenre)
                If Not currentmovie.pgenre = tbGenre.Text Then
                    tbGenre.Text = currentmovie.pgenre
                    saveNfoFromGuiText(False)
                End If
            End If
        End If
    End Sub

    Private Sub bwAutopilot_DoWork(ByVal sender As Object, ByVal e As System.ComponentModel.DoWorkEventArgs) Handles bwAutopilot.DoWork

        'dlgAutoPilotRunning.Show()
        System.Threading.Thread.Sleep(200)
    End Sub
    Private Sub bwAutopilot_RunWorkerCompleted(ByVal sender As Object, ByVal e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles bwAutopilot.RunWorkerCompleted
        kscMain.Enabled = False
        If gv_bwap_mediaonly Then
            bwautopliotmediaupdateonly_start(gv_bwap_updatestudiofromimdb)

            Exit Sub
        End If


        autopilotfromform(gv_bwap_primary, gv_bwap_secondary, gv_bwap_posterTru, gv_bwap_fanartTru, gv_bwap_tbnTru, gv_bwap_nfoTru, gv_bwap_overwritenfoTru, gv_bwap_overwritefolderjpg, gv_bwap_mediaonly, gv_bwap_updatestudiofromimdb)
        'dlgAutoPilotRunning.Dispose()
        kscMain.Enabled = True
    End Sub
    Private Sub bshgReloadEPData_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bshgReloadEPData.Click
        If gvcurrenttvepisode Is Nothing Then Exit Sub
        updatesinglespisode(gvcurrenttvepisode)
    End Sub
    Private Sub updatesinglespisode(ByRef curepisode As tvdblangEpisode)
        If curepisode.mutlipart Then Exit Sub

        'http://www.thetvdb.com/api/' & miptvdbkey & '/episodes/' & episodeid & '/' & curlang & '.xml'
        Dim url As String = "http://www.thetvdb.com/api/" & tvshowcollection.miptvdbkey & "/episodes/" & curepisode.Id & "/" & curepisode.Language & ".xml"
        If Not Directory.Exists(rconf.tempfolder + "tvdb/singleepisodes/") Then Directory.CreateDirectory(rconf.tempfolder + "tvdb/singleepisodes/")
        Dim destfullpath As String = rconf.tempfolder + "tvdb/singleepisodes/" & curepisode.Id & ".xml"
        Dim newtvdatadata As New tvdblangData
        Dim newepdata As New tvdblangEpisode
        'wget the new xml
        Dim binfilelocal As String = rconf.wgetfolder + "wget.exe"
        'Debug.Print(binfilelocal + url + " -P " + """" + folder + """")
        Dim pro1 As System.Diagnostics.Process = New System.Diagnostics.Process()
        pro1.StartInfo.FileName = binfilelocal
        pro1.StartInfo.Arguments = url + " -O " + """" + destfullpath + """"
        pro1.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden
        pro1.Start()
        pro1.WaitForExit()
        Try
            'read the newtvdatadata
            newtvdatadata.readXML(destfullpath, newtvdatadata)
            newepdata = newtvdatadata.Episodes.Item(0)
            'update gui
            ktbep_aired.Text = newepdata.FirstAired
            ktbep_director.Text = newepdata.Director
            ktbep_epName.Text = newepdata.EpisodeName
            ktbep_epRating.Text = newepdata.Rating
            ktbep_credits.Text = Strings.Replace(newepdata.Writer, "|", "/")
            krtbep_Overview.Text = newepdata.Overview
            'update mem object
            gvcurrenttvepisode.FirstAired = ktbep_aired.Text '= curepisode.FirstAired
            gvcurrenttvepisode.Writer = ktbep_credits.Text '= Strings.Replace(curepisode.Writer, "|", "/")
            gvcurrenttvepisode.Director = ktbep_director.Text '= curepisode.Director
            gvcurrenttvepisode.EpisodeName = ktbep_epName.Text '= curepisode.EpisodeName
            gvcurrenttvepisode.EpisodeNumber = ktbEp_epnum.Text '= curepisode.EpisodeNumber
            gvcurrenttvepisode.Overview = krtbep_Overview.Text ' = curepisode.Overview
            'write nfo
            Dim xbmced1 As New xbmc.xbmcEpisodedetails
            gvcurrenttvepisode.tvdblangepisode2xbmcTvepisodeManualFromGUI(gvcurrenttvepisode, xbmced1) ', xbmctvshow1.Actors, curmirror)
            xbmced1.writeNfo(removeextension(gvcurrenttvepisode.episodefilepath) + ".nfo")
        Catch ex As Exception

        End Try

        'see if we have a thumbnail already, if not get it
        Dim thumbfileurl As String = tvshowcollection.curmirror + "/banners/" + newepdata.Filename
        Dim thumbfileloc As String = ""
        thumbfileloc = removeextension(gvcurrenttvepisode.episodefilepath) + ".tbn"
        If Not File.Exists(thumbfileloc) And rconf.tv_episode_download_boolean Then
            'download it directly to the correct location
            Dim url2 As String = thumbfileurl
            'Debug.Print(binfilelocal + url + " -P " + """" + folder + """")
            Dim pro2 As System.Diagnostics.Process = New System.Diagnostics.Process()
            pro2.StartInfo.FileName = binfilelocal
            pro2.StartInfo.Arguments = url2 + " -O " + """" + thumbfileloc + """"
            pro2.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden
            pro2.Start()
            pro2.WaitForExit()
        End If
        'make sure it's not a 0k file (port 8080 is used now)
        If File.Exists(thumbfileloc) Then
            If getFileSizeExact(thumbfileloc) < 10 Then
                Try
                    File.SetAttributes(thumbfileloc, FileAttributes.Normal)
                    File.Delete(thumbfileloc)
                Catch ex As Exception

                End Try

            End If
        End If
        Try
            'set to normal attributes & remove temp xml file 
            If File.Exists(destfullpath) Then
                File.SetAttributes(destfullpath, FileAttributes.Normal)
                File.Delete(destfullpath)
            End If
        Catch ex As Exception

        End Try
    End Sub


    Private Sub tsmimovie_fanart_r960x540_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsmimovie_fanart_r960x540.Click
        resizefanartimage(fanartpb1, "960x540")
    End Sub
    Private Sub tsmimovie_fanart_r1280x720_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsmimovie_fanart_r1280x720.Click
        resizefanartimage(fanartpb1, "1280x720")
    End Sub
    Private Sub tsmimovie_fanart_r1920x1080_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsmimovie_fanart_r1920x1080.Click
        resizefanartimage(fanartpb1, "1920x1080")
    End Sub
    Private Sub tsmimovie_fanart_q60_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsmimovie_fanart_q60.Click
        compressfanartimage(fanartpb1, "60")
    End Sub
    Private Sub tsmimovie_fanart_q70_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsmimovie_fanart_q70.Click
        compressfanartimage(fanartpb1, "70")
    End Sub
    Private Sub tsmimovie_fanart_q80_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsmimovie_fanart_q80.Click
        compressfanartimage(fanartpb1, "80")
    End Sub
    Private Sub tsmimovie_fanart_q90_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsmimovie_fanart_q90.Click
        compressfanartimage(fanartpb1, "90")
    End Sub
    Private Sub tsmimovie_fanart_q95_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsmimovie_fanart_q95.Click
        compressfanartimage(fanartpb1, "95")
    End Sub

    Private Sub tsmimusic_960x540_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsmimusic_fanart_960x540.Click
        resizefanartimage(pbMusicCurFanart, "960x540")
    End Sub
    Private Sub tsmimusic_1280x720_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsmimusic_fanart_1280x720.Click
        resizefanartimage(pbMusicCurFanart, "1280x720")
    End Sub
    Private Sub tsmimusic_1920x1080_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsmimusic_fanart_1920x1080.Click
        resizefanartimage(pbMusicCurFanart, "1920x1080")
    End Sub

    Private Sub tsmimusic_fanart_q60_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsmimusic_fanart_q60.Click
        compressfanartimage(pbMusicCurFanart, "60")
    End Sub
    Private Sub tsmimusic_fanart_q70_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsmimusic_fanart_q70.Click
        compressfanartimage(pbMusicCurFanart, "70")
    End Sub
    Private Sub tsmimusic_fanart_q80_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsmimusic_fanart_q80.Click
        compressfanartimage(pbMusicCurFanart, "80")
    End Sub
    Private Sub tsmimusic_fanart_q90_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsmimusic_fanart_q90.Click
        compressfanartimage(pbMusicCurFanart, "90")
    End Sub
    Private Sub tsmimusic_fanart_q95_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsmimusic_fanart_q95.Click
        compressfanartimage(pbMusicCurFanart, "95")
    End Sub

    Private Sub tsmishows_960x540_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsmishows_fanart_r960x540.Click
        resizefanartimage(pbTVFanart, "960x540")
    End Sub
    Private Sub tsmishows_1280x720_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsmishows_fanart_r1280x720.Click
        resizefanartimage(pbTVFanart, "1280x720")
    End Sub
    Private Sub tsmishows_1920x1080_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsmishows_fanart_r1920x1080.Click
        resizefanartimage(pbTVFanart, "1920x1080")
    End Sub

    Private Sub tsmishows_fanart_q60_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsmishows_fanart_q60.Click
        compressfanartimage(pbTVFanart, "60")
    End Sub
    Private Sub tsmishows_fanart_q70_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsmishows_fanart_q70.Click
        compressfanartimage(pbTVFanart, "70")
    End Sub
    Private Sub tsmishows_fanart_q80_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsmishows_fanart_q80.Click
        compressfanartimage(pbTVFanart, "80")
    End Sub
    Private Sub tsmishows_fanart_q90_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsmishows_fanart_q900.Click
        compressfanartimage(pbTVFanart, "90")
    End Sub
    Private Sub tsmishows_fanart_q95_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsmishows_fanart_q95.Click
        compressfanartimage(pbTVFanart, "95")
    End Sub
    Private Sub tsmimovie_posters_q60_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsmimovie_posters_q60.Click
        compress_movieposter("60")
    End Sub
    Private Sub tsmimovie_posters_q70_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsmimovie_posters_q70.Click
        compress_movieposter("70")
    End Sub
    Private Sub tsmimovie_posters_q80_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsmimovie_posters_q80.Click
        compress_movieposter("80")
    End Sub
    Private Sub tsmimovie_posters_q90_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsmimovie_posters_q90.Click
        compress_movieposter("90")
    End Sub
    Private Sub tsmimovie_posters_q95_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsmimovie_posters_q95.Click
        compress_movieposter("95")
    End Sub
    Private Sub tsmimovie_poster_r320x480_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsmimovie_poster_r320x480.Click
        resize_movieposter("320x480")
    End Sub
    Private Sub tsmimovie_poster_r360x540_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsmimovie_poster_r360x540.Click
        resize_movieposter("360x540")
    End Sub
    Private Sub tsmimovie_poster_r384x576_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsmimovie_poster_r384x576.Click
        resize_movieposter("384x576")
    End Sub
    Private Sub tsmimovie_poster_r480x720_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsmimovie_poster_r480x720.Click
        resize_movieposter("480x720")
    End Sub
    Private Sub tsmimovie_poster_r720x1080_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsmimovie_poster_r720x1080.Click
        resize_movieposter("720x1080")
    End Sub
    Private Sub tsmimovie_poster_r800x1200_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsmimovie_poster_r800x1200.Click
        resize_movieposter("800x1200")
    End Sub
    Private Sub tsmimovie_poster_r1000x1500_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsmimovie_poster_r1000x1500.Click
        resize_movieposter("1000x1500")
    End Sub
    Private Sub resize_movieposter(ByVal newsize As String, Optional ByVal autopilot As Boolean = False)
        If Not autopilot Then pbCurIconUsed.Image = Nothing
        If Not autopilot Then pbCurIconUsed.ImageLocation = Nothing
        If Not autopilot Then pbCurIconUsed2.Image = Nothing
        If Not autopilot Then pbCurIconUsed2.ImageLocation = Nothing
        If Not autopilot Then pbCurTBNUsed.Image = Nothing
        If Not autopilot Then pbCurTBNUsed.ImageLocation = Nothing
        If Not autopilot Then pbCurTBNUsed2.Image = Nothing
        If Not autopilot Then pbCurTBNUsed2.ImageLocation = Nothing
        GC.Collect()
        'figure out what files to mod by looking into the folder for any valid images
        Dim filetoresize As String = ""
        If currentmovie.pfilemode Then
            filetoresize = addfiletofolder(currentmovie.getmoviepath, stripstackforfilemode(removeextension(currentmovie.preservedmoviename)) & ".tbn")
            If File.Exists(filetoresize) Then resizeimage(newsize, filetoresize)
        End If

        'If Not currentmovie.pfilemode Then
        '    filetoresize = addfiletofolder(currentmovie.getmoviepath, currentmovie.pmoviename & ".tbn")
        '    If File.Exists(filetoresize) Then resizeimage(newsize, filetoresize)
        '    filetoresize = addfiletofolder(currentmovie.getmoviepath, "movie.tbn")
        '    If File.Exists(filetoresize) Then resizeimage(newsize, filetoresize)
        '    filetoresize = addfiletofolder(currentmovie.getmoviepath, "folder.jpg")
        '    If File.Exists(filetoresize) Then resizeimage(newsize, filetoresize)
        'End If
        If Not currentmovie.pfilemode Then
            Dim curtext = saveaswhaticontype.Text
            saveaswhaticontype.Text = "Resize which items?"
            saveaswhaticontype.ShowDialog()
            Dim savefolderjpg As Boolean = False
            Dim savemovienametbn As Boolean = False
            Dim savemovietbn As Boolean = False

            If saveaswhaticontype.rbsaveasboth.Checked Then
                Debug.Print("both")
                savefolderjpg = True 'rconf.pcbCreateFolderjpg
                savemovienametbn = True 'rconf.pcbcreatemovienamedottbn
                savemovietbn = True 'rconf.pcbcreatemovietbn
            ElseIf saveaswhaticontype.rbsaveasfolderjpg.Checked Then
                Debug.Print("folder.jpg")
                savefolderjpg = True
                savemovienametbn = False
                savemovietbn = False
            ElseIf saveaswhaticontype.rbsaveastbn.Checked Then
                Debug.Print("tbn")
                savefolderjpg = False
                savemovienametbn = True 'rconf.pcbcreatemovienamedottbn
                savemovietbn = True 'rconf.pcbcreatemovietbn
            Else
                MsgBox("No type was selected, I can't save without knowing what type")
                Exit Sub
            End If
            saveaswhaticontype.Text = curtext
            saveaswhaticontype.Dispose()


            filetoresize = addfiletofolder(currentmovie.getmoviepath, currentmovie.pmoviename & ".tbn")
            If File.Exists(filetoresize) And savemovienametbn Then resizeimage(newsize, filetoresize)
            filetoresize = addfiletofolder(currentmovie.getmoviepath, "movie.tbn")
            If File.Exists(filetoresize) And savemovietbn Then resizeimage(newsize, filetoresize)
            filetoresize = addfiletofolder(currentmovie.getmoviepath, "folder.jpg")
            If File.Exists(filetoresize) And savefolderjpg Then resizeimage(newsize, filetoresize)
        End If
        If messageprompts Then
            If Not currentmovie.pfilemode Then 'refresh all as start point may have shifted
                showfolderjpginmainwindow(currentmovie.getmoviepath, False)
                showtbninmainwindow(currentmovie.getmoviepath, False)
                tcMain.SelectTab(0)
                validatefoldercontents()
                Exit Sub
            End If

            If currentmovie.pfilemode Then 'just refresh the tbn portion
                showtbninmainwindow(currentmovie.getmoviepath, False)
                tcMain.SelectTab(0)
                validatefoldercontents()
                Exit Sub
            End If
        End If
        Me.Refresh()

    End Sub
    Private Sub compress_movieposter(ByVal amount As String, Optional ByVal autopilot As Boolean = False)
        If Not autopilot Then pbCurIconUsed.Image = Nothing
        If Not autopilot Then pbCurIconUsed.ImageLocation = Nothing
        If Not autopilot Then pbCurIconUsed2.Image = Nothing
        If Not autopilot Then pbCurIconUsed2.ImageLocation = Nothing
        If Not autopilot Then pbCurTBNUsed.Image = Nothing
        If Not autopilot Then pbCurTBNUsed.ImageLocation = Nothing
        If Not autopilot Then pbCurTBNUsed2.Image = Nothing
        If Not autopilot Then pbCurTBNUsed2.ImageLocation = Nothing
        GC.Collect()
        'figure out what files to mod by looking into the folder for any valid images
        Dim filetocompress As String = ""
        If currentmovie.pfilemode Then
            filetocompress = addfiletofolder(currentmovie.getmoviepath, stripstackforfilemode(removeextension(currentmovie.preservedmoviename)) & ".tbn")
            If File.Exists(filetocompress) Then compressimage(amount, filetocompress)
        End If

        If Not currentmovie.pfilemode Then
            Dim curtext = saveaswhaticontype.Text
            saveaswhaticontype.Text = "Compress which items?"
            saveaswhaticontype.ShowDialog()
            Dim savefolderjpg As Boolean = False
            Dim savemovienametbn As Boolean = False
            Dim savemovietbn As Boolean = False

            If saveaswhaticontype.rbsaveasboth.Checked Then
                Debug.Print("both")
                savefolderjpg = True 'rconf.pcbCreateFolderjpg
                savemovienametbn = True 'rconf.pcbcreatemovienamedottbn
                savemovietbn = True 'rconf.pcbcreatemovietbn
            ElseIf saveaswhaticontype.rbsaveasfolderjpg.Checked Then
                Debug.Print("folder.jpg")
                savefolderjpg = True
                savemovienametbn = False
                savemovietbn = False
            ElseIf saveaswhaticontype.rbsaveastbn.Checked Then
                Debug.Print("tbn")
                savefolderjpg = False
                savemovienametbn = True 'rconf.pcbcreatemovienamedottbn
                savemovietbn = True 'rconf.pcbcreatemovietbn
            Else
                MsgBox("No type was selected, I can't save without knowing what type")
                Exit Sub
            End If
            saveaswhaticontype.Text = curtext
            saveaswhaticontype.Dispose()
            filetocompress = addfiletofolder(currentmovie.getmoviepath, currentmovie.pmoviename & ".tbn")
            If File.Exists(filetocompress) And savemovienametbn Then compressimage(amount, filetocompress)
            filetocompress = addfiletofolder(currentmovie.getmoviepath, "movie.tbn")
            If File.Exists(filetocompress) And savemovietbn Then compressimage(amount, filetocompress)
            filetocompress = addfiletofolder(currentmovie.getmoviepath, "folder.jpg")
            If File.Exists(filetocompress) And savefolderjpg Then compressimage(amount, filetocompress)
        End If

        If messageprompts Then
            If Not currentmovie.pfilemode Then 'refresh all as start point may have shifted
                showfolderjpginmainwindow(currentmovie.getmoviepath, False)
                showtbninmainwindow(currentmovie.getmoviepath, False)
                tcMain.SelectTab(0)
                validatefoldercontents()
                Exit Sub
            End If

            If currentmovie.pfilemode Then 'just refresh the tbn portion
                showtbninmainwindow(currentmovie.getmoviepath, False)
                tcMain.SelectTab(0)
                validatefoldercontents()
                Exit Sub
            End If
        End If

        Me.Refresh()
    End Sub
    Private Sub compress_tvshowposter(ByRef currentpb As PictureBox, ByVal amount As String, ByVal filetocompress As String)

    End Sub
    Private Sub resizeimage(ByVal size As String, ByVal filetoresize As String)
        Dim curloc As String = filetoresize
        Dim backupfile As String = curloc & ".orig"
        Dim newfile As String = curloc & ".new.jpg"
        Dim imagelocationandname As String = filetoresize

        'move the real fanart
        If File.Exists(backupfile) Then File.Delete(backupfile)
        File.Move(curloc, backupfile)
        'saving the new files
        Try

            Dim binfilelocal As String = addfiletofolder(rconf.ImageMagickFolder, "convert.exe") 'Dim binfilelocal As String = "MagickCMD"
            Dim exstring As String = " " & """" & backupfile & """" & " -resize " & size & "^ -gravity center -extent " & size & " " & """" & newfile & """"
            Dim pro1 As System.Diagnostics.Process = New System.Diagnostics.Process()
            pro1.StartInfo.FileName = binfilelocal
            pro1.StartInfo.Arguments = exstring
            pro1.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden
            pro1.Start()
            pro1.WaitForExit()
            System.Threading.Thread.Sleep(200)
            File.Move(newfile, curloc)
            System.Threading.Thread.Sleep(200)
            'cleanup newfile and backupfile as long as curloc is populated
            If File.Exists(curloc) Then
                File.Delete(newfile)
                File.Delete(backupfile)
            End If
        Catch ex As Exception
            MessageBox.Show("image resize failed, check permissions on the files in the folder", "Resizing image failed", MessageBoxButtons.OK, MessageBoxIcon.Error)
            'put the backup file back in place
            If File.Exists(backupfile) Then
                If Not File.Exists(curloc) Then
                    File.Move(backupfile, curloc)
                End If
            End If
            Exit Sub
        End Try

    End Sub
    Private Sub compressimage(ByVal amount As String, ByVal filetocompress As String) ', ByVal secondaryfile As String, ByVal thirdfile As String)
        Dim curloc As String = filetocompress
        Dim backupfile As String = curloc & ".orig"
        Dim newfile As String = curloc & ".new.jpg"
        Dim imagelocationandname As String = filetocompress


        'move the real image
        If File.Exists(backupfile) Then File.Delete(backupfile)
        File.Move(curloc, backupfile)
        'saving the new files
        Try
            If Not curloc = "" Then
                Dim binfilelocal As String = addfiletofolder(rconf.ImageMagickFolder, "convert.exe") '"MagickCMD" &
                Dim exstring As String = " " & """" & backupfile & """" & " -quality " & amount & " " & """" & newfile & """"
                Dim pro1 As System.Diagnostics.Process = New System.Diagnostics.Process()
                pro1.StartInfo.FileName = binfilelocal
                pro1.StartInfo.Arguments = exstring
                pro1.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden
                pro1.Start()
                pro1.WaitForExit()
            Else
                ' asdf()
                'If savefanartjpg Then File.Copy(curloc, imagelocationandname, True)
                'If savefanartjpg Then Debug.Print("saved: " + imagelocationandname)
            End If

            System.Threading.Thread.Sleep(200)
            File.Move(newfile, curloc)
            System.Threading.Thread.Sleep(200)
            'cleanup newfile and backupfile as long as curloc is populated
            If File.Exists(curloc) Then
                Try
                    File.Delete(newfile)
                    File.Delete(backupfile)
                Catch ex As Exception

                End Try

            End If
        Catch ex As Exception
            MessageBox.Show("Image compression failed, check permissions on the files in the folder" & vbNewLine & curloc, "Compressing image failed", MessageBoxButtons.OK, MessageBoxIcon.Error)
            'put the backup file back in place
            If File.Exists(backupfile) Then
                If Not File.Exists(curloc) Then
                    File.Move(backupfile, curloc)
                End If
            End If
            Exit Sub
        End Try

    End Sub
    Private Sub compressfanartimage(ByRef currentpb As PictureBox, ByVal amount As String)
        If currentpb.ImageLocation = Nothing Then Exit Sub
        Dim curloc As String = currentpb.ImageLocation
        Dim backupfile As String = curloc & ".orig"
        Dim newfile As String = curloc & ".new.jpg"
        Dim imagelocationandname As String = currentpb.ImageLocation
        currentpb.Image = Nothing
        currentpb.ImageLocation = Nothing

        'move the real fanart
        If File.Exists(backupfile) Then File.Delete(backupfile)
        File.Move(curloc, backupfile)
        'saving the new files
        Try
            If Not curloc = "" Then
                Dim binfilelocal As String = addfiletofolder(rconf.ImageMagickFolder, "convert.exe") '"MagickCMD" &
                Dim exstring As String = " " & """" & backupfile & """" & " -quality " & amount & " " & """" & newfile & """" '"convert " & """" & backupfile & """" & " -quality " & amount & " " & """" & newfile & """"
                Dim pro1 As System.Diagnostics.Process = New System.Diagnostics.Process()
                pro1.StartInfo.FileName = binfilelocal
                pro1.StartInfo.Arguments = exstring
                pro1.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden
                pro1.Start()
                pro1.WaitForExit()
            Else
                ' asdf()
                'If savefanartjpg Then File.Copy(curloc, imagelocationandname, True)
                'If savefanartjpg Then Debug.Print("saved: " + imagelocationandname)
            End If

            If cmmode = "movie" Then
                'check settings to see what fanart image we should be saving, copy the new file 
                If moviemode = "file" Then
                    File.Copy(newfile, currentmovie.getmoviepath + "\" + stripstackforfilemode(removeextension(currentmovie.preservedmoviename)) + "-fanart.jpg", True)
                End If

                If rconf.pcbcreatemovienamedashfanartjpg And Not moviemode = "file" Then
                    File.Copy(newfile, currentmovie.getmoviepath + "\" + currentmovie.pmoviename + "-fanart.jpg", True)
                End If

                If rconf.pcbcreatefanartjpg And Not moviemode = "file" Then
                    File.Copy(newfile, currentmovie.getmoviepath + "\" + "fanart.jpg", True)
                End If
            Else
                File.Move(newfile, curloc)
            End If
            'cleanup newfile and backupfile as long as curloc is populated
            If File.Exists(curloc) Then
                File.Delete(newfile)
                File.Delete(backupfile)
            End If
        Catch ex As Exception
            MessageBox.Show("fanart image compression failed, check permissions on the files in the folder", "Compressing fanart failed", MessageBoxButtons.OK, MessageBoxIcon.Error)
            'put the backup file back in place
            If File.Exists(backupfile) Then
                If Not File.Exists(curloc) Then
                    File.Move(backupfile, curloc)
                End If
            End If
            Exit Sub
        End Try
        If File.Exists(curloc) Then
            'reload pb 
            Try
                currentpb.ImageLocation = curloc
                currentpb.Load()
                If cmmode = "movie" Then
                    If Not fanartpb1.ImageLocation Is Nothing Then
                        If Not fanartpb1.ImageLocation = "" Then
                            Dim objImage2 As System.Drawing.Image = System.Drawing.Image.FromFile(fanartpb1.ImageLocation)
                            CurrentBackgroundSizeToolStripMenuItem.Text = "Current Background Size: " & objImage2.Width.ToString & "x" & objImage2.Height.ToString & " Size: " & getFileSize(fanartpb1.ImageLocation)
                            tsl_movies_fanartsize.Text = CurrentBackgroundSizeToolStripMenuItem.Text
                            objImage2.Dispose()
                        End If
                    End If
                End If

            Catch ex As Exception

            End Try
        End If
    End Sub
    Private Sub resizefanartimage(ByRef currentpb As PictureBox, ByVal size As String)
        If currentpb.ImageLocation = Nothing Then Exit Sub
        Dim curloc As String = currentpb.ImageLocation
        Dim backupfile As String = curloc & ".orig"
        Dim newfile As String = curloc & ".new.jpg"
        Dim imagelocationandname As String = currentpb.ImageLocation
        currentpb.Image = Nothing
        currentpb.ImageLocation = Nothing

        'move the real fanart
        If File.Exists(backupfile) Then File.Delete(backupfile)
        File.Move(curloc, backupfile)
        'saving the new files
        Try
            If Not curloc = "" Then
                Dim binfilelocal As String = addfiletofolder(rconf.ImageMagickFolder, "convert.exe") 'Dim binfilelocal As String = "MagickCMD"
                Dim exstring As String = " " & """" & backupfile & """" & " -resize " & size & "^ -gravity center -extent " & size & " " & """" & newfile & """"
                Dim pro1 As System.Diagnostics.Process = New System.Diagnostics.Process()
                pro1.StartInfo.FileName = binfilelocal
                pro1.StartInfo.Arguments = exstring
                pro1.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden
                pro1.Start()
                pro1.WaitForExit()
            Else
                ' asdf()
                'If savefanartjpg Then File.Copy(curloc, imagelocationandname, True)
                'If savefanartjpg Then Debug.Print("saved: " + imagelocationandname)
            End If

            If cmmode = "movie" Then
                'check settings to see what fanart image we should be saving, copy the new file 
                If moviemode = "file" Then
                    File.Copy(newfile, currentmovie.getmoviepath + "\" + stripstackforfilemode(removeextension(currentmovie.preservedmoviename)) + "-fanart.jpg", True)
                End If

                If rconf.pcbcreatemovienamedashfanartjpg And Not moviemode = "file" Then
                    File.Copy(newfile, currentmovie.getmoviepath + "\" + currentmovie.pmoviename + "-fanart.jpg", True)
                End If

                If rconf.pcbcreatefanartjpg And Not moviemode = "file" Then
                    File.Copy(newfile, currentmovie.getmoviepath + "\" + "fanart.jpg", True)
                End If
            Else
                File.Move(newfile, curloc)
            End If
            'cleanup newfile and backupfile as long as curloc is populated
            If File.Exists(curloc) Then
                File.Delete(newfile)
                File.Delete(backupfile)
            End If
        Catch ex As Exception
            MessageBox.Show("fanart image resize failed, check permissions on the files in the folder", "Resizing fanart failed", MessageBoxButtons.OK, MessageBoxIcon.Error)
            'put the backup file back in place
            If File.Exists(backupfile) Then
                If Not File.Exists(curloc) Then
                    File.Move(backupfile, curloc)
                End If
            End If
            Exit Sub
        End Try
        If File.Exists(curloc) Then
            'reload pb 
            Try
                currentpb.ImageLocation = curloc
                currentpb.Load()
                If cmmode = "movie" Then
                    If Not fanartpb1.ImageLocation Is Nothing Then
                        If Not fanartpb1.ImageLocation = "" Then
                            Dim objImage2 As System.Drawing.Image = System.Drawing.Image.FromFile(fanartpb1.ImageLocation)
                            CurrentBackgroundSizeToolStripMenuItem.Text = "Current Background Size: " & objImage2.Width.ToString & "x" & objImage2.Height.ToString & " Size: " & getFileSize(fanartpb1.ImageLocation)
                            tsl_movies_fanartsize.Text = CurrentBackgroundSizeToolStripMenuItem.Text
                            objImage2.Dispose()
                        End If
                    End If
                End If
            Catch ex As Exception

            End Try
        End If
    End Sub


    Private Sub bshMovieWrongMovie_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bshMovieWrongMovie.Click
        If currentmovie Is Nothing Then Exit Sub
        Dim curnonfochangprompt As Boolean = rconf.pcbNoNfoChangePrompt
        rconf.pcbNoNfoChangePrompt = True
        saveNfoFromGuiText(False)
        rconf.pcbNoNfoChangePrompt = curnonfochangprompt
        Me.tbIMDBID.Text = ""
        currentmovie.pdatafromnfo = False
        currentmovie.pimdbnumber = ""
        'remove .nfo files
        Dim filelevelname As String
        If currentmovie.pfilemode Then
            'file mode, only <moviename>.nfo
            Dim filteredname As String = ""
            Dim lmoviename As String = currentmovie.preservedmoviename
            'strip out cd multipart
            Dim RegexObj As New Regex("(([ _\.-]+cd)[ _\.-]*([0-9a-d]+))")
            lmoviename = Strings.Replace(lmoviename, RegexObj.Match(lmoviename).Groups(1).Value, "")
            'strip out dvd multipart
            Dim RegexObj2 As New Regex("(([ _\.-]+dvd)[ _\.-]*([0-9a-d]+))")
            lmoviename = Strings.Replace(lmoviename, RegexObj2.Match(lmoviename).Groups(1).Value, "")
            'strip out part multipart
            Dim RegexObj3 As New Regex("(([ _\.-]+part)[ _\.-]*([0-9a-d]+))")
            lmoviename = Strings.Replace(lmoviename, RegexObj3.Match(lmoviename).Groups(1).Value, "")
            Dim retstr As String = ""
            If Not lmoviename = Nothing Then
                If lmoviename.Length > 5 Then
                    If Strings.Left(Strings.Right(lmoviename, 3), 1) = "." Then
                        retstr = Strings.Left(lmoviename, lmoviename.Length - 3)
                    Else
                        retstr = Strings.Left(lmoviename, lmoviename.Length - 4)
                    End If

                End If
            End If
            filelevelname = addfiletofolder(currentmovie.getmoviepath, retstr + ".nfo")
            If File.Exists(filelevelname) Then File.Delete(filelevelname)
        Else
            'both
            Dim mnnfo As String = ""
            Dim mnfo As String = ""
            mnnfo = addfiletofolder(currentmovie.getmoviepath, currentmovie.getmoviename + ".nfo")
            mnfo = addfiletofolder(currentmovie.getmoviepath, "movie.nfo")
            If Not mnnfo Is Nothing Then
                If Not mnnfo = "" Then
                    If File.Exists(mnnfo) Then File.Delete(mnnfo)
                End If
            End If
            If Not mnfo Is Nothing Then
                If Not mnfo = "" Then
                    If File.Exists(mnfo) Then File.Delete(mnfo)
                End If
            End If
        End If
        'Dim checkid As String = Me.tbIMDBID.Text
        'If checkid = Nothing Then
        '    'MsgBox("can't save a movie without an imdb id number")
        '    Exit Sub
        'End If
        'If File.Exists(rconf.imdbcachefolder + currentmovie.pimdbnumber + ".xml") Then
        '    Try
        '        File.SetAttributes(rconf.imdbcachefolder + currentmovie.pimdbnumber + ".xml", FileAttributes.Normal)
        '    Catch ex As Exception

        '    End Try
        '    Try
        '        File.Delete(rconf.imdbcachefolder + currentmovie.pimdbnumber + ".xml")
        '    Catch ex As Exception

        '    End Try
        'End If
        'If Directory.Exists(rconf.tempfolder + currentmovie.pimdbnumber) Then
        '    Try
        '        File.SetAttributes(rconf.tempfolder + currentmovie.pimdbnumber + "\plotsummary\plotsummary", FileAttributes.Normal)
        '        File.Delete(rconf.tempfolder + currentmovie.pimdbnumber + "\plotsummary\plotsummary")
        '        Directory.Delete(rconf.tempfolder + currentmovie.pimdbnumber + "\plotsummary")
        '        File.SetAttributes(rconf.tempfolder + currentmovie.pimdbnumber + "\index.html", FileAttributes.Normal)
        '        File.Delete(rconf.tempfolder + currentmovie.pimdbnumber + "\index.html")
        '    Catch ex As Exception
        '        MsgBox(ex.ToString)
        '    End Try
        '    Try
        '        Directory.Delete(rconf.tempfolder + currentmovie.pimdbnumber)
        '    Catch ex As Exception
        '        MsgBox(ex.ToString)
        '    End Try
        'End If
        currentmovie.pdatafromnfo = False
        movies.Item(CInt(lbMyMovies.SelectedValue)) = currentmovie
        processdropdownitems()
    End Sub


    Private Sub KryptonButton1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles KryptonButton1.Click
        testofdbsearch()
    End Sub
    Public gvupdatestudiofromimdb As Boolean = False
    Public Sub bwautopliotmediaupdateonly_start(ByVal updatestudioinfo As Boolean)
        maincollection.messageprompts = False
        prgThread.Value = 0
        Try
            prgThread.Maximum = (movies.Count + 1) '* 2
        Catch ex As Exception
            prgThread.Maximum = 500
        End Try
        'prgThread.Maximum = (dlist.Count - 1) '* 2

        'set totaltoprocess value
        'totaltoprocess = lbMyMovies.Items.Count - 1
        'set max number 
        prgThread.Visible = True
        tsbMoviesPreCache.Enabled = False
        lblPCWorking.Visible = True
        lblPCWorking.Text = ""
        gvupdatestudiofromimdb = updatestudioinfo
        bwAutoPilotMediaUpdate = New System.ComponentModel.BackgroundWorker
        bwAutoPilotMediaUpdate.WorkerReportsProgress = True
        bwAutoPilotMediaUpdate.WorkerSupportsCancellation = True
        bwAutoPilotMediaUpdate.RunWorkerAsync()
    End Sub

    Private Sub bwAutoPilotMediaUpdate_DoWork(ByVal sender As Object, ByVal e As System.ComponentModel.DoWorkEventArgs) Handles bwAutoPilotMediaUpdate.DoWork

        Dim currentindex As Integer = 0
        For Each curmovie As movie In movies
            curmovie = CType(movies(CInt(currentindex)), movie)
            currentmovie = curmovie

            'check tmdbid
            checktmdbid(currentmovie)

            bwAutoPilotMediaUpdate.ReportProgress(currentindex, currentindex.ToString & " of " & movies.Count.ToString & " : " & curmovie.pmoviename)
            If currentmovie.pfilemode = True Then
                moviemode = "file"
                If Not File.Exists(addfiletofolder(currentmovie.getmoviepath, currentmovie.preservedmoviename)) Then
                    'MsgBox ("File is no longer at this location, please rescan your movies by clicking Load Movies")
                    Exit Sub
                End If
            Else
                moviemode = "folder"
            End If
            Dim cmpath As String = currentmovie.getmoviepath
            If Not Directory.Exists(cmpath) Then Exit Sub
            Dim dname As String
            dname = currentmovie.getmoviename


            Dim selectedName As String = currentmovie.getmoviename
            Dim selectedNameXMLfile As String
            selectedNameXMLfile = Strings.Replace(selectedName, " ", ".")
            currentmovie.setthumbxml(rconf.xmlfolder + selectedNameXMLfile + ".xml")
            If Not currentmovie.pdatafromnfo Then checknfodata(currentmovie, dname, rbem.Checked)


            Debug.Print(currentmovie.pmoviename)
            If gvupdatestudiofromimdb Then

                Try
                    Dim curimdb As New IMDB
                    Dim tempmov As New movie
                    tempmov.pimdbnumber = currentmovie.pimdbnumber
                    'clear out the cached data (this will slow things down)
                    If File.Exists(rconf.imdbcachefolder + currentmovie.pimdbnumber + ".xml") Then
                        Try
                            File.SetAttributes(rconf.imdbcachefolder + currentmovie.pimdbnumber + ".xml", FileAttributes.Normal)
                        Catch ex As Exception

                        End Try
                        Try
                            File.Delete(rconf.imdbcachefolder + currentmovie.pimdbnumber + ".xml")
                        Catch ex As Exception

                        End Try
                    End If
                    ''\fullcredits\fullcredits
                    'If Directory.Exists(rconf.tempfolder + currentmovie.pimdbnumber + "\fullcredits") Then
                    '    If File.Exists(rconf.tempfolder + currentmovie.pimdbnumber + "\fullcredits\fullcredits") Then
                    '        File.SetAttributes(rconf.tempfolder + currentmovie.pimdbnumber + "\fullcredits\fullcredits", FileAttributes.Normal)
                    '        File.Delete(rconf.tempfolder + currentmovie.pimdbnumber + "\fullcredits\fullcredits")
                    '    End If
                    '    Directory.Delete(rconf.tempfolder + currentmovie.pimdbnumber + "\fullcredits")
                    'End If
                    'If Directory.Exists(rconf.tempfolder + currentmovie.pimdbnumber + "\plotsummary") Then
                    '    If File.Exists(rconf.tempfolder + currentmovie.pimdbnumber + "\plotsummary\plotsummary") Then
                    '        File.SetAttributes(rconf.tempfolder + currentmovie.pimdbnumber + "\plotsummary\plotsummary", FileAttributes.Normal)
                    '        File.Delete(rconf.tempfolder + currentmovie.pimdbnumber + "\plotsummary\plotsummary")
                    '    End If
                    '    Directory.Delete(rconf.tempfolder + currentmovie.pimdbnumber + "\plotsummary")
                    'End If
                    'If File.Exists(rconf.tempfolder + currentmovie.pimdbnumber + "\index.html") Then
                    '    File.SetAttributes(rconf.tempfolder + currentmovie.pimdbnumber + "\index.html", FileAttributes.Normal)
                    '    File.Delete(rconf.tempfolder + currentmovie.pimdbnumber + "\index.html")
                    'End If


                    If Not File.Exists(maincollection.rconf.imdbcachefolder + "/" + currentmovie.pimdbnumber + ".xml") Then
                        '' getimdbdata(tmovie)
                        Dim imdbinfo As New IMDB
                        Dim imdbidtemp As String = tempmov.getimdbid
                        If imdbidtemp = "" Then
                            Debug.Print("NO IMDBID, UNABLE TO SAVE NFO FILE")
                        Else
                            imdbinfo = maincollection.imdbparse(imdbidtemp)
                            imdbinfo.writeIMDBXML(imdbinfo, tempmov, maincollection.rconf.imdbcachefolder, True)
                        End If
                    End If
                    curimdb.readIMDBXML(tempmov, rconf.imdbcachefolder)
                    currentmovie.pstudio = tempmov.pstudio
                    currentmovie.pstudioreal = tempmov.pstudio
                    currentmovie.pcredits = tempmov.pcredits
                    currentmovie.pmpaa = tempmov.pmpaa
                    currentmovie.certification = tempmov.certification
                    'If rconf.pcbmovie_use_certification_for_mpaa Then
                    '    currentmovie.pmpaa = tempmov.certification
                    'Else
                    '    currentmovie.pmpaa = tempmov.pmpaa
                    'End If
                Catch ex As Exception
                    MsgBox("Couldn't readup cache for movie: " & ex.ToString)
                End Try
            End If


            Dim MI As New MediaInfo
            MI.getdata(currentmovie, moviemode)
            If rconf.pcbGeneralSupportSkinBasedFlagging Then
                If gvupdatestudiofromimdb Then
                    currentmovie.pstudio = currentmovie.pstudioreal & currentmovie.fileinfo.toTagData(currentmovie.fileinfo)
                Else
                    currentmovie.pstudioreal = currentmovie.pstudio
                    currentmovie.pstudio = currentmovie.pstudio & currentmovie.fileinfo.toTagData(currentmovie.fileinfo)
                End If
            End If
            'Debug.Print(currentmovie.fileinfo.Video.Height.ToString)
            Debug.Print("Update ran for media information, doesn't mean it found something, just means that it ran. ") 'DATED MEDIA INFO IN .nfo FILE")
            If Not currentmovie.pimdbnumber = Nothing Then currentmovie.saveimdbinfomanual(currentmovie, rconf.pcbCreateMovieNFO, rconf.pcbcreatemovienamedotnfo)
            'increment counter
            currentindex += 1
        Next
    End Sub

    Private Sub bwAutoPilotMediaUpdate_ProgressChanged(ByVal sender As Object, ByVal e As System.ComponentModel.ProgressChangedEventArgs) Handles bwAutoPilotMediaUpdate.ProgressChanged
        prgThread.Value = e.ProgressPercentage
        lblPCWorking.Text = e.UserState.ToString
    End Sub

    Private Sub bwAutoPilotMediaUpdate_RunWorkerCompleted(ByVal sender As Object, ByVal e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles bwAutoPilotMediaUpdate.RunWorkerCompleted
        tsbMoviesPreCache.Enabled = True
        'btnPrecache.Visible = True
        btnCancelPC.Enabled = False
        btnCancelPC.Visible = False
        prgThread.Visible = False
        tcMain.Enabled = True
        gbAppMode.Enabled = True
        gbDisplay.Enabled = True
        tsbMoviesLoadMovies.Enabled = True
        tsbMoviesAutoPilot.Enabled = True
        'btnAutoPilot.Visible = True
        lblPCWorking.Visible = False
        lbMyMovies.Enabled = True
        kgMovieOrTVShow.Enabled = True
        kgMyMovieInfoPicker.Enabled = True
        btnShowMovieInfo.Enabled = True
        fwdbackbuttons()
        klNumMovies.Text = movies.Count.ToString
        prgThread.Visible = False
        pbar1.Visible = False
        kscMain.Enabled = True
        MsgBox("Media update completed!")
    End Sub
    Private Sub updateofdbbw()
        prgThread.Visible = True
        prgThread.Style = ProgressBarStyle.Marquee
        lblPCWorking.Visible = True
        lblPCWorking.Text = "Gathering information from ofdb"
        bwOfdbUpdate = New System.ComponentModel.BackgroundWorker
        bwOfdbUpdate.WorkerReportsProgress = True
        bwOfdbUpdate.WorkerSupportsCancellation = True
        bwOfdbUpdate.RunWorkerAsync()
        tcMain.Enabled = False
        'If Not currentmovie Is Nothing Then
        '    set_movie_details_from_ofdb(currentmovie)
        '    saveNfoFromGuiText(False, True)
        '    Dim curmode As Boolean = rbem.Checked
        '    Dim curais As Boolean = cbAllowIconSelection.Checked
        '    rbem.Checked = False
        '    cbAllowIconSelection.Checked = False
        '    processdropdownitems()
        '    rbem.Checked = curmode
        '    cbAllowIconSelection.Checked = curais
        'End If
        'bwOfdbUpdate
    End Sub
    Private Sub tsmimovie_GetOFDBMovieDetailsToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsmimovie_GetOFDBMovieDetailsToolStripMenuItem.Click
        updateofdbbw()
    End Sub

    Private Sub bwOfdbUpdate_DoWork(ByVal sender As Object, ByVal e As System.ComponentModel.DoWorkEventArgs) Handles bwOfdbUpdate.DoWork
        set_movie_details_from_ofdb(currentmovie)
    End Sub

    Private Sub bwOfdbUpdate_ProgressChanged(ByVal sender As Object, ByVal e As System.ComponentModel.ProgressChangedEventArgs) Handles bwOfdbUpdate.ProgressChanged

    End Sub

    Private Sub bwOfdbUpdate_RunWorkerCompleted(ByVal sender As Object, ByVal e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles bwOfdbUpdate.RunWorkerCompleted
        saveNfoFromGuiText(False, True)
        Dim curmode As Boolean = rbem.Checked
        Dim curais As Boolean = cbAllowIconSelection.Checked
        rbem.Checked = False
        cbAllowIconSelection.Checked = False
        processdropdownitems()
        rbem.Checked = curmode
        cbAllowIconSelection.Checked = curais
        tcMain.Enabled = True
        lblPCWorking.Text = ""
        prgThread.Visible = False
        lblPCWorking.Visible = False
        prgThread.Style = ProgressBarStyle.Blocks
    End Sub

    Private Sub tsbtvAddImage_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsbtvAddImage.Click
        'curtvshowiconsetting
        Dim curtvshowpath As String = lbTvShowPicker.SelectedValue.ToString
        'strip out the id from the path'
        Dim theid As String = Regex.Match(curtvshowpath, "(:\d*?:)").Groups(1).Value
        Dim thename As String = ""

        'curtvshowiconsetting
        curtvshowpath = Strings.Replace(curtvshowpath, theid, "")
        thename = cleanshownameforsearch(getfilefrompath(curtvshowpath))

        'if popup is set in rconf, then search for it on google
        If rconf.popgoogleimagesearch Then System.Diagnostics.Process.Start("http://images.google.com/images?&q=" + thename + "+""tv+show""")

        With opfd2
            .InitialDirectory = rconf.customimagesfanart
            '...
            If .ShowDialog = Windows.Forms.DialogResult.Cancel Then
                'MessageBox.Show("Canceling")
            Else
                Dim fileselectedforposter As String
                fileselectedforposter = opfd2.FileName
                If opfd2.FileName = "" Or opfd2.FileName = "Select your custom image or enter URL" Then Exit Sub
                If Not File.Exists(opfd2.FileName) Then Exit Sub

                Dim savefolderjpg As Boolean = True
                Dim savemovienametbn As Boolean = False
                Dim savemovietbn As Boolean = False

                'old file attribute checks and file removal
                If savefolderjpg Then
                    If File.Exists(curtvshowiconsetting) Then
                        Try
                            File.SetAttributes(curtvshowiconsetting, FileAttributes.Normal)
                        Catch ex As Exception
                            Debug.Print("unable to set attribute - " + curtvshowiconsetting + ex.ToString)
                        End Try
                        File.Delete(curtvshowiconsetting)
                    End If
                End If

                'saving the new files
                Try
                    If savefolderjpg Then File.Copy(fileselectedforposter, curtvshowiconsetting, True)
                    If savefolderjpg Then Debug.Print("saved: " + curtvshowiconsetting)

                Catch ex As Exception
                    MessageBox.Show(curtvshowiconsetting + "Unable to save the icons, check permissions on the files in the movie folder", "Saving poster icons failed", MessageBoxButtons.OK, MessageBoxIcon.Error)
                    Exit Sub
                End Try

                'reload curtvshowpicturboxtoupdate, a reference to the picture box to update
                If savefolderjpg Then 'refresh all as start point may have shifted
                    Dim bmpImage As System.Drawing.Image
                    bmpImage = System.Drawing.Image.FromFile(curtvshowiconsetting)
                    'aspect ratio items
                    Dim imagetype As String
                    Dim taspect As Double = aspectratio(bmpImage)
                    If taspect < 0.25 Then
                        'wide(Icon)
                        If bmpImage.Width >= 500 Then
                            imagetype = "widenoformat"
                        Else
                            imagetype = "wideicon"
                        End If
                    ElseIf taspect >= 0.98 And taspect <= 1.02 Then
                        imagetype = "square"
                    ElseIf (taspect > 0.8 Or taspect < 0.95) And bmpImage.Height < 500 And bmpImage.Width < 450 Then
                        'boxed icon or maybe squared poster
                        imagetype = "boxed"
                    Else
                        imagetype = "poster" 'consider it a poster
                    End If
                    bmpImage.Dispose()

                    If imagetype = "wideicon" Or imagetype = "widenoformat" Then
                        Try
                            pbTVPoster.Image = Nothing
                            pbTVPoster.ImageLocation = Nothing
                            pbTVPoster.Visible = False
                            pbTVWide.Image = Nothing
                            pbTVWide.ImageLocation = Nothing
                            pbTVWide.ImageLocation = curtvshowiconsetting
                            pbTVWide.Load()
                            pbTVWide.Visible = True
                            Me.Refresh()
                        Catch ex As Exception
                            Debug.Print(ex.ToString)
                        End Try
                    Else
                        Try
                            pbTVWide.Image = Nothing
                            pbTVWide.ImageLocation = Nothing
                            pbTVWide.Visible = False
                            pbTVPoster.Image = Nothing
                            pbTVPoster.ImageLocation = Nothing
                            pbTVPoster.ImageLocation = curtvshowiconsetting
                            pbTVPoster.Load()
                            pbTVPoster.Visible = True
                            Me.Refresh()
                        Catch ex As Exception
                            Debug.Print(ex.ToString)
                        End Try

                    End If
                    'showfolderjpginmainwindow(cmpath, False)
                    'showtbninmainwindow(cmpath, False)
                    tcMain.SelectTab(1)
                    Me.Refresh()
                    'validatefoldercontents()
                    Exit Sub
                End If
            End If
        End With
    End Sub
End Class
<Serializable()> Public Class posters
    'Dim xmlfolderposters As String = mainform.rconf.xmlfolderposters '"c:\movieinfoplus\posterxmls\"
    'Dim postercachefolder As String = mainform.rconf.postercachefolder '"c:\movieinfoplus\postercache\"
    Dim posters As ArrayList
    Dim moviename As String
    Dim amoviename As String
    Dim year As Integer
    Dim imdbid As String
    'Dim rconf As configuration = maincollection.rconf
#Region "--- Poster Properties ---"
    Property pposters() As ArrayList
        Get
            Return posters
        End Get
        Set(ByVal value As ArrayList)
            posters = value
        End Set
    End Property
    Property pmoviename() As String
        Get
            Return moviename
        End Get
        Set(ByVal value As String)
            moviename = value
        End Set
    End Property
    Property pamoviename() As String
        Get
            Return amoviename
        End Get
        Set(ByVal value As String)
            amoviename = value
        End Set
    End Property
    Property pyear() As Integer
        Get
            Return year
        End Get
        Set(ByVal value As Integer)
            year = value
        End Set
    End Property
    Property pimdbid() As String
        Get
            Return imdbid
        End Get
        Set(ByVal value As String)
            imdbid = value
        End Set
    End Property
#End Region
    Public Sub writeXML(ByRef poster As posters, ByRef posterxmlcachefolderlocation As String)
        'Dim id As String = moviename
        'make sure there is no .. in the xml file
        Dim moviename2 As String = moviename + ".xml"
        moviename2 = Strings.Replace(moviename2, "..xml", ".xml")
        Dim serializer As New XmlSerializer(Me.GetType())
        'Dim writer As New StreamWriter("C:\movieinfoplus\pxmlstest\" + moviename2)
        'Dim postercachefolder As String = Me.postercachefolder
        'Dim xmlfolderposters As String = Me.xmlfolderposters
        Dim pathnamestring As String = posterxmlcachefolderlocation + moviename2
        'Debug.Print(pathnamestring + " Started")
        Dim writer As New StreamWriter(pathnamestring)
        'Hard coded options
        serializer.Serialize(writer, poster)
        writer.Close()
        'Debug.Print(pathnamestring + " Written.")
        'Debug.WriteLine("-----------------------------------")
    End Sub
    Public Sub writeXML(ByRef poster As posters, ByRef posterxmlcachefolderlocation As String, ByVal useimdbid As Boolean)
        'Dim id As String = moviename or imdbid
        Dim moviename2 As String
        'make sure there is no .. in the xml file

        If useimdbid Then
            If poster.imdbid = Nothing Or poster.imdbid = "" Then Exit Sub
            moviename2 = poster.imdbid + ".xml"
            moviename2 = Strings.Replace(moviename2, "..xml", ".xml")
        Else
            moviename2 = moviename + ".xml"
            moviename2 = Strings.Replace(moviename2, "..xml", ".xml")
        End If

        Dim serializer As New XmlSerializer(Me.GetType())
        'Dim writer As New StreamWriter("C:\movieinfoplus\pxmlstest\" + moviename2)
        'Dim postercachefolder As String = Me.postercachefolder
        'Dim xmlfolderposters As String = Me.xmlfolderposters
        Dim pathnamestring As String = posterxmlcachefolderlocation + moviename2
        'Debug.Print(pathnamestring + " Started")
        Dim writer As New StreamWriter(pathnamestring)
        'Hard coded options
        'p.HEADER = "<p><center><hr><strong>Please do not reply to this message. Replies are not monitored or answered.</strong><br><hr></center></p><p>Thank you for contacting ACT! Service &amp; Support. This email was provided as a follow up to your support inquiry. Please save this email for future reference. <br><br>"
        serializer.Serialize(writer, poster)
        writer.Close()
        'Debug.Print(pathnamestring + " Written.")
        'Debug.WriteLine("-----------------------------------")
    End Sub
    Public Sub readxml(ByRef poster As posters, ByRef posterxmlcachefolderlocation As String, Optional ByVal useimdbid As Boolean = False, Optional ByVal imdbid As String = "")
        Try
            Dim id As String = poster.pmoviename
            If useimdbid Then id = imdbid
            Dim reader As New StreamReader(posterxmlcachefolderlocation + id + ".xml")
            Dim serializer As New XmlSerializer(Me.GetType())
            poster = CType(serializer.Deserialize(reader), movieinfoplus.posters)
            reader.Close()
        Catch ex As Exception
            Debug.Print(ex.ToString)
        End Try


    End Sub
End Class
<Serializable()> Public Class nicecoverposters
    Dim posters As New ArrayList
    Dim moviename As String
    Dim amoviename As String
    Dim year As Integer
    Dim imdbid As String

#Region "--- nicecover Poster Properties ---"
    Property pposters() As ArrayList
        Get
            Return posters
        End Get
        Set(ByVal value As ArrayList)
            posters = value
        End Set
    End Property
    Property pmoviename() As String
        Get
            Return moviename
        End Get
        Set(ByVal value As String)
            moviename = value
        End Set
    End Property
    Property pamoviename() As String
        Get
            Return amoviename
        End Get
        Set(ByVal value As String)
            amoviename = value
        End Set
    End Property
    Property pyear() As Integer
        Get
            Return year
        End Get
        Set(ByVal value As Integer)
            year = value
        End Set
    End Property
    Property pimdbid() As String
        Get
            Return imdbid
        End Get
        Set(ByVal value As String)
            imdbid = value
        End Set
    End Property
#End Region

    Public Sub writeXML(ByRef poster As nicecoverposters, ByRef nicecoverxmlcachefolderlocation As String)
        Dim moviename2 As String = moviename + ".xml"
        moviename2 = Strings.Replace(moviename2, "..xml", ".xml")
        Dim serializer As New XmlSerializer(Me.GetType())
        Dim pathnamestring As String = nicecoverxmlcachefolderlocation + moviename2
        Dim writer As New StreamWriter(pathnamestring)
        serializer.Serialize(writer, poster)
        writer.Close()
    End Sub

    Public Sub writeXML(ByRef poster As nicecoverposters, ByRef nicecoverxmlcachefolderlocation As String, ByVal useimdbid As Boolean)
        'Dim id As String = moviename or imdbid
        Dim moviename2 As String
        'make sure there is no .. in the xml file

        If useimdbid Then
            If poster.imdbid = Nothing Or poster.imdbid = "" Then Exit Sub
            moviename2 = poster.imdbid + ".xml"
            moviename2 = Strings.Replace(moviename2, "..xml", ".xml")
        Else
            moviename2 = moviename + ".xml"
            moviename2 = Strings.Replace(moviename2, "..xml", ".xml")
        End If

        Dim serializer As New XmlSerializer(Me.GetType())
        Dim pathnamestring As String = nicecoverxmlcachefolderlocation + moviename2
        Dim writer As New StreamWriter(pathnamestring)
        serializer.Serialize(writer, poster)
        writer.Close()
    End Sub

    Public Sub readxml(ByRef poster As nicecoverposters, ByRef nicecoverxmlcachefolderlocation As String, Optional ByVal useimdbid As Boolean = False, Optional ByVal imdbid As String = "")
        Try
            Dim id As String = poster.pmoviename
            If useimdbid Then id = imdbid
            Dim reader As New StreamReader(nicecoverxmlcachefolderlocation + id + ".xml")
            Dim serializer As New XmlSerializer(Me.GetType())
            poster = CType(serializer.Deserialize(reader), movieinfoplus.nicecoverposters)
            reader.Close()
        Catch ex As Exception
            Debug.Print(ex.ToString)
        End Try


    End Sub
End Class
'<Serializable()> _
'Public Class Actors
'    Dim vActorThumb, vActorRole, vActorName As String
'    Public Property name() As String
'        Get
'            Return vActorName
'        End Get
'        Set(ByVal value As String)
'            vActorName = value
'        End Set
'    End Property
'    Public Property role() As String
'        Get
'            Return vActorRole
'        End Get
'        Set(ByVal value As String)
'            vActorRole = value
'        End Set
'    End Property
'    Public Property thumb() As String
'        Get
'            Return vActorThumb
'        End Get
'        Set(ByVal value As String)
'            vActorThumb = value
'        End Set
'    End Property
'End Class


<Serializable(), XmlInclude(GetType(movieinfoplus.mip.mov.Actor))> _
Public Class IMDB


    Dim vuname As New ArrayList
    'Dim actorsarray As New ArrayList
    Dim vActor As New movieinfoplus.mip.mov.Actor
    Private p_element_actor As New List(Of Actor)
    Private vtmdbid, vstudio, vstudioreal, vtitle, voriginaltitle, vrating, vyear, vtop250, vvotes, voutline, vplot, vtagline, vruntime, vthumb, vmpaa, vplaycount, vwatched, vid, vfilenameandpath, vtrailer, vgenre, vcredits, vdirector, vcertification As String
#Region "---- IMDB Class Properties ---"
    Public Property tmdbid() As String
        Get
            Return vtmdbid
        End Get
        Set(ByVal value As String)
            vtmdbid = value
        End Set
    End Property
    Public Property certification() As String
        Get
            Return vcertification
        End Get
        Set(ByVal value As String)
            vcertification = value
        End Set
    End Property
    Public Property studio() As String
        Get
            Return vstudio
        End Get
        Set(ByVal value As String)
            vstudio = value
        End Set
    End Property
    Public Property studioreal() As String
        Get
            Return vstudioreal
        End Get
        Set(ByVal value As String)
            vstudioreal = value
        End Set
    End Property
    Public Property title() As String
        Get
            Return vtitle
        End Get
        Set(ByVal value As String)
            vtitle = value
        End Set
    End Property
    Public Property originaltitle() As String
        Get
            Return voriginaltitle
        End Get
        Set(ByVal value As String)
            voriginaltitle = value
        End Set
    End Property
    Public Property rating() As String
        Get
            Return vrating
        End Get
        Set(ByVal value As String)
            vrating = value
        End Set
    End Property
    Public Property year() As String
        Get
            Return vyear
        End Get
        Set(ByVal value As String)
            vyear = value
        End Set
    End Property
    Public Property top250() As String
        Get
            Return vtop250
        End Get
        Set(ByVal value As String)
            vtop250 = value
        End Set
    End Property
    Public Property votes() As String
        Get
            Return vvotes
        End Get
        Set(ByVal value As String)
            vvotes = value
        End Set
    End Property
    Public Property outline() As String
        Get
            Return voutline
        End Get
        Set(ByVal value As String)
            voutline = value
        End Set
    End Property
    Public Property plot() As String
        Get
            Return vplot
        End Get
        Set(ByVal value As String)
            vplot = value
        End Set
    End Property
    Public Property tagline() As String
        Get
            Return vtagline
        End Get
        Set(ByVal value As String)
            vtagline = value
        End Set
    End Property
    Public Property runtime() As String
        Get
            Return vruntime
        End Get
        Set(ByVal value As String)
            vruntime = value
        End Set
    End Property
    'Public Property thumb() As String
    '    Get
    '        Return vthumb
    '    End Get
    '    Set(ByVal value As String)
    '        vthumb = value
    '    End Set
    'End Property
    Public Property mpaa() As String
        Get
            Return vmpaa
        End Get
        Set(ByVal value As String)
            vmpaa = value
        End Set
    End Property
    Public Property playcount() As String
        Get
            Return vplaycount
        End Get
        Set(ByVal value As String)
            vplaycount = value
        End Set
    End Property
    Public Property watched() As String
        Get
            Return vwatched
        End Get
        Set(ByVal value As String)
            vwatched = value
        End Set
    End Property
    Public Property id() As String
        Get
            Return vid
        End Get
        Set(ByVal value As String)
            vid = value
        End Set
    End Property
    Public Property filenameandpath() As String
        Get
            Return vfilenameandpath
        End Get
        Set(ByVal value As String)
            vfilenameandpath = value
        End Set
    End Property
    Public Property trailer() As String
        Get
            Return vtrailer
        End Get
        Set(ByVal value As String)
            vtrailer = value
        End Set
    End Property
    Public Property genre() As String
        Get
            Return vgenre
        End Get
        Set(ByVal value As String)
            vgenre = value
        End Set
    End Property
    Public Property credits() As String
        Get
            Return vcredits
        End Get
        Set(ByVal value As String)
            vcredits = value
        End Set
    End Property
    Public Property director() As String
        Get
            Return vdirector
        End Get
        Set(ByVal value As String)
            vdirector = value
        End Set
    End Property
    'Public Property actor() As ArrayList '(Of Actors)
    '    Get
    '        Return actorsarray
    '    End Get
    '    Set(ByVal value As ArrayList)
    '        actorsarray = value
    '    End Set
    'End Property
    <XmlElement("actor")> _
Public Property [Actors]() As List(Of Actor)
        Get
            Return Me.p_element_actor
        End Get
        Set(ByVal Value As List(Of Actor))
            Me.p_element_actor = Value
        End Set
    End Property
    Public Property uname() As ArrayList
        Get
            Return vuname
        End Get
        Set(ByVal value As ArrayList)
            vuname = value
        End Set
    End Property
#End Region
    Private Sub wget(ByRef url As String, ByRef folder As String, ByRef id As String, ByVal wait As Boolean)
        Dim binfilelocal As String = maincollection.rconf.wgetfolder + "wget.exe"
        Debug.Print(binfilelocal + url + " -P " + """" + folder + """")
        If id = "getimdbidsearch" Then
            If File.Exists(maincollection.rconf.tempfolder + "getimdbidsearch\" + "index.html") Then
                File.Delete(maincollection.rconf.tempfolder + "getimdbidsearch\" + "index.html")
            End If
        End If
        Dim pro1 As System.Diagnostics.Process = New System.Diagnostics.Process()
        pro1.StartInfo.FileName = binfilelocal

        If id = "getimdbidsearch" Then
            pro1.StartInfo.Arguments = """" + url + """" + " -O " + """" + folder + id.ToString + "\index.html" + """"
        Else
            pro1.StartInfo.Arguments = """" + url + """" + " -P " + """" + folder + id.ToString + """"
        End If

        If File.Exists(maincollection.rconf.tempfolder + "getimdbidsearch\" + "index.html") Then
            File.Delete(maincollection.rconf.tempfolder + "getimdbidsearch\" + "index.html")
        End If



        pro1.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden
        pro1.Start()
        If wait Then pro1.WaitForExit()
        'System.Diagnostics.Process.Start(binfilelocal, url + " -P " + """" + folder + cou.ToString + """")
        'myProcess.WaitForExit()
    End Sub
    Private Function getimdbbyid(ByRef imdbid As String) As String
        Dim imdbstring As String = ""
        Dim baseurlsiid As String = "http://akas.imdb.com/title/" + imdbid '+ "/"
        'Dim foundimdbid, retid, retyr As String
        'Dim s As String
        'use wget to get data - to see if it's faster
        wget(baseurlsiid, maincollection.rconf.tempfolder, imdbid.ToString, True)
        'Dim reader As New StreamReader(tempfolder + imdbid.ToString + "index.html")
        Dim pathtofile As String = maincollection.rconf.tempfolder + imdbid + "index.html"
        Try
            imdbstring = File.ReadAllText(pathtofile)
        Catch ex As Exception
            Debug.Print(ex.ToString)
        End Try
        'reader.Close()
        'openpagedata using http get requests
        ''Dim request As HttpWebRequest = CType(WebRequest.Create(baseurlsiid), HttpWebRequest)
        ''Dim response As HttpWebResponse = CType(request.GetResponse(), System.Net.HttpWebResponse)
        ''Using reader As StreamReader = New StreamReader(response.GetResponseStream())
        ''    s = reader.ReadToEnd()
        ''End Using
        'imdbstring = Convert.ToString(s)
        Return imdbstring
    End Function
    Private Function getimdbbyidplot(ByRef imdbid As String) As String
        Dim imdbstring As String = ""
        Dim baseurlsiid As String = "http://akas.imdb.com/title/" + imdbid '+ "/"
        wget(baseurlsiid, maincollection.rconf.tempfolder, imdbid.ToString, True)
        Dim pathtofile As String = maincollection.rconf.tempfolder + imdbid + "\plotsummary"
        Try
            imdbstring = File.ReadAllText(pathtofile)
        Catch ex As Exception
            Debug.Print(ex.ToString)
        End Try

        Return imdbstring
    End Function
    Private Function clb(ByRef tString As String) As String
        'remove line break
        Dim tStringResult As String
        tStringResult = Strings.Replace(tString, Chr(13), "")
        tStringResult = Strings.Replace(tStringResult, Chr(10), "")
        'Dim tStringResult As String = Regex.Replace(tString, "(\r\n\s*?){2,}", Environment.NewLine)
        Return tStringResult
    End Function

    Public Sub parsehashedfolder(ByVal folderroot As String, ByVal overwritexml As Boolean)
        Dim dlistarray As New ArrayList
        Dim dlistarray_count As Integer = 0
        'dlistarray is not cleared out, so you must restart the app each time
        enumhashfolder(folderroot, dlistarray, dlistarray_count) 'populates arraylist "dlistarray" in imdbclass with folder names
        Debug.Print(dlistarray_count.ToString)

        For Each tname As String In dlistarray
            ' Dim tsfullpath As String
            'tsfullpath = Strings.Left(tname, tname.Length - 7) 'strip off year
            Dim tsimdb As New IMDB 'create temp imdb obj
            ''''' REMOVED IN 2844 '''''
            'tsimdb = imdbparse(tname, True) 'parse data (Note: there is no plot in the hashed folder data, will need to be populated into objects later and then merged with the hashtable and imdb plot.list file via the parseimdb class)
            If Not tsimdb.credits = "ERROR" Then tsimdb.writeIMDBXML(overwritexml, "F:\hashedxmls") 'write out the xml to the xml cache folder
            'cleaning up
            tsimdb = Nothing
            'tsfullpath = Nothing
        Next
    End Sub
    Private Sub enumhashfolder(ByVal folderroot As String, ByRef dlistarray As ArrayList, ByRef dlistarray_count As Integer)
        For Each s As String In Directory.GetDirectories(folderroot)
            'Debug.Print(Strings.Right(s, 8))

            If Not (File.GetAttributes(s) And FileAttributes.ReparsePoint) = FileAttributes.ReparsePoint Then
                '    Debug.WriteLine("Sub Enumerate Directory -- Directory found: " & s)
                'debug counter
                dlistarray_count = dlistarray_count + 1
                'Debug.Print(dlist_count)
                'Add all files to the global array
                If ((Strings.Right(s, 8)).ToLower = "video_ts" Or (Strings.Right(s, 8)).ToLower = "audio_ts" Or (Strings.Right(s, 7)).ToLower = "highdef" Or (Strings.Right(s, 15)).ToLower = "temporary files") Then
                    Debug.Print("Sub Enumerate Directory -- found video or audio ts at " + Convert.ToString(dlistarray_count) + " - skipping")
                Else
                    dlistarray.Add(s)
                End If
                enumhashfolder(s, dlistarray, dlistarray_count) ' will parse sub dirs
            End If
        Next s
        'Return junk
    End Sub
    'Public Function imdbparse(ByRef localpathandname As String, ByVal dev_use_only As Boolean) As IMDB
    '    'get imdbid data using imdbid
    '    Try
    '        Dim imdbtxt As String = File.ReadAllText(localpathandname + "\index.html") 'getimdbbyid(imdbid + "/")
    '        'get full plot data useing imdbid
    '        'Dim imdbplottxt As String = getimdbbyidplot(imdbid + "/plotsummary")
    '        'create new IMDB object
    '        Dim nimdb As New IMDB
    '        nimdb.id = Regex.Match(imdbtxt, "<a href=""/title/(?<greturnedid>tt\d{5,9})/""").Groups(1).Value
    '        'Debug.Print("Function:imdbparse - ID is: " + nimdb.id)

    '        'studio
    '        nimdb.studio = clb(Regex.Match(imdbtxt, "<h.>Company:</h.>.{0,3}<a href=./company/.*?>(.*?)</a>", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline).Groups(1).Value)
    '        'Debug.Print("Function:imdbparse - Studio is: " + nimdb.studio) '<h.>Company:</h.>.{0,3}<a href="/company/.*?>(.*?)</a>
    '        nimdb.studioreal = clb(Regex.Match(imdbtxt, "<h.>Company:</h.>.{0,3}<a href=./company/.*?>(.*?)</a>", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline).Groups(1).Value)
    '        'title
    '        nimdb.title = clb(Regex.Match(imdbtxt, "<title>([^<|^(]*)", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline).Groups(1).Value)
    '        If Strings.Right(nimdb.title, 1) = " " Then
    '            nimdb.title = Strings.Left(nimdb.title, nimdb.title.Length - 1)
    '        End If
    '        If nimdb.title = "" Then
    '            Debug.Print("Critical Issue: No title found - " + localpathandname)
    '        End If
    '        'Debug.Print("Function:imdbparse - Title is: " + nimdb.title)

    '        'original title
    '        nimdb.originaltitle = clb(Regex.Match(imdbtxt, "<h5>Also Known As:</h5>([^<|^(]*)", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline).Groups(1).Value)
    '        'Debug.Print("Function:imdbparse - Original Title (AKA) is: " + nimdb.originaltitle)

    '        'rating 
    '        nimdb.rating = clb(Regex.Match(imdbtxt, "<b>([0-9.]+)/10</b>[^<]*<a href=""ratings"" class=""tn15more"">([0-9,]+) votes</a>", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline).Groups(1).Value)
    '        'Debug.Print("Function:imdbparse - Rating is: " + nimdb.rating)

    '        'year
    '        nimdb.year = clb(Regex.Match(imdbtxt, "<a href=""/Sections/Years/([0-9]*)", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline).Groups(1).Value)
    '        'Debug.Print("Function:imdbparse - Year is: " + nimdb.year)
    '        If nimdb.year.ToString = "" Then
    '            Debug.Print("Critical Issue: No Year found - " + localpathandname)
    '        End If
    '        'top 250
    '        nimdb.top250 = clb(Regex.Match(imdbtxt, "Top 250: #([0-9]*)</a>", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline).Groups(1).Value)
    '        'Debug.Print("Function:imdbparse - Top 250 is: " + nimdb.top250)

    '        'votes
    '        nimdb.votes = clb(Regex.Match(imdbtxt, "<b>([0-9.]+)/10</b>[^<]*<a href=""ratings"" class=""tn15more"">([0-9,]+) votes</a>", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline).Groups(2).Value)
    '        'Debug.Print("Function:imdbparse - Votes is: " + nimdb.votes)

    '        'outline
    '        nimdb.outline = clb(Regex.Match(imdbtxt, "Plot:</h5>(.*?)<a class=""tn15more", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline).Groups(1).Value)
    '        'Debug.Print("Function:imdbparse - Outline is: " + nimdb.outline)

    '        'plot 
    '        'nimdb.plot = clb(Regex.Match(imdbplottxt, "<p class=.plotpar.>(.*?)<i>", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline).Groups(1).Value)
    '        'Debug.Print("Function:imdbparse - Plot is: " + nimdb.plot)

    '        'tagline
    '        nimdb.tagline = clb(Regex.Match(imdbtxt, "<h5>Tagline:</h5>([^<]*)", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline).Groups(1).Value)
    '        'Debug.Print("Function:imdbparse - Tagline is: " + nimdb.tagline)

    '        'runtime
    '        nimdb.runtime = clb(Regex.Match(imdbtxt, "<h5>Runtime:</h5>[^0-9]*([^<]*)", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline).Groups(1).Value)
    '        'Debug.Print("Function:imdbparse - Runtime is: " + nimdb.runtime)

    '        'mpaa
    '        nimdb.mpaa = clb(Regex.Match(imdbtxt, "MPAA</a>:</h5>(.[^<]*)", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline).Groups(1).Value)
    '        'Debug.Print("Function:imdbparse - MPAA is: " + nimdb.mpaa)

    '        'Certification 
    '        Dim RegexObjR As New Regex("<a href=""/List\?certificates=[^""]*"">([^<]*)</a>[^<]*(<i>([^<]*)</i>)?", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline)
    '        Dim MatchResultsR As Match = RegexObjR.Match(imdbtxt)
    '        While MatchResultsR.Success
    '            'US only option, remove if statment to list all
    '            If MatchResultsR.Groups(1).Value.Contains("USA") Then
    '                nimdb.certification += MatchResultsR.Groups(1).Value
    '                MatchResultsR = MatchResultsR.NextMatch()
    '            Else
    '                MatchResultsR = MatchResultsR.NextMatch()
    '            End If

    '        End While
    '        nimdb.certification = clb(nimdb.certification)

    '        'playcount
    '        nimdb.playcount = ""
    '        'Debug.Print("Function:imdbparse - Playcount is: " + nimdb.playcount)

    '        'watched
    '        nimdb.watched = ""
    '        'Debug.Print("Function:imdbparse - Watched is: " + nimdb.watched)

    '        'filenameandpath
    '        nimdb.filenameandpath = ""
    '        'Debug.Print("Function:imdbparse - Filenameandpath is: " + nimdb.filenameandpath)

    '        'trailer
    '        nimdb.trailer = ""
    '        'Debug.Print("Function:imdbparse - Trailer is: " + nimdb.trailer)

    '        'genre
    '        Try
    '            Dim RegexObjG As New Regex("/Sections/Genres/[^/]*/"">([^<]*)</a>", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline)
    '            Dim MatchResultsG As Match = RegexObjG.Match(imdbtxt)
    '            While MatchResultsG.Success
    '                'Debug.Print("DEBUG: " + MatchResultsG.Groups("gn").Value.ToString)
    '                nimdb.genre += MatchResultsG.Groups(1).Value + " / "
    '                MatchResultsG = MatchResultsG.NextMatch()
    '            End While
    '        Catch ex As ArgumentException
    '            'Syntax error in the regular expression
    '        End Try
    '        If nimdb.genre = Nothing Then
    '            nimdb.genre = "None / "
    '        End If
    '        If nimdb.genre.Length > 4 Then
    '            nimdb.genre = Strings.Left(nimdb.genre, nimdb.genre.Length - 3)
    '        End If
    '        nimdb.genre = nimdb.genre
    '        'Debug.Print("Function:imdbparse - Genre is: " + nimdb.genre)
    '        nimdb.genre = clb(nimdb.genre)

    '        'credits
    '        nimdb.credits = ""
    '        'Debug.Print("Function:imdbparse - Credits is: " + nimdb.credits)

    '        'director
    '        'get initial text for parse or it will grab other names that are not directors
    '        Dim tempdirector As String = Regex.Match(imdbtxt, "<h5>Direct.*?</h5>(.*?)</div>", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline).Groups(1).Value
    '        Try
    '            Dim RegexObjD As New Regex("<a href=""/name/nm.*?/"">(.*?)</a>", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline)
    '            Dim MatchResultsD As Match = RegexObjD.Match(tempdirector)
    '            While MatchResultsD.Success
    '                nimdb.director += MatchResultsD.Groups(1).Value + " / "
    '                MatchResultsD = MatchResultsD.NextMatch()
    '            End While
    '        Catch ex As ArgumentException
    '            'Syntax error in the regular expression
    '        End Try
    '        If nimdb.director = Nothing Then
    '            nimdb.director = "N/A / "
    '        End If
    '        If nimdb.director.Length > 4 Then 'Strip out the "space forwardslash space" from the end
    '            nimdb.director = Strings.Left(nimdb.director, nimdb.director.Length - 3)
    '        End If
    '        nimdb.director = clb(nimdb.director)
    '        'Debug.Print("Function:imdbparse - Director is: " + nimdb.director)

    '        'actor
    '        Dim tempactor As String = Regex.Match(imdbtxt, "<table class=""cast"">(.*?)</table>", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline).Groups(1).Value
    '        'Dim secondsearch As String = "<actor><thumb>\1_SX"
    '        Try
    '            ' Debug.Print("Function:imdbparse - actor parse starting")
    '            Dim RegexObjA As New Regex("<img src=""(http://.{2,30}imdb.com/images/.{10,100}.(?:jpg)??(?:gif)??)"" width=""\d{1,3}"" height=""\d{1,3}"" border="".{1,3}"">(?:</a><br>)??</td><td class=""nm""><a href=""/name/nm\d{6,7}/"">(.{2,75})</a></td><td class="".{1,5}"">.{0,7}</td><td class=""char""><a href=""/character/ch\d{6,7}/"">(.{2,75})</a>", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline)
    '            'Dim RegexObjA As New Regex("<img src=""(.*?)"" width.*?<a href=""/name/nm.*?/"">(.*?)</a>.*?<a href=""/character/.*?"">(.*?)</a>", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline)
    '            'Debug.Print("actor regex object started")
    '            Dim MatchResultsA As Match = RegexObjA.Match(tempactor)
    '            'Debug.Print("match results defined")
    '            While MatchResultsA.Success
    '                'Debug.Print("match results hit for actor, parse to field data")
    '                'For Each dude In tmov.Actors
    '                '    Dim tactor As New Actor
    '                '    tactor.Name = dude.Name
    '                '    tactor.Role = dude.Role
    '                '    tactor.Thumb = dude.Thumb
    '                '    tmovie.pactor.Add(tactor)
    '                'Next
    '                Dim tActor As New movieinfoplus.mip.mov.Actor
    '                tActor.Thumb = MatchResultsA.Groups(1).Value
    '                ' Debug.Print(tActor.Thumb)
    '                tActor.Name = MatchResultsA.Groups(2).Value
    '                'Debug.Print(tActor.Name)
    '                tActor.Role = MatchResultsA.Groups(3).Value
    '                ' Debug.Print(tActor.Role)
    '                'For Each dudet In nimdb.Actors
    '                'Debug.Print(dudet.ToString)
    '                'Next
    '                nimdb.Actors.Add(tActor)
    '                MatchResultsA = MatchResultsA.NextMatch()
    '            End While
    '            'Debug.Print("Function:imdbparse - actor parse completed sucessfully")
    '        Catch ex As ArgumentException
    '            'Syntax error in the regular expression
    '            Debug.Print("Function:imdbparse - Error in Regex" + ex.ToString)
    '        End Try
    '        tempactor = ""
    '        If nimdb.id = "" Then
    '            nimdb.id = Regex.Match(imdbtxt, "/title/(tt\d{6,7})/"">More at IMDb Pro").Groups(1).Value
    '            If nimdb.id = "" Then
    '                Debug.Print("--- no id found in: " + localpathandname + " -----")
    '                nimdb.credits = "ERROR"
    '            End If
    '        End If

    '        Return nimdb
    '    Catch ex As Exception
    '        Debug.Print(vbNewLine)
    '        ' Debug.Print("------------------------------------------------------")
    '        'Debug.Print(ex.ToString)
    '        Debug.Print(vbNewLine + "--------- " + localpathandname + " -----------")
    '        'Debug.Print("------------------------------------------------------")
    '        Dim nimdb2 As New IMDB
    '        nimdb2.credits = "ERROR"
    '        Return nimdb2
    '    End Try
    'End Function
    'Public Function imdbparse(ByRef imdbid As String) As IMDB
    '    'get imdbid data using imdbid
    '    Dim imdbtxt As String = getimdbbyid(imdbid + "/")
    '    'get full plot data useing imdbid
    '    Dim imdbplottxt As String = getimdbbyidplot(imdbid + "/plotsummary")
    '    'create new IMDB object
    '    Dim nimdb As New IMDB
    '    nimdb.id = imdbid
    '    Debug.Print("Function:imdbparse - ID is: " + nimdb.id)

    '    'studio
    '    nimdb.studio = clb(Regex.Match(imdbtxt, "<h.>Company:</h.>.{0,3}<a href=./company/.*?>(.*?)</a>", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline).Groups(1).Value)
    '    Debug.Print("Function:imdbparse - Studio is: " + nimdb.studio) '<h.>Company:</h.>.{0,3}<a href="/company/.*?>(.*?)</a>

    '    'title
    '    nimdb.title = clb(Regex.Match(imdbtxt, "<title>([^<|^(]*)", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline).Groups(1).Value)
    '    Debug.Print("Function:imdbparse - Title is: " + nimdb.title)

    '    'original title
    '    nimdb.originaltitle = clb(Regex.Match(imdbtxt, "<h5>Also Known As:</h5>([^<|^(]*)", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline).Groups(1).Value)
    '    Debug.Print("Function:imdbparse - Original Title (AKA) is: " + nimdb.originaltitle)

    '    'rating 
    '    nimdb.rating = clb(Regex.Match(imdbtxt, "<b>([0-9.]+)/10</b>[^<]*<a href=""ratings"" class=""tn15more"">([0-9,]+) votes</a>", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline).Groups(1).Value)
    '    Debug.Print("Function:imdbparse - Rating is: " + nimdb.rating)

    '    'year
    '    nimdb.year = clb(Regex.Match(imdbtxt, "<a href=""/Sections/Years/([0-9]*)", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline).Groups(1).Value)
    '    Debug.Print("Function:imdbparse - Year is: " + nimdb.year)

    '    'top 250
    '    nimdb.top250 = clb(Regex.Match(imdbtxt, "Top 250: #([0-9]*)</a>", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline).Groups(1).Value)
    '    Debug.Print("Function:imdbparse - Top 250 is: " + nimdb.top250)

    '    'votes
    '    nimdb.votes = clb(Regex.Match(imdbtxt, "<b>([0-9.]+)/10</b>[^<]*<a href=""ratings"" class=""tn15more"">([0-9,]+) votes</a>", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline).Groups(2).Value)
    '    Debug.Print("Function:imdbparse - Votes is: " + nimdb.votes)

    '    'outline
    '    nimdb.outline = clb(Regex.Match(imdbtxt, "Plot:</h5>(.*?)<a class=""tn15more", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline).Groups(1).Value)
    '    Debug.Print("Function:imdbparse - Outline is: " + nimdb.outline)

    '    'plot 
    '    nimdb.plot = clb(Regex.Match(imdbplottxt, "<p class=.plotpar.>(.*?)<i>", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline).Groups(1).Value)
    '    Debug.Print("Function:imdbparse - Plot is: " + nimdb.plot)

    '    'tagline
    '    nimdb.tagline = clb(Regex.Match(imdbtxt, "<h5>Tagline:</h5>([^<]*)", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline).Groups(1).Value)
    '    Debug.Print("Function:imdbparse - Tagline is: " + nimdb.tagline)

    '    'runtime
    '    nimdb.runtime = clb(Regex.Match(imdbtxt, "<h5>Runtime:</h5>[^0-9]*([^<]*)", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline).Groups(1).Value)
    '    Debug.Print("Function:imdbparse - Runtime is: " + nimdb.runtime)

    '    'mpaa
    '    nimdb.mpaa = clb(Regex.Match(imdbtxt, "MPAA</a>:</h5>(.[^<]*)", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline).Groups(1).Value)
    '    Debug.Print("Function:imdbparse - MPAA is: " + nimdb.mpaa)

    '    'Certification 
    '    Dim RegexObjR As New Regex("<a href=""/List\?certificates=[^""]*"">([^<]*)</a>[^<]*(<i>([^<]*)</i>)?", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline)
    '    Dim MatchResultsR As Match = RegexObjR.Match(imdbtxt)
    '    While MatchResultsR.Success
    '        'US only option, remove if statment to list all
    '        If MatchResultsR.Groups(1).Value.Contains("USA") Then
    '            nimdb.certification += MatchResultsR.Groups(1).Value
    '            MatchResultsR = MatchResultsR.NextMatch()
    '        Else
    '            MatchResultsR = MatchResultsR.NextMatch()
    '        End If

    '    End While
    '    nimdb.certification = clb(nimdb.certification)

    '    'playcount
    '    nimdb.playcount = ""
    '    Debug.Print("Function:imdbparse - Playcount is: " + nimdb.playcount)

    '    'watched
    '    nimdb.watched = ""
    '    Debug.Print("Function:imdbparse - Watched is: " + nimdb.watched)

    '    'filenameandpath
    '    nimdb.filenameandpath = ""
    '    Debug.Print("Function:imdbparse - Filenameandpath is: " + nimdb.filenameandpath)

    '    'trailer
    '    nimdb.trailer = ""
    '    Debug.Print("Function:imdbparse - Trailer is: " + nimdb.trailer)

    '    'genre
    '    Try
    '        Dim RegexObjG As New Regex("/Sections/Genres/[^/]*/"">([^<]*)</a>", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline)
    '        Dim MatchResultsG As Match = RegexObjG.Match(imdbtxt)
    '        While MatchResultsG.Success
    '            'Debug.Print("DEBUG: " + MatchResultsG.Groups("gn").Value.ToString)
    '            nimdb.genre += MatchResultsG.Groups(1).Value + " / "
    '            MatchResultsG = MatchResultsG.NextMatch()
    '        End While
    '    Catch ex As ArgumentException
    '        'Syntax error in the regular expression
    '    End Try
    '    If nimdb.genre = Nothing Then
    '        nimdb.genre = "None / "
    '    End If
    '    If nimdb.genre.Length > 4 Then
    '        nimdb.genre = Strings.Left(nimdb.genre, nimdb.genre.Length - 3)
    '    End If
    '    nimdb.genre = nimdb.genre
    '    Debug.Print("Function:imdbparse - Genre is: " + nimdb.genre)
    '    nimdb.genre = clb(nimdb.genre)

    '    'credits
    '    nimdb.credits = ""
    '    Debug.Print("Function:imdbparse - Credits is: " + nimdb.credits)

    '    'director
    '    'get initial text for parse or it will grab other names that are not directors
    '    Dim tempdirector As String = Regex.Match(imdbtxt, "<h5>Direct.*?</h5>(.*?)</div>", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline).Groups(1).Value
    '    Try
    '        Dim RegexObjD As New Regex("<a href=""/name/nm.*?/"">(.*?)</a>", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline)
    '        Dim MatchResultsD As Match = RegexObjD.Match(tempdirector)
    '        While MatchResultsD.Success
    '            nimdb.director += MatchResultsD.Groups(1).Value + " / "
    '            MatchResultsD = MatchResultsD.NextMatch()
    '        End While
    '    Catch ex As ArgumentException
    '        'Syntax error in the regular expression
    '    End Try
    '    If nimdb.director = Nothing Then
    '        nimdb.director = "N/A / "
    '    End If
    '    If nimdb.director.Length > 4 Then 'Strip out the "space forwardslash space" from the end
    '        nimdb.director = Strings.Left(nimdb.director, nimdb.director.Length - 3)
    '    End If
    '    nimdb.director = clb(nimdb.director)
    '    Debug.Print("Function:imdbparse - Director is: " + nimdb.director)

    '    'actor
    '    Dim tempactor As String = Regex.Match(imdbtxt, "<table class=""cast"">(.*?)</table>", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline).Groups(1).Value
    '    'Dim secondsearch As String = "<actor><thumb>\1_SX"
    '    Try
    '        Debug.Print("Function:imdbparse - actor parse starting")
    '        Dim RegexObjA As New Regex("<img src=""(http://.{2,30}imdb.com/images/.{10,100}.(?:jpg)??(?:gif)??)"" width=""\d{1,3}"" height=""\d{1,3}"" border="".{1,3}"">(?:</a><br>)??</td><td class=""nm""><a href=""/name/nm\d{6,7}/"">(.{2,75})</a></td><td class="".{1,5}"">.{0,7}</td><td class=""char""><a href=""/character/ch\d{6,7}/"">(.{2,75})</a>", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline)
    '        'Dim RegexObjA As New Regex("<img src=""(.*?)"" width.*?<a href=""/name/nm.*?/"">(.*?)</a>.*?<a href=""/character/.*?"">(.*?)</a>", RegexOptions.Singleline Or RegexOptions.IgnoreCase Or RegexOptions.Multiline)
    '        Debug.Print("actor regex object started")
    '        Dim MatchResultsA As Match = RegexObjA.Match(tempactor)
    '        Debug.Print("match results defined")
    '        While MatchResultsA.Success
    '            Debug.Print("match results hit for actor, parse to field data")
    '            'For Each dude In tmov.Actors
    '            '    Dim tactor As New Actor
    '            '    tactor.Name = dude.Name
    '            '    tactor.Role = dude.Role
    '            '    tactor.Thumb = dude.Thumb
    '            '    tmovie.pactor.Add(tactor)
    '            'Next
    '            Dim tActor As New movieinfoplus.mip.mov.Actor
    '            tActor.Thumb = MatchResultsA.Groups(1).Value
    '            Debug.Print(tActor.Thumb)
    '            tActor.Name = MatchResultsA.Groups(2).Value
    '            Debug.Print(tActor.Name)
    '            tActor.Role = MatchResultsA.Groups(3).Value
    '            Debug.Print(tActor.Role)
    '            For Each dudet In nimdb.Actors
    '                Debug.Print(dudet.ToString)
    '            Next
    '            nimdb.Actors.Add(tActor)
    '            MatchResultsA = MatchResultsA.NextMatch()
    '        End While
    '        Debug.Print("Function:imdbparse - actor parse completed sucessfully")
    '    Catch ex As ArgumentException
    '        'Syntax error in the regular expression
    '        Debug.Print("Function:imdbparse - Error in Regex" + ex.ToString)
    '    End Try
    '    tempactor = ""
    '    Return nimdb
    'End Function
    Public Sub writeIMDBXML(ByRef IMDBITEM As IMDB, ByRef tmovie As movie, ByRef vimdbcachefolder As String, ByVal overwrite As Boolean)
        Dim id As String = tmovie.getimdbid
        Dim writefile As Boolean = False

        If File.Exists(vimdbcachefolder + id + ".xml") Then writefile = False
        If overwrite Then writefile = True

        If writefile Then
            'System.Xml.Serialization.XmlSerialize
            Dim serializer As New XmlSerializer(Me.GetType())
            Try
                Dim writer As New StreamWriter(vimdbcachefolder + "\" + id + ".xml")
                serializer.Serialize(writer, IMDBITEM)
                writer.Close()
                'IMDBITEM.imdbtostring()
            Catch ex As Exception
                MsgBox(ex.ToString)
                Debug.Print(ex.ToString)

            End Try
        End If
        '        Debug.WriteLine("serialized it")
    End Sub
    Public Sub writeIMDBXML(ByRef IMDBITEM As IMDB, ByRef tmovie As movie)
        'Dim id As String = tmovie.getimdbid
        'System.Xml.Serialization.XmlSerialize
        Dim serializer As New XmlSerializer(Me.GetType())
        Try
            Dim writer As New StreamWriter(tmovie.getmoviepath + "\" + Convert.ToString(tmovie.getmoviename) + ".nfo")
            serializer.Serialize(writer, IMDBITEM)
            writer.Close()
            'IMDBITEM.imdbtostring()
        Catch ex As Exception
            MsgBox(ex.ToString)
            Debug.Print(ex.ToString)

        End Try
        '        Debug.WriteLine("serialized it")
    End Sub
    Public Sub writeIMDBXML()
        Dim id As String = Me.id
        Dim writefile As Boolean = True

        If File.Exists(maincollection.rconf.imdbcachefolder + id + ".xml") Then writefile = False
        'If overwrite Then
        'writefile = True
        'End If

        If writefile Then
            'System.Xml.Serialization.XmlSerialize
            Dim serializer As New XmlSerializer(Me.GetType())
            Try
                Dim writer As New StreamWriter(maincollection.rconf.imdbcachefolder + "\" + id + ".xml")
                serializer.Serialize(writer, Me)
                writer.Close()
                'IMDBITEM.imdbtostring()
            Catch ex As Exception
                MsgBox(ex.ToString)
                Debug.Print(ex.ToString)

            End Try
        End If
    End Sub
    Public Sub writeIMDBXML(ByVal overwrite As Boolean)
        Dim id As String = Me.id
        Dim writefile As Boolean = False
        If File.Exists(maincollection.rconf.imdbcachefolder + id + ".xml") Then writefile = False

        If overwrite Then
            writefile = True
        End If

        If writefile Then
            'System.Xml.Serialization.XmlSerialize
            Dim serializer As New XmlSerializer(Me.GetType())
            Try
                Dim writer As New StreamWriter(maincollection.rconf.imdbcachefolder + "\" + id + ".xml")
                serializer.Serialize(writer, Me)
                writer.Close()
                'IMDBITEM.imdbtostring()
            Catch ex As Exception
                MsgBox(ex.ToString)
                Debug.Print(ex.ToString)

            End Try
        End If
    End Sub
    Public Sub writeIMDBXML(ByVal overwrite As Boolean, ByVal What_folder_Should_XML_be_stored_in As String)
        Dim id As String = Me.id
        Dim writefile As Boolean = True
        If File.Exists(What_folder_Should_XML_be_stored_in + "\" + id + ".xml") Then writefile = False

        If overwrite Then
            writefile = True
        End If

        If writefile Then
            'System.Xml.Serialization.XmlSerialize
            Dim serializer As New XmlSerializer(Me.GetType())
            Try
                Dim writer As New StreamWriter(What_folder_Should_XML_be_stored_in + "\" + id + ".xml")
                serializer.Serialize(writer, Me)
                writer.Close()
                'IMDBITEM.imdbtostring()
            Catch ex As Exception
                MsgBox(ex.ToString)
                Debug.Print(ex.ToString)

            End Try
        End If
    End Sub
    Public Sub writeIMDBXML(ByRef IMDBITEM As IMDB)
        Dim id As String = IMDBITEM.id
        Dim writefile As Boolean = False

        If File.Exists(maincollection.rconf.imdbcachefolder + id + ".xml") Then writefile = False
        'If overwrite Then
        'writefile = True
        'End If

        If writefile Then
            'System.Xml.Serialization.XmlSerialize
            Dim serializer As New XmlSerializer(Me.GetType())
            Try
                Dim writer As New StreamWriter(maincollection.rconf.imdbcachefolder + "\" + id + ".xml")
                serializer.Serialize(writer, IMDBITEM)
                writer.Close()
                'IMDBITEM.imdbtostring()
            Catch ex As Exception
                MsgBox(ex.ToString)
                Debug.Print(ex.ToString)

            End Try
        End If
    End Sub
    Public Function readIMDBXML(ByVal fullpathwithfilename As String, ByRef for_dev_use_only As Boolean) As IMDB
        'Dim xmlfile As String = mname
        Dim serializer As New XmlSerializer(Me.GetType())
        Dim gROReader As New StreamReader(fullpathwithfilename)
        'Dim gRDocReader As New StreamReader("C:\KB Conversion\XML Fixed Documents\lookup\1999102613071401.xml")
        'Dim gDocReader As New StreamReader("c:\kbout\kbdoc.xml")
        Dim gRIMDB As IMDB = CType(serializer.Deserialize(gROReader), IMDB)
        'serializer.Deserialize(reader)
        'reader.Close()
        gROReader.Close()
        Return gRIMDB
    End Function
    Public Function readIMDBXML(ByVal mname As String) As IMDB
        Dim xmlfile As String = mname
        Dim serializer As New XmlSerializer(Me.GetType())
        Dim gROReader As New StreamReader("C:\movieinfoplus\" + xmlfile + ".xml")
        'Dim gRDocReader As New StreamReader("C:\KB Conversion\XML Fixed Documents\lookup\1999102613071401.xml")
        'Dim gDocReader As New StreamReader("c:\kbout\kbdoc.xml")
        Dim gRIMDB As IMDB = CType(serializer.Deserialize(gROReader), IMDB)
        'serializer.Deserialize(reader)
        'reader.Close()
        gROReader.Close()
        Return gRIMDB
    End Function
    Public Sub readIMDBXML(ByRef tmovie As movie, ByVal tvar_imdbcachefolder As String)
        Dim xmlfile As String = tvar_imdbcachefolder + tmovie.pimdbnumber + ".xml" 'tmovie.getmoviepath + "\" + tmovie.getmoviename + ".nfo"
        Dim serializer As New XmlSerializer(Me.GetType())
        Try
            Dim gROReader As New StreamReader(xmlfile)
            'Dim gRDocReader As New StreamReader("C:\KB Conversion\XML Fixed Documents\lookup\1999102613071401.xml")
            'Dim gDocReader As New StreamReader("c:\kbout\kbdoc.xml")
            Dim gRIMDB As IMDB = CType(serializer.Deserialize(gROReader), IMDB)
            'serializer.Deserialize(reader)
            'reader.Close()
            gROReader.Close()
            'debug print test
            ' gRIMDB.imdbtostring()
            'set tmovie values to gRIMDB
            gRIMDB.imdbtomovie(tmovie)
        Catch ex As Exception
            Debug.Print("readIMDBXML: Failed to load file for " + tmovie.pmoviename + vbNewLine + ex.ToString)
        End Try

    End Sub
    Public Sub movietoimdb(ByRef tmovie2 As movie)
        'converts movie back to imdb 
        'tmovie2.pactor = Me.actor
        'Debug.Print(timdb.Actors())
        Me.tmdbid = tmovie2.ptmdbid
        Me.credits = tmovie2.pcredits '= "" Else tmovie2.pcredits = Me.credits
        Me.director = tmovie2.pdirector '= "" Else tmovie2.pdirector = Me.director
        'tmovie2.filenameandpath = Me.filenameandpath
        Me.genre = tmovie2.pgenre '= "" Else tmovie2.pgenre = Me.genre
        Me.id = tmovie2.pimdbnumber '= "" Else tmovie2.pimdbnumber = Me.id
        Me.mpaa = tmovie2.pmpaa '= "" Else tmovie2.pmpaa = Me.mpaa
        Me.certification = tmovie2.certification
        Me.outline = tmovie2.pplotoutline '= "" Else tmovie2.pplotoutline = Me.outline
        Me.plot = tmovie2.pplot '= "" Else tmovie2.pplot = Me.plot
        Me.rating = tmovie2.prating '= "" Else tmovie2.prating = Me.rating
        Me.originaltitle = tmovie2.poriginaltitle '= "" Else tmovie2.poriginaltitle = Me.originaltitle
        Me.votes = tmovie2.pvotes '= "" Else tmovie2.pvotes = Me.votes
        Me.runtime = tmovie2.pruntime ' = "" Else tmovie2.pruntime = Me.runtime
        Me.tagline = tmovie2.ptagline '= "" Else tmovie2.ptagline = Me.tagline
        Me.title = tmovie2.ptitle '= "" Else tmovie2.ptitle = Me.title
        Me.year = tmovie2.pyear.ToString '= 1970 Else tmovie2.pyear = Convert.ToInt16(Me.year)
        Me.top250 = tmovie2.ptop250 '= "" Else tmovie2.ptop250 = Me.top250
        Me.trailer = tmovie2.ptrailer '= "" Else tmovie2.ptrailer = Me.trailer
        Me.studio = tmovie2.pstudio
        Me.studioreal = tmovie2.pstudioreal
        Me.Actors = tmovie2.Actors
    End Sub
    Public Function cleanimdbdata(ByVal strData As String) As String
        Dim strClean As String = ""
        If strData Is Nothing Then Return ""
        If strData = "" Then Return ""
        strClean = strData
        'remove char codes
        Try
            Dim rObj1 As New Regex("(&#\d{1,3};)")
            Dim mObj1 As Match = rObj1.Match(strData)
            While mObj1.Success
                strClean = Strings.Replace(strData, mObj1.Value, "")
                mObj1 = mObj1.NextMatch()
            End While
        Catch ex As ArgumentException
            Debug.Print(ex.ToString)
            'Syntax error in the regular expression
        End Try
        Try
            Dim rObj2 As New Regex("</?a.*?>")
            Dim mObj2 As Match = rObj2.Match(strClean)
            While mObj2.Success
                strClean = Strings.Replace(strClean, mObj2.Value, "")
                mObj2 = mObj2.NextMatch()
            End While
        Catch ex As ArgumentException
            'Syntax error in the regular expression
        End Try
        strClean = Strings.Replace(strClean, "</a>", "")
        If Strings.Right(strClean, 2) = "| " Then
            strClean = Strings.Left(strClean, strClean.Length - 2)
        End If
        If Strings.Right(strClean, 1) = "|" Then
            strClean = Strings.Left(strClean, strClean.Length - 1)
        End If
        If Not strClean Is Nothing Then
            If strClean.Contains("</div>") Then strClean = Regex.Match(strClean, "(.*?)</div>").Groups(1).Value
        End If
        Return strClean
    End Function
    Public Sub imdbtomovie(ByRef tmovie2 As movie)
        'tmovie2.pactor = Me.actor
        'Debug.Print(timdb.Actors())
        If Me.credits = Nothing Then tmovie2.pcredits = "" Else tmovie2.pcredits = cleanimdbdata(Me.credits)
        If Me.director = Nothing Then tmovie2.pdirector = "" Else tmovie2.pdirector = cleanimdbdata(Me.director)
        'tmovie2.filenameandpath = Me.filenameandpath
        If Me.genre = Nothing Then tmovie2.pgenre = "" Else tmovie2.pgenre = Me.genre
        If Me.id = Nothing Then tmovie2.pimdbnumber = "" Else tmovie2.pimdbnumber = Me.id
        If Me.mpaa = Nothing Then tmovie2.pmpaa = "" Else tmovie2.pmpaa = Me.mpaa
        If Me.outline = Nothing Then tmovie2.pplotoutline = "" Else tmovie2.pplotoutline = cleanimdbdata(Me.outline)
        If Me.plot = Nothing Then tmovie2.pplot = "" Else tmovie2.pplot = cleanimdbdata(Me.plot)
        If Me.rating = Nothing Then tmovie2.prating = "" Else tmovie2.prating = Me.rating
        If Me.originaltitle = Nothing Then tmovie2.poriginaltitle = "" Else tmovie2.poriginaltitle = Me.originaltitle
        If Me.votes = Nothing Then tmovie2.pvotes = "" Else tmovie2.pvotes = Me.votes
        If Me.runtime = Nothing Then tmovie2.pruntime = "" Else tmovie2.pruntime = Me.runtime
        If Me.tagline = Nothing Then tmovie2.ptagline = "" Else tmovie2.ptagline = cleanimdbdata(Me.tagline)
        If Me.title = Nothing Then
            tmovie2.ptitle = ""
            tmovie2.peditedmoviename = ""
        Else
            tmovie2.ptitle = Me.title
            tmovie2.peditedmoviename = Me.title 'this should be ok as imdb data is being specifically called upon here
        End If

        If Me.year = Nothing Then tmovie2.pyear = 1970 Else tmovie2.pyear = Convert.ToInt16(Me.year)
        If Me.top250 = Nothing Then tmovie2.ptop250 = "" Else tmovie2.ptop250 = Me.top250
        If Me.trailer = Nothing Then tmovie2.ptrailer = "" Else tmovie2.ptrailer = Me.trailer
        'If Me.title = Nothing Then tmovie2.pmoviename = "" Else tmovie2.pmoviename = Me.title
        tmovie2.pstudio = Me.studio
        If Me.studioreal Is Nothing Then
            If Not Me.studio = Nothing Then
                Me.studioreal = Me.studio
            End If
        End If
        If Me.studioreal = "" And Not Me.studio = "" Then
            tmovie2.pstudioreal = Me.studio
        Else
            tmovie2.pstudioreal = Me.studioreal
        End If
        'tmovie2.pstudioreal = Me.studioreal
        tmovie2.Actors = Me.Actors
        tmovie2.certification = Me.certification
        tmovie2.ptmdbid = Me.tmdbid
        ''Unassigned properties
        'Debug.Print(Me.watched)
        'Debug.Print(Me.playcount)



        ''tmovie2.pactor = Me.actor
        ''Debug.Print(timdb.Actors())
        'If Me.credits = Nothing Then tmovie2.pcredits = "" Else tmovie2.pcredits = Me.credits
        'If Me.director = Nothing Then tmovie2.pdirector = "" Else tmovie2.pdirector = Me.director
        ''tmovie2.filenameandpath = Me.filenameandpath
        'If Me.genre = Nothing Then tmovie2.pgenre = "" Else tmovie2.pgenre = Me.genre
        'If Me.id = Nothing Then tmovie2.pimdbnumber = "" Else tmovie2.pimdbnumber = Me.id
        'If Me.mpaa = Nothing Then tmovie2.pmpaa = "" Else tmovie2.pmpaa = Me.mpaa
        'If Me.outline = Nothing Then tmovie2.pplotoutline = "" Else tmovie2.pplotoutline = Me.outline
        'If Me.plot = Nothing Then tmovie2.pplot = "" Else tmovie2.pplot = Me.plot
        'If Me.rating = Nothing Then tmovie2.prating = "" Else tmovie2.prating = Me.rating
        'If Me.originaltitle = Nothing Then tmovie2.poriginaltitle = "" Else tmovie2.poriginaltitle = Me.originaltitle
        'If Me.votes = Nothing Then tmovie2.pvotes = "" Else tmovie2.pvotes = Me.votes
        'If Me.runtime = Nothing Then tmovie2.pruntime = "" Else tmovie2.pruntime = Me.runtime
        'If Me.tagline = Nothing Then tmovie2.ptagline = "" Else tmovie2.ptagline = Me.tagline
        'If Me.title = Nothing Then tmovie2.ptitle = "" Else tmovie2.ptitle = Me.title
        'If Me.year = Nothing Then tmovie2.pyear = 1970 Else tmovie2.pyear = Convert.ToInt16(Me.year)
        'If Me.top250 = Nothing Then tmovie2.ptop250 = "" Else tmovie2.ptop250 = Me.top250
        'If Me.trailer = Nothing Then tmovie2.ptrailer = "" Else tmovie2.ptrailer = Me.trailer
        ''If Me.title = Nothing Then tmovie2.pmoviename = "" Else tmovie2.pmoviename = Me.title
        'tmovie2.pstudio = Me.studio
        'tmovie2.Actors = Me.Actors
        ' ''Unassigned properties
        ''Debug.Print(Me.watched)
        ''Debug.Print(Me.playcount)

    End Sub
    Private Sub imdbtostring() 'ByRef timdb As IMDB)
        'Debug.Print(Me.actor)
        'Debug.Print(timdb.Actors())
        Debug.Print(Me.credits)
        Debug.Print(Me.director)
        Debug.Print(Me.filenameandpath)
        Debug.Print(Me.genre)
        Debug.Print(Me.id)
        Debug.Print(Me.mpaa)
        Debug.Print(Me.originaltitle)
        Debug.Print(Me.outline)
        Debug.Print(Me.playcount)
        Debug.Print(Me.plot)
        Debug.Print(Me.rating)
        Debug.Print(Me.runtime)
        Debug.Print(Me.tagline)
        Debug.Print(Me.title)
        Debug.Print(Me.top250)
        Debug.Print(Me.trailer)
        'Debug.Print(timdb.uname)
        Debug.Print(Me.watched)
        Debug.Print(Me.year)
    End Sub
End Class

<Serializable()> _
Public Class movie
    Private filemode As Boolean
    Private moviename As String
    Private reservedmoviename As String
    Private editedmoviename As String
    Private imdbid As String
    Private moviepath, pxmlpath As String
    Private year As Integer
    Private thumb1, thumb2, thumb3, thumb4, thumb5, thumb6, thumb7, thumb8, thumb9, thumb10, thumb11, thumb12, posterurl, thumbxml, thumbxmlwide, thumbxmltall, thumbxmlsquare As String
    Private title As String 'alias moviename
    Private originaltitle As String
    Private trailer As String
    Private rating As String = ""
    Private top250 As String
    Private votes As String
    Private outline As String
    Private plot As String
    Private tagline As String
    Private runtime As String
    Private thumb As String
    Private mpaa As String
    Private watched As String
    Private imdbnumber As String
    Private filenameandpath As String
    Private genre As String = ""
    Private credits As String
    Private director As String
    Private actor As New ArrayList
    Private tallthumb As String
    Private squarethumb As String
    Private widethumb As String
    Private boxshot As String
    Private poster As ArrayList '(multiples ? )
    Private postername As String
    Private imdblink As String '(URL)
    Private type As String '(movie or tvshow for layout)
    Private studio As String
    Private studioreal As String
    Private pcertification As String
    Private p_element_actor As New List(Of Actor)
    Private p_element_backdrops As New tmdbapiv2.Backdrops 'movieinfoplus.mip.themoviedb.backdrop.backdrops
    Private dataloadedfromnfo As Boolean
    Private p_element_seasonnum As String
    Private p_element_episodenum As String
    Private p_element_episodename As String
    Private p_element_fileinfo As New xbmcMediaInfo.Fileinfo
    Private p_element_downloadlist As ArrayList
    Private p_element_impawardsposters As New ArrayList
    Private p_element_tmdbposters As New ArrayList
    Private p_element_nicecoversposters As New ArrayList
    Private p_element_tmdbid As String
    Private p_element_tmdbposter As String
    Private p_element_tmdbposter_thumb As String
    Private p_element_tmdbbackground As String
    Private p_element_tmdbbackground_thumb As String
    Property ptmdbposter() As String
        Get
            Return p_element_tmdbposter
        End Get
        Set(ByVal value As String)
            p_element_tmdbposter = value
        End Set
    End Property
    Property ptmdbposter_thumb() As String
        Get
            Return p_element_tmdbposter_thumb
        End Get
        Set(ByVal value As String)
            p_element_tmdbposter_thumb = value
        End Set
    End Property
    Property ptmdbbackground() As String
        Get
            Return p_element_tmdbbackground
        End Get
        Set(ByVal value As String)
            p_element_tmdbbackground = value
        End Set
    End Property
    Property ptmdbbackground_thumb() As String
        Get
            Return p_element_tmdbbackground_thumb
        End Get
        Set(ByVal value As String)
            p_element_tmdbbackground_thumb = value
        End Set
    End Property

    Property ptmdbid() As String
        Get
            Return p_element_tmdbid
        End Get
        Set(ByVal value As String)
            p_element_tmdbid = value
        End Set
    End Property
    Property pimpawardsposters() As ArrayList
        Get
            Return p_element_impawardsposters
        End Get
        Set(ByVal value As ArrayList)
            p_element_impawardsposters = value
        End Set
    End Property
    Property ptmdbposters() As ArrayList
        Get
            Return p_element_tmdbposters
        End Get
        Set(ByVal value As ArrayList)
            p_element_tmdbposters = value
        End Set
    End Property
    Property pnicecoversposters() As ArrayList
        Get
            Return p_element_nicecoversposters
        End Get
        Set(ByVal value As ArrayList)
            p_element_nicecoversposters = value
        End Set
    End Property

    Property pdownloadlist() As ArrayList
        Get
            Return p_element_downloadlist
        End Get
        Set(ByVal value As ArrayList)
            p_element_downloadlist = value
        End Set
    End Property
    Property pfilemode() As Boolean
        Get
            Return filemode
        End Get
        Set(ByVal value As Boolean)
            filemode = value
        End Set
    End Property
    'Fileinfo element
    <XmlElement("fileinfo")> _
    Public Property [fileinfo]() As xbmcMediaInfo.Fileinfo
        Get
            Return p_element_fileinfo
        End Get
        Set(ByVal value As xbmcMediaInfo.Fileinfo)
            p_element_fileinfo = value
        End Set
    End Property

    Property peditedmoviename() As String
        Get
            Return editedmoviename
        End Get
        Set(ByVal value As String)
            editedmoviename = value
        End Set
    End Property


#Region "-- properties for movie class --"


    Property seasonnum() As String
        Get
            Return p_element_seasonnum
        End Get
        Set(ByVal value As String)
            p_element_seasonnum = value
        End Set
    End Property
    Property episodenum() As String
        Get
            Return p_element_episodenum
        End Get
        Set(ByVal value As String)
            p_element_episodenum = value
        End Set
    End Property
    Property episodename() As String
        Get
            Return p_element_episodename
        End Get
        Set(ByVal value As String)
            p_element_episodename = value
        End Set
    End Property
#End Region
    Public Sub New()
        'Dim nMovie As New movie
        pdirector = ""
        pgenre = ""
        prating = ""
    End Sub

#Region "--- Movie Properties ---"
    <XmlElement("actor")> _
Public Property [Actors]() As List(Of Actor)
        Get
            Return Me.p_element_actor
        End Get
        Set(ByVal Value As List(Of Actor))
            Me.p_element_actor = Value
        End Set
    End Property
    Public Property pdatafromnfo() As Boolean
        Get
            Return dataloadedfromnfo
        End Get
        Set(ByVal value As Boolean)
            dataloadedfromnfo = value
        End Set
    End Property
    Public Property pbackdrops() As tmdbapiv2.Backdrops '.mip.themoviedb.backdrop.backdrops
        Get
            Return p_element_backdrops
        End Get
        Set(ByVal value As tmdbapiv2.Backdrops) 'movieinfoplus.mip.themoviedb.backdrop.backdrops)
            p_element_backdrops = value
        End Set
    End Property
    Public Property certification() As String
        Get
            Return pcertification
        End Get
        Set(ByVal value As String)
            pcertification = value
        End Set
    End Property
    Public Property pstudio() As String
        Get
            Return studio
        End Get
        Set(ByVal value As String)
            studio = value
        End Set
    End Property
    Public Property pstudioreal() As String
        Get
            Return studioreal
        End Get
        Set(ByVal value As String)
            studioreal = value
        End Set
    End Property
    'Public Property pactor() As ArrayList
    '    Get
    '        Return actor
    '    End Get
    '    Set(ByVal value As ArrayList)
    '        actor = value
    '    End Set
    'End Property
    Public Property pcredits() As String
        Get
            Return credits
        End Get
        Set(ByVal value As String)
            credits = value
        End Set
    End Property
    Public Property pdirector() As String
        Get
            Return director
        End Get
        Set(ByVal value As String)
            director = value
        End Set
    End Property
    Public Property poriginaltitle() As String
        Get
            Return originaltitle
        End Get
        Set(ByVal value As String)
            originaltitle = value
        End Set
    End Property
    Public Property ptrailer() As String
        Get
            Return trailer
        End Get
        Set(ByVal value As String)
            trailer = value
        End Set
    End Property
    Public Property pmoviename() As String
        Get
            Return moviename
        End Get
        Set(ByVal value As String)
            moviename = value
        End Set
    End Property
    Public Property ppostername() As String
        Get
            Return postername
        End Get
        Set(ByVal value As String)
            postername = value
        End Set
    End Property
    Public Property ppxmlpath() As String
        Get
            Return pxmlpath
        End Get
        Set(ByVal value As String)
            pxmlpath = value
        End Set
    End Property
    Public Property pgenre() As String
        Get
            Return genre
        End Get
        Set(ByVal value As String)
            genre = value
        End Set
    End Property
    Public Property ptitle() As String
        Get
            Return title
        End Get
        Set(ByVal value As String)
            title = value
        End Set
    End Property
    Public Property pyear() As Integer
        Get
            Return year

        End Get
        Set(ByVal value As Integer)
            year = value
        End Set
    End Property
    Public Property pimdbnumber() As String
        Get
            Return imdbnumber
        End Get
        Set(ByVal value As String)
            imdbnumber = value
            imdbid = value

        End Set
    End Property
    Public Property pplotoutline() As String
        Get
            Return outline
        End Get
        Set(ByVal value As String)
            outline = value
        End Set
    End Property
    Public Property pplot() As String
        Get
            Return plot
        End Get
        Set(ByVal value As String)
            plot = value
        End Set
    End Property
    Public Property pruntime() As String
        Get
            Return runtime
        End Get
        Set(ByVal value As String)
            runtime = value
        End Set
    End Property
    Public Property pmpaa() As String
        Get
            Return mpaa
        End Get
        Set(ByVal value As String)
            mpaa = value
        End Set
    End Property
    Property preservedmoviename() As String
        Get
            Return Me.reservedmoviename
        End Get
        Set(ByVal value As String)
            Me.reservedmoviename = value
        End Set
    End Property
    Property ptype() As String
        Get
            Return Me.type
        End Get
        Set(ByVal value As String)
            Me.type = value
        End Set
    End Property
    Property prating() As String
        Get
            Return Me.rating
        End Get
        Set(ByVal value As String)
            Me.rating = value
        End Set
    End Property
    Property ptop250() As String
        Get
            Return Me.top250
        End Get
        Set(ByVal value As String)
            Me.top250 = value
        End Set
    End Property
    Property pvotes() As String
        Get
            Return Me.votes
        End Get
        Set(ByVal value As String)
            Me.votes = value
        End Set
    End Property

    Property ptagline() As String
        Get
            Return Me.tagline
        End Get
        Set(ByVal value As String)
            tagline = value

        End Set
    End Property
#End Region
    Public Sub setmtype(ByVal ptype As String)
        Me.type = ptype
    End Sub
    Public Function getmtype() As String
        Return (Me.type)
    End Function
    Public Sub setmoviename(ByVal pmoviename As String)
        Me.moviename = pmoviename
    End Sub
    Public Function getmoviename() As String
        Return (Me.moviename)
    End Function
    Public Sub setimdbid(ByVal pimdbid As String)
        Me.imdbid = pimdbid
    End Sub
    Public Function getimdbid() As String
        Return (Me.imdbid)
    End Function
    Public Sub setmoviepath(ByVal pmoviepath As String)
        Me.moviepath = pmoviepath
    End Sub
    Public Function getmoviepath() As String
        Return (Me.moviepath)
    End Function
    Public Sub setposterurl(ByVal pposter As String)
        Me.posterurl = pposter
    End Sub
    Public Function getposterurl() As String
        Return (Me.posterurl)
    End Function
    Public Sub setthumbxml(ByVal pthumbxml As String)
        Me.thumbxml = pthumbxml
    End Sub
    Public Function getthumbxml() As String
        Return (Me.thumbxml)
    End Function
    Public Sub setthumbxmlwide(ByVal pthumbxml As String)
        Me.thumbxmlwide = pthumbxml
    End Sub
    Public Function getthumbxmlwide() As String
        Return (Me.thumbxmlwide)
    End Function
    Public Sub setthumbxmltall(ByVal pthumbxml As String)
        Me.thumbxmltall = pthumbxml
    End Sub
    Public Function getthumbxmltall() As String
        Return (Me.thumbxmltall)
    End Function
    Public Sub setthumbxmlsquare(ByVal pthumbxml As String)
        Me.thumbxmlsquare = pthumbxml
    End Sub
    Public Function getthumbxmlsquare() As String
        Return (Me.thumbxmlsquare)
    End Function
    Public Sub sethumb1(ByVal pthumb1 As String)
        Me.thumb1 = pthumb1
    End Sub
    Public Function getthumb1() As String
        Return (Me.thumb1)
    End Function
    Public Sub sethumb2(ByVal pthumb2 As String)
        Me.thumb2 = pthumb2
    End Sub
    Public Function getthumb2() As String
        Return (Me.thumb2)
    End Function
    Public Sub sethumb3(ByVal pthumb3 As String)
        Me.thumb3 = pthumb3
    End Sub
    Public Function getthumb3() As String
        Return (Me.thumb3)
    End Function
    Public Sub sethumb4(ByVal pthumb4 As String)
        Me.thumb4 = pthumb4
    End Sub
    Public Function getthumb4() As String
        Return (Me.thumb4)
    End Function
    Public Sub sethumb5(ByVal pthumb5 As String)
        Me.thumb5 = pthumb5
    End Sub
    Public Function getthumb5() As String
        Return (Me.thumb5)
    End Function
    Public Sub sethumb6(ByVal pthumb6 As String)
        Me.thumb6 = pthumb6
    End Sub
    Public Function getthumb6() As String
        Return (Me.thumb6)
    End Function
    Public Sub sethumb7(ByVal pthumb7 As String)
        Me.thumb7 = pthumb7
    End Sub
    Public Function getthumb7() As String
        Return (Me.thumb7)
    End Function
    Public Sub sethumb8(ByVal pthumb8 As String)
        Me.thumb8 = pthumb8
    End Sub
    Public Function getthumb8() As String
        Return (Me.thumb8)
    End Function
    Public Sub sethumb9(ByVal pthumb9 As String)
        Me.thumb9 = pthumb9
    End Sub
    Public Function getthumb9() As String
        Return (Me.thumb9)
    End Function
    Public Sub sethumb10(ByVal pthumb10 As String)
        Me.thumb10 = pthumb10
    End Sub
    Public Function getthumb10() As String
        Return (Me.thumb10)
    End Function
    Public Sub sethumb11(ByVal pthumb11 As String)
        Me.thumb11 = pthumb11
    End Sub
    Public Function getthumb11() As String
        Return (Me.thumb11)
    End Function
    Public Sub sethumb12(ByVal pthumb12 As String)
        Me.thumb12 = pthumb12
    End Sub
    Public Function getthumb12() As String
        Return (Me.thumb12)
    End Function
    Public Sub setyear(ByVal pyear As Integer)
        Me.year = pyear
    End Sub
    Public Function getyear() As Integer
        Return Me.year
    End Function

    Public Sub writeMovieXML(ByVal m As movie, ByVal folder As String)
        Dim id As String = m.getimdbid
        Dim serializer As New XmlSerializer(Me.GetType())
        Dim writer As New StreamWriter(folder + Convert.ToString(id) + ".xml")

        'Hard coded options
        'p.HEADER = "<p><center><hr><strong>Please do not reply to this message. Replies are not monitored or answered.</strong><br><hr></center></p><p>Thank you for contacting ACT! Service &amp; Support. This email was provided as a follow up to your support inquiry. Please save this email for future reference. <br><br>"
        serializer.Serialize(writer, m)
        writer.Close()
        '        Debug.WriteLine("serialized it")
    End Sub
    Public Function readposterfiletogetimdbid(ByRef pathtofile As String) As String
        Dim s As String = File.ReadAllText(pathtofile)
        Dim sid As String = ""
        Try
            sid = Regex.Match(s, "<pimdbid>(tt\d{6,7})</pimdbid>", RegexOptions.IgnoreCase).Groups(1).Value
        Catch ex As ArgumentException
            'Syntax error in the regular expression
        End Try
        Return sid
    End Function

    Public Function readnfofile(ByRef pathtofile As String) As String

        Dim s As String = File.ReadAllText(pathtofile)
        Dim sid As String = ""
        Try
            sid = Regex.Match(s, "<id>(tt\d{6,7})</id>", RegexOptions.IgnoreCase).Groups(1).Value
        Catch ex As ArgumentException
            'Syntax error in the regular expression
        End Try

        'Dim xmlDoc As New XmlDocument
        'xmlDoc.Load(pathtofile)
        'xmlDoc.GetElementsByTagName("id")

        'Dim myXMLTextReader As New XmlTextReader(pathtofile)
        'myXMLTextReader.ReadStartElement("id")
        'Do While myXMLTextReader.Read()
        '    If myXMLTextReader.Name = "id" Then Exit Do
        '    Debug.WriteLine(myXMLTextReader.ReadOuterXml)
        'Loop
        'myXMLTextReader.Close()
        'Dim sid As String = ""
        'Try
        '    xmlDoc.LoadXml(s)
        '    Dim n As XmlNode
        '    'xmlDoc.GetElementsByTagName("id")
        '    ' Scroll through the nodes
        '    For Each n In xmlDoc.GetElementsByTagName("id")
        '        'Debug.WriteLine(n.Attributes("Type").Value)
        '        'Debug.Print(n.ToString)
        '        Debug.Print(n.InnerText)
        '        sid = n.InnerText
        '    Next
        'Catch ex As Exception

        '  End Try
        Return sid
    End Function
    Public Sub saveimdb2(ByRef tmovie As movie, Optional ByVal writemovienfo As Boolean = False, Optional ByVal writemovienamedotnfo As Boolean = False, Optional ByVal keepthetag As Boolean = False)
        'check tmdbid
        checktmdbid(tmovie)

        Dim nm As New Mov 'new movie class for xbmc
        If Not tmovie.peditedmoviename = "" Then
            nm.Title = cleanimdbdata(tmovie.peditedmoviename)
        Else
            nm.Title = cleanimdbdata(tmovie.pmoviename)
        End If
        ' nm.Title = tmovie.moviename
        nm.tmdbId = tmovie.ptmdbid
        nm.Title = cleanimdbdata(nm.Title)
        nm.Rating = tmovie.prating
        nm.Year = tmovie.pyear.ToString
        nm.Top250 = tmovie.ptop250
        nm.Votes = tmovie.pvotes
        nm.Outline = tmovie.outline
        nm.Plot = tmovie.pplot
        nm.Tagline = tmovie.ptagline
        nm.Runtime = tmovie.pruntime
        nm.Thumb = ""
        nm.Certification = tmovie.pcertification

        'TMDB Fanart update - beta 2
        nm.Fanart.Url = "http://www.themoviedb.org/"
        'for reference, original is the only sized passed back to the movie object as the others can be easy derived from it
        '<backdrop size="original">http://www.themoviedb.org/image/backdrops/7598/Lord_of_the_Rings_The_Fellowship_of_the_Ring_fanart.jpg</backdrop>
        '<backdrop size="thumb">http://www.themoviedb.org/image/backdrops/7598/Lord_of_the_Rings_The_Fellowship_of_the_Ring_fanart_thumb.jpg</backdrop>
        Dim fanartcount As Integer = tmovie.pbackdrops.backdrops.Count
        Dim curfacount As Integer = 0
        Dim fanarttarray As New ArrayList
        While curfacount < fanartcount
            Dim faatcounter As New tmdbapiv2.backdrop
            faatcounter = tmovie.pbackdrops.backdrops(curfacount)
            Dim thm1 As New mip.mov.Thumb
            Dim link As String = ""
            Dim thumblink As String = ""
            'clean out the site portion of the url - http://www.themoviedb.org/
            link = Strings.Replace(faatcounter.Text, "http://www.themoviedb.org/", "")
            thumblink = Strings.Left(link, link.Length - 4)
            thumblink += "_thumb.jpg"
            thm1.Preview = thumblink
            thm1.Text = link
            nm.Fanart.Thumbs.Insert(curfacount, thm1)
            curfacount += 1
        End While

        nm.Mpaa = tmovie.pmpaa
        'If maincollection.rconf.pcbmovie_use_certification_for_mpaa Then
        '    nm.Mpaa = tmovie.certification
        'End If
        nm.Certification = tmovie.pcertification
        nm.Playcount = ""
        nm.File = ""
        nm.Path = ""
        nm.Filenameandpath = ""
        nm.Id = tmovie.pimdbnumber
        nm.Genre = tmovie.pgenre
        nm.Credits = tmovie.pcredits
        nm.Director = tmovie.pdirector
        nm.Premiered = ""
        nm.Status = ""
        nm.Studio = tmovie.pstudio
        nm.Studioreal = tmovie.pstudioreal

        nm.Album = ""
        nm.Trailer = tmovie.ptrailer
        nm.Watched = "no"
        'add actors
        Dim mypeeps As New movieinfoplus.mip.mov.Actor
        If Not tmovie.Actors Is Nothing Then
            nm.Actors = tmovie.Actors
        End If
        'end actors
        If Not nm.Actors Is Nothing Then
            For Each curactor In nm.Actors
                curactor.Name = cleanimdbdata(curactor.Name)
                curactor.Role = cleanimdbdata(curactor.Role)
                curactor.Thumb = Strings.Replace(curactor.Thumb, "._SY30_SX23_.jpg", "._SY275_SX400_.jpg")
            Next
        End If
        'add fileinfo
        nm.fileinfo = tmovie.fileinfo
        If maincollection.rconf.pcbGeneralSupportSkinBasedFlagging And Not keepthetag Then
            nm.Studio = tmovie.studioreal & tmovie.fileinfo.toTagData(tmovie.fileinfo)
            tmovie.studio = nm.Studio 'tmovie.studioreal & tmovie.fileinfo.toTagData(tmovie.fileinfo)
        End If
        If keepthetag Then
            nm.Studio = tmovie.studio
            nm.Studioreal = tmovie.studioreal
        End If
        'rev 2401 generate the nfo files
        Dim nfonamepath As String = tmovie.getmoviepath + "\"
        Dim filename As String = ""

        If writemovienamedotnfo And Not tmovie.pfilemode Then 'maincollection.moviemode = "file" Then
            filename = tmovie.pmoviename + ".nfo"
            nm.writeMovXML(nfonamepath, filename)
        End If

        If writemovienfo And Not tmovie.pfilemode Then 'maincollection.moviemode = "file" Then
            filename = "movie.nfo"
            nm.writeMovXML(nfonamepath, filename)
        End If

        'for filemode, we need to use the filename.nfo


        If tmovie.pfilemode Then
            Dim filteredname As String = ""
            Dim lmoviename As String = tmovie.preservedmoviename
            'strip out cd multipart
            Dim RegexObj As New Regex("(([ _\.-]+cd)[ _\.-]*([0-9a-d]+))")
            lmoviename = Strings.Replace(lmoviename, RegexObj.Match(lmoviename).Groups(1).Value, "")
            'strip out dvd multipart
            Dim RegexObj2 As New Regex("(([ _\.-]+dvd)[ _\.-]*([0-9a-d]+))")
            lmoviename = Strings.Replace(lmoviename, RegexObj2.Match(lmoviename).Groups(1).Value, "")
            'strip out part multipart
            Dim RegexObj3 As New Regex("(([ _\.-]+part)[ _\.-]*([0-9a-d]+))")
            lmoviename = Strings.Replace(lmoviename, RegexObj3.Match(lmoviename).Groups(1).Value, "")
            Dim retstr As String = ""
            If Not lmoviename = Nothing Then
                If lmoviename.Length > 5 Then
                    If Strings.Left(Strings.Right(lmoviename, 3), 1) = "." Then
                        retstr = Strings.Left(lmoviename, lmoviename.Length - 3)
                    Else
                        retstr = Strings.Left(lmoviename, lmoviename.Length - 4)
                    End If

                End If
            End If
            filename = retstr + ".nfo"
            'filename = lmoviename
            ''End If
            'filename = maincollection.stripstackforfilemode(maincollection.removeextension(tmovie.preservedmoviename)) + ".nfo"
        End If
        'filename = maincollection.stripstackforfilemode(maincollection.removeextension(tmovie.preservedmoviename)) + ".nfo"
        'nm.writeMovXML(nfonamepath, filename)
        If filename = "" Then Exit Sub 'no name found when parsing filename, so we exit

        nm.writeMovXML(nfonamepath, filename)
        'check for video_ts, copy file if there's a VIDEO_TS folder inside
        If Not tmovie.pfilemode And Directory.Exists(nfonamepath + "VIDEO_TS") Then
            Try
                If File.Exists(nfonamepath + "VIDEO_TS\" + filename) Then
                    File.Delete(nfonamepath + "VIDEO_TS\" + filename)
                End If
            Catch ex As Exception

            End Try
            Try
                nm.writeMovXML(nfonamepath + "VIDEO_TS\", filename)
            Catch ex As Exception

            End Try

        End If
        'get rid of temp movie
        nm = Nothing

        If maincollection.rconf.pcbcreateImdbIDtxt And Not tmovie.pfilemode Then
            If File.Exists(addfiletofolder(tmovie.getmoviepath, "imdbid.txt")) Then
                Try
                    Dim curidinfile As String = ""
                    curidinfile = File.ReadAllText(addfiletofolder(tmovie.getmoviepath, "imdbid.txt"))
                    If Not curidinfile = tmovie.pimdbnumber Then
                        File.Delete(addfiletofolder(tmovie.getmoviepath, "imdbid.txt"))
                    End If
                Catch ex As Exception

                End Try

            End If
            If Not File.Exists(addfiletofolder(tmovie.getmoviepath, "imdbid.txt")) Then
                writeStringToFile(tmovie.pimdbnumber, addfiletofolder(tmovie.getmoviepath, "imdbid.txt"))
            End If
        End If

    End Sub
    Public Sub saveimdbinfomanual(ByRef tmovie As movie, ByVal vwritemovienfo As Boolean, ByVal vwritemovienamedotnfo As Boolean, Optional ByVal keeptag As Boolean = False)
        saveimdb2(tmovie, vwritemovienfo, vwritemovienamedotnfo, keeptag)
        Exit Sub

        Dim nfonamepath As String = tmovie.getmoviepath + "\" + tmovie.pmoviename + ".nfo"
        'dim xml As string = "<node>it's my \"node\" & i like it<node>";
        Dim xtw As XmlTextWriter
        xtw = New XmlTextWriter(nfonamepath, Encoding.UTF8)
        With xtw
            .Formatting = Formatting.Indented
            .Indentation = 5
            .IndentChar = CChar(" ")

        End With
        xtw.WriteStartDocument()
        xtw.WriteStartElement("movie")
        mxmladdelement(xtw, "title", tmovie.moviename)
        mxmladdelement(xtw, "rating", tmovie.prating.ToString)
        mxmladdelement(xtw, "year", tmovie.pyear.ToString) ' + "</year>" + Environment.NewLine
        mxmladdelement(xtw, "top250", tmovie.ptop250) ' + "</top250>" + Environment.NewLine
        mxmladdelement(xtw, "votes", tmovie.pvotes) ' + "</votes>" + Environment.NewLine
        mxmladdelement(xtw, "outline", tmovie.outline) ' + "</outline>" + Environment.NewLine
        mxmladdelement(xtw, "plot", tmovie.pplot) ' + "</plot>" + Environment.NewLine
        mxmladdelement(xtw, "tagline", tmovie.ptagline) ' + "</tagline>" + Environment.NewLine
        mxmladdelement(xtw, "runtime", tmovie.pruntime) ' + "</runtime>" + Environment.NewLine
        mxmladdelement(xtw, "thumb", "") ' + Environment.NewLine
        mxmladdelementfanart(xtw, tmovie.pimdbnumber) '
        mxmladdelement(xtw, "mpaa", tmovie.pmpaa) '+ "</mpaa>" + Environment.NewLine
        mxmladdelement(xtw, "playcount", "") '
        mxmladdelement(xtw, "File", "")
        mxmladdelement(xtw, "Path", "")
        mxmladdelement(xtw, "filenameandpath", "")
        mxmladdelement(xtw, "id", tmovie.imdbid) '+ "</id>" + Environment.NewLine
        mxmladdelement(xtw, "genre", tmovie.pgenre) '+ "</genre>" + Environment.NewLine
        mxmladdelement(xtw, "credits", tmovie.pcredits)
        mxmladdelement(xtw, "director", tmovie.pdirector) ' + "</director>" + Environment.NewLine
        mxmladdelement(xtw, "premiered", "") '+ "" + "</premiered>" + Environment.NewLine
        mxmladdelement(xtw, "status", "") '></status>" + Environment.NewLine + "<code></code>" + Environment.NewLine + "<aired></aired>" + Environment.NewLine
        mxmladdelement(xtw, "studio", tmovie.pstudio) '</studio>" + Environment.NewLine
        mxmladdelement(xtw, "album", "") '></album>" + Environment.NewLine
        mxmladdelement(xtw, "trailer", tmovie.ptrailer)
        mxmladdelement(xtw, "watched", "no")
        Dim mypeeps As New movieinfoplus.mip.mov.Actor
        If Not tmovie.actor Is Nothing Then
            For Each mypeeps In tmovie.actor
                mxmladdelementactor(xtw, mypeeps.Name, mypeeps.Role, mypeeps.Thumb)
            Next
        End If
        xtw.WriteEndElement()
        xtw.WriteEndDocument()
        xtw.Close()
        ''t24 += "<actor><name></name><role></role><thumb></thumb></actor>"
        't25 = "<artist></artist>" + Environment.NewLine
        'tMovieEnd = "</movie>" + Environment.NewLine

        'tmovietextforfile = tXMLHeader + tMovieStart + t2 + t3 + t4 + t5 + t6 + t7 + t8 + t9 + t10 + t11 + t12 + t13 + t14 + t15 + t16 + t17 + t18 + t19 + t20 + t21 + t22 + t23 + t24 + t25 + tMovieEnd
        'Dim writer As String = tmovie.getmoviepath + "\" + tmovie.pmoviename + ".nfo"
        'File.WriteAllText(writer, tmovietextforfile)


    End Sub
    Private Shared Sub mxmladdelement(ByVal xml_text_writer As XmlTextWriter, ByVal elementname As String, ByVal elementdata As String)
        xml_text_writer.WriteStartElement(elementname)
        xml_text_writer.WriteString(elementdata)
        xml_text_writer.WriteEndElement()
    End Sub
    Private Shared Sub mxmladdelementfanart(ByVal xml_text_writer As XmlTextWriter, ByVal timdbid As String)
        'needs fixed, end element must be just the element
        'example
        '<fanart><thumb></thumb></fanart>
        xml_text_writer.WriteStartElement("fanart")
        xml_text_writer.WriteAttributeString("fanart", "url", "www.hi.com")
        ' url='http://www.meligrove.com/'")

        xml_text_writer.WriteStartElement("thumb preview='/images/posters/movies/thumbnails/" + timdbid + ".jpg'")
        xml_text_writer.WriteString("/images/posters/movies/jpg/" + timdbid + ".jpg'")
        xml_text_writer.WriteEndElement()

        xml_text_writer.WriteStartElement("thumb preview='/images/posters/movies/thumbnails/" + timdbid + "-1.jpg'")
        xml_text_writer.WriteString("/images/posters/movies/jpg/" + timdbid + "-1.jpg'")
        xml_text_writer.WriteEndElement()

        xml_text_writer.WriteStartElement("thumb preview='/images/posters/movies/thumbnails/" + timdbid + "-2.jpg'")
        xml_text_writer.WriteString("/images/posters/movies/jpg/" + timdbid + "-2.jpg'")
        xml_text_writer.WriteEndElement()

        xml_text_writer.WriteEndElement()
    End Sub
    Private Shared Sub mxmladdelementactor(ByVal xml_text_writer As XmlTextWriter, ByVal name As String, ByVal role As String, ByVal thumb As String)
        xml_text_writer.WriteStartElement("actor")

        xml_text_writer.WriteStartElement("name")
        xml_text_writer.WriteString(name)
        xml_text_writer.WriteEndElement()

        xml_text_writer.WriteStartElement("role")
        xml_text_writer.WriteString(role)
        xml_text_writer.WriteEndElement()

        xml_text_writer.WriteStartElement("thumb")
        xml_text_writer.WriteString(thumb)
        xml_text_writer.WriteEndElement()

        xml_text_writer.WriteEndElement()
    End Sub
    Public Sub saveimdbinfo(ByRef tmovie As movie)
        ' Dim xmlfile As String = "config"
        Dim tXMLHeader, tMovieStart, tMovieEnd, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t25 As String
        Dim t24 As String = Nothing
        Dim tmovietextforfile As String
        tXMLHeader = "<?xml version=" + """" + "1.0" + """" + " encoding=" + """" + "UTF-8" + """" + " standalone=" + """" + "yes" + """" + " ?>" + Environment.NewLine '+ Chr(10) + Chr(13)
        tMovieStart = "<movie>" + Environment.NewLine
        t2 = "<title>" + tmovie.moviename + "</title>" + Environment.NewLine '+ Chr(10) + Chr(13)
        t3 = "<rating>" + tmovie.prating.ToString + "</rating>" + Environment.NewLine
        t4 = "<year>" + tmovie.pyear.ToString + "</year>" + Environment.NewLine
        t5 = "<top250>" + tmovie.ptop250 + "</top250>" + Environment.NewLine
        t6 = "<votes>" + tmovie.pvotes + "</votes>" + Environment.NewLine
        t7 = "<outline>" + tmovie.outline + "</outline>" + Environment.NewLine
        t8 = "<plot>" + tmovie.pplot + "</plot>" + Environment.NewLine
        t9 = "<tagline>" + tmovie.ptagline + "</tagline>" + Environment.NewLine
        t10 = "<runtime>" + tmovie.pruntime + "</runtime>" + Environment.NewLine
        t11 = "<thumb></thumb>" + Environment.NewLine
        t12 = "<fanart url='http://www.meligrove.com/'><thumb preview='/images/posters/movies/thumbnails/" + tmovie.pimdbnumber + ".jpg'>/images/posters/movies/jpg/" + tmovie.pimdbnumber + ".jpg</thumb><thumb preview='/images/posters/movies/thumbnails/" + tmovie.pimdbnumber + "-1.jpg'>/images/posters/movies/jpg/" + tmovie.pimdbnumber + "-1.jpg</thumb><thumb preview='/images/posters/movies/thumbnails/" + tmovie.pimdbnumber + "-2.jpg'>/images/posters/movies/jpg/" + tmovie.pimdbnumber + "-2.jpg</thumb></fanart>" + Environment.NewLine
        t13 = "<mpaa>" + tmovie.pmpaa + "</mpaa>" + Environment.NewLine
        t14 = "<playcount></playcount><file></file><path></path><filenameandpath />" + Environment.NewLine
        t15 = "<id>" + tmovie.imdbid + "</id>" + Environment.NewLine
        t16 = "<genre>" + tmovie.pgenre.ToString + "</genre>" + Environment.NewLine
        t17 = "<credits></credits>" + Environment.NewLine
        t18 = "<director>" + tmovie.pdirector.ToString + "</director>" + Environment.NewLine
        t19 = "<premiered>" + "" + "</premiered>" + Environment.NewLine
        t20 = "<status></status>" + Environment.NewLine + "<code></code>" + Environment.NewLine + "<aired></aired>" + Environment.NewLine
        t21 = "<studio></studio>" + Environment.NewLine
        t22 = "<album></album>" + Environment.NewLine
        t23 = "<trailer>" + tmovie.ptrailer + "</trailer>" + Environment.NewLine
        't24 = ""
        Dim mypeeps As New movieinfoplus.mip.mov.Actor
        If Not tmovie.actor Is Nothing Then
            For Each mypeeps In tmovie.actor
                t24 += "<actor>" + Environment.NewLine
                t24 += "<name>" + mypeeps.Name + "</name>" + Environment.NewLine
                t24 += "<role>" + mypeeps.Role + "</role>" + Environment.NewLine
                t24 += "<thumb>" + mypeeps.Thumb + "</thumb>" + Environment.NewLine
                t24 += "</actor>" + Environment.NewLine
            Next
        End If

        't24 += "<actor><name></name><role></role><thumb></thumb></actor>"
        t25 = "<artist></artist>" + Environment.NewLine
        tMovieEnd = "</movie>" + Environment.NewLine

        tmovietextforfile = tXMLHeader + tMovieStart + t2 + t3 + t4 + t5 + t6 + t7 + t8 + t9 + t10 + t11 + t12 + t13 + t14 + t15 + t16 + t17 + t18 + t19 + t20 + t21 + t22 + t23 + t24 + t25 + tMovieEnd


        Dim writer As String = tmovie.getmoviepath + "\" + tmovie.pmoviename + ".nfo" 'Form1.xmlfolder + mname + "f" + Format() + "c" + catagory + "s" + style + ".xml"
        File.WriteAllText(writer, tmovietextforfile)
    End Sub
    Private Sub escapexml(ByRef tstring As String)
        tstring = Strings.Replace(tstring, "<", "&lt;")

    End Sub

End Class
Public Class mediaicons
    Dim cat(,) As String
    'cat("1","Game")
    'ca


    '<category key="1" name="Game" /> 
    '<category key="2" name="Movie" /> 
    '<category key="3" name="Book" /> 
    '<category key="4" name="TV Show" /> 
    '<category key="5" name="Music" /> 
    '<category key="6" name="Actor" /> 
    '<category key="7" name="Actress" /> 
    '<category key="8" name="Director" /> 
    '<category key="9" name="Writer" /> 
    '<category key="10" name="Person" /> 
    '<category key="11" name="Place" /> 
    '<category key="12" name="Thing" /> 
    '<category key="13" name="App" /> 
    '<category key="14" name="Category" />
End Class
<Serializable()> _
Public Class icontoxml
    Dim icon1 As String
    Dim icon2 As String
    Dim icon3 As String
    Dim icon4 As String
    Dim icon5 As String
    Dim icon6 As String
    Dim icon7 As String
    Dim icon8 As String
    Public Sub seticon1(ByVal value As String)
        Me.icon1 = value
    End Sub
    Public Sub seticon2(ByVal value As String)
        Me.icon2 = value
    End Sub
    Public Sub seticon3(ByVal value As String)
        Me.icon3 = value
    End Sub
    Public Sub seticon4(ByVal value As String)
        Me.icon4 = value
    End Sub
    Public Sub seticon5(ByVal value As String)
        Me.icon5 = value
    End Sub
    Public Sub seticon6(ByVal value As String)
        Me.icon6 = value
    End Sub
    Public Sub seticon7(ByVal value As String)
        Me.icon7 = value
    End Sub
    Public Sub seticon8(ByVal value As String)
        Me.icon8 = value
    End Sub
    Public Sub New()
        icon1 = Nothing
        icon2 = Nothing
        icon3 = Nothing
        icon4 = Nothing
        icon5 = Nothing
        icon6 = Nothing
        icon7 = Nothing
        icon8 = Nothing
    End Sub

    Public Property url1() As String
        Get
            Return icon1
        End Get
        Set(ByVal value As String)
            icon1 = value
        End Set
    End Property
    Public Property url2() As String
        Get
            Return icon2
        End Get
        Set(ByVal value As String)
            icon2 = value
        End Set
    End Property
    Public Property url3() As String
        Get
            Return icon3
        End Get
        Set(ByVal value As String)
            icon3 = value
        End Set
    End Property
    Public Property url4() As String
        Get
            Return icon4
        End Get
        Set(ByVal value As String)
            icon4 = value
        End Set
    End Property
    Public Property url5() As String
        Get
            Return icon5
        End Get
        Set(ByVal value As String)
            icon5 = value
        End Set
    End Property
    Public Property url6() As String
        Get
            Return icon6
        End Get
        Set(ByVal value As String)
            icon6 = value
        End Set
    End Property
    Public Property url7() As String
        Get
            Return icon7
        End Get
        Set(ByVal value As String)
            icon7 = value
        End Set
    End Property
    Public Property url8() As String
        Get
            Return icon8
        End Get
        Set(ByVal value As String)
            icon8 = value
        End Set
    End Property

    Public Sub savexmliconwriter(ByRef curicon As icontoxml, ByVal mname As String, ByVal format As String, ByVal catagory As String, ByVal style As String)
        ' set to 4 posters in build 1.4.8.23 to save time
        Dim text As String
        text = "<?xml version='1.0' encoding='utf-8' standalone='yes'?><icons><icon name='icon1' url='" + curicon.url1 + "' /><icon name='icon2' url='" + curicon.url2 + "' /><icon name='icon3' url='" + curicon.url3 + "' /><icon name='icon4' url='" + curicon.url4 + "' /></icons>" '<icon name='icon5' url='" + curicon.url5 + "' /><icon name='icon6' url='" + curicon.url6 + "' /><icon name='icon7' url='" + curicon.url7 + "' /><icon name='icon8' url='" + curicon.url8 + "' /></icons>"
        Dim writer As String = maincollection.rconf.xmlfolder + mname + "f" + format + "c" + catagory + "s" + style + ".xml"
        'Hard coded options
        'p.HEADER = "<p><center><hr><strong>Please do not reply to this message. Replies are not monitored or answered.</strong><br><hr></center></p><p>Thank you for contacting ACT! Service &amp; Support. This email was provided as a follow up to your support inquiry. Please save this email for future reference. <br><br>"
        File.WriteAllText(writer, text)
        'serializer.Serialize(writer, curicon)
        'writer.Close()

    End Sub

    Public Sub savexmliconwritero(ByRef curicon As icontoxml, ByVal mname As String, ByVal format As String, ByVal catagory As String, ByVal style As String)
        ' Dim xmlfile As String = "config"
        Dim serializer As New XmlSerializer(Me.GetType())
        Dim writer As New StreamWriter(maincollection.rconf.xmlfolder + mname + "f" + format + "c" + catagory + "s" + style + ".xml")
        'Hard coded options
        'p.HEADER = "<p><center><hr><strong>Please do not reply to this message. Replies are not monitored or answered.</strong><br><hr></center></p><p>Thank you for contacting ACT! Service &amp; Support. This email was provided as a follow up to your support inquiry. Please save this email for future reference. <br><br>"
        serializer.Serialize(writer, curicon)
        writer.Close()
    End Sub
End Class
<Serializable()> _
Public Class configuration
    'Standard paths and locations must be public available to other classes
    Public basefolder As String = getparentdirectory(Application.ExecutablePath) '"c:\Program Files\movieinfoplus\"
    Public thirdpartyfolder As String = basefolder + "3rdparty\" '3rdparty foldder conf
    Public xmlmainfolder As String = basefolder + "xml\"
    Public cachefolder As String = basefolder + "cache\"
    Public tempfolder As String = basefolder + "temp\"
    Public tmdbcachefolder As String = cachefolder + "tmdb\"
    Public tvdbcachefolder As String = cachefolder + "tvdb\"
    Public xmlfoldermusic As String = xmlmainfolder + "music\"

    Public xmlfolder_fcdn As String = xmlmainfolder + "fcdn\"
    Public customimagesfolder As String = basefolder + "customimages\"
    Public customimagesicons As String = customimagesfolder + "icons\"
    Public customimagesfanart As String = customimagesfolder + "fanart\"
    Public xmlfolder As String = xmlmainfolder + "xmls\"
    Public xmlfolderposters As String = xmlmainfolder + "posterxmls\"
    Public xmlfolderimdb As String = xmlmainfolder + "imdbxmls\"
    Public xmlfoldertmdbbackdrops As String = xmlmainfolder + "tmdbbackdropsv2\"
    Public xmlfoldertmdbv2 As String = xmlmainfolder + "tmdbv2\"

    Public nicecoverxmlcachefolderlocation As String = xmlmainfolder + "niceposters\"
    Public nicecovercachefolder As String = cachefolder + "nccache\"
    Public nicecovertempfolder As String = tempfolder + "nicecover\"

    Public calgorydotnetfolder As String = cachefolder + "caldncache\"
    Public iconcachefolder As String = cachefolder + "iconcache\"
    Public postercachefolder As String = cachefolder + "postercache\"
    Public imdbcachefolder As String = cachefolder + "imdbcache\"
    Public sourcePagefolder As String = cachefolder + "source\"
    Public tmdbpostercachefolder As String = tmdbcachefolder + "posters\"
    Public tmdbfanartcachefolder As String = tmdbcachefolder + "fanart\"
    Public ImageMagickFolder As String = thirdpartyfolder + "ImageMagick\"
    Public tvdbpostercachefolder As String = tvdbcachefolder + "posters\"
    Public tvdbbannerscachefolder As String = tvdbcachefolder + "banners\"
    Public tvdbfanartcachefolder As String = tvdbcachefolder + "fanart\"
    Public tvdbtempfolder As String = tempfolder + "tvdb\"
    Public listsfolder As String = thirdpartyfolder + "lists\"
    Public listsTempfolder As String = tempfolder + "lists\"
    Public sevenzipfolder As String = thirdpartyfolder + "7zip\"
    Public wgetfolder As String = thirdpartyfolder + "wget\"
    Public dirUnRAR As String = thirdpartyfolder + "UnRAR\"
    Public examplefolder As String = basefolder + "example\"
    Public lclient As String = "client=MovieInfoPlus"
    Public lconcat As String = "&"
    Public dltype As String = "large"
    Public resourcefolder As String = basefolder + "resource\"
    Public winecompatable As Boolean = False
    Private autorenamemoviefiles As Boolean

    Private p_element_getMusicAlbumArt As Boolean

    'all - folders arraylist
    Private clbPaths As New ArrayList
    Private clbPathsUnchecked As New ArrayList

    Private clbPathsFileMode As New ArrayList
    Private clbPathsFileModeUnchecked As New ArrayList

    Private clbTVPaths As New ArrayList
    Private clbTVPathsUnchecked As New ArrayList

    Private clb_checked_music_folders As New ArrayList
    Private clb_music_folders As New ArrayList

    Private cbSkipTransparency As Boolean
    Private seasonfoldername As String = "Season "
    Private sinmi As Boolean = False
    Private element_dontreturnaftermediaimagepick As Boolean = False
    Private tso_auto_addtoablumonnewart As Boolean

    Private p_element_pcbmovie_use_certification_for_mpaa As Boolean = False
    Private p_element_pcertification As String = "USA"
    Property pcbmovie_use_certification_for_mpaa() As Boolean
        Get
            Return p_element_pcbmovie_use_certification_for_mpaa
        End Get
        Set(ByVal value As Boolean)
            p_element_pcbmovie_use_certification_for_mpaa = value
        End Set
    End Property
    Property pcbMoviesCertificationLang() As String
        Get
            Return p_element_pcertification
        End Get
        Set(ByVal value As String)
            p_element_pcertification = value
        End Set
    End Property
    'movie - cache settings
    Private cbIgnoreparans, cbf1s0, cbf1s3, cbf1s9, cbf2s0, cbf2s2, cbf2s8, cbf2s10, cbf3s0, cbGetFanart, cbSaveNFO, cbOverwriteNFO, cbGenTBN As Boolean 'true or false for each type


    'movie ofdb settings
    Private cbofdb_UpdateTitle As Boolean
    Private cbofdb_UpdatePlot As Boolean
    Private cbofdb_UpdateOutline As Boolean
    Private cbofdb_UpdateGenre As Boolean
    Private cbofdb_UpdateRating As Boolean
    Private cbofdb_UpdateVotes As Boolean
    Private cbofdb_tagline As Integer
    Property pcbofdb_UpdateTitle() As Boolean
        Get
            Return cbofdb_UpdateTitle
        End Get
        Set(ByVal value As Boolean)
            cbofdb_UpdateTitle = value
        End Set
    End Property
    Property pcbofdb_UpdatePlot() As Boolean
        Get
            Return cbofdb_UpdatePlot
        End Get
        Set(ByVal value As Boolean)
            cbofdb_UpdatePlot = value
        End Set
    End Property
    Property pcbofdb_UpdateOutline() As Boolean
        Get
            Return cbofdb_UpdateOutline
        End Get
        Set(ByVal value As Boolean)
            cbofdb_UpdateOutline = value
        End Set
    End Property
    Property pcbofdb_UpdateGenre() As Boolean
        Get
            Return cbofdb_UpdateGenre
        End Get
        Set(ByVal value As Boolean)
            cbofdb_UpdateGenre = value
        End Set
    End Property
    Property pcbofdb_UpdateRating() As Boolean
        Get
            Return cbofdb_UpdateRating
        End Get
        Set(ByVal value As Boolean)
            cbofdb_UpdateRating = value
        End Set
    End Property
    Property pcbofdb_UpdateVotes() As Boolean
        Get
            Return cbofdb_UpdateVotes
        End Get
        Set(ByVal value As Boolean)
            cbofdb_UpdateVotes = value
        End Set
    End Property
    Property pcbofdb_tagline() As Integer
        Get
            Return cbofdb_tagline
        End Get
        Set(ByVal value As Integer)
            cbofdb_tagline = value
        End Set
    End Property
    'movie - file level filters
    Private cbFilterNameFileModeEverythingBeforeYear As Boolean
    Private cbFilterNameFileModeEverythingBeforeh264 As Boolean
    Private cbFilterNameFileModeEverythingBeforex264 As Boolean
    Private cbFilterNameFileModeEverythingBefore720p As Boolean
    Private cbFilterNameFileModeEverythingBefore1080i As Boolean
    Private cbFilterNameFileModeEverythingBefore1080p As Boolean
    Private cbFilterNameFileModeEverythingBeforeDash As Boolean
    Private cbfilternameFileModeFilterUnderscoreDot As Boolean = True
    Private cbFilterFolderFileLevel As Boolean = False
    Property pcbFilterFolderFileLevel() As Boolean
        Get
            Return cbFilterFolderFileLevel
        End Get
        Set(ByVal value As Boolean)
            cbFilterFolderFileLevel = value
        End Set
    End Property

    'movie - folder level filters
    Private cbGetTMDBPosters, cbFilter1080i, cbFilterYears, cbFilter1080p, cbFilter720p, cbFilterAvi, cbFilterBluRay, cbFilterDivx, cbFilterDVD, cbFilterH264, cbFilterHidef, cbFilterLq, cbFilterXvid As Boolean
    Private cbFilterCustom1_enabled, cbFilterCustom2_enabled, cbFilterCustom3_enabled, cbFilterCustom4_enabled, cbFilterCustom5_enabled As Boolean
    Private cbFilterCustom1, cbFilterCustom2, cbFilterCustom3, cbFilterCustom4, cbFilterCustom5 As String
    Property pcbfilternameFileModeFilterUnderscoreDot() As Boolean
        Get
            Return cbfilternameFileModeFilterUnderscoreDot
        End Get
        Set(ByVal value As Boolean)
            cbfilternameFileModeFilterUnderscoreDot = value
        End Set
    End Property

    Private cbMaxIconPerStyle, cbMaxIconsToDisplay As Integer 'int 0-23
    Private cbdlformat As Integer '0 (med), 1 (large), 2 (download)
    Private cbGetcaldnPosters As Boolean
    'movie - general settings
    Private cbGetIMDBInfo As Boolean
    Private cbDownloadPoster As Boolean
    Private workoffline As Boolean

    Private popgoogleimagesearchwithcustomimages As Boolean

    Private cbdisplayfanart As Boolean

    Private cbCreateFolderjpg As Boolean
    Private cbcreatemovietbn As Boolean
    Private cbcreatemovienamedottbn As Boolean

    Private cbCreateMovieNFO As Boolean
    Private cbcreatemovienamedotnfo As Boolean
    Private cbcreateImdbIDtxt As Boolean
    Private cbcreatefanartjpg As Boolean
    Private cbcreatemovienamedashfanartjpg As Boolean

    Private cbnonfochangeprompt As Boolean

    Private cbshowtbn As Boolean
    Private knudPosterHeightfolderjpg As Decimal
    Private knudPosterHeightTBN As Decimal

    Private cbUseFolderJpgforTBN As Boolean
    Private combolTVCheckForNewTVShowData As String

    Private kcbUseFileNamesForMovies As Boolean
    Private poverlayMargin As Double
    Private poverlayHeight As Double
    Private tv_xprivateinternal_showwgetwindows As Boolean = True
    Private tv_xprivateinteranl_debugtvshows As Boolean
    Private tv_xprivateinternal_curlang As String = "en"
    Private tvregx1 As String
    Private cbgetncposters As Boolean
    Private cbautocreatefolderjpg As Boolean
    Private cbautocreatemovietbn As Boolean
    Private cbautocreatemovienametbn As Boolean
    Private cbnopromptfornewposters As Boolean
    Private cbscanformoviemediainformation As Boolean
    Private cbcopyplotsummaryifnoplot As Boolean
    Private cbFilterUnderscoreDot As Boolean
    Private ptype As String = ".jpg"
    Private p_element_guicolor As String = "black"

    'Media Images
    Private p_element_getMediaImagesMovies As Boolean
    Private p_element_getMediaImagesMovies_front As Boolean
    Private p_element_getMediaImagesMovies_back As Boolean
    Private p_element_getMediaImagesMovies_cd1 As Boolean
    Private p_element_getMediaImagesMovies_cd2 As Boolean
    Private p_element_getMediaImagesMovies_cd3 As Boolean
    Private p_element_getMediaImagesMovies_cd4 As Boolean
    Private p_element_getMediaImagesMovies_inlay As Boolean
    Private p_element_getMediaImagesMovies_insert As Boolean

    Private p_element_getMediaImagesShows As Boolean
    Private p_element_getMediaImagesShows_front As Boolean
    Private p_element_getMediaImagesShows_back As Boolean
    Private p_element_getMediaImagesShows_cd1 As Boolean
    Private p_element_getMediaImagesShows_cd2 As Boolean
    Private p_element_getMediaImagesShows_cd3 As Boolean
    Private p_element_getMediaImagesShows_cd4 As Boolean
    Private p_element_getMediaImagesShows_inlay As Boolean
    Private p_element_getMediaImagesShows_insert As Boolean

    Private p_element_getMediaImagesMusic As Boolean
    Private p_element_getMediaImagesMusic_front As Boolean
    Private p_element_getMediaImagesMusic_back As Boolean
    Private p_element_getMediaImagesMusic_cd1 As Boolean
    Private p_element_getMediaImagesMusic_cd2 As Boolean
    Private p_element_getMediaImagesMusic_cd3 As Boolean
    Private p_element_getMediaImagesMusic_cd4 As Boolean
    Private p_element_getMediaImagesMusic_inlay As Boolean
    Private p_element_getMediaImagesMusic_insert As Boolean

    Private p_element_cbGetMusicFanartFromHTBackdrops As Boolean

    'resize music fanart
    Private p_element_pcbmusicfanartresize As Boolean
    Private p_element_pnudmusicfanartwidth As Double

    'resize movie fanart
    Private p_element_pcbmoviefanartresize As Boolean
    Private p_element_pnudmoviefanartwidth As Double

    'resize show fanart
    Private p_element_pcbshowfanartresize As Boolean
    Private p_element_pnudshowfanartwidth As Double

    'support skin based flagging
    Private p_element_pcbGeneralSupportSkinBasedFlagging As Boolean
    Property pcbGeneralSupportSkinBasedFlagging() As Boolean
        Get
            Return p_element_pcbGeneralSupportSkinBasedFlagging
        End Get
        Set(ByVal value As Boolean)
            p_element_pcbGeneralSupportSkinBasedFlagging = value
        End Set
    End Property
    Property pcbmusicfanartresize() As Boolean
        Get
            Return p_element_pcbmusicfanartresize
        End Get
        Set(ByVal value As Boolean)
            p_element_pcbmusicfanartresize = value
        End Set
    End Property

    Property pnudmusicfanartwidth() As Double
        Get
            Return p_element_pnudmusicfanartwidth
        End Get
        Set(ByVal value As Double)
            p_element_pnudmusicfanartwidth = value
        End Set
    End Property

    Property pcbmoviefanartresize() As Boolean
        Get
            Return p_element_pcbmoviefanartresize
        End Get
        Set(ByVal value As Boolean)
            p_element_pcbmoviefanartresize = value
        End Set
    End Property

    Property pnudmoviefanartwidth() As Double
        Get
            Return p_element_pnudmoviefanartwidth
        End Get
        Set(ByVal value As Double)
            p_element_pnudmoviefanartwidth = value
        End Set
    End Property

    Property pcbshowfanartresize() As Boolean
        Get
            Return p_element_pcbshowfanartresize
        End Get
        Set(ByVal value As Boolean)
            p_element_pcbshowfanartresize = value
        End Set
    End Property

    Property pnudshowfanartwidth() As Double
        Get
            Return p_element_pnudshowfanartwidth
        End Get
        Set(ByVal value As Double)
            p_element_pnudshowfanartwidth = value
        End Set
    End Property

    Property pcbGetMusicFanartFromHTBackdrops() As Boolean
        Get
            Return p_element_cbGetMusicFanartFromHTBackdrops
        End Get
        Set(ByVal value As Boolean)
            p_element_cbGetMusicFanartFromHTBackdrops = value
        End Set
    End Property

    Property pgetMusicAlbumArt() As Boolean
        Get
            Return p_element_getMusicAlbumArt
        End Get
        Set(ByVal value As Boolean)
            p_element_getMusicAlbumArt = value
        End Set
    End Property

    Property dontreturnaftermediaimagepick() As Boolean
        Get
            Return element_dontreturnaftermediaimagepick
        End Get
        Set(ByVal value As Boolean)
            element_dontreturnaftermediaimagepick = value
        End Set
    End Property
    Property psinmi() As Boolean
        Get
            Return sinmi
        End Get
        Set(ByVal value As Boolean)
            sinmi = value
        End Set
    End Property
    Property pseasonfoldername() As String
        Get
            Return seasonfoldername
        End Get
        Set(ByVal value As String)
            seasonfoldername = value
        End Set
    End Property
    Property pcbSkipTransparency() As Boolean
        Get
            Return cbSkipTransparency
        End Get
        Set(ByVal value As Boolean)
            cbSkipTransparency = value
        End Set
    End Property

    Property ptso_auto_addtoablumonnewart() As Boolean
        Get
            Return tso_auto_addtoablumonnewart
        End Get
        Set(ByVal value As Boolean)
            tso_auto_addtoablumonnewart = value
        End Set
    End Property
    Property pgetMediaImagesMovies() As Boolean
        Get
            Return p_element_getMediaImagesMovies
        End Get
        Set(ByVal value As Boolean)
            p_element_getMediaImagesMovies = value
        End Set
    End Property
    Property pgetMediaImagesMoviesFront() As Boolean
        Get
            Return p_element_getMediaImagesMovies_front
        End Get
        Set(ByVal value As Boolean)
            p_element_getMediaImagesMovies_front = value
        End Set
    End Property
    Property pgetMediaImagesMoviesback() As Boolean
        Get
            Return p_element_getMediaImagesMovies_back
        End Get
        Set(ByVal value As Boolean)
            p_element_getMediaImagesMovies_back = value
        End Set
    End Property
    Property pgetMediaImagesMoviescd1() As Boolean
        Get
            Return p_element_getMediaImagesMovies_cd1
        End Get
        Set(ByVal value As Boolean)
            p_element_getMediaImagesMovies_cd1 = value
        End Set
    End Property
    Property pgetMediaImagesMoviescd2() As Boolean
        Get
            Return p_element_getMediaImagesMovies_cd2
        End Get
        Set(ByVal value As Boolean)
            p_element_getMediaImagesMovies_cd2 = value
        End Set
    End Property
    Property pgetMediaImagesMoviescd3() As Boolean
        Get
            Return p_element_getMediaImagesMovies_cd3
        End Get
        Set(ByVal value As Boolean)
            p_element_getMediaImagesMovies_cd3 = value
        End Set
    End Property
    Property pgetMediaImagesMoviescd4() As Boolean
        Get
            Return p_element_getMediaImagesMovies_cd4
        End Get
        Set(ByVal value As Boolean)
            p_element_getMediaImagesMovies_cd4 = value
        End Set
    End Property
    Property pgetMediaImagesMoviesinlay() As Boolean
        Get
            Return p_element_getMediaImagesMovies_inlay
        End Get
        Set(ByVal value As Boolean)
            p_element_getMediaImagesMovies_inlay = value
        End Set
    End Property
    Property pgetMediaImagesMoviesinsert() As Boolean
        Get
            Return p_element_getMediaImagesMovies_insert
        End Get
        Set(ByVal value As Boolean)
            p_element_getMediaImagesMovies_insert = value
        End Set
    End Property

    Property pgetMediaImagesMusic() As Boolean
        Get
            Return p_element_getMediaImagesMusic
        End Get
        Set(ByVal value As Boolean)
            p_element_getMediaImagesMusic = value
        End Set
    End Property
    Property pgetMediaImagesMusicFront() As Boolean
        Get
            Return p_element_getMediaImagesMusic_front
        End Get
        Set(ByVal value As Boolean)
            p_element_getMediaImagesMusic_front = value
        End Set
    End Property
    Property pgetMediaImagesMusicback() As Boolean
        Get
            Return p_element_getMediaImagesMusic_back
        End Get
        Set(ByVal value As Boolean)
            p_element_getMediaImagesMusic_back = value
        End Set
    End Property
    Property pgetMediaImagesMusiccd1() As Boolean
        Get
            Return p_element_getMediaImagesMusic_cd1
        End Get
        Set(ByVal value As Boolean)
            p_element_getMediaImagesMusic_cd1 = value
        End Set
    End Property
    Property pgetMediaImagesMusiccd2() As Boolean
        Get
            Return p_element_getMediaImagesMusic_cd2
        End Get
        Set(ByVal value As Boolean)
            p_element_getMediaImagesMusic_cd2 = value
        End Set
    End Property
    Property pgetMediaImagesMusiccd3() As Boolean
        Get
            Return p_element_getMediaImagesMusic_cd3
        End Get
        Set(ByVal value As Boolean)
            p_element_getMediaImagesMusic_cd3 = value
        End Set
    End Property
    Property pgetMediaImagesMusiccd4() As Boolean
        Get
            Return p_element_getMediaImagesMusic_cd4
        End Get
        Set(ByVal value As Boolean)
            p_element_getMediaImagesMusic_cd4 = value
        End Set
    End Property
    Property pgetMediaImagesMusicinlay() As Boolean
        Get
            Return p_element_getMediaImagesMusic_inlay
        End Get
        Set(ByVal value As Boolean)
            p_element_getMediaImagesMusic_inlay = value
        End Set
    End Property
    Property pgetMediaImagesMusicinsert() As Boolean
        Get
            Return p_element_getMediaImagesMusic_insert
        End Get
        Set(ByVal value As Boolean)
            p_element_getMediaImagesMusic_insert = value
        End Set
    End Property
    Property pcbGetcaldnPosters() As Boolean
        Get
            Return cbGetcaldnPosters
        End Get
        Set(ByVal value As Boolean)
            cbGetcaldnPosters = value
        End Set
    End Property
    Property guicolor() As String
        Get
            Return p_element_guicolor
        End Get
        Set(ByVal value As String)
            p_element_guicolor = value
        End Set
    End Property
    Property type() As String
        Get
            Return ptype
        End Get
        Set(ByVal value As String)
            ptype = value
        End Set
    End Property

    Property pclb_music_folders() As ArrayList
        Get
            Return clb_music_folders
        End Get
        Set(ByVal value As ArrayList)
            clb_music_folders = value
        End Set
    End Property
    Property pclb_checked_music_folders() As ArrayList
        Get
            Return clb_checked_music_folders
        End Get
        Set(ByVal value As ArrayList)
            clb_checked_music_folders = value
        End Set
    End Property

    Property pclbPathsFileMode() As ArrayList
        Get
            Return clbPathsFileMode
        End Get
        Set(ByVal value As ArrayList)
            clbPathsFileMode = value
        End Set
    End Property
    Property pclbPathsFileModeUnchecked() As ArrayList
        Get
            Return clbPathsFileModeUnchecked
        End Get
        Set(ByVal value As ArrayList)
            clbPathsFileModeUnchecked = value
        End Set
    End Property
    Property pclbPaths() As ArrayList
        Get
            Return clbPaths
        End Get
        Set(ByVal value As ArrayList)
            clbPaths = value
        End Set
    End Property
    Property pclbPathsUnchecked() As ArrayList
        Get
            Return clbPathsUnchecked
        End Get
        Set(ByVal value As ArrayList)
            clbPathsUnchecked = value
        End Set
    End Property
    Property pclbTVPaths() As ArrayList
        Get
            Return clbTVPaths
        End Get
        Set(ByVal value As ArrayList)
            clbTVPaths = value
        End Set
    End Property
    Property pclbTVPathsUnchecked() As ArrayList
        Get
            Return clbTVPathsUnchecked
        End Get
        Set(ByVal value As ArrayList)
            clbTVPathsUnchecked = value
        End Set
    End Property
    Property pcbcopyplotsummaryifnoplot() As Boolean
        Get
            Return cbcopyplotsummaryifnoplot
        End Get
        Set(ByVal value As Boolean)
            cbcopyplotsummaryifnoplot = value
        End Set
    End Property
    Property pcbgetncposters() As Boolean
        Get
            Return cbgetncposters
        End Get
        Set(ByVal value As Boolean)
            cbgetncposters = value
        End Set
    End Property
    Property pcbautocreatefolderjpg() As Boolean
        Get
            Return cbautocreatefolderjpg
        End Get
        Set(ByVal value As Boolean)
            cbautocreatefolderjpg = value
        End Set
    End Property
    Property pcbautocreatemovietbn() As Boolean
        Get
            Return cbautocreatemovietbn
        End Get
        Set(ByVal value As Boolean)
            cbautocreatemovietbn = value
        End Set
    End Property
    Property pcbautocreatemovienametbn() As Boolean
        Get
            Return cbautocreatemovienametbn
        End Get
        Set(ByVal value As Boolean)
            cbautocreatemovienametbn = value
        End Set
    End Property
    Property pcbnopromptfornewposters() As Boolean
        Get
            Return cbnopromptfornewposters
        End Get
        Set(ByVal value As Boolean)
            cbnopromptfornewposters = value
        End Set
    End Property
    Property pcbscanformoviemediainformation() As Boolean
        Get
            Return cbscanformoviemediainformation
        End Get
        Set(ByVal value As Boolean)
            cbscanformoviemediainformation = value
        End Set
    End Property
    Property ptvregx1() As String
        Get
            Return tvregx1
        End Get
        Set(ByVal value As String)
            tvregx1 = value
        End Set
    End Property
    Property pcbcreatemovienamedotnfo() As Boolean
        Get
            Return cbcreatemovienamedotnfo
        End Get
        Set(ByVal value As Boolean)
            cbcreatemovienamedotnfo = value
        End Set
    End Property
    Property pcbCreateFolderjpg() As Boolean
        Get
            Return cbCreateFolderjpg
        End Get
        Set(ByVal value As Boolean)
            cbCreateFolderjpg = value
        End Set
    End Property
    Property pcbcreateImdbIDtxt() As Boolean
        Get
            Return cbcreateImdbIDtxt
        End Get
        Set(ByVal value As Boolean)
            cbcreateImdbIDtxt = value
        End Set
    End Property
    Property pcbcreatemovienamedottbn() As Boolean
        Get
            Return cbcreatemovienamedottbn
        End Get
        Set(ByVal value As Boolean)
            cbcreatemovienamedottbn = value
        End Set
    End Property
    Property pcbcreatemovienamedashfanartjpg() As Boolean
        Get
            Return cbcreatemovienamedashfanartjpg
        End Get
        Set(ByVal value As Boolean)
            cbcreatemovienamedashfanartjpg = value
        End Set
    End Property
    Property tv_curlang() As String
        Get
            Return tv_xprivateinternal_curlang
        End Get
        Set(ByVal value As String)
            tv_xprivateinternal_curlang = value
        End Set
    End Property
    Property debugtvshows() As Boolean
        Get
            Return tv_xprivateinteranl_debugtvshows
        End Get
        Set(ByVal value As Boolean)
            tv_xprivateinteranl_debugtvshows = value
        End Set
    End Property
    Private Function getparentdirectory(ByRef filenameandpath As String) As String
        Dim fnPeices1() As String = filenameandpath.ToString.Split(CChar("\"))
        Dim parentdirname As String = "" '= fnPeices1(fnPeices1.Length - 1)
        Dim totnum As Integer = fnPeices1.Length - 1
        Dim curcount As Integer = 0
        While curcount < totnum
            parentdirname += fnPeices1(curcount)
            parentdirname += "\"
            curcount += 1
        End While
        Return parentdirname
    End Function

    Property tv_showwgetwindows() As Boolean
        Get
            Return tv_xprivateinternal_showwgetwindows
        End Get
        Set(ByVal value As Boolean)
            tv_xprivateinternal_showwgetwindows = value
        End Set
    End Property
    Property overlayHeight() As Double
        Get
            Return poverlayHeight
        End Get
        Set(ByVal value As Double)
            poverlayHeight = value
        End Set
    End Property

    Property overlayMargin() As Double
        Get
            Return poverlayMargin
        End Get
        Set(ByVal value As Double)
            poverlayMargin = value
        End Set
    End Property
    Property pkcbUseFileNamesForMovies() As Boolean
        Get
            Return kcbUseFileNamesForMovies
        End Get
        Set(ByVal value As Boolean)
            kcbUseFileNamesForMovies = value
        End Set
    End Property
    Property pcombolTVCheckForNewTVShowData() As String
        Get
            Return combolTVCheckForNewTVShowData
        End Get
        Set(ByVal value As String)
            combolTVCheckForNewTVShowData = value
        End Set
    End Property
    Property pcbFilterUnderscoreDot() As Boolean
        Get
            Return cbFilterUnderscoreDot
        End Get
        Set(ByVal value As Boolean)
            cbFilterUnderscoreDot = value
        End Set
    End Property
    Property pcbIgnoreparans() As Boolean
        Get
            Return cbIgnoreparans
        End Get
        Set(ByVal value As Boolean)
            cbIgnoreparans = value
        End Set
    End Property


    Property pcbFilterNameFileModeEverythingBeforeYear() As Boolean
        Get
            Return cbFilterNameFileModeEverythingBeforeYear
        End Get
        Set(ByVal value As Boolean)
            cbFilterNameFileModeEverythingBeforeYear = value
        End Set
    End Property
    Property pcbFilterNameFileModeEverythingBeforeDash() As Boolean
        Get
            Return cbFilterNameFileModeEverythingBeforeDash
        End Get
        Set(ByVal value As Boolean)
            cbFilterNameFileModeEverythingBeforeDash = value
        End Set
    End Property

    Property pcbFilterNameFileModeEverythingBeforeh264() As Boolean
        Get
            Return cbFilterNameFileModeEverythingBeforeh264
        End Get
        Set(ByVal value As Boolean)
            cbFilterNameFileModeEverythingBeforeh264 = value
        End Set
    End Property

    Property pcbFilterNameFileModeEverythingBeforex264() As Boolean
        Get
            Return cbFilterNameFileModeEverythingBeforex264
        End Get
        Set(ByVal value As Boolean)
            cbFilterNameFileModeEverythingBeforex264 = value
        End Set
    End Property

    Property pcbFilterNameFileModeEverythingBefore720p() As Boolean
        Get
            Return cbFilterNameFileModeEverythingBefore720p
        End Get
        Set(ByVal value As Boolean)
            cbFilterNameFileModeEverythingBefore720p = value
        End Set
    End Property
    Private p_element_pcbmoviesnonforename As Boolean
    Property pcbmoviesnonforename() As Boolean
        Get
            Return p_element_pcbmoviesnonforename
        End Get
        Set(ByVal value As Boolean)
            p_element_pcbmoviesnonforename = value
        End Set
    End Property
    Private p_element_ptbFilterNameFileModeEverythingBeforeUserDefined1 As String
    Private p_element_pcbFilterNameFileModeEverythingBeforeUserDefined1 As Boolean
    Property pcbFilterNameFileModeEverythingBeforeUserDefined1() As Boolean
        Get
            Return p_element_pcbFilterNameFileModeEverythingBeforeUserDefined1
        End Get
        Set(ByVal value As Boolean)
            p_element_pcbFilterNameFileModeEverythingBeforeUserDefined1 = value
        End Set
    End Property
    Property ptbFilterNameFileModeEverythingBeforeUserDefined1() As String
        Get
            Return p_element_ptbFilterNameFileModeEverythingBeforeUserDefined1
        End Get
        Set(ByVal value As String)
            p_element_ptbFilterNameFileModeEverythingBeforeUserDefined1 = value
        End Set
    End Property

    Property pcbFilterNameFileModeEverythingBefore1080i() As Boolean
        Get
            Return cbFilterNameFileModeEverythingBefore1080i
        End Get
        Set(ByVal value As Boolean)
            cbFilterNameFileModeEverythingBefore1080i = value
        End Set
    End Property

    Property pcbFilterNameFileModeEverythingBefore1080p() As Boolean
        Get
            Return cbFilterNameFileModeEverythingBefore1080p
        End Get
        Set(ByVal value As Boolean)
            cbFilterNameFileModeEverythingBefore1080p = value
        End Set
    End Property



    Property pcbUseFolderJpgforTBN() As Boolean
        Get
            Return cbUseFolderJpgforTBN
        End Get
        Set(ByVal value As Boolean)
            cbUseFolderJpgforTBN = value
        End Set
    End Property
    Property pknudPosterHeightTBN() As Decimal
        Get
            Return knudPosterHeightTBN
        End Get
        Set(ByVal value As Decimal)
            knudPosterHeightTBN = value
        End Set
    End Property
    Property pknudPosterHeightfolderjpg() As Decimal
        Get
            Return knudPosterHeightfolderjpg
        End Get
        Set(ByVal value As Decimal)
            knudPosterHeightfolderjpg = value
        End Set
    End Property
    Property pcbcreatemovietbn() As Boolean
        Get
            Return cbcreatemovietbn
        End Get
        Set(ByVal value As Boolean)
            cbcreatemovietbn = value
        End Set
    End Property
    Property pcbcreatefanartjpg() As Boolean
        Get
            Return cbcreatefanartjpg
        End Get
        Set(ByVal value As Boolean)
            cbcreatefanartjpg = value
        End Set
    End Property
    Property pcbshowtbn() As Boolean
        Get
            Return cbshowtbn
        End Get
        Set(ByVal value As Boolean)
            cbshowtbn = value
        End Set
    End Property
    Property pcbNoNfoChangePrompt() As Boolean
        Get
            Return cbnonfochangeprompt
        End Get
        Set(ByVal value As Boolean)
            cbnonfochangeprompt = value
        End Set
    End Property

#Region "--- TV CONF ---"
    Private tv_zprivatevalue_tvshow_fanart_download_boolean As Boolean '= True
    Private tv_zprivatevalue_tvshow_fanart_download_maxnumber_integer As Integer '= 8
    Private tv_zprivatevalue_tvshow_fanart_download_size_string As String '= "1280 x 720"
    Private tv_zprivatevalue_tvshow_fanart_display_boolean As Boolean
    Private tv_zprivatevalue_tvshow_fanart_toapply_whatsize_string As String
    Private tv_zprivatevalue_tvshow_posters_download_boolean As Boolean
    Private tv_zprivatevalue_tvshow_posters_download_maxnumber_integer As Integer
    Private tv_zprivatevalue_tvshow_wideicon_download_boolean As Boolean
    Private tv_zprivatevalue_tvshow_wideicon_download_maxnumber_integer As Integer
    Private tv_zprivatevalue_tvshow_nfo_overwrite_boolean As Boolean
    Private tv_zprivatevalue_langoverride As Boolean
    Private tv_zprivatevalue_season_banners_download_boolean As Boolean
    Private tv_zprivatevalue_season_banners_download_maxnumber_integer As Integer
    Private tv_zprivatevalue_season_banners_download_type_string As String
    Private tv_zprivatevalue_season_banners_toapply_string As String
    Private tv_zprivatevalue_season_posters_download_boolean As Boolean
    Private tv_zprivatevalue_season_posters_download_maxnumber_integer As Integer
    Private tv_zprivatevalue_season_usewhich_banner_poster_string As String
    Private tv_zprivatevalue_show_usewide_false4poster As Boolean = True

    Private tv_zprivatevalue_episode_overwrite_tbn As Boolean '= False
    Private tv_zprivatevalue_episode_overwrite_nfo As Boolean '= False
    Private tv_zprivatevalue_episode_create_fanart As Boolean '= False
    Private tv_zprivatevalue_episode_download_boolean As Boolean

    Private tv_zprivatevalue_usewgetforimages As Boolean '= True
    Private tv_zprivatevalue_wgetsleepinmilliseconds As Integer '= 100
    Private tv_pcbshows_UseStudioasRating As Boolean
    Property prbshows_show_usewide_false4poster() As Boolean
        Get
            Return tv_zprivatevalue_show_usewide_false4poster
        End Get
        Set(ByVal value As Boolean)
            tv_zprivatevalue_show_usewide_false4poster = value
        End Set
    End Property
    Property pcbshows_UseStudioasRating() As Boolean
        Get
            Return tv_pcbshows_UseStudioasRating
        End Get
        Set(ByVal value As Boolean)
            tv_pcbshows_UseStudioasRating = value
        End Set
    End Property
    Property pcbtvlangoverride() As Boolean
        Get
            Return tv_zprivatevalue_langoverride
        End Get
        Set(ByVal value As Boolean)
            tv_zprivatevalue_langoverride = value
        End Set
    End Property

    Property pgetMediaImagesShows() As Boolean
        Get
            Return p_element_getMediaImagesShows
        End Get
        Set(ByVal value As Boolean)
            p_element_getMediaImagesShows = value
        End Set
    End Property
    Property pgetMediaImagesShowsFront() As Boolean
        Get
            Return p_element_getMediaImagesShows_front
        End Get
        Set(ByVal value As Boolean)
            p_element_getMediaImagesShows_front = value
        End Set
    End Property
    Property pgetMediaImagesShowsback() As Boolean
        Get
            Return p_element_getMediaImagesShows_back
        End Get
        Set(ByVal value As Boolean)
            p_element_getMediaImagesShows_back = value
        End Set
    End Property
    Property pgetMediaImagesShowscd1() As Boolean
        Get
            Return p_element_getMediaImagesShows_cd1
        End Get
        Set(ByVal value As Boolean)
            p_element_getMediaImagesShows_cd1 = value
        End Set
    End Property
    Property pgetMediaImagesShowscd2() As Boolean
        Get
            Return p_element_getMediaImagesShows_cd2
        End Get
        Set(ByVal value As Boolean)
            p_element_getMediaImagesShows_cd2 = value
        End Set
    End Property
    Property pgetMediaImagesShowscd3() As Boolean
        Get
            Return p_element_getMediaImagesShows_cd3
        End Get
        Set(ByVal value As Boolean)
            p_element_getMediaImagesShows_cd3 = value
        End Set
    End Property
    Property pgetMediaImagesShowscd4() As Boolean
        Get
            Return p_element_getMediaImagesShows_cd4
        End Get
        Set(ByVal value As Boolean)
            p_element_getMediaImagesShows_cd4 = value
        End Set
    End Property
    Property pgetMediaImagesShowsinlay() As Boolean
        Get
            Return p_element_getMediaImagesShows_inlay
        End Get
        Set(ByVal value As Boolean)
            p_element_getMediaImagesShows_inlay = value
        End Set
    End Property
    Property pgetMediaImagesShowsinsert() As Boolean
        Get
            Return p_element_getMediaImagesShows_insert
        End Get
        Set(ByVal value As Boolean)
            p_element_getMediaImagesShows_insert = value
        End Set
    End Property

    Property tv_tvshow_fanart_download_boolean() As Boolean
        Get
            Return tv_zprivatevalue_tvshow_fanart_download_boolean
        End Get
        Set(ByVal value As Boolean)
            tv_zprivatevalue_tvshow_fanart_download_boolean = value
        End Set
    End Property
    Property tv_tvshow_fanart_download_maxnumber_integer() As Integer
        Get
            Return tv_zprivatevalue_tvshow_fanart_download_maxnumber_integer
        End Get
        Set(ByVal value As Integer)
            tv_zprivatevalue_tvshow_fanart_download_maxnumber_integer = value
        End Set
    End Property
    Property tv_tvshow_fanart_download_size_string() As String

        Get
            Return tv_zprivatevalue_tvshow_fanart_download_size_string
        End Get
        Set(ByVal value As String)
            tv_zprivatevalue_tvshow_fanart_download_size_string = value
        End Set
    End Property
    Property tv_tvshow_fanart_display_boolean() As Boolean
        Get
            Return tv_zprivatevalue_tvshow_fanart_display_boolean
        End Get
        Set(ByVal value As Boolean)
            tv_zprivatevalue_tvshow_fanart_display_boolean = value
        End Set
    End Property
    Property tv_tvshow_fanart_toapply_whatsize_string() As String
        Get
            Return tv_zprivatevalue_tvshow_fanart_toapply_whatsize_string
        End Get
        Set(ByVal value As String)
            tv_zprivatevalue_tvshow_fanart_toapply_whatsize_string = value
        End Set
    End Property
    Property tv_tvshow_posters_download_boolean() As Boolean
        Get
            Return tv_zprivatevalue_tvshow_posters_download_boolean
        End Get
        Set(ByVal value As Boolean)
            tv_zprivatevalue_tvshow_posters_download_boolean = value
        End Set
    End Property
    Property tv_tvshow_posters_download_maxnumber_integer() As Integer
        Get
            Return tv_zprivatevalue_tvshow_posters_download_maxnumber_integer
        End Get
        Set(ByVal value As Integer)
            tv_zprivatevalue_tvshow_posters_download_maxnumber_integer = value
        End Set
    End Property
    Property tv_tvshow_wideicon_download_boolean() As Boolean
        Get
            Return tv_zprivatevalue_tvshow_wideicon_download_boolean
        End Get
        Set(ByVal value As Boolean)
            tv_zprivatevalue_tvshow_wideicon_download_boolean = value
        End Set
    End Property
    Property tv_tvshow_wideicon_download_maxnumber_integer() As Integer
        Get
            Return tv_zprivatevalue_tvshow_wideicon_download_maxnumber_integer
        End Get
        Set(ByVal value As Integer)
            tv_zprivatevalue_tvshow_wideicon_download_maxnumber_integer = value
        End Set
    End Property
    Property tv_tvshow_nfo_overwrite_boolean() As Boolean
        Get
            Return tv_zprivatevalue_tvshow_nfo_overwrite_boolean
        End Get
        Set(ByVal value As Boolean)
            tv_zprivatevalue_tvshow_nfo_overwrite_boolean = value
        End Set
    End Property

    Property tv_season_banners_download_boolean() As Boolean
        Get
            Return tv_zprivatevalue_season_banners_download_boolean
        End Get
        Set(ByVal value As Boolean)
            tv_zprivatevalue_season_banners_download_boolean = value
        End Set
    End Property
    Property tv_season_banners_download_maxnumber_integer() As Integer

        Get
            Return tv_zprivatevalue_season_banners_download_maxnumber_integer
        End Get
        Set(ByVal value As Integer)
            tv_zprivatevalue_season_banners_download_maxnumber_integer = value
        End Set
    End Property
    Property tv_season_banners_download_type_string() As String
        Get
            Return tv_zprivatevalue_season_banners_download_type_string
        End Get
        Set(ByVal value As String)
            tv_zprivatevalue_season_banners_download_type_string = value
        End Set
    End Property
    Property tv_season_banners_toapply_string() As String
        Get
            Return tv_zprivatevalue_season_banners_toapply_string
        End Get
        Set(ByVal value As String)
            tv_zprivatevalue_season_banners_toapply_string = value
        End Set
    End Property
    Property tv_season_posters_download_boolean() As Boolean
        Get
            Return tv_zprivatevalue_season_posters_download_boolean
        End Get
        Set(ByVal value As Boolean)
            tv_zprivatevalue_season_posters_download_boolean = value
        End Set
    End Property
    Property tv_season_posters_download_maxnumber_integer() As Integer
        Get
            Return tv_zprivatevalue_season_posters_download_maxnumber_integer
        End Get
        Set(ByVal value As Integer)
            tv_zprivatevalue_season_posters_download_maxnumber_integer = value
        End Set
    End Property
    Property tv_season_usewhich_banner_poster() As String
        Get
            Return tv_zprivatevalue_season_usewhich_banner_poster_string
        End Get
        Set(ByVal value As String)
            tv_zprivatevalue_season_usewhich_banner_poster_string = value
        End Set
    End Property

    Property tv_episode_overwrite_tbn() As Boolean
        Get
            Return tv_zprivatevalue_episode_overwrite_tbn
        End Get
        Set(ByVal value As Boolean)
            tv_zprivatevalue_episode_overwrite_tbn = value
        End Set
    End Property
    Property tv_episode_overwrite_nfo() As Boolean
        Get
            Return tv_zprivatevalue_episode_overwrite_nfo
        End Get
        Set(ByVal value As Boolean)
            tv_zprivatevalue_episode_overwrite_nfo = value
        End Set
    End Property
    Property tv_episode_create_fanart() As Boolean
        Get
            Return tv_zprivatevalue_episode_create_fanart
        End Get
        Set(ByVal value As Boolean)
            tv_zprivatevalue_episode_create_fanart = value
        End Set
    End Property
    Property tv_episode_download_boolean() As Boolean
        Get
            Return tv_zprivatevalue_episode_download_boolean
        End Get
        Set(ByVal value As Boolean)
            tv_zprivatevalue_episode_download_boolean = value
        End Set
    End Property

    Property tv_usewgetforimages() As Boolean
        Get
            Return tv_zprivatevalue_usewgetforimages
        End Get
        Set(ByVal value As Boolean)
            tv_zprivatevalue_usewgetforimages = value
        End Set
    End Property
    Property tv_wgetsleepinmilliseconds() As Integer
        Get
            Return tv_zprivatevalue_wgetsleepinmilliseconds
        End Get
        Set(ByVal value As Integer)
            tv_zprivatevalue_wgetsleepinmilliseconds = value
        End Set
    End Property
#End Region

    Property pcbCreateMovieNFO() As Boolean
        Get
            Return cbCreateMovieNFO
        End Get
        Set(ByVal value As Boolean)
            cbCreateMovieNFO = value
        End Set
    End Property
    Property pcbGetTMDBPosters() As Boolean
        Get
            Return cbGetTMDBPosters
        End Get
        Set(ByVal value As Boolean)
            cbGetTMDBPosters = value
        End Set
    End Property
    Property pcbFilter1080i() As Boolean
        Get
            Return cbFilter1080i
        End Get
        Set(ByVal value As Boolean)
            cbFilter1080i = value
        End Set
    End Property
    Property pcbFilterYears() As Boolean
        Get
            Return cbFilterYears
        End Get
        Set(ByVal value As Boolean)
            cbFilterYears = value
        End Set
    End Property
    Property pcbFilterCustom1_enabled() As Boolean
        Get
            Return cbFilterCustom1_enabled
        End Get
        Set(ByVal value As Boolean)
            cbFilterCustom1_enabled = value
        End Set
    End Property
    Property pcbFilterCustom2_enabled() As Boolean
        Get
            Return cbFilterCustom2_enabled
        End Get
        Set(ByVal value As Boolean)
            cbFilterCustom2_enabled = value
        End Set
    End Property
    Property pcbFilterCustom3_enabled() As Boolean
        Get
            Return cbFilterCustom3_enabled
        End Get
        Set(ByVal value As Boolean)
            cbFilterCustom3_enabled = value
        End Set
    End Property
    Property pcbFilterCustom4_enabled() As Boolean
        Get
            Return cbFilterCustom4_enabled
        End Get
        Set(ByVal value As Boolean)
            cbFilterCustom4_enabled = value
        End Set
    End Property
    Property pcbFilterCustom5_enabled() As Boolean
        Get
            Return cbFilterCustom5_enabled
        End Get
        Set(ByVal value As Boolean)
            cbFilterCustom5_enabled = value
        End Set
    End Property

    Property pdisplayfanart() As Boolean
        Get
            Return cbdisplayfanart
        End Get
        Set(ByVal value As Boolean)
            cbdisplayfanart = value
        End Set
    End Property
    Property popgoogleimagesearch() As Boolean
        Get
            Return popgoogleimagesearchwithcustomimages
        End Get
        Set(ByVal value As Boolean)
            popgoogleimagesearchwithcustomimages = value
        End Set
    End Property
    Property autorenamemoviefilenames() As Boolean
        Get
            Return autorenamemoviefiles
        End Get
        Set(ByVal value As Boolean)
            autorenamemoviefiles = value
        End Set
    End Property
    Public Sub saveConfigBku(ByRef curconfig As configuration)
        Dim xmlfile As String = "config-backup"
        Dim serializer As New XmlSerializer(Me.GetType())
        Dim writer As New StreamWriter(maincollection.rconf.basefolder + xmlfile + ".xml")
        serializer.Serialize(writer, curconfig)
        writer.Close()
    End Sub
    Public Sub saveConfig(ByRef curconfig As configuration)
        Dim xmlfile As String = "config"
        Dim serializer As New XmlSerializer(Me.GetType())
        Dim writer As New StreamWriter(maincollection.rconf.basefolder + xmlfile + ".xml")
        serializer.Serialize(writer, curconfig)
        writer.Close()
    End Sub
    Public Function getconfig() As configuration
        Dim xmlfile As String = "config"
        Dim serializer As New XmlSerializer(Me.GetType)
        Dim gRconf As configuration
        Try
            Dim gROReader As New StreamReader(maincollection.rconf.basefolder + xmlfile + ".xml")
            gRconf = CType(serializer.Deserialize(gROReader), configuration)
            gROReader.Close()
        Catch ex As Exception
            gRconf = New configuration
        End Try

        Return gRconf
    End Function
    Public Function getconfig(ByVal stringnameofconfig As String) As configuration
        Dim xmlfile As String = stringnameofconfig
        Dim serializer As New XmlSerializer(Me.GetType())
        Dim gROReader As New StreamReader(maincollection.rconf.basefolder + xmlfile + ".xml")
        Dim gRConf As configuration = CType(serializer.Deserialize(gROReader), configuration)
        gROReader.Close()
        Return gRConf
    End Function
    Public Function getconfig(ByVal stringnameofconfig As String, ByVal threadsafe As Boolean) As configuration
        Dim fnPeices1() As String = Application.ExecutablePath.ToString.Split(CChar("\"))
        Dim parentdirname As String = "" '= fnPeices1(fnPeices1.Length - 1)
        Dim totnum As Integer = fnPeices1.Length - 1
        Dim curcount As Integer = 0
        While curcount < totnum
            parentdirname += fnPeices1(curcount)
            parentdirname += "\"
            curcount += 1
        End While

        Dim xmlfile As String = stringnameofconfig
        Dim serializer As New XmlSerializer(Me.GetType())
        Dim gROReader As New StreamReader(parentdirname + xmlfile + ".xml")
        Dim gRConf As configuration = CType(serializer.Deserialize(gROReader), configuration)
        gROReader.Close()
        Return gRConf
    End Function
    Property pcbGetFanart() As Boolean
        Get
            Return cbGetFanart
        End Get
        Set(ByVal value As Boolean)
            cbGetFanart = value
        End Set
    End Property
    Property pcbSaveNFO() As Boolean
        Get
            Return cbSaveNFO
        End Get
        Set(ByVal value As Boolean)
            cbSaveNFO = value
        End Set
    End Property
    Property pcbOverwriteNFO() As Boolean
        Get
            Return cbOverwriteNFO
        End Get
        Set(ByVal value As Boolean)
            cbOverwriteNFO = value
        End Set
    End Property
    Property pcbGenTBN() As Boolean
        Get
            Return cbGenTBN
        End Get
        Set(ByVal value As Boolean)
            cbGenTBN = value
        End Set
    End Property
    Property pworkoffline() As Boolean
        Get
            Return workoffline
        End Get
        Set(ByVal value As Boolean)
            workoffline = value
        End Set
    End Property

    Property pcbMaxIconPerStyle() As Integer
        Get
            Return cbMaxIconPerStyle
        End Get
        Set(ByVal value As Integer)
            cbMaxIconPerStyle = value
        End Set
    End Property
    Property pcbMaxIconsToDisplay() As Integer
        Get
            Return cbMaxIconsToDisplay
        End Get
        Set(ByVal value As Integer)
            cbMaxIconsToDisplay = value
        End Set
    End Property
    Property pcbDlFormat() As Integer
        Get
            Return cbdlformat
        End Get
        Set(ByVal value As Integer)
            cbdlformat = value
        End Set
    End Property
    Property pcbGetIMDBInfo() As Boolean
        Get
            Return cbGetIMDBInfo
        End Get
        Set(ByVal value As Boolean)
            cbGetIMDBInfo = value
        End Set
    End Property
    Property pcbDownloadPoster() As Boolean
        Get
            Return cbDownloadPoster
        End Get
        Set(ByVal value As Boolean)
            cbDownloadPoster = value
        End Set
    End Property
    Property pcbf1s0() As Boolean
        Get
            Return cbf1s0
        End Get
        Set(ByVal value As Boolean)
            cbf1s0 = value
        End Set
    End Property
    Property pcbf1s3() As Boolean
        Get
            Return cbf1s3
        End Get
        Set(ByVal value As Boolean)
            cbf1s3 = value
        End Set
    End Property
    Property pcbf1s9() As Boolean
        Get
            Return cbf1s9
        End Get
        Set(ByVal value As Boolean)
            cbf1s9 = value
        End Set
    End Property
    Property pcbf2s0() As Boolean
        Get
            Return cbf2s0
        End Get
        Set(ByVal value As Boolean)
            cbf2s0 = value
        End Set
    End Property
    Property pcbf2s2() As Boolean
        Get
            Return cbf2s2
        End Get
        Set(ByVal value As Boolean)
            cbf2s2 = value
        End Set
    End Property
    Property pcbf2s8() As Boolean
        Get
            Return cbf2s8
        End Get
        Set(ByVal value As Boolean)
            cbf2s8 = value
        End Set
    End Property
    Property pcbf2s10() As Boolean
        Get
            Return cbf2s10
        End Get
        Set(ByVal value As Boolean)
            cbf2s10 = value
        End Set
    End Property
    Property pcbf3s0() As Boolean
        Get
            Return cbf3s0
        End Get
        Set(ByVal value As Boolean)
            cbf3s0 = value
        End Set
    End Property

    Property pcbFilterCustom1() As String
        Get
            Return cbFilterCustom1
        End Get
        Set(ByVal value As String)
            cbFilterCustom1 = value
        End Set
    End Property
    Property pcbFilterCustom2() As String
        Get
            Return cbFilterCustom2
        End Get
        Set(ByVal value As String)
            cbFilterCustom2 = value
        End Set
    End Property
    Property pcbFilterCustom3() As String
        Get
            Return cbFilterCustom3
        End Get
        Set(ByVal value As String)
            cbFilterCustom3 = value
        End Set
    End Property
    Property pcbFilterCustom4() As String
        Get
            Return cbFilterCustom4
        End Get
        Set(ByVal value As String)
            cbFilterCustom4 = value
        End Set
    End Property
    Property pcbFilterCustom5() As String
        Get
            Return cbFilterCustom5
        End Get
        Set(ByVal value As String)
            cbFilterCustom5 = value
        End Set
    End Property
    Property pcbFilter1080p() As Boolean
        Get
            Return cbFilter1080p
        End Get
        Set(ByVal value As Boolean)
            cbFilter1080p = value
        End Set
    End Property
    Property pcbFilter720p() As Boolean
        Get
            Return cbFilter720p
        End Get
        Set(ByVal value As Boolean)
            cbFilter720p = value
        End Set
    End Property
    Property pcbFilterAvi() As Boolean
        Get
            Return cbFilterAvi
        End Get
        Set(ByVal value As Boolean)
            cbFilterAvi = value
        End Set
    End Property
    Property pcbFilterBluRay() As Boolean
        Get
            Return cbFilterBluRay
        End Get
        Set(ByVal value As Boolean)
            cbFilterBluRay = value
        End Set
    End Property
    Property pcbFilterDivx() As Boolean
        Get
            Return cbFilterDivx
        End Get
        Set(ByVal value As Boolean)
            cbFilterDivx = value
        End Set
    End Property
    Property pcbFilterDVD() As Boolean
        Get
            Return cbFilterDVD
        End Get
        Set(ByVal value As Boolean)
            cbFilterDVD = value
        End Set
    End Property
    Property pcbFilterH264() As Boolean
        Get
            Return cbFilterH264
        End Get
        Set(ByVal value As Boolean)
            cbFilterH264 = value
        End Set
    End Property
    Property pcbFilterHidef() As Boolean
        Get
            Return cbFilterHidef
        End Get
        Set(ByVal value As Boolean)
            cbFilterHidef = value
        End Set
    End Property
    Property pcbFilterLq() As Boolean
        Get
            Return cbFilterLq
        End Get
        Set(ByVal value As Boolean)
            cbFilterLq = value
        End Set
    End Property
    Property pcbFilterXvid() As Boolean
        Get
            Return cbFilterXvid
        End Get
        Set(ByVal value As Boolean)
            cbFilterXvid = value
        End Set
    End Property
End Class